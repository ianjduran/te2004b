
Reto_EmbebidosAvanzados_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd00  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800bfa0  0800bfa0  0001bfa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0cc  0800c0cc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0cc  0800c0cc  0001c0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0d4  0800c0d4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0d4  0800c0d4  0001c0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0d8  0800c0d8  0001c0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800c0dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005174  24000078  0800c154  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240051ec  0800c154  000251ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f2b4  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053a8  00000000  00000000  0004f35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002250  00000000  00000000  00054708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002048  00000000  00000000  00056958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000415bb  00000000  00000000  000589a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aa4f  00000000  00000000  00099f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001ae85a  00000000  00000000  000c49aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00273204  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000966c  00000000  00000000  00273254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bf88 	.word	0x0800bf88

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800bf88 	.word	0x0800bf88

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e8:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <SystemInit+0xfc>)
 80005ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ee:	4a3c      	ldr	r2, [pc, #240]	; (80006e0 <SystemInit+0xfc>)
 80005f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0xfc>)
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	4a38      	ldr	r2, [pc, #224]	; (80006e0 <SystemInit+0xfc>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000604:	4b37      	ldr	r3, [pc, #220]	; (80006e4 <SystemInit+0x100>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f003 030f 	and.w	r3, r3, #15
 800060c:	2b06      	cmp	r3, #6
 800060e:	d807      	bhi.n	8000620 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000610:	4b34      	ldr	r3, [pc, #208]	; (80006e4 <SystemInit+0x100>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f023 030f 	bic.w	r3, r3, #15
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x100>)
 800061a:	f043 0307 	orr.w	r3, r3, #7
 800061e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000620:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <SystemInit+0x104>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a30      	ldr	r2, [pc, #192]	; (80006e8 <SystemInit+0x104>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x104>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <SystemInit+0x104>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	492c      	ldr	r1, [pc, #176]	; (80006e8 <SystemInit+0x104>)
 8000638:	4b2c      	ldr	r3, [pc, #176]	; (80006ec <SystemInit+0x108>)
 800063a:	4013      	ands	r3, r2
 800063c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800063e:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <SystemInit+0x100>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	2b00      	cmp	r3, #0
 8000648:	d007      	beq.n	800065a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <SystemInit+0x100>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f023 030f 	bic.w	r3, r3, #15
 8000652:	4a24      	ldr	r2, [pc, #144]	; (80006e4 <SystemInit+0x100>)
 8000654:	f043 0307 	orr.w	r3, r3, #7
 8000658:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemInit+0x104>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <SystemInit+0x104>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <SystemInit+0x104>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <SystemInit+0x104>)
 800066e:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <SystemInit+0x10c>)
 8000670:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <SystemInit+0x104>)
 8000674:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <SystemInit+0x110>)
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <SystemInit+0x104>)
 800067a:	4a1f      	ldr	r2, [pc, #124]	; (80006f8 <SystemInit+0x114>)
 800067c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <SystemInit+0x104>)
 8000680:	2200      	movs	r2, #0
 8000682:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <SystemInit+0x104>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <SystemInit+0x114>)
 8000688:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <SystemInit+0x104>)
 800068c:	2200      	movs	r2, #0
 800068e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <SystemInit+0x104>)
 8000692:	4a19      	ldr	r2, [pc, #100]	; (80006f8 <SystemInit+0x114>)
 8000694:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <SystemInit+0x104>)
 8000698:	2200      	movs	r2, #0
 800069a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <SystemInit+0x104>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <SystemInit+0x104>)
 80006a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <SystemInit+0x104>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x118>)
 80006b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <SystemInit+0x118>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x11c>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x120>)
 80006c0:	4013      	ands	r3, r2
 80006c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006c6:	d202      	bcs.n	80006ce <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <SystemInit+0x124>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <SystemInit+0x128>)
 80006d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006d4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	52002000 	.word	0x52002000
 80006e8:	58024400 	.word	0x58024400
 80006ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f0:	02020200 	.word	0x02020200
 80006f4:	01ff0000 	.word	0x01ff0000
 80006f8:	01010280 	.word	0x01010280
 80006fc:	580000c0 	.word	0x580000c0
 8000700:	5c001000 	.word	0x5c001000
 8000704:	ffff0000 	.word	0xffff0000
 8000708:	51008108 	.word	0x51008108
 800070c:	52004000 	.word	0x52004000

08000710 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
 8000724:	615a      	str	r2, [r3, #20]
 8000726:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000728:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <MX_ADC2_Init+0xc0>)
 800072a:	4a2a      	ldr	r2, [pc, #168]	; (80007d4 <MX_ADC2_Init+0xc4>)
 800072c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <MX_ADC2_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000734:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800073a:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <MX_ADC2_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <MX_ADC2_Init+0xc0>)
 8000742:	2204      	movs	r2, #4
 8000744:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <MX_ADC2_Init+0xc0>)
 8000748:	2200      	movs	r2, #0
 800074a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800074c:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <MX_ADC2_Init+0xc0>)
 800074e:	2200      	movs	r2, #0
 8000750:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_ADC2_Init+0xc0>)
 8000754:	2201      	movs	r2, #1
 8000756:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000758:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_ADC2_Init+0xc0>)
 800075a:	2200      	movs	r2, #0
 800075c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_ADC2_Init+0xc0>)
 8000760:	2200      	movs	r2, #0
 8000762:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000764:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_ADC2_Init+0xc0>)
 8000766:	2200      	movs	r2, #0
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MX_ADC2_Init+0xc0>)
 800076c:	2200      	movs	r2, #0
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_ADC2_Init+0xc0>)
 8000772:	2200      	movs	r2, #0
 8000774:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000776:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_ADC2_Init+0xc0>)
 8000778:	2200      	movs	r2, #0
 800077a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_ADC2_Init+0xc0>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000784:	4812      	ldr	r0, [pc, #72]	; (80007d0 <MX_ADC2_Init+0xc0>)
 8000786:	f000 fffb 	bl	8001780 <HAL_ADC_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000790:	f000 fae2 	bl	8000d58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_ADC2_Init+0xc8>)
 8000796:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000798:	2306      	movs	r3, #6
 800079a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007a6:	2304      	movs	r3, #4
 80007a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <MX_ADC2_Init+0xc0>)
 80007b8:	f001 f984 	bl	8001ac4 <HAL_ADC_ConfigChannel>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007c2:	f000 fac9 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	3720      	adds	r7, #32
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	24000094 	.word	0x24000094
 80007d4:	40022100 	.word	0x40022100
 80007d8:	0c900008 	.word	0x0c900008

080007dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b0b8      	sub	sp, #224	; 0xe0
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	22bc      	movs	r2, #188	; 0xbc
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f00b faf9 	bl	800bdf4 <memset>
  if(adcHandle->Instance==ADC2)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a2a      	ldr	r2, [pc, #168]	; (80008b0 <HAL_ADC_MspInit+0xd4>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d14d      	bne.n	80008a8 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800080c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000810:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000812:	2301      	movs	r3, #1
 8000814:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000816:	2312      	movs	r3, #18
 8000818:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 800081a:	2304      	movs	r3, #4
 800081c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800081e:	2302      	movs	r3, #2
 8000820:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000826:	23c0      	movs	r3, #192	; 0xc0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800082a:	2320      	movs	r3, #32
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144.0;
 800082e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000832:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000834:	2300      	movs	r3, #0
 8000836:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4618      	mov	r0, r3
 8000840:	f003 fd6a 	bl	8004318 <HAL_RCCEx_PeriphCLKConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 800084a:	f000 fa85 	bl	8000d58 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <HAL_ADC_MspInit+0xd8>)
 8000850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000854:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <HAL_ADC_MspInit+0xd8>)
 8000856:	f043 0320 	orr.w	r3, r3, #32
 800085a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <HAL_ADC_MspInit+0xd8>)
 8000860:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000864:	f003 0320 	and.w	r3, r3, #32
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_ADC_MspInit+0xd8>)
 800086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000872:	4a10      	ldr	r2, [pc, #64]	; (80008b4 <HAL_ADC_MspInit+0xd8>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <HAL_ADC_MspInit+0xd8>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800088a:	2340      	movs	r3, #64	; 0x40
 800088c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000890:	2303      	movs	r3, #3
 8000892:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008a0:	4619      	mov	r1, r3
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <HAL_ADC_MspInit+0xdc>)
 80008a4:	f002 f9ac 	bl	8002c00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008a8:	bf00      	nop
 80008aa:	37e0      	adds	r7, #224	; 0xe0
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40022100 	.word	0x40022100
 80008b4:	58024400 	.word	0x58024400
 80008b8:	58020000 	.word	0x58020000

080008bc <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80008c0:	4b2e      	ldr	r3, [pc, #184]	; (800097c <MX_FDCAN1_Init+0xc0>)
 80008c2:	4a2f      	ldr	r2, [pc, #188]	; (8000980 <MX_FDCAN1_Init+0xc4>)
 80008c4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008c6:	4b2d      	ldr	r3, [pc, #180]	; (800097c <MX_FDCAN1_Init+0xc0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80008cc:	4b2b      	ldr	r3, [pc, #172]	; (800097c <MX_FDCAN1_Init+0xc0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <MX_FDCAN1_Init+0xc0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80008d8:	4b28      	ldr	r3, [pc, #160]	; (800097c <MX_FDCAN1_Init+0xc0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80008de:	4b27      	ldr	r3, [pc, #156]	; (800097c <MX_FDCAN1_Init+0xc0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_FDCAN1_Init+0xc0>)
 80008e6:	2202      	movs	r2, #2
 80008e8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <MX_FDCAN1_Init+0xc0>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x3f;
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_FDCAN1_Init+0xc0>)
 80008f2:	223f      	movs	r2, #63	; 0x3f
 80008f4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <MX_FDCAN1_Init+0xc0>)
 80008f8:	2210      	movs	r2, #16
 80008fa:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_FDCAN1_Init+0xc0>)
 80008fe:	2201      	movs	r2, #1
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_FDCAN1_Init+0xc0>)
 8000904:	2201      	movs	r2, #1
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_FDCAN1_Init+0xc0>)
 800090a:	2201      	movs	r2, #1
 800090c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800090e:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_FDCAN1_Init+0xc0>)
 8000910:	2201      	movs	r2, #1
 8000912:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_FDCAN1_Init+0xc0>)
 8000916:	2200      	movs	r2, #0
 8000918:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_FDCAN1_Init+0xc0>)
 800091c:	2200      	movs	r2, #0
 800091e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_FDCAN1_Init+0xc0>)
 8000922:	2200      	movs	r2, #0
 8000924:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_FDCAN1_Init+0xc0>)
 8000928:	2200      	movs	r2, #0
 800092a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_FDCAN1_Init+0xc0>)
 800092e:	2204      	movs	r2, #4
 8000930:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_FDCAN1_Init+0xc0>)
 8000934:	2200      	movs	r2, #0
 8000936:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_FDCAN1_Init+0xc0>)
 800093a:	2204      	movs	r2, #4
 800093c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_FDCAN1_Init+0xc0>)
 8000940:	2200      	movs	r2, #0
 8000942:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000944:	4b0d      	ldr	r3, [pc, #52]	; (800097c <MX_FDCAN1_Init+0xc0>)
 8000946:	2204      	movs	r2, #4
 8000948:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_FDCAN1_Init+0xc0>)
 800094c:	2200      	movs	r2, #0
 800094e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <MX_FDCAN1_Init+0xc0>)
 8000952:	2200      	movs	r2, #0
 8000954:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_FDCAN1_Init+0xc0>)
 8000958:	2200      	movs	r2, #0
 800095a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <MX_FDCAN1_Init+0xc0>)
 800095e:	2200      	movs	r2, #0
 8000960:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_FDCAN1_Init+0xc0>)
 8000964:	2204      	movs	r2, #4
 8000966:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_FDCAN1_Init+0xc0>)
 800096a:	f001 fde5 	bl	8002538 <HAL_FDCAN_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000974:	f000 f9f0 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	240000f8 	.word	0x240000f8
 8000980:	4000a000 	.word	0x4000a000

08000984 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b0b8      	sub	sp, #224	; 0xe0
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	22bc      	movs	r2, #188	; 0xbc
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f00b fa25 	bl	800bdf4 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a25      	ldr	r2, [pc, #148]	; (8000a44 <HAL_FDCAN_MspInit+0xc0>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d142      	bne.n	8000a3a <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80009b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80009ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009be:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4618      	mov	r0, r3
 80009c6:	f003 fca7 	bl	8004318 <HAL_RCCEx_PeriphCLKConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80009d0:	f000 f9c2 	bl	8000d58 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <HAL_FDCAN_MspInit+0xc4>)
 80009d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80009da:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <HAL_FDCAN_MspInit+0xc4>)
 80009dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <HAL_FDCAN_MspInit+0xc4>)
 80009e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80009ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_FDCAN_MspInit+0xc4>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f8:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <HAL_FDCAN_MspInit+0xc4>)
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_FDCAN_MspInit+0xc4>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	f003 0308 	and.w	r3, r3, #8
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a10:	2303      	movs	r3, #3
 8000a12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a28:	2309      	movs	r3, #9
 8000a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <HAL_FDCAN_MspInit+0xc8>)
 8000a36:	f002 f8e3 	bl	8002c00 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	37e0      	adds	r7, #224	; 0xe0
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	4000a000 	.word	0x4000a000
 8000a48:	58024400 	.word	0x58024400
 8000a4c:	58020c00 	.word	0x58020c00

08000a50 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <MX_FREERTOS_Init+0x18>)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_FREERTOS_Init+0x1c>)
 8000a5a:	f008 fc65 	bl	8009328 <osThreadNew>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	4a03      	ldr	r2, [pc, #12]	; (8000a70 <MX_FREERTOS_Init+0x20>)
 8000a62:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	0800c020 	.word	0x0800c020
 8000a6c:	08000a75 	.word	0x08000a75
 8000a70:	24000198 	.word	0x24000198

08000a74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f008 fce5 	bl	800944c <osDelay>
 8000a82:	e7fb      	b.n	8000a7c <StartDefaultTask+0x8>

08000a84 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_GPIO_Init+0x8c>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <MX_GPIO_Init+0x8c>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_GPIO_Init+0x8c>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_GPIO_Init+0x8c>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aae:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <MX_GPIO_Init+0x8c>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_GPIO_Init+0x8c>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_GPIO_Init+0x8c>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <MX_GPIO_Init+0x8c>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_GPIO_Init+0x8c>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_GPIO_Init+0x8c>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <MX_GPIO_Init+0x8c>)
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_GPIO_Init+0x8c>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	58024400 	.word	0x58024400

08000b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000b1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b1e:	60fb      	str	r3, [r7, #12]
  while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000b20:	bf00      	nop
 8000b22:	4b3d      	ldr	r3, [pc, #244]	; (8000c18 <main+0x104>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d004      	beq.n	8000b38 <main+0x24>
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	1e5a      	subs	r2, r3, #1
 8000b32:	60fa      	str	r2, [r7, #12]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	dcf4      	bgt.n	8000b22 <main+0xe>
    ;
  if (timeout < 0) {
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	da01      	bge.n	8000b42 <main+0x2e>
    Error_Handler();
 8000b3e:	f000 f90b 	bl	8000d58 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b42:	f000 fc05 	bl	8001350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b46:	f000 f86b 	bl	8000c20 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
  /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by
  means of HSEM notification */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8000b4a:	4b33      	ldr	r3, [pc, #204]	; (8000c18 <main+0x104>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b50:	4a31      	ldr	r2, [pc, #196]	; (8000c18 <main+0x104>)
 8000b52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5a:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <main+0x104>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]
  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f002 f9f9 	bl	8002f60 <HAL_HSEM_FastTake>
  /*Release HSEM in order to notify the CPU2(CM4)*/
  HAL_HSEM_Release(HSEM_ID_0, 0);
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2000      	movs	r0, #0
 8000b72:	f002 fa0f 	bl	8002f94 <HAL_HSEM_Release>
  /* wait until CPU2 wakes up from stop mode */
  timeout = 0xFFFF;
 8000b76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b7a:	60fb      	str	r3, [r7, #12]
  while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000b7c:	bf00      	nop
 8000b7e:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <main+0x104>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d104      	bne.n	8000b94 <main+0x80>
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	1e5a      	subs	r2, r3, #1
 8000b8e:	60fa      	str	r2, [r7, #12]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	dcf4      	bgt.n	8000b7e <main+0x6a>
    ;
  if (timeout < 0) {
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	da01      	bge.n	8000b9e <main+0x8a>
    Error_Handler();
 8000b9a:	f000 f8dd 	bl	8000d58 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  int32_t CH1_DC = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
  MX_GPIO_Init();
 8000ba2:	f7ff ff6f 	bl	8000a84 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ba6:	f000 fa4b 	bl	8001040 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000baa:	f000 fafb 	bl	80011a4 <MX_USB_OTG_FS_PCD_Init>
  MX_FDCAN1_Init();
 8000bae:	f7ff fe85 	bl	80008bc <MX_FDCAN1_Init>
  MX_ADC2_Init();
 8000bb2:	f7ff fdad 	bl	8000710 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000bb6:	f000 f975 	bl	8000ea4 <MX_TIM2_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4817      	ldr	r0, [pc, #92]	; (8000c1c <main+0x108>)
 8000bbe:	f005 fe69 	bl	8006894 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000bc2:	f008 fb67 	bl	8009294 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000bc6:	f7ff ff43 	bl	8000a50 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000bca:	f008 fb87 	bl	80092dc <osKernelStart>
//		  TIM2->CCR1 = CH1_DC;
//		  CH1_DC -= 70;
//		  HAL_Delay(1);
//	  }
    /* USER CODE BEGIN 3 */
	  for (x = 0; x < 65535; ++x) {
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	e009      	b.n	8000be8 <main+0xd4>
	 		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, x);
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <main+0x108>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	68ba      	ldr	r2, [r7, #8]
 8000bda:	635a      	str	r2, [r3, #52]	; 0x34
	 		  HAL_Delay(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f000 fc13 	bl	8001408 <HAL_Delay>
	  for (x = 0; x < 65535; ++x) {
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	3301      	adds	r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	ddf0      	ble.n	8000bd4 <main+0xc0>
	  }
	  for (x = 65535; x > 0; --x) {
 8000bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	e009      	b.n	8000c0e <main+0xfa>
		  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, x);
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <main+0x108>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	635a      	str	r2, [r3, #52]	; 0x34
		  	  HAL_Delay(1);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f000 fc00 	bl	8001408 <HAL_Delay>
	  for (x = 65535; x > 0; --x) {
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dcf2      	bgt.n	8000bfa <main+0xe6>
	  for (x = 0; x < 65535; ++x) {
 8000c14:	e7db      	b.n	8000bce <main+0xba>
 8000c16:	bf00      	nop
 8000c18:	58024400 	.word	0x58024400
 8000c1c:	240001e8 	.word	0x240001e8

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b09c      	sub	sp, #112	; 0x70
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	224c      	movs	r2, #76	; 0x4c
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f00b f8e0 	bl	800bdf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2220      	movs	r2, #32
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f00b f8da 	bl	800bdf4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c40:	2004      	movs	r0, #4
 8000c42:	f002 fb03 	bl	800324c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b37      	ldr	r3, [pc, #220]	; (8000d28 <SystemClock_Config+0x108>)
 8000c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4e:	4a36      	ldr	r2, [pc, #216]	; (8000d28 <SystemClock_Config+0x108>)
 8000c50:	f023 0301 	bic.w	r3, r3, #1
 8000c54:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c56:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <SystemClock_Config+0x108>)
 8000c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <SystemClock_Config+0x10c>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c68:	4a30      	ldr	r2, [pc, #192]	; (8000d2c <SystemClock_Config+0x10c>)
 8000c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <SystemClock_Config+0x10c>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c7c:	bf00      	nop
 8000c7e:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <SystemClock_Config+0x10c>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c8a:	d1f8      	bne.n	8000c7e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000c8c:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <SystemClock_Config+0x110>)
 8000c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c90:	f023 0303 	bic.w	r3, r3, #3
 8000c94:	4a26      	ldr	r2, [pc, #152]	; (8000d30 <SystemClock_Config+0x110>)
 8000c96:	f043 0302 	orr.w	r3, r3, #2
 8000c9a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000c9c:	2321      	movs	r3, #33	; 0x21
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000caa:	2302      	movs	r3, #2
 8000cac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000cb6:	2324      	movs	r3, #36	; 0x24
 8000cb8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000cbe:	2306      	movs	r3, #6
 8000cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cc6:	230c      	movs	r3, #12
 8000cc8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f002 fb22 	bl	8003320 <HAL_RCC_OscConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ce2:	f000 f839 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce6:	233f      	movs	r3, #63	; 0x3f
 8000ce8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cea:	2303      	movs	r3, #3
 8000cec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000cee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cf2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cf8:	2340      	movs	r3, #64	; 0x40
 8000cfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cfc:	2340      	movs	r3, #64	; 0x40
 8000cfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d04:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d06:	2340      	movs	r3, #64	; 0x40
 8000d08:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f002 ff34 	bl	8003b7c <HAL_RCC_ClockConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8000d1a:	f000 f81d 	bl	8000d58 <Error_Handler>
  }
}
 8000d1e:	bf00      	nop
 8000d20:	3770      	adds	r7, #112	; 0x70
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	58000400 	.word	0x58000400
 8000d2c:	58024800 	.word	0x58024800
 8000d30:	58024400 	.word	0x58024400

08000d34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d101      	bne.n	8000d4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d46:	f000 fb3f 	bl	80013c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40014400 	.word	0x40014400

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_MspInit+0x38>)
 8000d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d70:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <HAL_MspInit+0x38>)
 8000d72:	f043 0302 	orr.w	r3, r3, #2
 8000d76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_MspInit+0x38>)
 8000d7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f06f 0001 	mvn.w	r0, #1
 8000d90:	f001 fbaa 	bl	80024e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	58024400 	.word	0x58024400

08000da0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08e      	sub	sp, #56	; 0x38
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM16 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b0f      	cmp	r3, #15
 8000dac:	d844      	bhi.n	8000e38 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority ,0U);
 8000dae:	2200      	movs	r2, #0
 8000db0:	6879      	ldr	r1, [r7, #4]
 8000db2:	2075      	movs	r0, #117	; 0x75
 8000db4:	f001 fb98 	bl	80024e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000db8:	2075      	movs	r0, #117	; 0x75
 8000dba:	f001 fbaf 	bl	800251c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000dbe:	4a24      	ldr	r2, [pc, #144]	; (8000e50 <HAL_InitTick+0xb0>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8000dc4:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <HAL_InitTick+0xb4>)
 8000dc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000dca:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <HAL_InitTick+0xb4>)
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <HAL_InitTick+0xb4>)
 8000dd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000de2:	f107 020c 	add.w	r2, r7, #12
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 fa51 	bl	8004294 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000df2:	f003 fa39 	bl	8004268 <HAL_RCC_GetPCLK2Freq>
 8000df6:	4603      	mov	r3, r0
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dfe:	4a16      	ldr	r2, [pc, #88]	; (8000e58 <HAL_InitTick+0xb8>)
 8000e00:	fba2 2303 	umull	r2, r3, r2, r3
 8000e04:	0c9b      	lsrs	r3, r3, #18
 8000e06:	3b01      	subs	r3, #1
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_InitTick+0xbc>)
 8000e0c:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <HAL_InitTick+0xc0>)
 8000e0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0xbc>)
 8000e12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e16:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000e18:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <HAL_InitTick+0xbc>)
 8000e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e1c:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <HAL_InitTick+0xbc>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <HAL_InitTick+0xbc>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <HAL_InitTick+0xbc>)
 8000e2c:	f005 fc00 	bl	8006630 <HAL_TIM_Base_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d107      	bne.n	8000e46 <HAL_InitTick+0xa6>
 8000e36:	e001      	b.n	8000e3c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e005      	b.n	8000e48 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <HAL_InitTick+0xbc>)
 8000e3e:	f005 fc4f 	bl	80066e0 <HAL_TIM_Base_Start_IT>
 8000e42:	4603      	mov	r3, r0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3738      	adds	r7, #56	; 0x38
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	24000008 	.word	0x24000008
 8000e54:	58024400 	.word	0x58024400
 8000e58:	431bde83 	.word	0x431bde83
 8000e5c:	2400019c 	.word	0x2400019c
 8000e60:	40014400 	.word	0x40014400

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <NMI_Handler+0x4>

08000e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <MemManage_Handler+0x4>

08000e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <TIM16_IRQHandler+0x10>)
 8000e96:	f005 fe0b 	bl	8006ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2400019c 	.word	0x2400019c

08000ea4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08e      	sub	sp, #56	; 0x38
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]
 8000ed2:	615a      	str	r2, [r3, #20]
 8000ed4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <MX_TIM2_Init+0xe8>)
 8000ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000edc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ede:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <MX_TIM2_Init+0xe8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <MX_TIM2_Init+0xe8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000eea:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <MX_TIM2_Init+0xe8>)
 8000eec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef2:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <MX_TIM2_Init+0xe8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ef8:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <MX_TIM2_Init+0xe8>)
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000efe:	4823      	ldr	r0, [pc, #140]	; (8000f8c <MX_TIM2_Init+0xe8>)
 8000f00:	f005 fb96 	bl	8006630 <HAL_TIM_Base_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f0a:	f7ff ff25 	bl	8000d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481c      	ldr	r0, [pc, #112]	; (8000f8c <MX_TIM2_Init+0xe8>)
 8000f1c:	f005 fffc 	bl	8006f18 <HAL_TIM_ConfigClockSource>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f26:	f7ff ff17 	bl	8000d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f2a:	4818      	ldr	r0, [pc, #96]	; (8000f8c <MX_TIM2_Init+0xe8>)
 8000f2c:	f005 fc50 	bl	80067d0 <HAL_TIM_PWM_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f36:	f7ff ff0f 	bl	8000d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	4810      	ldr	r0, [pc, #64]	; (8000f8c <MX_TIM2_Init+0xe8>)
 8000f4a:	f006 fd39 	bl	80079c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f54:	f7ff ff00 	bl	8000d58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f58:	2360      	movs	r3, #96	; 0x60
 8000f5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4807      	ldr	r0, [pc, #28]	; (8000f8c <MX_TIM2_Init+0xe8>)
 8000f70:	f005 febe 	bl	8006cf0 <HAL_TIM_PWM_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f7a:	f7ff feed 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f7e:	4803      	ldr	r0, [pc, #12]	; (8000f8c <MX_TIM2_Init+0xe8>)
 8000f80:	f000 f826 	bl	8000fd0 <HAL_TIM_MspPostInit>

}
 8000f84:	bf00      	nop
 8000f86:	3738      	adds	r7, #56	; 0x38
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	240001e8 	.word	0x240001e8

08000f90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fa0:	d10e      	bne.n	8000fc0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_TIM_Base_MspInit+0x3c>)
 8000fa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fa8:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <HAL_TIM_Base_MspInit+0x3c>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_TIM_Base_MspInit+0x3c>)
 8000fb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	58024400 	.word	0x58024400

08000fd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff0:	d11e      	bne.n	8001030 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_TIM_MspPostInit+0x68>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff8:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <HAL_TIM_MspPostInit+0x68>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_TIM_MspPostInit+0x68>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001010:	2301      	movs	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001020:	2301      	movs	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4619      	mov	r1, r3
 800102a:	4804      	ldr	r0, [pc, #16]	; (800103c <HAL_TIM_MspPostInit+0x6c>)
 800102c:	f001 fde8 	bl	8002c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	58024400 	.word	0x58024400
 800103c:	58020000 	.word	0x58020000

08001040 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <MX_USART3_UART_Init+0x90>)
 8001046:	4a23      	ldr	r2, [pc, #140]	; (80010d4 <MX_USART3_UART_Init+0x94>)
 8001048:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_USART3_UART_Init+0x90>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_USART3_UART_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_USART3_UART_Init+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_USART3_UART_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_USART3_UART_Init+0x90>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_USART3_UART_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_USART3_UART_Init+0x90>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_USART3_UART_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_USART3_UART_Init+0x90>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_USART3_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001088:	4811      	ldr	r0, [pc, #68]	; (80010d0 <MX_USART3_UART_Init+0x90>)
 800108a:	f006 fd45 	bl	8007b18 <HAL_UART_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001094:	f7ff fe60 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001098:	2100      	movs	r1, #0
 800109a:	480d      	ldr	r0, [pc, #52]	; (80010d0 <MX_USART3_UART_Init+0x90>)
 800109c:	f007 fce2 	bl	8008a64 <HAL_UARTEx_SetTxFifoThreshold>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010a6:	f7ff fe57 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010aa:	2100      	movs	r1, #0
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <MX_USART3_UART_Init+0x90>)
 80010ae:	f007 fd17 	bl	8008ae0 <HAL_UARTEx_SetRxFifoThreshold>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010b8:	f7ff fe4e 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_USART3_UART_Init+0x90>)
 80010be:	f007 fc98 	bl	80089f2 <HAL_UARTEx_DisableFifoMode>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010c8:	f7ff fe46 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	24000234 	.word	0x24000234
 80010d4:	40004800 	.word	0x40004800

080010d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0b8      	sub	sp, #224	; 0xe0
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	22bc      	movs	r2, #188	; 0xbc
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f00a fe7b 	bl	800bdf4 <memset>
  if(uartHandle->Instance==USART3)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a25      	ldr	r2, [pc, #148]	; (8001198 <HAL_UART_MspInit+0xc0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d142      	bne.n	800118e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001108:	2302      	movs	r3, #2
 800110a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	4618      	mov	r0, r3
 8001118:	f003 f8fe 	bl	8004318 <HAL_RCCEx_PeriphCLKConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001122:	f7ff fe19 	bl	8000d58 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <HAL_UART_MspInit+0xc4>)
 8001128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800112c:	4a1b      	ldr	r2, [pc, #108]	; (800119c <HAL_UART_MspInit+0xc4>)
 800112e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001132:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_UART_MspInit+0xc4>)
 8001138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800113c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_UART_MspInit+0xc4>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114a:	4a14      	ldr	r2, [pc, #80]	; (800119c <HAL_UART_MspInit+0xc4>)
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_UART_MspInit+0xc4>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001162:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001166:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800117c:	2307      	movs	r3, #7
 800117e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001182:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_UART_MspInit+0xc8>)
 800118a:	f001 fd39 	bl	8002c00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800118e:	bf00      	nop
 8001190:	37e0      	adds	r7, #224	; 0xe0
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40004800 	.word	0x40004800
 800119c:	58024400 	.word	0x58024400
 80011a0:	58020c00 	.word	0x58020c00

080011a4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011aa:	4a16      	ldr	r2, [pc, #88]	; (8001204 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80011ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b0:	2209      	movs	r2, #9
 80011b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b6:	2202      	movs	r2, #2
 80011b8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011da:	2201      	movs	r2, #1
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ec:	f001 fee6 	bl	8002fbc <HAL_PCD_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80011f6:	f7ff fdaf 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	240002c4 	.word	0x240002c4
 8001204:	40080000 	.word	0x40080000

08001208 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0b8      	sub	sp, #224	; 0xe0
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	22bc      	movs	r2, #188	; 0xbc
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f00a fde3 	bl	800bdf4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a2f      	ldr	r2, [pc, #188]	; (80012f0 <HAL_PCD_MspInit+0xe8>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d156      	bne.n	80012e6 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001238:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800123c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800123e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001242:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	4618      	mov	r0, r3
 800124c:	f003 f864 	bl	8004318 <HAL_RCCEx_PeriphCLKConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001256:	f7ff fd7f 	bl	8000d58 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800125a:	f002 f851 	bl	8003300 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001264:	4a23      	ldr	r2, [pc, #140]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800127c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001280:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001296:	230a      	movs	r3, #10
 8001298:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012a0:	4619      	mov	r1, r3
 80012a2:	4815      	ldr	r0, [pc, #84]	; (80012f8 <HAL_PCD_MspInit+0xf0>)
 80012a4:	f001 fcac 	bl	8002c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012c0:	4619      	mov	r1, r3
 80012c2:	480d      	ldr	r0, [pc, #52]	; (80012f8 <HAL_PCD_MspInit+0xf0>)
 80012c4:	f001 fc9c 	bl	8002c00 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 80012ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012ce:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 80012d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_PCD_MspInit+0xec>)
 80012da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80012e6:	bf00      	nop
 80012e8:	37e0      	adds	r7, #224	; 0xe0
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40080000 	.word	0x40080000
 80012f4:	58024400 	.word	0x58024400
 80012f8:	58020000 	.word	0x58020000

080012fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001334 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001300:	f7ff f970 	bl	80005e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001306:	490d      	ldr	r1, [pc, #52]	; (800133c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800131c:	4c0a      	ldr	r4, [pc, #40]	; (8001348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132a:	f00a fd2f 	bl	800bd8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132e:	f7ff fbf1 	bl	8000b14 <main>
  bx  lr
 8001332:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001334:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001338:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800133c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001340:	0800c0dc 	.word	0x0800c0dc
  ldr r2, =_sbss
 8001344:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001348:	240051ec 	.word	0x240051ec

0800134c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC3_IRQHandler>
	...

08001350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001356:	2003      	movs	r0, #3
 8001358:	f001 f8bb 	bl	80024d2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800135c:	f002 fdc4 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8001360:	4602      	mov	r2, r0
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_Init+0x68>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	0a1b      	lsrs	r3, r3, #8
 8001368:	f003 030f 	and.w	r3, r3, #15
 800136c:	4913      	ldr	r1, [pc, #76]	; (80013bc <HAL_Init+0x6c>)
 800136e:	5ccb      	ldrb	r3, [r1, r3]
 8001370:	f003 031f 	and.w	r3, r3, #31
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
 8001378:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_Init+0x68>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_Init+0x6c>)
 8001384:	5cd3      	ldrb	r3, [r2, r3]
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
 8001390:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <HAL_Init+0x70>)
 8001392:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001394:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <HAL_Init+0x74>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800139a:	200f      	movs	r0, #15
 800139c:	f7ff fd00 	bl	8000da0 <HAL_InitTick>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e002      	b.n	80013b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013aa:	f7ff fcdb 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	58024400 	.word	0x58024400
 80013bc:	0800c010 	.word	0x0800c010
 80013c0:	24000004 	.word	0x24000004
 80013c4:	24000000 	.word	0x24000000

080013c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x20>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_IncTick+0x24>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	2400000c 	.word	0x2400000c
 80013ec:	240007d0 	.word	0x240007d0

080013f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	240007d0 	.word	0x240007d0

08001408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff ffee 	bl	80013f0 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001420:	d005      	beq.n	800142e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_Delay+0x44>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800142e:	bf00      	nop
 8001430:	f7ff ffde 	bl	80013f0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8f7      	bhi.n	8001430 <HAL_Delay+0x28>
  {
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2400000c 	.word	0x2400000c

08001450 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <HAL_GetREVID+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	0c1b      	lsrs	r3, r3, #16
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	5c001000 	.word	0x5c001000

08001468 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	609a      	str	r2, [r3, #8]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	609a      	str	r2, [r3, #8]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3360      	adds	r3, #96	; 0x60
 80014e2:	461a      	mov	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	430b      	orrs	r3, r1
 80014fe:	431a      	orrs	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001504:	bf00      	nop
 8001506:	371c      	adds	r7, #28
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	f003 031f 	and.w	r3, r3, #31
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	431a      	orrs	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	611a      	str	r2, [r3, #16]
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001542:	b480      	push	{r7}
 8001544:	b087      	sub	sp, #28
 8001546:	af00      	add	r7, sp, #0
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3360      	adds	r3, #96	; 0x60
 8001552:	461a      	mov	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	431a      	orrs	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	601a      	str	r2, [r3, #0]
  }
}
 800156c:	bf00      	nop
 800156e:	371c      	adds	r7, #28
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3330      	adds	r3, #48	; 0x30
 8001588:	461a      	mov	r2, r3
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	4413      	add	r3, r2
 8001596:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f003 031f 	and.w	r3, r3, #31
 80015a2:	211f      	movs	r1, #31
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	401a      	ands	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	0e9b      	lsrs	r3, r3, #26
 80015b0:	f003 011f 	and.w	r1, r3, #31
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	431a      	orrs	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015c4:	bf00      	nop
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3314      	adds	r3, #20
 80015e0:	461a      	mov	r2, r3
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	0e5b      	lsrs	r3, r3, #25
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	4413      	add	r3, r2
 80015ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	0d1b      	lsrs	r3, r3, #20
 80015f8:	f003 031f 	and.w	r3, r3, #31
 80015fc:	2107      	movs	r1, #7
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	401a      	ands	r2, r3
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	0d1b      	lsrs	r3, r3, #20
 800160a:	f003 031f 	and.w	r3, r3, #31
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	431a      	orrs	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800161a:	bf00      	nop
 800161c:	371c      	adds	r7, #28
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001640:	43db      	mvns	r3, r3
 8001642:	401a      	ands	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0318 	and.w	r3, r3, #24
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <LL_ADC_SetChannelSingleDiff+0x44>)
 800164c:	40d9      	lsrs	r1, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	400b      	ands	r3, r1
 8001652:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001656:	431a      	orrs	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	000fffff 	.word	0x000fffff

08001670 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <LL_ADC_DisableDeepPowerDown+0x20>)
 800167e:	4013      	ands	r3, r2
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6093      	str	r3, [r2, #8]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	5fffffc0 	.word	0x5fffffc0

08001694 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016a8:	d101      	bne.n	80016ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <LL_ADC_EnableInternalRegulator+0x24>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	6fffffc0 	.word	0x6fffffc0

080016e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016f8:	d101      	bne.n	80016fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b01      	cmp	r3, #1
 800171e:	d101      	bne.n	8001724 <LL_ADC_IsEnabled+0x18>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <LL_ADC_IsEnabled+0x1a>
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	2b04      	cmp	r3, #4
 8001744:	d101      	bne.n	800174a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	2b08      	cmp	r3, #8
 800176a:	d101      	bne.n	8001770 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e18f      	b.n	8001aba <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d109      	bne.n	80017bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff f817 	bl	80007dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff67 	bl	8001694 <LL_ADC_IsDeepPowerDownEnabled>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff4d 	bl	8001670 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff82 	bl	80016e4 <LL_ADC_IsInternalRegulatorEnabled>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d114      	bne.n	8001810 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff66 	bl	80016bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017f0:	4b87      	ldr	r3, [pc, #540]	; (8001a10 <HAL_ADC_Init+0x290>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	099b      	lsrs	r3, r3, #6
 80017f6:	4a87      	ldr	r2, [pc, #540]	; (8001a14 <HAL_ADC_Init+0x294>)
 80017f8:	fba2 2303 	umull	r2, r3, r2, r3
 80017fc:	099b      	lsrs	r3, r3, #6
 80017fe:	3301      	adds	r3, #1
 8001800:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001802:	e002      	b.n	800180a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	3b01      	subs	r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f9      	bne.n	8001804 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff65 	bl	80016e4 <LL_ADC_IsInternalRegulatorEnabled>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10d      	bne.n	800183c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001824:	f043 0210 	orr.w	r2, r3, #16
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001830:	f043 0201 	orr.w	r2, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff76 	bl	8001732 <LL_ADC_REG_IsConversionOngoing>
 8001846:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	2b00      	cmp	r3, #0
 8001852:	f040 8129 	bne.w	8001aa8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2b00      	cmp	r3, #0
 800185a:	f040 8125 	bne.w	8001aa8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001862:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001866:	f043 0202 	orr.w	r2, r3, #2
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ff4a 	bl	800170c <LL_ADC_IsEnabled>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d136      	bne.n	80018ec <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a65      	ldr	r2, [pc, #404]	; (8001a18 <HAL_ADC_Init+0x298>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d004      	beq.n	8001892 <HAL_ADC_Init+0x112>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a63      	ldr	r2, [pc, #396]	; (8001a1c <HAL_ADC_Init+0x29c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d10e      	bne.n	80018b0 <HAL_ADC_Init+0x130>
 8001892:	4861      	ldr	r0, [pc, #388]	; (8001a18 <HAL_ADC_Init+0x298>)
 8001894:	f7ff ff3a 	bl	800170c <LL_ADC_IsEnabled>
 8001898:	4604      	mov	r4, r0
 800189a:	4860      	ldr	r0, [pc, #384]	; (8001a1c <HAL_ADC_Init+0x29c>)
 800189c:	f7ff ff36 	bl	800170c <LL_ADC_IsEnabled>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4323      	orrs	r3, r4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	bf0c      	ite	eq
 80018a8:	2301      	moveq	r3, #1
 80018aa:	2300      	movne	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	e008      	b.n	80018c2 <HAL_ADC_Init+0x142>
 80018b0:	485b      	ldr	r0, [pc, #364]	; (8001a20 <HAL_ADC_Init+0x2a0>)
 80018b2:	f7ff ff2b 	bl	800170c <LL_ADC_IsEnabled>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d012      	beq.n	80018ec <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a53      	ldr	r2, [pc, #332]	; (8001a18 <HAL_ADC_Init+0x298>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d004      	beq.n	80018da <HAL_ADC_Init+0x15a>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a51      	ldr	r2, [pc, #324]	; (8001a1c <HAL_ADC_Init+0x29c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d101      	bne.n	80018de <HAL_ADC_Init+0x15e>
 80018da:	4a52      	ldr	r2, [pc, #328]	; (8001a24 <HAL_ADC_Init+0x2a4>)
 80018dc:	e000      	b.n	80018e0 <HAL_ADC_Init+0x160>
 80018de:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <HAL_ADC_Init+0x2a8>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4610      	mov	r0, r2
 80018e8:	f7ff fdbe 	bl	8001468 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80018ec:	f7ff fdb0 	bl	8001450 <HAL_GetREVID>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d914      	bls.n	8001924 <HAL_ADC_Init+0x1a4>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b10      	cmp	r3, #16
 8001900:	d110      	bne.n	8001924 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7d5b      	ldrb	r3, [r3, #21]
 8001906:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800190c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001912:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7f1b      	ldrb	r3, [r3, #28]
 8001918:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800191a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800191c:	f043 030c 	orr.w	r3, r3, #12
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	e00d      	b.n	8001940 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7d5b      	ldrb	r3, [r3, #21]
 8001928:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800192e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001934:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7f1b      	ldrb	r3, [r3, #28]
 800193a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7f1b      	ldrb	r3, [r3, #28]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d106      	bne.n	8001956 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	3b01      	subs	r3, #1
 800194e:	045b      	lsls	r3, r3, #17
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	2b00      	cmp	r3, #0
 800195c:	d009      	beq.n	8001972 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <HAL_ADC_Init+0x2ac>)
 800197a:	4013      	ands	r3, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	69b9      	ldr	r1, [r7, #24]
 8001982:	430b      	orrs	r3, r1
 8001984:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fed1 	bl	8001732 <LL_ADC_REG_IsConversionOngoing>
 8001990:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fede 	bl	8001758 <LL_ADC_INJ_IsConversionOngoing>
 800199c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d15f      	bne.n	8001a64 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d15c      	bne.n	8001a64 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7d1b      	ldrb	r3, [r3, #20]
 80019ae:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <HAL_ADC_Init+0x2b0>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	69b9      	ldr	r1, [r7, #24]
 80019c8:	430b      	orrs	r3, r1
 80019ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d130      	bne.n	8001a38 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691a      	ldr	r2, [r3, #16]
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_ADC_Init+0x2b4>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019ea:	3a01      	subs	r2, #1
 80019ec:	0411      	lsls	r1, r2, #16
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019f2:	4311      	orrs	r1, r2
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019f8:	4311      	orrs	r1, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019fe:	430a      	orrs	r2, r1
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	611a      	str	r2, [r3, #16]
 8001a0c:	e01c      	b.n	8001a48 <HAL_ADC_Init+0x2c8>
 8001a0e:	bf00      	nop
 8001a10:	24000000 	.word	0x24000000
 8001a14:	053e2d63 	.word	0x053e2d63
 8001a18:	40022000 	.word	0x40022000
 8001a1c:	40022100 	.word	0x40022100
 8001a20:	58026000 	.word	0x58026000
 8001a24:	40022300 	.word	0x40022300
 8001a28:	58026300 	.word	0x58026300
 8001a2c:	fff0c003 	.word	0xfff0c003
 8001a30:	ffffbffc 	.word	0xffffbffc
 8001a34:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691a      	ldr	r2, [r3, #16]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0201 	bic.w	r2, r2, #1
 8001a46:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 fb80 	bl	8002164 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d10c      	bne.n	8001a86 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f023 010f 	bic.w	r1, r3, #15
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	1e5a      	subs	r2, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	631a      	str	r2, [r3, #48]	; 0x30
 8001a84:	e007      	b.n	8001a96 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 020f 	bic.w	r2, r2, #15
 8001a94:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	f043 0201 	orr.w	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
 8001aa6:	e007      	b.n	8001ab8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aac:	f043 0210 	orr.w	r2, r3, #16
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ab8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3724      	adds	r7, #36	; 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd90      	pop	{r4, r7, pc}
 8001ac2:	bf00      	nop

08001ac4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b0a1      	sub	sp, #132	; 0x84
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4a9d      	ldr	r2, [pc, #628]	; (8001d54 <HAL_ADC_ConfigChannel+0x290>)
 8001ade:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x2a>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e321      	b.n	8002132 <HAL_ADC_ConfigChannel+0x66e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fe19 	bl	8001732 <LL_ADC_REG_IsConversionOngoing>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f040 8306 	bne.w	8002114 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d108      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x62>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	0e9b      	lsrs	r3, r3, #26
 8001b1a:	f003 031f 	and.w	r3, r3, #31
 8001b1e:	2201      	movs	r2, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	e016      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x90>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b36:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	e003      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b44:	fab3 f383 	clz	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	2201      	movs	r2, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	69d1      	ldr	r1, [r2, #28]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	430b      	orrs	r3, r1
 8001b60:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	6859      	ldr	r1, [r3, #4]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f7ff fd02 	bl	8001578 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fdda 	bl	8001732 <LL_ADC_REG_IsConversionOngoing>
 8001b7e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fde7 	bl	8001758 <LL_ADC_INJ_IsConversionOngoing>
 8001b8a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f040 80b3 	bne.w	8001cfa <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 80af 	bne.w	8001cfa <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	6819      	ldr	r1, [r3, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f7ff fd11 	bl	80015d0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bae:	4b6a      	ldr	r3, [pc, #424]	; (8001d58 <HAL_ADC_ConfigChannel+0x294>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bba:	d10b      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x110>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	e01d      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x14c>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10b      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x136>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	e00a      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x14c>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d027      	beq.n	8001c6a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	6919      	ldr	r1, [r3, #16]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c28:	f7ff fc52 	bl	80014d0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6919      	ldr	r1, [r3, #16]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	7e5b      	ldrb	r3, [r3, #25]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d102      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x17e>
 8001c3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c40:	e000      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x180>
 8001c42:	2300      	movs	r3, #0
 8001c44:	461a      	mov	r2, r3
 8001c46:	f7ff fc7c 	bl	8001542 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6919      	ldr	r1, [r3, #16]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	7e1b      	ldrb	r3, [r3, #24]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d102      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x19c>
 8001c5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c5e:	e000      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x19e>
 8001c60:	2300      	movs	r3, #0
 8001c62:	461a      	mov	r2, r3
 8001c64:	f7ff fc54 	bl	8001510 <LL_ADC_SetDataRightShift>
 8001c68:	e047      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	069b      	lsls	r3, r3, #26
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d107      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c8c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	069b      	lsls	r3, r3, #26
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d107      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cb0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	069b      	lsls	r3, r3, #26
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d107      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cd4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	069b      	lsls	r3, r3, #26
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d107      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cf8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fd04 	bl	800170c <LL_ADC_IsEnabled>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f040 820d 	bne.w	8002126 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6819      	ldr	r1, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f7ff fc85 	bl	8001628 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	4a0c      	ldr	r2, [pc, #48]	; (8001d54 <HAL_ADC_ConfigChannel+0x290>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	f040 8133 	bne.w	8001f90 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d110      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x298>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	0e9b      	lsrs	r3, r3, #26
 8001d40:	3301      	adds	r3, #1
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	2b09      	cmp	r3, #9
 8001d48:	bf94      	ite	ls
 8001d4a:	2301      	movls	r3, #1
 8001d4c:	2300      	movhi	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	e01e      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x2cc>
 8001d52:	bf00      	nop
 8001d54:	47ff0000 	.word	0x47ff0000
 8001d58:	5c001000 	.word	0x5c001000
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d64:	fa93 f3a3 	rbit	r3, r3
 8001d68:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001d74:	2320      	movs	r3, #32
 8001d76:	e003      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	3301      	adds	r3, #1
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	2b09      	cmp	r3, #9
 8001d88:	bf94      	ite	ls
 8001d8a:	2301      	movls	r3, #1
 8001d8c:	2300      	movhi	r3, #0
 8001d8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d079      	beq.n	8001e88 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d107      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x2ec>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0e9b      	lsrs	r3, r3, #26
 8001da6:	3301      	adds	r3, #1
 8001da8:	069b      	lsls	r3, r3, #26
 8001daa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dae:	e015      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x318>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dc0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	e003      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	069b      	lsls	r3, r3, #26
 8001dd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d109      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x338>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	0e9b      	lsrs	r3, r3, #26
 8001dee:	3301      	adds	r3, #1
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	2101      	movs	r1, #1
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	e017      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x368>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001e14:	2320      	movs	r3, #32
 8001e16:	e003      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	3301      	adds	r3, #1
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	ea42 0103 	orr.w	r1, r2, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10a      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x38e>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	0e9b      	lsrs	r3, r3, #26
 8001e42:	3301      	adds	r3, #1
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	051b      	lsls	r3, r3, #20
 8001e50:	e018      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x3c0>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e62:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	e003      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	f003 021f 	and.w	r2, r3, #31
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e84:	430b      	orrs	r3, r1
 8001e86:	e07e      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d107      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x3e0>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0e9b      	lsrs	r3, r3, #26
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	069b      	lsls	r3, r3, #26
 8001e9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ea2:	e015      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x40c>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001ebc:	2320      	movs	r3, #32
 8001ebe:	e003      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	069b      	lsls	r3, r3, #26
 8001ecc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x42c>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0e9b      	lsrs	r3, r3, #26
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	e017      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x45c>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	61bb      	str	r3, [r7, #24]
  return result;
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001f08:	2320      	movs	r3, #32
 8001f0a:	e003      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	fab3 f383 	clz	r3, r3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	3301      	adds	r3, #1
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	ea42 0103 	orr.w	r1, r2, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10d      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x488>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0e9b      	lsrs	r3, r3, #26
 8001f36:	3301      	adds	r3, #1
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	3b1e      	subs	r3, #30
 8001f44:	051b      	lsls	r3, r3, #20
 8001f46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	e01b      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x4c0>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	60fb      	str	r3, [r7, #12]
  return result;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001f64:	2320      	movs	r3, #32
 8001f66:	e003      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f003 021f 	and.w	r2, r3, #31
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b1e      	subs	r3, #30
 8001f7e:	051b      	lsls	r3, r3, #20
 8001f80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f84:	430b      	orrs	r3, r1
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	6892      	ldr	r2, [r2, #8]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f7ff fb20 	bl	80015d0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f280 80c6 	bge.w	8002126 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a67      	ldr	r2, [pc, #412]	; (800213c <HAL_ADC_ConfigChannel+0x678>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d004      	beq.n	8001fae <HAL_ADC_ConfigChannel+0x4ea>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a65      	ldr	r2, [pc, #404]	; (8002140 <HAL_ADC_ConfigChannel+0x67c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x4ee>
 8001fae:	4b65      	ldr	r3, [pc, #404]	; (8002144 <HAL_ADC_ConfigChannel+0x680>)
 8001fb0:	e000      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x4f0>
 8001fb2:	4b65      	ldr	r3, [pc, #404]	; (8002148 <HAL_ADC_ConfigChannel+0x684>)
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fa7d 	bl	80014b4 <LL_ADC_GetCommonPathInternalCh>
 8001fba:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a5e      	ldr	r2, [pc, #376]	; (800213c <HAL_ADC_ConfigChannel+0x678>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d004      	beq.n	8001fd0 <HAL_ADC_ConfigChannel+0x50c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a5d      	ldr	r2, [pc, #372]	; (8002140 <HAL_ADC_ConfigChannel+0x67c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d10e      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x52a>
 8001fd0:	485a      	ldr	r0, [pc, #360]	; (800213c <HAL_ADC_ConfigChannel+0x678>)
 8001fd2:	f7ff fb9b 	bl	800170c <LL_ADC_IsEnabled>
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	4859      	ldr	r0, [pc, #356]	; (8002140 <HAL_ADC_ConfigChannel+0x67c>)
 8001fda:	f7ff fb97 	bl	800170c <LL_ADC_IsEnabled>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4323      	orrs	r3, r4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	bf0c      	ite	eq
 8001fe6:	2301      	moveq	r3, #1
 8001fe8:	2300      	movne	r3, #0
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	e008      	b.n	8002000 <HAL_ADC_ConfigChannel+0x53c>
 8001fee:	4857      	ldr	r0, [pc, #348]	; (800214c <HAL_ADC_ConfigChannel+0x688>)
 8001ff0:	f7ff fb8c 	bl	800170c <LL_ADC_IsEnabled>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	bf0c      	ite	eq
 8001ffa:	2301      	moveq	r3, #1
 8001ffc:	2300      	movne	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d07d      	beq.n	8002100 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a51      	ldr	r2, [pc, #324]	; (8002150 <HAL_ADC_ConfigChannel+0x68c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d130      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x5ac>
 800200e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002010:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d12b      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a4b      	ldr	r2, [pc, #300]	; (800214c <HAL_ADC_ConfigChannel+0x688>)
 800201e:	4293      	cmp	r3, r2
 8002020:	f040 8081 	bne.w	8002126 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a44      	ldr	r2, [pc, #272]	; (800213c <HAL_ADC_ConfigChannel+0x678>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d004      	beq.n	8002038 <HAL_ADC_ConfigChannel+0x574>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a43      	ldr	r2, [pc, #268]	; (8002140 <HAL_ADC_ConfigChannel+0x67c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d101      	bne.n	800203c <HAL_ADC_ConfigChannel+0x578>
 8002038:	4a42      	ldr	r2, [pc, #264]	; (8002144 <HAL_ADC_ConfigChannel+0x680>)
 800203a:	e000      	b.n	800203e <HAL_ADC_ConfigChannel+0x57a>
 800203c:	4a42      	ldr	r2, [pc, #264]	; (8002148 <HAL_ADC_ConfigChannel+0x684>)
 800203e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002040:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002044:	4619      	mov	r1, r3
 8002046:	4610      	mov	r0, r2
 8002048:	f7ff fa21 	bl	800148e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800204c:	4b41      	ldr	r3, [pc, #260]	; (8002154 <HAL_ADC_ConfigChannel+0x690>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	4a41      	ldr	r2, [pc, #260]	; (8002158 <HAL_ADC_ConfigChannel+0x694>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	099b      	lsrs	r3, r3, #6
 800205a:	3301      	adds	r3, #1
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002060:	e002      	b.n	8002068 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3b01      	subs	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f9      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800206e:	e05a      	b.n	8002126 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a39      	ldr	r2, [pc, #228]	; (800215c <HAL_ADC_ConfigChannel+0x698>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d11e      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x5f4>
 800207a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800207c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d119      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a30      	ldr	r2, [pc, #192]	; (800214c <HAL_ADC_ConfigChannel+0x688>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d14b      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a2a      	ldr	r2, [pc, #168]	; (800213c <HAL_ADC_ConfigChannel+0x678>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d004      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0x5de>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a28      	ldr	r2, [pc, #160]	; (8002140 <HAL_ADC_ConfigChannel+0x67c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x5e2>
 80020a2:	4a28      	ldr	r2, [pc, #160]	; (8002144 <HAL_ADC_ConfigChannel+0x680>)
 80020a4:	e000      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x5e4>
 80020a6:	4a28      	ldr	r2, [pc, #160]	; (8002148 <HAL_ADC_ConfigChannel+0x684>)
 80020a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ae:	4619      	mov	r1, r3
 80020b0:	4610      	mov	r0, r2
 80020b2:	f7ff f9ec 	bl	800148e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020b6:	e036      	b.n	8002126 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a28      	ldr	r2, [pc, #160]	; (8002160 <HAL_ADC_ConfigChannel+0x69c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d131      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x662>
 80020c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d12c      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1e      	ldr	r2, [pc, #120]	; (800214c <HAL_ADC_ConfigChannel+0x688>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d127      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a18      	ldr	r2, [pc, #96]	; (800213c <HAL_ADC_ConfigChannel+0x678>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d004      	beq.n	80020ea <HAL_ADC_ConfigChannel+0x626>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a16      	ldr	r2, [pc, #88]	; (8002140 <HAL_ADC_ConfigChannel+0x67c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x62a>
 80020ea:	4a16      	ldr	r2, [pc, #88]	; (8002144 <HAL_ADC_ConfigChannel+0x680>)
 80020ec:	e000      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x62c>
 80020ee:	4a16      	ldr	r2, [pc, #88]	; (8002148 <HAL_ADC_ConfigChannel+0x684>)
 80020f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020f6:	4619      	mov	r1, r3
 80020f8:	4610      	mov	r0, r2
 80020fa:	f7ff f9c8 	bl	800148e <LL_ADC_SetCommonPathInternalCh>
 80020fe:	e012      	b.n	8002126 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002104:	f043 0220 	orr.w	r2, r3, #32
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002112:	e008      	b.n	8002126 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002118:	f043 0220 	orr.w	r2, r3, #32
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800212e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002132:	4618      	mov	r0, r3
 8002134:	3784      	adds	r7, #132	; 0x84
 8002136:	46bd      	mov	sp, r7
 8002138:	bd90      	pop	{r4, r7, pc}
 800213a:	bf00      	nop
 800213c:	40022000 	.word	0x40022000
 8002140:	40022100 	.word	0x40022100
 8002144:	40022300 	.word	0x40022300
 8002148:	58026300 	.word	0x58026300
 800214c:	58026000 	.word	0x58026000
 8002150:	cb840000 	.word	0xcb840000
 8002154:	24000000 	.word	0x24000000
 8002158:	053e2d63 	.word	0x053e2d63
 800215c:	c7520000 	.word	0xc7520000
 8002160:	cfb80000 	.word	0xcfb80000

08002164 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a79      	ldr	r2, [pc, #484]	; (8002358 <ADC_ConfigureBoostMode+0x1f4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d004      	beq.n	8002180 <ADC_ConfigureBoostMode+0x1c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a78      	ldr	r2, [pc, #480]	; (800235c <ADC_ConfigureBoostMode+0x1f8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d109      	bne.n	8002194 <ADC_ConfigureBoostMode+0x30>
 8002180:	4b77      	ldr	r3, [pc, #476]	; (8002360 <ADC_ConfigureBoostMode+0x1fc>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf14      	ite	ne
 800218c:	2301      	movne	r3, #1
 800218e:	2300      	moveq	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	e008      	b.n	80021a6 <ADC_ConfigureBoostMode+0x42>
 8002194:	4b73      	ldr	r3, [pc, #460]	; (8002364 <ADC_ConfigureBoostMode+0x200>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf14      	ite	ne
 80021a0:	2301      	movne	r3, #1
 80021a2:	2300      	moveq	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d01c      	beq.n	80021e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80021aa:	f002 f817 	bl	80041dc <HAL_RCC_GetHCLKFreq>
 80021ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80021b8:	d010      	beq.n	80021dc <ADC_ConfigureBoostMode+0x78>
 80021ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80021be:	d871      	bhi.n	80022a4 <ADC_ConfigureBoostMode+0x140>
 80021c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c4:	d002      	beq.n	80021cc <ADC_ConfigureBoostMode+0x68>
 80021c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021ca:	d16b      	bne.n	80022a4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	60fb      	str	r3, [r7, #12]
        break;
 80021da:	e066      	b.n	80022aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	60fb      	str	r3, [r7, #12]
        break;
 80021e2:	e062      	b.n	80022aa <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80021e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80021e8:	f002 ffdc 	bl	80051a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80021ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80021f6:	d051      	beq.n	800229c <ADC_ConfigureBoostMode+0x138>
 80021f8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80021fc:	d854      	bhi.n	80022a8 <ADC_ConfigureBoostMode+0x144>
 80021fe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002202:	d047      	beq.n	8002294 <ADC_ConfigureBoostMode+0x130>
 8002204:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002208:	d84e      	bhi.n	80022a8 <ADC_ConfigureBoostMode+0x144>
 800220a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800220e:	d03d      	beq.n	800228c <ADC_ConfigureBoostMode+0x128>
 8002210:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002214:	d848      	bhi.n	80022a8 <ADC_ConfigureBoostMode+0x144>
 8002216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800221a:	d033      	beq.n	8002284 <ADC_ConfigureBoostMode+0x120>
 800221c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002220:	d842      	bhi.n	80022a8 <ADC_ConfigureBoostMode+0x144>
 8002222:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002226:	d029      	beq.n	800227c <ADC_ConfigureBoostMode+0x118>
 8002228:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800222c:	d83c      	bhi.n	80022a8 <ADC_ConfigureBoostMode+0x144>
 800222e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002232:	d01a      	beq.n	800226a <ADC_ConfigureBoostMode+0x106>
 8002234:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002238:	d836      	bhi.n	80022a8 <ADC_ConfigureBoostMode+0x144>
 800223a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800223e:	d014      	beq.n	800226a <ADC_ConfigureBoostMode+0x106>
 8002240:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002244:	d830      	bhi.n	80022a8 <ADC_ConfigureBoostMode+0x144>
 8002246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800224a:	d00e      	beq.n	800226a <ADC_ConfigureBoostMode+0x106>
 800224c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002250:	d82a      	bhi.n	80022a8 <ADC_ConfigureBoostMode+0x144>
 8002252:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002256:	d008      	beq.n	800226a <ADC_ConfigureBoostMode+0x106>
 8002258:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800225c:	d824      	bhi.n	80022a8 <ADC_ConfigureBoostMode+0x144>
 800225e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002262:	d002      	beq.n	800226a <ADC_ConfigureBoostMode+0x106>
 8002264:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002268:	d11e      	bne.n	80022a8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	0c9b      	lsrs	r3, r3, #18
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	fbb2 f3f3 	udiv	r3, r2, r3
 8002278:	60fb      	str	r3, [r7, #12]
        break;
 800227a:	e016      	b.n	80022aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	60fb      	str	r3, [r7, #12]
        break;
 8002282:	e012      	b.n	80022aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	60fb      	str	r3, [r7, #12]
        break;
 800228a:	e00e      	b.n	80022aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	099b      	lsrs	r3, r3, #6
 8002290:	60fb      	str	r3, [r7, #12]
        break;
 8002292:	e00a      	b.n	80022aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	09db      	lsrs	r3, r3, #7
 8002298:	60fb      	str	r3, [r7, #12]
        break;
 800229a:	e006      	b.n	80022aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	60fb      	str	r3, [r7, #12]
        break;
 80022a2:	e002      	b.n	80022aa <ADC_ConfigureBoostMode+0x146>
        break;
 80022a4:	bf00      	nop
 80022a6:	e000      	b.n	80022aa <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80022a8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80022aa:	f7ff f8d1 	bl	8001450 <HAL_GetREVID>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d815      	bhi.n	80022e4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4a2b      	ldr	r2, [pc, #172]	; (8002368 <ADC_ConfigureBoostMode+0x204>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d908      	bls.n	80022d2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80022d0:	e03e      	b.n	8002350 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022e0:	609a      	str	r2, [r3, #8]
}
 80022e2:	e035      	b.n	8002350 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	085b      	lsrs	r3, r3, #1
 80022e8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4a1f      	ldr	r2, [pc, #124]	; (800236c <ADC_ConfigureBoostMode+0x208>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d808      	bhi.n	8002304 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002300:	609a      	str	r2, [r3, #8]
}
 8002302:	e025      	b.n	8002350 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4a1a      	ldr	r2, [pc, #104]	; (8002370 <ADC_ConfigureBoostMode+0x20c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d80a      	bhi.n	8002322 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800231e:	609a      	str	r2, [r3, #8]
}
 8002320:	e016      	b.n	8002350 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4a13      	ldr	r2, [pc, #76]	; (8002374 <ADC_ConfigureBoostMode+0x210>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d80a      	bhi.n	8002340 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800233c:	609a      	str	r2, [r3, #8]
}
 800233e:	e007      	b.n	8002350 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800234e:	609a      	str	r2, [r3, #8]
}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40022000 	.word	0x40022000
 800235c:	40022100 	.word	0x40022100
 8002360:	40022300 	.word	0x40022300
 8002364:	58026300 	.word	0x58026300
 8002368:	01312d00 	.word	0x01312d00
 800236c:	005f5e10 	.word	0x005f5e10
 8002370:	00bebc20 	.word	0x00bebc20
 8002374:	017d7840 	.word	0x017d7840

08002378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <__NVIC_SetPriorityGrouping+0x40>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002394:	4013      	ands	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <__NVIC_SetPriorityGrouping+0x40>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00
 80023bc:	05fa0000 	.word	0x05fa0000

080023c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <__NVIC_GetPriorityGrouping+0x18>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0307 	and.w	r3, r3, #7
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	db0b      	blt.n	8002406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	4907      	ldr	r1, [pc, #28]	; (8002414 <__NVIC_EnableIRQ+0x38>)
 80023f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2001      	movs	r0, #1
 80023fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002428:	2b00      	cmp	r3, #0
 800242a:	db0a      	blt.n	8002442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	490c      	ldr	r1, [pc, #48]	; (8002464 <__NVIC_SetPriority+0x4c>)
 8002432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002436:	0112      	lsls	r2, r2, #4
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	440b      	add	r3, r1
 800243c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002440:	e00a      	b.n	8002458 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4908      	ldr	r1, [pc, #32]	; (8002468 <__NVIC_SetPriority+0x50>)
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	3b04      	subs	r3, #4
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	440b      	add	r3, r1
 8002456:	761a      	strb	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000e100 	.word	0xe000e100
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f1c3 0307 	rsb	r3, r3, #7
 8002486:	2b04      	cmp	r3, #4
 8002488:	bf28      	it	cs
 800248a:	2304      	movcs	r3, #4
 800248c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3304      	adds	r3, #4
 8002492:	2b06      	cmp	r3, #6
 8002494:	d902      	bls.n	800249c <NVIC_EncodePriority+0x30>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3b03      	subs	r3, #3
 800249a:	e000      	b.n	800249e <NVIC_EncodePriority+0x32>
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	401a      	ands	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b4:	f04f 31ff 	mov.w	r1, #4294967295
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43d9      	mvns	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	4313      	orrs	r3, r2
         );
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3724      	adds	r7, #36	; 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ff4c 	bl	8002378 <__NVIC_SetPriorityGrouping>
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024f6:	f7ff ff63 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 80024fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68b9      	ldr	r1, [r7, #8]
 8002500:	6978      	ldr	r0, [r7, #20]
 8002502:	f7ff ffb3 	bl	800246c <NVIC_EncodePriority>
 8002506:	4602      	mov	r2, r0
 8002508:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ff82 	bl	8002418 <__NVIC_SetPriority>
}
 8002514:	bf00      	nop
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ff56 	bl	80023dc <__NVIC_EnableIRQ>
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b098      	sub	sp, #96	; 0x60
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002540:	4a84      	ldr	r2, [pc, #528]	; (8002754 <HAL_FDCAN_Init+0x21c>)
 8002542:	f107 030c 	add.w	r3, r7, #12
 8002546:	4611      	mov	r1, r2
 8002548:	224c      	movs	r2, #76	; 0x4c
 800254a:	4618      	mov	r0, r3
 800254c:	f009 fc44 	bl	800bdd8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e1c6      	b.n	80028e8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a7e      	ldr	r2, [pc, #504]	; (8002758 <HAL_FDCAN_Init+0x220>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d106      	bne.n	8002572 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800256c:	461a      	mov	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe f9fc 	bl	8000984 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0210 	bic.w	r2, r2, #16
 800259a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800259c:	f7fe ff28 	bl	80013f0 <HAL_GetTick>
 80025a0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80025a2:	e014      	b.n	80025ce <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80025a4:	f7fe ff24 	bl	80013f0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b0a      	cmp	r3, #10
 80025b0:	d90d      	bls.n	80025ce <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025b8:	f043 0201 	orr.w	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2203      	movs	r2, #3
 80025c6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e18c      	b.n	80028e8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d0e3      	beq.n	80025a4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025ec:	f7fe ff00 	bl	80013f0 <HAL_GetTick>
 80025f0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80025f2:	e014      	b.n	800261e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80025f4:	f7fe fefc 	bl	80013f0 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b0a      	cmp	r3, #10
 8002600:	d90d      	bls.n	800261e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2203      	movs	r2, #3
 8002616:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e164      	b.n	80028e8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0e3      	beq.n	80025f4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0202 	orr.w	r2, r2, #2
 800263a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7c1b      	ldrb	r3, [r3, #16]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d108      	bne.n	8002656 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002652:	619a      	str	r2, [r3, #24]
 8002654:	e007      	b.n	8002666 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002664:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	7c5b      	ldrb	r3, [r3, #17]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d108      	bne.n	8002680 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699a      	ldr	r2, [r3, #24]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800267c:	619a      	str	r2, [r3, #24]
 800267e:	e007      	b.n	8002690 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800268e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7c9b      	ldrb	r3, [r3, #18]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d108      	bne.n	80026aa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026a6:	619a      	str	r2, [r3, #24]
 80026a8:	e007      	b.n	80026ba <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699a      	ldr	r2, [r3, #24]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026b8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699a      	ldr	r2, [r3, #24]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80026de:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0210 	bic.w	r2, r2, #16
 80026ee:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d108      	bne.n	800270a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0204 	orr.w	r2, r2, #4
 8002706:	619a      	str	r2, [r3, #24]
 8002708:	e030      	b.n	800276c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d02c      	beq.n	800276c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d020      	beq.n	800275c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699a      	ldr	r2, [r3, #24]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002728:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0210 	orr.w	r2, r2, #16
 8002738:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b03      	cmp	r3, #3
 8002740:	d114      	bne.n	800276c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699a      	ldr	r2, [r3, #24]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0220 	orr.w	r2, r2, #32
 8002750:	619a      	str	r2, [r3, #24]
 8002752:	e00b      	b.n	800276c <HAL_FDCAN_Init+0x234>
 8002754:	0800bfac 	.word	0x0800bfac
 8002758:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699a      	ldr	r2, [r3, #24]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0220 	orr.w	r2, r2, #32
 800276a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	3b01      	subs	r3, #1
 8002772:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	3b01      	subs	r3, #1
 800277a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800277c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002784:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	3b01      	subs	r3, #1
 800278e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002794:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002796:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027a0:	d115      	bne.n	80027ce <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	3b01      	subs	r3, #1
 80027ae:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80027b0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	3b01      	subs	r3, #1
 80027b8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80027ba:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	3b01      	subs	r3, #1
 80027c4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80027ca:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80027cc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f4:	4413      	add	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d011      	beq.n	800281e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002802:	f023 0107 	bic.w	r1, r3, #7
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	3360      	adds	r3, #96	; 0x60
 800280e:	443b      	add	r3, r7
 8002810:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	2b00      	cmp	r3, #0
 8002824:	d011      	beq.n	800284a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800282e:	f023 0107 	bic.w	r1, r3, #7
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	3360      	adds	r3, #96	; 0x60
 800283a:	443b      	add	r3, r7
 800283c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800284e:	2b00      	cmp	r3, #0
 8002850:	d012      	beq.n	8002878 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800285a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	3360      	adds	r3, #96	; 0x60
 8002866:	443b      	add	r3, r7
 8002868:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800286c:	011a      	lsls	r2, r3, #4
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287c:	2b00      	cmp	r3, #0
 800287e:	d012      	beq.n	80028a6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002888:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	3360      	adds	r3, #96	; 0x60
 8002894:	443b      	add	r3, r7
 8002896:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800289a:	021a      	lsls	r2, r3, #8
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <HAL_FDCAN_Init+0x3b8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d107      	bne.n	80028c0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f022 0203 	bic.w	r2, r2, #3
 80028be:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f80b 	bl	80028f4 <FDCAN_CalcultateRamBlockAddresses>
 80028de:	4603      	mov	r3, r0
 80028e0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80028e4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3760      	adds	r7, #96	; 0x60
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	4000a000 	.word	0x4000a000

080028f4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002900:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800290a:	4ba7      	ldr	r3, [pc, #668]	; (8002ba8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800290c:	4013      	ands	r3, r2
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	0091      	lsls	r1, r2, #2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	430b      	orrs	r3, r1
 8002918:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002924:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	041a      	lsls	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	4413      	add	r3, r2
 8002940:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800294a:	4b97      	ldr	r3, [pc, #604]	; (8002ba8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800294c:	4013      	ands	r3, r2
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	0091      	lsls	r1, r2, #2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	430b      	orrs	r3, r1
 8002958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296c:	041a      	lsls	r2, r3, #16
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	4413      	add	r3, r2
 8002982:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800298c:	4b86      	ldr	r3, [pc, #536]	; (8002ba8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800298e:	4013      	ands	r3, r2
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	0091      	lsls	r1, r2, #2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	430b      	orrs	r3, r1
 800299a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80029a6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	041a      	lsls	r2, r3, #16
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029c2:	fb02 f303 	mul.w	r3, r2, r3
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	4413      	add	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029d4:	4b74      	ldr	r3, [pc, #464]	; (8002ba8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	0091      	lsls	r1, r2, #2
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029ee:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f6:	041a      	lsls	r2, r3, #16
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	4413      	add	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002a1c:	4b62      	ldr	r3, [pc, #392]	; (8002ba8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	0091      	lsls	r1, r2, #2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002a48:	4b57      	ldr	r3, [pc, #348]	; (8002ba8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	0091      	lsls	r1, r2, #2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	430b      	orrs	r3, r1
 8002a56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a62:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6a:	041a      	lsls	r2, r3, #16
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	4413      	add	r3, r2
 8002a80:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002a8a:	4b47      	ldr	r3, [pc, #284]	; (8002ba8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	0091      	lsls	r1, r2, #2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	430b      	orrs	r3, r1
 8002a98:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002aa4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	041a      	lsls	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ac0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac8:	061a      	lsls	r2, r3, #24
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad8:	4b34      	ldr	r3, [pc, #208]	; (8002bac <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002ada:	4413      	add	r3, r2
 8002adc:	009a      	lsls	r2, r3, #2
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	441a      	add	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	441a      	add	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	441a      	add	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	441a      	add	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	441a      	add	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	441a      	add	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	441a      	add	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	441a      	add	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9e:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d915      	bls.n	8002bd0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002ba4:	e006      	b.n	8002bb4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002ba6:	bf00      	nop
 8002ba8:	ffff0003 	.word	0xffff0003
 8002bac:	10002b00 	.word	0x10002b00
 8002bb0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bba:	f043 0220 	orr.w	r2, r3, #32
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e010      	b.n	8002bf2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	e005      	b.n	8002be4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3304      	adds	r3, #4
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d3f3      	bcc.n	8002bd8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop

08002c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c0e:	4b89      	ldr	r3, [pc, #548]	; (8002e34 <HAL_GPIO_Init+0x234>)
 8002c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c12:	e194      	b.n	8002f3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	2101      	movs	r1, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 8186 	beq.w	8002f38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d005      	beq.n	8002c44 <HAL_GPIO_Init+0x44>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d130      	bne.n	8002ca6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	f003 0201 	and.w	r2, r3, #1
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d017      	beq.n	8002ce2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d123      	bne.n	8002d36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	08da      	lsrs	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3208      	adds	r2, #8
 8002cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	220f      	movs	r2, #15
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	08da      	lsrs	r2, r3, #3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3208      	adds	r2, #8
 8002d30:	69b9      	ldr	r1, [r7, #24]
 8002d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	2203      	movs	r2, #3
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0203 	and.w	r2, r3, #3
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 80e0 	beq.w	8002f38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d78:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <HAL_GPIO_Init+0x238>)
 8002d7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d7e:	4a2e      	ldr	r2, [pc, #184]	; (8002e38 <HAL_GPIO_Init+0x238>)
 8002d80:	f043 0302 	orr.w	r3, r3, #2
 8002d84:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d88:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <HAL_GPIO_Init+0x238>)
 8002d8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d96:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <HAL_GPIO_Init+0x23c>)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	089b      	lsrs	r3, r3, #2
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	220f      	movs	r2, #15
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a20      	ldr	r2, [pc, #128]	; (8002e40 <HAL_GPIO_Init+0x240>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d052      	beq.n	8002e68 <HAL_GPIO_Init+0x268>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a1f      	ldr	r2, [pc, #124]	; (8002e44 <HAL_GPIO_Init+0x244>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d031      	beq.n	8002e2e <HAL_GPIO_Init+0x22e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a1e      	ldr	r2, [pc, #120]	; (8002e48 <HAL_GPIO_Init+0x248>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d02b      	beq.n	8002e2a <HAL_GPIO_Init+0x22a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a1d      	ldr	r2, [pc, #116]	; (8002e4c <HAL_GPIO_Init+0x24c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d025      	beq.n	8002e26 <HAL_GPIO_Init+0x226>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a1c      	ldr	r2, [pc, #112]	; (8002e50 <HAL_GPIO_Init+0x250>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d01f      	beq.n	8002e22 <HAL_GPIO_Init+0x222>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a1b      	ldr	r2, [pc, #108]	; (8002e54 <HAL_GPIO_Init+0x254>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d019      	beq.n	8002e1e <HAL_GPIO_Init+0x21e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a1a      	ldr	r2, [pc, #104]	; (8002e58 <HAL_GPIO_Init+0x258>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <HAL_GPIO_Init+0x21a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a19      	ldr	r2, [pc, #100]	; (8002e5c <HAL_GPIO_Init+0x25c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00d      	beq.n	8002e16 <HAL_GPIO_Init+0x216>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <HAL_GPIO_Init+0x260>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d007      	beq.n	8002e12 <HAL_GPIO_Init+0x212>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a17      	ldr	r2, [pc, #92]	; (8002e64 <HAL_GPIO_Init+0x264>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d101      	bne.n	8002e0e <HAL_GPIO_Init+0x20e>
 8002e0a:	2309      	movs	r3, #9
 8002e0c:	e02d      	b.n	8002e6a <HAL_GPIO_Init+0x26a>
 8002e0e:	230a      	movs	r3, #10
 8002e10:	e02b      	b.n	8002e6a <HAL_GPIO_Init+0x26a>
 8002e12:	2308      	movs	r3, #8
 8002e14:	e029      	b.n	8002e6a <HAL_GPIO_Init+0x26a>
 8002e16:	2307      	movs	r3, #7
 8002e18:	e027      	b.n	8002e6a <HAL_GPIO_Init+0x26a>
 8002e1a:	2306      	movs	r3, #6
 8002e1c:	e025      	b.n	8002e6a <HAL_GPIO_Init+0x26a>
 8002e1e:	2305      	movs	r3, #5
 8002e20:	e023      	b.n	8002e6a <HAL_GPIO_Init+0x26a>
 8002e22:	2304      	movs	r3, #4
 8002e24:	e021      	b.n	8002e6a <HAL_GPIO_Init+0x26a>
 8002e26:	2303      	movs	r3, #3
 8002e28:	e01f      	b.n	8002e6a <HAL_GPIO_Init+0x26a>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e01d      	b.n	8002e6a <HAL_GPIO_Init+0x26a>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e01b      	b.n	8002e6a <HAL_GPIO_Init+0x26a>
 8002e32:	bf00      	nop
 8002e34:	58000080 	.word	0x58000080
 8002e38:	58024400 	.word	0x58024400
 8002e3c:	58000400 	.word	0x58000400
 8002e40:	58020000 	.word	0x58020000
 8002e44:	58020400 	.word	0x58020400
 8002e48:	58020800 	.word	0x58020800
 8002e4c:	58020c00 	.word	0x58020c00
 8002e50:	58021000 	.word	0x58021000
 8002e54:	58021400 	.word	0x58021400
 8002e58:	58021800 	.word	0x58021800
 8002e5c:	58021c00 	.word	0x58021c00
 8002e60:	58022000 	.word	0x58022000
 8002e64:	58022400 	.word	0x58022400
 8002e68:	2300      	movs	r3, #0
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	f002 0203 	and.w	r2, r2, #3
 8002e70:	0092      	lsls	r2, r2, #2
 8002e72:	4093      	lsls	r3, r2
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e7a:	4938      	ldr	r1, [pc, #224]	; (8002f5c <HAL_GPIO_Init+0x35c>)
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	089b      	lsrs	r3, r3, #2
 8002e80:	3302      	adds	r3, #2
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002edc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f47f ae63 	bne.w	8002c14 <HAL_GPIO_Init+0x14>
  }
}
 8002f4e:	bf00      	nop
 8002f50:	bf00      	nop
 8002f52:	3724      	adds	r7, #36	; 0x24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	58000400 	.word	0x58000400

08002f60 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002f68:	4a08      	ldr	r2, [pc, #32]	; (8002f8c <HAL_HSEM_FastTake+0x2c>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3320      	adds	r3, #32
 8002f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f72:	4a07      	ldr	r2, [pc, #28]	; (8002f90 <HAL_HSEM_FastTake+0x30>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d101      	bne.n	8002f7c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e000      	b.n	8002f7e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	58026400 	.word	0x58026400
 8002f90:	80000300 	.word	0x80000300

08002f94 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002f9e:	4906      	ldr	r1, [pc, #24]	; (8002fb8 <HAL_HSEM_Release+0x24>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	58026400 	.word	0x58026400

08002fbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fbe:	b08f      	sub	sp, #60	; 0x3c
 8002fc0:	af0a      	add	r7, sp, #40	; 0x28
 8002fc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e116      	b.n	80031fc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d106      	bne.n	8002fee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7fe f90d 	bl	8001208 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d102      	bne.n	8003008 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f005 fe61 	bl	8008cd4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	687e      	ldr	r6, [r7, #4]
 800301a:	466d      	mov	r5, sp
 800301c:	f106 0410 	add.w	r4, r6, #16
 8003020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003028:	e894 0003 	ldmia.w	r4, {r0, r1}
 800302c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003030:	1d33      	adds	r3, r6, #4
 8003032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003034:	6838      	ldr	r0, [r7, #0]
 8003036:	f005 fddf 	bl	8008bf8 <USB_CoreInit>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0d7      	b.n	80031fc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f005 fe4f 	bl	8008cf6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003058:	2300      	movs	r3, #0
 800305a:	73fb      	strb	r3, [r7, #15]
 800305c:	e04a      	b.n	80030f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800305e:	7bfa      	ldrb	r2, [r7, #15]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	333d      	adds	r3, #61	; 0x3d
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	333c      	adds	r3, #60	; 0x3c
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	b298      	uxth	r0, r3
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	3344      	adds	r3, #68	; 0x44
 800309a:	4602      	mov	r2, r0
 800309c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	3340      	adds	r3, #64	; 0x40
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3348      	adds	r3, #72	; 0x48
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	334c      	adds	r3, #76	; 0x4c
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	3354      	adds	r3, #84	; 0x54
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	3301      	adds	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d3af      	bcc.n	800305e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fe:	2300      	movs	r3, #0
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	e044      	b.n	800318e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800311a:	7bfa      	ldrb	r2, [r7, #15]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003130:	7bfa      	ldrb	r2, [r7, #15]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003142:	2200      	movs	r2, #0
 8003144:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800315c:	7bfa      	ldrb	r2, [r7, #15]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	3301      	adds	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	429a      	cmp	r2, r3
 8003196:	d3b5      	bcc.n	8003104 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	603b      	str	r3, [r7, #0]
 800319e:	687e      	ldr	r6, [r7, #4]
 80031a0:	466d      	mov	r5, sp
 80031a2:	f106 0410 	add.w	r4, r6, #16
 80031a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80031b6:	1d33      	adds	r3, r6, #4
 80031b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ba:	6838      	ldr	r0, [r7, #0]
 80031bc:	f005 fde8 	bl	8008d90 <USB_DevInit>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2202      	movs	r2, #2
 80031ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e014      	b.n	80031fc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d102      	bne.n	80031f0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f80a 	bl	8003204 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f005 ffa6 	bl	8009146 <USB_DevDisconnect>

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003204 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_PCDEx_ActivateLPM+0x44>)
 8003234:	4313      	orrs	r3, r2
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	10000003 	.word	0x10000003

0800324c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003254:	4b29      	ldr	r3, [pc, #164]	; (80032fc <HAL_PWREx_ConfigSupply+0xb0>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	2b06      	cmp	r3, #6
 800325e:	d00a      	beq.n	8003276 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003260:	4b26      	ldr	r3, [pc, #152]	; (80032fc <HAL_PWREx_ConfigSupply+0xb0>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	429a      	cmp	r2, r3
 800326c:	d001      	beq.n	8003272 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e040      	b.n	80032f4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e03e      	b.n	80032f4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003276:	4b21      	ldr	r3, [pc, #132]	; (80032fc <HAL_PWREx_ConfigSupply+0xb0>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800327e:	491f      	ldr	r1, [pc, #124]	; (80032fc <HAL_PWREx_ConfigSupply+0xb0>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4313      	orrs	r3, r2
 8003284:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003286:	f7fe f8b3 	bl	80013f0 <HAL_GetTick>
 800328a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800328c:	e009      	b.n	80032a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800328e:	f7fe f8af 	bl	80013f0 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800329c:	d901      	bls.n	80032a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e028      	b.n	80032f4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032a2:	4b16      	ldr	r3, [pc, #88]	; (80032fc <HAL_PWREx_ConfigSupply+0xb0>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ae:	d1ee      	bne.n	800328e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b1e      	cmp	r3, #30
 80032b4:	d008      	beq.n	80032c8 <HAL_PWREx_ConfigSupply+0x7c>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b2e      	cmp	r3, #46	; 0x2e
 80032ba:	d005      	beq.n	80032c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b1d      	cmp	r3, #29
 80032c0:	d002      	beq.n	80032c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b2d      	cmp	r3, #45	; 0x2d
 80032c6:	d114      	bne.n	80032f2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80032c8:	f7fe f892 	bl	80013f0 <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80032ce:	e009      	b.n	80032e4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032d0:	f7fe f88e 	bl	80013f0 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032de:	d901      	bls.n	80032e4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e007      	b.n	80032f4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <HAL_PWREx_ConfigSupply+0xb0>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f0:	d1ee      	bne.n	80032d0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	58024800 	.word	0x58024800

08003300 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4a04      	ldr	r2, [pc, #16]	; (800331c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800330a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800330e:	60d3      	str	r3, [r2, #12]
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	58024800 	.word	0x58024800

08003320 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08c      	sub	sp, #48	; 0x30
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f000 bc1d 	b.w	8003b6e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8087 	beq.w	8003450 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003342:	4b99      	ldr	r3, [pc, #612]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800334c:	4b96      	ldr	r3, [pc, #600]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003354:	2b10      	cmp	r3, #16
 8003356:	d007      	beq.n	8003368 <HAL_RCC_OscConfig+0x48>
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	2b18      	cmp	r3, #24
 800335c:	d110      	bne.n	8003380 <HAL_RCC_OscConfig+0x60>
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d10b      	bne.n	8003380 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003368:	4b8f      	ldr	r3, [pc, #572]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d06c      	beq.n	800344e <HAL_RCC_OscConfig+0x12e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d168      	bne.n	800344e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e3f6      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	d106      	bne.n	8003398 <HAL_RCC_OscConfig+0x78>
 800338a:	4b87      	ldr	r3, [pc, #540]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a86      	ldr	r2, [pc, #536]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e02e      	b.n	80033f6 <HAL_RCC_OscConfig+0xd6>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10c      	bne.n	80033ba <HAL_RCC_OscConfig+0x9a>
 80033a0:	4b81      	ldr	r3, [pc, #516]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a80      	ldr	r2, [pc, #512]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b7e      	ldr	r3, [pc, #504]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a7d      	ldr	r2, [pc, #500]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	e01d      	b.n	80033f6 <HAL_RCC_OscConfig+0xd6>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c2:	d10c      	bne.n	80033de <HAL_RCC_OscConfig+0xbe>
 80033c4:	4b78      	ldr	r3, [pc, #480]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a77      	ldr	r2, [pc, #476]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b75      	ldr	r3, [pc, #468]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a74      	ldr	r2, [pc, #464]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	e00b      	b.n	80033f6 <HAL_RCC_OscConfig+0xd6>
 80033de:	4b72      	ldr	r3, [pc, #456]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a71      	ldr	r2, [pc, #452]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	4b6f      	ldr	r3, [pc, #444]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a6e      	ldr	r2, [pc, #440]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d013      	beq.n	8003426 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7fd fff7 	bl	80013f0 <HAL_GetTick>
 8003402:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003406:	f7fd fff3 	bl	80013f0 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b64      	cmp	r3, #100	; 0x64
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e3aa      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003418:	4b63      	ldr	r3, [pc, #396]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0xe6>
 8003424:	e014      	b.n	8003450 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003426:	f7fd ffe3 	bl	80013f0 <HAL_GetTick>
 800342a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800342e:	f7fd ffdf 	bl	80013f0 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b64      	cmp	r3, #100	; 0x64
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e396      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003440:	4b59      	ldr	r3, [pc, #356]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f0      	bne.n	800342e <HAL_RCC_OscConfig+0x10e>
 800344c:	e000      	b.n	8003450 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80cb 	beq.w	80035f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800345e:	4b52      	ldr	r3, [pc, #328]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003466:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003468:	4b4f      	ldr	r3, [pc, #316]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <HAL_RCC_OscConfig+0x164>
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	2b18      	cmp	r3, #24
 8003478:	d156      	bne.n	8003528 <HAL_RCC_OscConfig+0x208>
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d151      	bne.n	8003528 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003484:	4b48      	ldr	r3, [pc, #288]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_RCC_OscConfig+0x17c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e368      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800349c:	4b42      	ldr	r3, [pc, #264]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 0219 	bic.w	r2, r3, #25
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	493f      	ldr	r1, [pc, #252]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034ae:	f7fd ff9f 	bl	80013f0 <HAL_GetTick>
 80034b2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b6:	f7fd ff9b 	bl	80013f0 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e352      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034c8:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d4:	f7fd ffbc 	bl	8001450 <HAL_GetREVID>
 80034d8:	4603      	mov	r3, r0
 80034da:	f241 0203 	movw	r2, #4099	; 0x1003
 80034de:	4293      	cmp	r3, r2
 80034e0:	d817      	bhi.n	8003512 <HAL_RCC_OscConfig+0x1f2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b40      	cmp	r3, #64	; 0x40
 80034e8:	d108      	bne.n	80034fc <HAL_RCC_OscConfig+0x1dc>
 80034ea:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80034f2:	4a2d      	ldr	r2, [pc, #180]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80034f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034fa:	e07b      	b.n	80035f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fc:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	031b      	lsls	r3, r3, #12
 800350a:	4927      	ldr	r1, [pc, #156]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 800350c:	4313      	orrs	r3, r2
 800350e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003510:	e070      	b.n	80035f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003512:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	061b      	lsls	r3, r3, #24
 8003520:	4921      	ldr	r1, [pc, #132]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003522:	4313      	orrs	r3, r2
 8003524:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003526:	e065      	b.n	80035f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d048      	beq.n	80035c2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003530:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 0219 	bic.w	r2, r3, #25
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	491a      	ldr	r1, [pc, #104]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003542:	f7fd ff55 	bl	80013f0 <HAL_GetTick>
 8003546:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354a:	f7fd ff51 	bl	80013f0 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e308      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800355c:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003568:	f7fd ff72 	bl	8001450 <HAL_GetREVID>
 800356c:	4603      	mov	r3, r0
 800356e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003572:	4293      	cmp	r3, r2
 8003574:	d81a      	bhi.n	80035ac <HAL_RCC_OscConfig+0x28c>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b40      	cmp	r3, #64	; 0x40
 800357c:	d108      	bne.n	8003590 <HAL_RCC_OscConfig+0x270>
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003586:	4a08      	ldr	r2, [pc, #32]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800358c:	6053      	str	r3, [r2, #4]
 800358e:	e031      	b.n	80035f4 <HAL_RCC_OscConfig+0x2d4>
 8003590:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	031b      	lsls	r3, r3, #12
 800359e:	4902      	ldr	r1, [pc, #8]	; (80035a8 <HAL_RCC_OscConfig+0x288>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	604b      	str	r3, [r1, #4]
 80035a4:	e026      	b.n	80035f4 <HAL_RCC_OscConfig+0x2d4>
 80035a6:	bf00      	nop
 80035a8:	58024400 	.word	0x58024400
 80035ac:	4b9a      	ldr	r3, [pc, #616]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	061b      	lsls	r3, r3, #24
 80035ba:	4997      	ldr	r1, [pc, #604]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
 80035c0:	e018      	b.n	80035f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c2:	4b95      	ldr	r3, [pc, #596]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a94      	ldr	r2, [pc, #592]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ce:	f7fd ff0f 	bl	80013f0 <HAL_GetTick>
 80035d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d6:	f7fd ff0b 	bl	80013f0 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e2c2      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035e8:	4b8b      	ldr	r3, [pc, #556]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f0      	bne.n	80035d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80a9 	beq.w	8003754 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003602:	4b85      	ldr	r3, [pc, #532]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800360a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800360c:	4b82      	ldr	r3, [pc, #520]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d007      	beq.n	8003628 <HAL_RCC_OscConfig+0x308>
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b18      	cmp	r3, #24
 800361c:	d13a      	bne.n	8003694 <HAL_RCC_OscConfig+0x374>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d135      	bne.n	8003694 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003628:	4b7b      	ldr	r3, [pc, #492]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_OscConfig+0x320>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	2b80      	cmp	r3, #128	; 0x80
 800363a:	d001      	beq.n	8003640 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e296      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003640:	f7fd ff06 	bl	8001450 <HAL_GetREVID>
 8003644:	4603      	mov	r3, r0
 8003646:	f241 0203 	movw	r2, #4099	; 0x1003
 800364a:	4293      	cmp	r3, r2
 800364c:	d817      	bhi.n	800367e <HAL_RCC_OscConfig+0x35e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	2b20      	cmp	r3, #32
 8003654:	d108      	bne.n	8003668 <HAL_RCC_OscConfig+0x348>
 8003656:	4b70      	ldr	r3, [pc, #448]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800365e:	4a6e      	ldr	r2, [pc, #440]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003660:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003664:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003666:	e075      	b.n	8003754 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003668:	4b6b      	ldr	r3, [pc, #428]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	069b      	lsls	r3, r3, #26
 8003676:	4968      	ldr	r1, [pc, #416]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800367c:	e06a      	b.n	8003754 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800367e:	4b66      	ldr	r3, [pc, #408]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	061b      	lsls	r3, r3, #24
 800368c:	4962      	ldr	r1, [pc, #392]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800368e:	4313      	orrs	r3, r2
 8003690:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003692:	e05f      	b.n	8003754 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d042      	beq.n	8003722 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800369c:	4b5e      	ldr	r3, [pc, #376]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a5d      	ldr	r2, [pc, #372]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80036a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7fd fea2 	bl	80013f0 <HAL_GetTick>
 80036ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80036b0:	f7fd fe9e 	bl	80013f0 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e255      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036c2:	4b55      	ldr	r3, [pc, #340]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036ce:	f7fd febf 	bl	8001450 <HAL_GetREVID>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80036d8:	4293      	cmp	r3, r2
 80036da:	d817      	bhi.n	800370c <HAL_RCC_OscConfig+0x3ec>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d108      	bne.n	80036f6 <HAL_RCC_OscConfig+0x3d6>
 80036e4:	4b4c      	ldr	r3, [pc, #304]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80036ec:	4a4a      	ldr	r2, [pc, #296]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80036ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036f2:	6053      	str	r3, [r2, #4]
 80036f4:	e02e      	b.n	8003754 <HAL_RCC_OscConfig+0x434>
 80036f6:	4b48      	ldr	r3, [pc, #288]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	069b      	lsls	r3, r3, #26
 8003704:	4944      	ldr	r1, [pc, #272]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003706:	4313      	orrs	r3, r2
 8003708:	604b      	str	r3, [r1, #4]
 800370a:	e023      	b.n	8003754 <HAL_RCC_OscConfig+0x434>
 800370c:	4b42      	ldr	r3, [pc, #264]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	061b      	lsls	r3, r3, #24
 800371a:	493f      	ldr	r1, [pc, #252]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800371c:	4313      	orrs	r3, r2
 800371e:	60cb      	str	r3, [r1, #12]
 8003720:	e018      	b.n	8003754 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003722:	4b3d      	ldr	r3, [pc, #244]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a3c      	ldr	r2, [pc, #240]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800372c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7fd fe5f 	bl	80013f0 <HAL_GetTick>
 8003732:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003736:	f7fd fe5b 	bl	80013f0 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e212      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003748:	4b33      	ldr	r3, [pc, #204]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f0      	bne.n	8003736 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d036      	beq.n	80037ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d019      	beq.n	800379c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003768:	4b2b      	ldr	r3, [pc, #172]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800376a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376c:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7fd fe3c 	bl	80013f0 <HAL_GetTick>
 8003778:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800377c:	f7fd fe38 	bl	80013f0 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e1ef      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800378e:	4b22      	ldr	r3, [pc, #136]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x45c>
 800379a:	e018      	b.n	80037ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800379c:	4b1e      	ldr	r3, [pc, #120]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800379e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a0:	4a1d      	ldr	r2, [pc, #116]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a8:	f7fd fe22 	bl	80013f0 <HAL_GetTick>
 80037ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b0:	f7fd fe1e 	bl	80013f0 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e1d5      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037c2:	4b15      	ldr	r3, [pc, #84]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80037c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d039      	beq.n	800384e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d01c      	beq.n	800381c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037e2:	4b0d      	ldr	r3, [pc, #52]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80037e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037ee:	f7fd fdff 	bl	80013f0 <HAL_GetTick>
 80037f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80037f6:	f7fd fdfb 	bl	80013f0 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e1b2      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x4d6>
 8003814:	e01b      	b.n	800384e <HAL_RCC_OscConfig+0x52e>
 8003816:	bf00      	nop
 8003818:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800381c:	4b9b      	ldr	r3, [pc, #620]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a9a      	ldr	r2, [pc, #616]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003826:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003828:	f7fd fde2 	bl	80013f0 <HAL_GetTick>
 800382c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003830:	f7fd fdde 	bl	80013f0 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e195      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003842:	4b92      	ldr	r3, [pc, #584]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8081 	beq.w	800395e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800385c:	4b8c      	ldr	r3, [pc, #560]	; (8003a90 <HAL_RCC_OscConfig+0x770>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a8b      	ldr	r2, [pc, #556]	; (8003a90 <HAL_RCC_OscConfig+0x770>)
 8003862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003866:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003868:	f7fd fdc2 	bl	80013f0 <HAL_GetTick>
 800386c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003870:	f7fd fdbe 	bl	80013f0 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	; 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e175      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003882:	4b83      	ldr	r3, [pc, #524]	; (8003a90 <HAL_RCC_OscConfig+0x770>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d106      	bne.n	80038a4 <HAL_RCC_OscConfig+0x584>
 8003896:	4b7d      	ldr	r3, [pc, #500]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	4a7c      	ldr	r2, [pc, #496]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6713      	str	r3, [r2, #112]	; 0x70
 80038a2:	e02d      	b.n	8003900 <HAL_RCC_OscConfig+0x5e0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10c      	bne.n	80038c6 <HAL_RCC_OscConfig+0x5a6>
 80038ac:	4b77      	ldr	r3, [pc, #476]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	4a76      	ldr	r2, [pc, #472]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	; 0x70
 80038b8:	4b74      	ldr	r3, [pc, #464]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038bc:	4a73      	ldr	r2, [pc, #460]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038be:	f023 0304 	bic.w	r3, r3, #4
 80038c2:	6713      	str	r3, [r2, #112]	; 0x70
 80038c4:	e01c      	b.n	8003900 <HAL_RCC_OscConfig+0x5e0>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	d10c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x5c8>
 80038ce:	4b6f      	ldr	r3, [pc, #444]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	4a6e      	ldr	r2, [pc, #440]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038d4:	f043 0304 	orr.w	r3, r3, #4
 80038d8:	6713      	str	r3, [r2, #112]	; 0x70
 80038da:	4b6c      	ldr	r3, [pc, #432]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	4a6b      	ldr	r2, [pc, #428]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6713      	str	r3, [r2, #112]	; 0x70
 80038e6:	e00b      	b.n	8003900 <HAL_RCC_OscConfig+0x5e0>
 80038e8:	4b68      	ldr	r3, [pc, #416]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ec:	4a67      	ldr	r2, [pc, #412]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	6713      	str	r3, [r2, #112]	; 0x70
 80038f4:	4b65      	ldr	r3, [pc, #404]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f8:	4a64      	ldr	r2, [pc, #400]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038fa:	f023 0304 	bic.w	r3, r3, #4
 80038fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d015      	beq.n	8003934 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003908:	f7fd fd72 	bl	80013f0 <HAL_GetTick>
 800390c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800390e:	e00a      	b.n	8003926 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003910:	f7fd fd6e 	bl	80013f0 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	f241 3288 	movw	r2, #5000	; 0x1388
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e123      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003926:	4b59      	ldr	r3, [pc, #356]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0ee      	beq.n	8003910 <HAL_RCC_OscConfig+0x5f0>
 8003932:	e014      	b.n	800395e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003934:	f7fd fd5c 	bl	80013f0 <HAL_GetTick>
 8003938:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800393a:	e00a      	b.n	8003952 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800393c:	f7fd fd58 	bl	80013f0 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	; 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e10d      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003952:	4b4e      	ldr	r3, [pc, #312]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1ee      	bne.n	800393c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8102 	beq.w	8003b6c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003968:	4b48      	ldr	r3, [pc, #288]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003970:	2b18      	cmp	r3, #24
 8003972:	f000 80bd 	beq.w	8003af0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	2b02      	cmp	r3, #2
 800397c:	f040 809e 	bne.w	8003abc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003980:	4b42      	ldr	r3, [pc, #264]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a41      	ldr	r2, [pc, #260]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800398a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398c:	f7fd fd30 	bl	80013f0 <HAL_GetTick>
 8003990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003994:	f7fd fd2c 	bl	80013f0 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e0e3      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039a6:	4b39      	ldr	r3, [pc, #228]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039b2:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80039b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039b6:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <HAL_RCC_OscConfig+0x774>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	430a      	orrs	r2, r1
 80039c6:	4931      	ldr	r1, [pc, #196]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	628b      	str	r3, [r1, #40]	; 0x28
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	3b01      	subs	r3, #1
 80039d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039da:	3b01      	subs	r3, #1
 80039dc:	025b      	lsls	r3, r3, #9
 80039de:	b29b      	uxth	r3, r3
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	3b01      	subs	r3, #1
 80039e8:	041b      	lsls	r3, r3, #16
 80039ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f4:	3b01      	subs	r3, #1
 80039f6:	061b      	lsls	r3, r3, #24
 80039f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039fc:	4923      	ldr	r1, [pc, #140]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003a02:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a0e:	4b1f      	ldr	r3, [pc, #124]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a12:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a1a:	00d2      	lsls	r2, r2, #3
 8003a1c:	491b      	ldr	r1, [pc, #108]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a22:	4b1a      	ldr	r3, [pc, #104]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	f023 020c 	bic.w	r2, r3, #12
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	4917      	ldr	r1, [pc, #92]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a34:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	f023 0202 	bic.w	r2, r3, #2
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	4912      	ldr	r1, [pc, #72]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a46:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	4a10      	ldr	r2, [pc, #64]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a52:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	4a0d      	ldr	r2, [pc, #52]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003a6a:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	4a07      	ldr	r2, [pc, #28]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a04      	ldr	r2, [pc, #16]	; (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fd fcb5 	bl	80013f0 <HAL_GetTick>
 8003a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a88:	e011      	b.n	8003aae <HAL_RCC_OscConfig+0x78e>
 8003a8a:	bf00      	nop
 8003a8c:	58024400 	.word	0x58024400
 8003a90:	58024800 	.word	0x58024800
 8003a94:	fffffc0c 	.word	0xfffffc0c
 8003a98:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7fd fca8 	bl	80013f0 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e05f      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003aae:	4b32      	ldr	r3, [pc, #200]	; (8003b78 <HAL_RCC_OscConfig+0x858>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0f0      	beq.n	8003a9c <HAL_RCC_OscConfig+0x77c>
 8003aba:	e057      	b.n	8003b6c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abc:	4b2e      	ldr	r3, [pc, #184]	; (8003b78 <HAL_RCC_OscConfig+0x858>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a2d      	ldr	r2, [pc, #180]	; (8003b78 <HAL_RCC_OscConfig+0x858>)
 8003ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fd fc92 	bl	80013f0 <HAL_GetTick>
 8003acc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad0:	f7fd fc8e 	bl	80013f0 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e045      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ae2:	4b25      	ldr	r3, [pc, #148]	; (8003b78 <HAL_RCC_OscConfig+0x858>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x7b0>
 8003aee:	e03d      	b.n	8003b6c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003af0:	4b21      	ldr	r3, [pc, #132]	; (8003b78 <HAL_RCC_OscConfig+0x858>)
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003af6:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <HAL_RCC_OscConfig+0x858>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d031      	beq.n	8003b68 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f003 0203 	and.w	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d12a      	bne.n	8003b68 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d122      	bne.n	8003b68 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d11a      	bne.n	8003b68 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	0a5b      	lsrs	r3, r3, #9
 8003b36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d111      	bne.n	8003b68 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	0c1b      	lsrs	r3, r3, #16
 8003b48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d108      	bne.n	8003b68 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	0e1b      	lsrs	r3, r3, #24
 8003b5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b62:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3730      	adds	r7, #48	; 0x30
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	58024400 	.word	0x58024400

08003b7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e19c      	b.n	8003eca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b90:	4b8a      	ldr	r3, [pc, #552]	; (8003dbc <HAL_RCC_ClockConfig+0x240>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d910      	bls.n	8003bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b87      	ldr	r3, [pc, #540]	; (8003dbc <HAL_RCC_ClockConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 020f 	bic.w	r2, r3, #15
 8003ba6:	4985      	ldr	r1, [pc, #532]	; (8003dbc <HAL_RCC_ClockConfig+0x240>)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b83      	ldr	r3, [pc, #524]	; (8003dbc <HAL_RCC_ClockConfig+0x240>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e184      	b.n	8003eca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d010      	beq.n	8003bee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	4b7b      	ldr	r3, [pc, #492]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d908      	bls.n	8003bee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bdc:	4b78      	ldr	r3, [pc, #480]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	4975      	ldr	r1, [pc, #468]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d010      	beq.n	8003c1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	4b70      	ldr	r3, [pc, #448]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d908      	bls.n	8003c1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c0a:	4b6d      	ldr	r3, [pc, #436]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	496a      	ldr	r1, [pc, #424]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d010      	beq.n	8003c4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699a      	ldr	r2, [r3, #24]
 8003c2c:	4b64      	ldr	r3, [pc, #400]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d908      	bls.n	8003c4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c38:	4b61      	ldr	r3, [pc, #388]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	495e      	ldr	r1, [pc, #376]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d010      	beq.n	8003c78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69da      	ldr	r2, [r3, #28]
 8003c5a:	4b59      	ldr	r3, [pc, #356]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d908      	bls.n	8003c78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c66:	4b56      	ldr	r3, [pc, #344]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	4953      	ldr	r1, [pc, #332]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d010      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	4b4d      	ldr	r3, [pc, #308]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d908      	bls.n	8003ca6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b4a      	ldr	r3, [pc, #296]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	f023 020f 	bic.w	r2, r3, #15
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4947      	ldr	r1, [pc, #284]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d055      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003cb2:	4b43      	ldr	r3, [pc, #268]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	4940      	ldr	r1, [pc, #256]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ccc:	4b3c      	ldr	r3, [pc, #240]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d121      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0f6      	b.n	8003eca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d107      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ce4:	4b36      	ldr	r3, [pc, #216]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d115      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0ea      	b.n	8003eca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cfc:	4b30      	ldr	r3, [pc, #192]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d109      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0de      	b.n	8003eca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d0c:	4b2c      	ldr	r3, [pc, #176]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0d6      	b.n	8003eca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d1c:	4b28      	ldr	r3, [pc, #160]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f023 0207 	bic.w	r2, r3, #7
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4925      	ldr	r1, [pc, #148]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7fd fb5f 	bl	80013f0 <HAL_GetTick>
 8003d32:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d34:	e00a      	b.n	8003d4c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d36:	f7fd fb5b 	bl	80013f0 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e0be      	b.n	8003eca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4c:	4b1c      	ldr	r3, [pc, #112]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d1eb      	bne.n	8003d36 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d010      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d208      	bcs.n	8003d8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d7a:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f023 020f 	bic.w	r2, r3, #15
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	490e      	ldr	r1, [pc, #56]	; (8003dc0 <HAL_RCC_ClockConfig+0x244>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCC_ClockConfig+0x240>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d214      	bcs.n	8003dc4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <HAL_RCC_ClockConfig+0x240>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 020f 	bic.w	r2, r3, #15
 8003da2:	4906      	ldr	r1, [pc, #24]	; (8003dbc <HAL_RCC_ClockConfig+0x240>)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <HAL_RCC_ClockConfig+0x240>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e086      	b.n	8003eca <HAL_RCC_ClockConfig+0x34e>
 8003dbc:	52002000 	.word	0x52002000
 8003dc0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d010      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	4b3f      	ldr	r3, [pc, #252]	; (8003ed4 <HAL_RCC_ClockConfig+0x358>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d208      	bcs.n	8003df2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003de0:	4b3c      	ldr	r3, [pc, #240]	; (8003ed4 <HAL_RCC_ClockConfig+0x358>)
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	4939      	ldr	r1, [pc, #228]	; (8003ed4 <HAL_RCC_ClockConfig+0x358>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d010      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	4b34      	ldr	r3, [pc, #208]	; (8003ed4 <HAL_RCC_ClockConfig+0x358>)
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d208      	bcs.n	8003e20 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e0e:	4b31      	ldr	r3, [pc, #196]	; (8003ed4 <HAL_RCC_ClockConfig+0x358>)
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	492e      	ldr	r1, [pc, #184]	; (8003ed4 <HAL_RCC_ClockConfig+0x358>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d010      	beq.n	8003e4e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699a      	ldr	r2, [r3, #24]
 8003e30:	4b28      	ldr	r3, [pc, #160]	; (8003ed4 <HAL_RCC_ClockConfig+0x358>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d208      	bcs.n	8003e4e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e3c:	4b25      	ldr	r3, [pc, #148]	; (8003ed4 <HAL_RCC_ClockConfig+0x358>)
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	4922      	ldr	r1, [pc, #136]	; (8003ed4 <HAL_RCC_ClockConfig+0x358>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d010      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ed4 <HAL_RCC_ClockConfig+0x358>)
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d208      	bcs.n	8003e7c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <HAL_RCC_ClockConfig+0x358>)
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	4917      	ldr	r1, [pc, #92]	; (8003ed4 <HAL_RCC_ClockConfig+0x358>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e7c:	f000 f834 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	4b14      	ldr	r3, [pc, #80]	; (8003ed4 <HAL_RCC_ClockConfig+0x358>)
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	0a1b      	lsrs	r3, r3, #8
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	4912      	ldr	r1, [pc, #72]	; (8003ed8 <HAL_RCC_ClockConfig+0x35c>)
 8003e8e:	5ccb      	ldrb	r3, [r1, r3]
 8003e90:	f003 031f 	and.w	r3, r3, #31
 8003e94:	fa22 f303 	lsr.w	r3, r2, r3
 8003e98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e9a:	4b0e      	ldr	r3, [pc, #56]	; (8003ed4 <HAL_RCC_ClockConfig+0x358>)
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	4a0d      	ldr	r2, [pc, #52]	; (8003ed8 <HAL_RCC_ClockConfig+0x35c>)
 8003ea4:	5cd3      	ldrb	r3, [r2, r3]
 8003ea6:	f003 031f 	and.w	r3, r3, #31
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb0:	4a0a      	ldr	r2, [pc, #40]	; (8003edc <HAL_RCC_ClockConfig+0x360>)
 8003eb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003eb4:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <HAL_RCC_ClockConfig+0x364>)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003eba:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <HAL_RCC_ClockConfig+0x368>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fc ff6e 	bl	8000da0 <HAL_InitTick>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	58024400 	.word	0x58024400
 8003ed8:	0800c010 	.word	0x0800c010
 8003edc:	24000004 	.word	0x24000004
 8003ee0:	24000000 	.word	0x24000000
 8003ee4:	24000008 	.word	0x24000008

08003ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b089      	sub	sp, #36	; 0x24
 8003eec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eee:	4bb3      	ldr	r3, [pc, #716]	; (80041bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ef6:	2b18      	cmp	r3, #24
 8003ef8:	f200 8155 	bhi.w	80041a6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003efc:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003f69 	.word	0x08003f69
 8003f08:	080041a7 	.word	0x080041a7
 8003f0c:	080041a7 	.word	0x080041a7
 8003f10:	080041a7 	.word	0x080041a7
 8003f14:	080041a7 	.word	0x080041a7
 8003f18:	080041a7 	.word	0x080041a7
 8003f1c:	080041a7 	.word	0x080041a7
 8003f20:	080041a7 	.word	0x080041a7
 8003f24:	08003f8f 	.word	0x08003f8f
 8003f28:	080041a7 	.word	0x080041a7
 8003f2c:	080041a7 	.word	0x080041a7
 8003f30:	080041a7 	.word	0x080041a7
 8003f34:	080041a7 	.word	0x080041a7
 8003f38:	080041a7 	.word	0x080041a7
 8003f3c:	080041a7 	.word	0x080041a7
 8003f40:	080041a7 	.word	0x080041a7
 8003f44:	08003f95 	.word	0x08003f95
 8003f48:	080041a7 	.word	0x080041a7
 8003f4c:	080041a7 	.word	0x080041a7
 8003f50:	080041a7 	.word	0x080041a7
 8003f54:	080041a7 	.word	0x080041a7
 8003f58:	080041a7 	.word	0x080041a7
 8003f5c:	080041a7 	.word	0x080041a7
 8003f60:	080041a7 	.word	0x080041a7
 8003f64:	08003f9b 	.word	0x08003f9b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f68:	4b94      	ldr	r3, [pc, #592]	; (80041bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d009      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f74:	4b91      	ldr	r3, [pc, #580]	; (80041bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	08db      	lsrs	r3, r3, #3
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	4a90      	ldr	r2, [pc, #576]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
 8003f84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003f86:	e111      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f88:	4b8d      	ldr	r3, [pc, #564]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f8a:	61bb      	str	r3, [r7, #24]
    break;
 8003f8c:	e10e      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003f8e:	4b8d      	ldr	r3, [pc, #564]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f90:	61bb      	str	r3, [r7, #24]
    break;
 8003f92:	e10b      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003f94:	4b8c      	ldr	r3, [pc, #560]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003f96:	61bb      	str	r3, [r7, #24]
    break;
 8003f98:	e108      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f9a:	4b88      	ldr	r3, [pc, #544]	; (80041bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003fa4:	4b85      	ldr	r3, [pc, #532]	; (80041bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003fb0:	4b82      	ldr	r3, [pc, #520]	; (80041bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003fba:	4b80      	ldr	r3, [pc, #512]	; (80041bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fbe:	08db      	lsrs	r3, r3, #3
 8003fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	fb02 f303 	mul.w	r3, r2, r3
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 80e1 	beq.w	80041a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	f000 8083 	beq.w	80040ec <HAL_RCC_GetSysClockFreq+0x204>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	f200 80a1 	bhi.w	8004130 <HAL_RCC_GetSysClockFreq+0x248>
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_RCC_GetSysClockFreq+0x114>
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d056      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ffa:	e099      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ffc:	4b6f      	ldr	r3, [pc, #444]	; (80041bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b00      	cmp	r3, #0
 8004006:	d02d      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004008:	4b6c      	ldr	r3, [pc, #432]	; (80041bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	08db      	lsrs	r3, r3, #3
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	4a6b      	ldr	r2, [pc, #428]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
 8004018:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	ee07 3a90 	vmov	s15, r3
 8004020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	ee07 3a90 	vmov	s15, r3
 800402a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004032:	4b62      	ldr	r3, [pc, #392]	; (80041bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800403a:	ee07 3a90 	vmov	s15, r3
 800403e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004042:	ed97 6a02 	vldr	s12, [r7, #8]
 8004046:	eddf 5a61 	vldr	s11, [pc, #388]	; 80041cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800404a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800404e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800405a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004062:	e087      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80041d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004076:	4b51      	ldr	r3, [pc, #324]	; (80041bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004086:	ed97 6a02 	vldr	s12, [r7, #8]
 800408a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80041cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800408e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800409a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800409e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040a6:	e065      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80041d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80040b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ba:	4b40      	ldr	r3, [pc, #256]	; (80041bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80040ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80041cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80040d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040ea:	e043      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80041d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80040fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040fe:	4b2f      	ldr	r3, [pc, #188]	; (80041bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800410e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004112:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80041cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800411a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800411e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800412e:	e021      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800413a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80041d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800413e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004142:	4b1e      	ldr	r3, [pc, #120]	; (80041bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004152:	ed97 6a02 	vldr	s12, [r7, #8]
 8004156:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80041cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800415a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800415e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800416a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800416e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004172:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004174:	4b11      	ldr	r3, [pc, #68]	; (80041bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	0a5b      	lsrs	r3, r3, #9
 800417a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800417e:	3301      	adds	r3, #1
 8004180:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	ee07 3a90 	vmov	s15, r3
 8004188:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800418c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004198:	ee17 3a90 	vmov	r3, s15
 800419c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800419e:	e005      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61bb      	str	r3, [r7, #24]
    break;
 80041a4:	e002      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80041a6:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041a8:	61bb      	str	r3, [r7, #24]
    break;
 80041aa:	bf00      	nop
  }

  return sysclockfreq;
 80041ac:	69bb      	ldr	r3, [r7, #24]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3724      	adds	r7, #36	; 0x24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	58024400 	.word	0x58024400
 80041c0:	03d09000 	.word	0x03d09000
 80041c4:	003d0900 	.word	0x003d0900
 80041c8:	007a1200 	.word	0x007a1200
 80041cc:	46000000 	.word	0x46000000
 80041d0:	4c742400 	.word	0x4c742400
 80041d4:	4a742400 	.word	0x4a742400
 80041d8:	4af42400 	.word	0x4af42400

080041dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80041e2:	f7ff fe81 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 80041e6:	4602      	mov	r2, r0
 80041e8:	4b10      	ldr	r3, [pc, #64]	; (800422c <HAL_RCC_GetHCLKFreq+0x50>)
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	0a1b      	lsrs	r3, r3, #8
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	490f      	ldr	r1, [pc, #60]	; (8004230 <HAL_RCC_GetHCLKFreq+0x54>)
 80041f4:	5ccb      	ldrb	r3, [r1, r3]
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	fa22 f303 	lsr.w	r3, r2, r3
 80041fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004200:	4b0a      	ldr	r3, [pc, #40]	; (800422c <HAL_RCC_GetHCLKFreq+0x50>)
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	4a09      	ldr	r2, [pc, #36]	; (8004230 <HAL_RCC_GetHCLKFreq+0x54>)
 800420a:	5cd3      	ldrb	r3, [r2, r3]
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	fa22 f303 	lsr.w	r3, r2, r3
 8004216:	4a07      	ldr	r2, [pc, #28]	; (8004234 <HAL_RCC_GetHCLKFreq+0x58>)
 8004218:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800421a:	4a07      	ldr	r2, [pc, #28]	; (8004238 <HAL_RCC_GetHCLKFreq+0x5c>)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004220:	4b04      	ldr	r3, [pc, #16]	; (8004234 <HAL_RCC_GetHCLKFreq+0x58>)
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	58024400 	.word	0x58024400
 8004230:	0800c010 	.word	0x0800c010
 8004234:	24000004 	.word	0x24000004
 8004238:	24000000 	.word	0x24000000

0800423c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004240:	f7ff ffcc 	bl	80041dc <HAL_RCC_GetHCLKFreq>
 8004244:	4602      	mov	r2, r0
 8004246:	4b06      	ldr	r3, [pc, #24]	; (8004260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	091b      	lsrs	r3, r3, #4
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	4904      	ldr	r1, [pc, #16]	; (8004264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004252:	5ccb      	ldrb	r3, [r1, r3]
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800425c:	4618      	mov	r0, r3
 800425e:	bd80      	pop	{r7, pc}
 8004260:	58024400 	.word	0x58024400
 8004264:	0800c010 	.word	0x0800c010

08004268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800426c:	f7ff ffb6 	bl	80041dc <HAL_RCC_GetHCLKFreq>
 8004270:	4602      	mov	r2, r0
 8004272:	4b06      	ldr	r3, [pc, #24]	; (800428c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	0a1b      	lsrs	r3, r3, #8
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	4904      	ldr	r1, [pc, #16]	; (8004290 <HAL_RCC_GetPCLK2Freq+0x28>)
 800427e:	5ccb      	ldrb	r3, [r1, r3]
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004288:	4618      	mov	r0, r3
 800428a:	bd80      	pop	{r7, pc}
 800428c:	58024400 	.word	0x58024400
 8004290:	0800c010 	.word	0x0800c010

08004294 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	223f      	movs	r2, #63	; 0x3f
 80042a2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042a4:	4b1a      	ldr	r3, [pc, #104]	; (8004310 <HAL_RCC_GetClockConfig+0x7c>)
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f003 0207 	and.w	r2, r3, #7
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80042b0:	4b17      	ldr	r3, [pc, #92]	; (8004310 <HAL_RCC_GetClockConfig+0x7c>)
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80042bc:	4b14      	ldr	r3, [pc, #80]	; (8004310 <HAL_RCC_GetClockConfig+0x7c>)
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f003 020f 	and.w	r2, r3, #15
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80042c8:	4b11      	ldr	r3, [pc, #68]	; (8004310 <HAL_RCC_GetClockConfig+0x7c>)
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80042d4:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <HAL_RCC_GetClockConfig+0x7c>)
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80042e0:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <HAL_RCC_GetClockConfig+0x7c>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80042ec:	4b08      	ldr	r3, [pc, #32]	; (8004310 <HAL_RCC_GetClockConfig+0x7c>)
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_RCC_GetClockConfig+0x80>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 020f 	and.w	r2, r3, #15
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	601a      	str	r2, [r3, #0]
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	58024400 	.word	0x58024400
 8004314:	52002000 	.word	0x52002000

08004318 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004320:	2300      	movs	r3, #0
 8004322:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004324:	2300      	movs	r3, #0
 8004326:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d03f      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004338:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800433c:	d02a      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800433e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004342:	d824      	bhi.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004348:	d018      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800434a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800434e:	d81e      	bhi.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004358:	d007      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800435a:	e018      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800435c:	4ba3      	ldr	r3, [pc, #652]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	4aa2      	ldr	r2, [pc, #648]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004366:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004368:	e015      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3304      	adds	r3, #4
 800436e:	2102      	movs	r1, #2
 8004370:	4618      	mov	r0, r3
 8004372:	f001 fff9 	bl	8006368 <RCCEx_PLL2_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800437a:	e00c      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3324      	adds	r3, #36	; 0x24
 8004380:	2102      	movs	r1, #2
 8004382:	4618      	mov	r0, r3
 8004384:	f002 f8a2 	bl	80064cc <RCCEx_PLL3_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800438c:	e003      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	75fb      	strb	r3, [r7, #23]
      break;
 8004392:	e000      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004396:	7dfb      	ldrb	r3, [r7, #23]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800439c:	4b93      	ldr	r3, [pc, #588]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800439e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043a8:	4990      	ldr	r1, [pc, #576]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	650b      	str	r3, [r1, #80]	; 0x50
 80043ae:	e001      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b0:	7dfb      	ldrb	r3, [r7, #23]
 80043b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d03d      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d826      	bhi.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80043c8:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80043ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ce:	bf00      	nop
 80043d0:	080043e5 	.word	0x080043e5
 80043d4:	080043f3 	.word	0x080043f3
 80043d8:	08004405 	.word	0x08004405
 80043dc:	0800441d 	.word	0x0800441d
 80043e0:	0800441d 	.word	0x0800441d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043e4:	4b81      	ldr	r3, [pc, #516]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	4a80      	ldr	r2, [pc, #512]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043f0:	e015      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3304      	adds	r3, #4
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 ffb5 	bl	8006368 <RCCEx_PLL2_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004402:	e00c      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3324      	adds	r3, #36	; 0x24
 8004408:	2100      	movs	r1, #0
 800440a:	4618      	mov	r0, r3
 800440c:	f002 f85e 	bl	80064cc <RCCEx_PLL3_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004414:	e003      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	75fb      	strb	r3, [r7, #23]
      break;
 800441a:	e000      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800441c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d109      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004424:	4b71      	ldr	r3, [pc, #452]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004428:	f023 0207 	bic.w	r2, r3, #7
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004430:	496e      	ldr	r1, [pc, #440]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004432:	4313      	orrs	r3, r2
 8004434:	650b      	str	r3, [r1, #80]	; 0x50
 8004436:	e001      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	7dfb      	ldrb	r3, [r7, #23]
 800443a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004444:	2b00      	cmp	r3, #0
 8004446:	d042      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004450:	d02b      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004456:	d825      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004458:	2bc0      	cmp	r3, #192	; 0xc0
 800445a:	d028      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 800445c:	2bc0      	cmp	r3, #192	; 0xc0
 800445e:	d821      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004460:	2b80      	cmp	r3, #128	; 0x80
 8004462:	d016      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004464:	2b80      	cmp	r3, #128	; 0x80
 8004466:	d81d      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800446c:	2b40      	cmp	r3, #64	; 0x40
 800446e:	d007      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004470:	e018      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004472:	4b5e      	ldr	r3, [pc, #376]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	4a5d      	ldr	r2, [pc, #372]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800447c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800447e:	e017      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	2100      	movs	r1, #0
 8004486:	4618      	mov	r0, r3
 8004488:	f001 ff6e 	bl	8006368 <RCCEx_PLL2_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004490:	e00e      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3324      	adds	r3, #36	; 0x24
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f002 f817 	bl	80064cc <RCCEx_PLL3_Config>
 800449e:	4603      	mov	r3, r0
 80044a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80044a2:	e005      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	75fb      	strb	r3, [r7, #23]
      break;
 80044a8:	e002      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80044aa:	bf00      	nop
 80044ac:	e000      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80044ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d109      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80044b6:	4b4d      	ldr	r3, [pc, #308]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c2:	494a      	ldr	r1, [pc, #296]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	650b      	str	r3, [r1, #80]	; 0x50
 80044c8:	e001      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d049      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044e4:	d030      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80044e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044ea:	d82a      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80044ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80044f0:	d02c      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80044f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80044f6:	d824      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80044f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044fc:	d018      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80044fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004502:	d81e      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004508:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800450c:	d007      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800450e:	e018      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004510:	4b36      	ldr	r3, [pc, #216]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	4a35      	ldr	r2, [pc, #212]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800451a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800451c:	e017      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	2100      	movs	r1, #0
 8004524:	4618      	mov	r0, r3
 8004526:	f001 ff1f 	bl	8006368 <RCCEx_PLL2_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800452e:	e00e      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3324      	adds	r3, #36	; 0x24
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f001 ffc8 	bl	80064cc <RCCEx_PLL3_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004540:	e005      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	75fb      	strb	r3, [r7, #23]
      break;
 8004546:	e002      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004548:	bf00      	nop
 800454a:	e000      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800454c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800454e:	7dfb      	ldrb	r3, [r7, #23]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10a      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004554:	4b25      	ldr	r3, [pc, #148]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004558:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004562:	4922      	ldr	r1, [pc, #136]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004564:	4313      	orrs	r3, r2
 8004566:	658b      	str	r3, [r1, #88]	; 0x58
 8004568:	e001      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456a:	7dfb      	ldrb	r3, [r7, #23]
 800456c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004576:	2b00      	cmp	r3, #0
 8004578:	d04b      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004580:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004584:	d030      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004586:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800458a:	d82a      	bhi.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800458c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004590:	d02e      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004592:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004596:	d824      	bhi.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004598:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800459c:	d018      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800459e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045a2:	d81e      	bhi.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80045a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045ac:	d007      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80045ae:	e018      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045b0:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	4a0d      	ldr	r2, [pc, #52]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045bc:	e019      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3304      	adds	r3, #4
 80045c2:	2100      	movs	r1, #0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f001 fecf 	bl	8006368 <RCCEx_PLL2_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80045ce:	e010      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3324      	adds	r3, #36	; 0x24
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f001 ff78 	bl	80064cc <RCCEx_PLL3_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045e0:	e007      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	75fb      	strb	r3, [r7, #23]
      break;
 80045e6:	e004      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80045e8:	bf00      	nop
 80045ea:	e002      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80045ec:	58024400 	.word	0x58024400
      break;
 80045f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045f2:	7dfb      	ldrb	r3, [r7, #23]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10a      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80045f8:	4b99      	ldr	r3, [pc, #612]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004606:	4996      	ldr	r1, [pc, #600]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004608:	4313      	orrs	r3, r2
 800460a:	658b      	str	r3, [r1, #88]	; 0x58
 800460c:	e001      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460e:	7dfb      	ldrb	r3, [r7, #23]
 8004610:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d032      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004622:	2b30      	cmp	r3, #48	; 0x30
 8004624:	d01c      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004626:	2b30      	cmp	r3, #48	; 0x30
 8004628:	d817      	bhi.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800462a:	2b20      	cmp	r3, #32
 800462c:	d00c      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800462e:	2b20      	cmp	r3, #32
 8004630:	d813      	bhi.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004632:	2b00      	cmp	r3, #0
 8004634:	d016      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004636:	2b10      	cmp	r3, #16
 8004638:	d10f      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800463a:	4b89      	ldr	r3, [pc, #548]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	4a88      	ldr	r2, [pc, #544]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004644:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004646:	e00e      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3304      	adds	r3, #4
 800464c:	2102      	movs	r1, #2
 800464e:	4618      	mov	r0, r3
 8004650:	f001 fe8a 	bl	8006368 <RCCEx_PLL2_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004658:	e005      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	75fb      	strb	r3, [r7, #23]
      break;
 800465e:	e002      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004660:	bf00      	nop
 8004662:	e000      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004666:	7dfb      	ldrb	r3, [r7, #23]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d109      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800466c:	4b7c      	ldr	r3, [pc, #496]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800466e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004670:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004678:	4979      	ldr	r1, [pc, #484]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800467a:	4313      	orrs	r3, r2
 800467c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800467e:	e001      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d047      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004698:	d030      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800469a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800469e:	d82a      	bhi.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80046a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046a4:	d02c      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80046a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046aa:	d824      	bhi.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80046ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b0:	d018      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80046b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b6:	d81e      	bhi.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80046bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c0:	d007      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80046c2:	e018      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c4:	4b66      	ldr	r3, [pc, #408]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	4a65      	ldr	r2, [pc, #404]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80046d0:	e017      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3304      	adds	r3, #4
 80046d6:	2100      	movs	r1, #0
 80046d8:	4618      	mov	r0, r3
 80046da:	f001 fe45 	bl	8006368 <RCCEx_PLL2_Config>
 80046de:	4603      	mov	r3, r0
 80046e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80046e2:	e00e      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3324      	adds	r3, #36	; 0x24
 80046e8:	2100      	movs	r1, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 feee 	bl	80064cc <RCCEx_PLL3_Config>
 80046f0:	4603      	mov	r3, r0
 80046f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80046f4:	e005      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	75fb      	strb	r3, [r7, #23]
      break;
 80046fa:	e002      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80046fc:	bf00      	nop
 80046fe:	e000      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004700:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004702:	7dfb      	ldrb	r3, [r7, #23]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d109      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004708:	4b55      	ldr	r3, [pc, #340]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800470a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004714:	4952      	ldr	r1, [pc, #328]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004716:	4313      	orrs	r3, r2
 8004718:	650b      	str	r3, [r1, #80]	; 0x50
 800471a:	e001      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471c:	7dfb      	ldrb	r3, [r7, #23]
 800471e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d049      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004734:	d02e      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004736:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800473a:	d828      	bhi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800473c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004740:	d02a      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004742:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004746:	d822      	bhi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004748:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800474c:	d026      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800474e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004752:	d81c      	bhi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004758:	d010      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800475a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800475e:	d816      	bhi.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01d      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004768:	d111      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3304      	adds	r3, #4
 800476e:	2101      	movs	r1, #1
 8004770:	4618      	mov	r0, r3
 8004772:	f001 fdf9 	bl	8006368 <RCCEx_PLL2_Config>
 8004776:	4603      	mov	r3, r0
 8004778:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800477a:	e012      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3324      	adds	r3, #36	; 0x24
 8004780:	2101      	movs	r1, #1
 8004782:	4618      	mov	r0, r3
 8004784:	f001 fea2 	bl	80064cc <RCCEx_PLL3_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800478c:	e009      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	75fb      	strb	r3, [r7, #23]
      break;
 8004792:	e006      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004794:	bf00      	nop
 8004796:	e004      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004798:	bf00      	nop
 800479a:	e002      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800479c:	bf00      	nop
 800479e:	e000      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80047a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047a2:	7dfb      	ldrb	r3, [r7, #23]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d109      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80047a8:	4b2d      	ldr	r3, [pc, #180]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b4:	492a      	ldr	r1, [pc, #168]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	650b      	str	r3, [r1, #80]	; 0x50
 80047ba:	e001      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
 80047be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d04d      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047d6:	d02e      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80047d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047dc:	d828      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80047de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e2:	d02a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80047e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e8:	d822      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80047ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047ee:	d026      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80047f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047f4:	d81c      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80047f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047fa:	d010      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80047fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004800:	d816      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004802:	2b00      	cmp	r3, #0
 8004804:	d01d      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800480a:	d111      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3304      	adds	r3, #4
 8004810:	2101      	movs	r1, #1
 8004812:	4618      	mov	r0, r3
 8004814:	f001 fda8 	bl	8006368 <RCCEx_PLL2_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800481c:	e012      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3324      	adds	r3, #36	; 0x24
 8004822:	2101      	movs	r1, #1
 8004824:	4618      	mov	r0, r3
 8004826:	f001 fe51 	bl	80064cc <RCCEx_PLL3_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800482e:	e009      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	75fb      	strb	r3, [r7, #23]
      break;
 8004834:	e006      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004836:	bf00      	nop
 8004838:	e004      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800483a:	bf00      	nop
 800483c:	e002      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800483e:	bf00      	nop
 8004840:	e000      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004844:	7dfb      	ldrb	r3, [r7, #23]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10c      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800484a:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800484c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004858:	4901      	ldr	r1, [pc, #4]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800485a:	4313      	orrs	r3, r2
 800485c:	658b      	str	r3, [r1, #88]	; 0x58
 800485e:	e003      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004860:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004864:	7dfb      	ldrb	r3, [r7, #23]
 8004866:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d02f      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800487c:	d00e      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800487e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004882:	d814      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004884:	2b00      	cmp	r3, #0
 8004886:	d015      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004888:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800488c:	d10f      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800488e:	4baf      	ldr	r3, [pc, #700]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	4aae      	ldr	r2, [pc, #696]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004898:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800489a:	e00c      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3304      	adds	r3, #4
 80048a0:	2101      	movs	r1, #1
 80048a2:	4618      	mov	r0, r3
 80048a4:	f001 fd60 	bl	8006368 <RCCEx_PLL2_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80048ac:	e003      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	75fb      	strb	r3, [r7, #23]
      break;
 80048b2:	e000      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80048b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048b6:	7dfb      	ldrb	r3, [r7, #23]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d109      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048bc:	4ba3      	ldr	r3, [pc, #652]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048c8:	49a0      	ldr	r1, [pc, #640]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	650b      	str	r3, [r1, #80]	; 0x50
 80048ce:	e001      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
 80048d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d032      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d81b      	bhi.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80048e8:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004927 	.word	0x08004927
 80048f4:	08004901 	.word	0x08004901
 80048f8:	0800490f 	.word	0x0800490f
 80048fc:	08004927 	.word	0x08004927
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004900:	4b92      	ldr	r3, [pc, #584]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	4a91      	ldr	r2, [pc, #580]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800490a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800490c:	e00c      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	3304      	adds	r3, #4
 8004912:	2102      	movs	r1, #2
 8004914:	4618      	mov	r0, r3
 8004916:	f001 fd27 	bl	8006368 <RCCEx_PLL2_Config>
 800491a:	4603      	mov	r3, r0
 800491c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800491e:	e003      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	75fb      	strb	r3, [r7, #23]
      break;
 8004924:	e000      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004926:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004928:	7dfb      	ldrb	r3, [r7, #23]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800492e:	4b87      	ldr	r3, [pc, #540]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004932:	f023 0203 	bic.w	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	4984      	ldr	r1, [pc, #528]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800493c:	4313      	orrs	r3, r2
 800493e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004940:	e001      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004942:	7dfb      	ldrb	r3, [r7, #23]
 8004944:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 8086 	beq.w	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004954:	4b7e      	ldr	r3, [pc, #504]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a7d      	ldr	r2, [pc, #500]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800495a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004960:	f7fc fd46 	bl	80013f0 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004966:	e009      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004968:	f7fc fd42 	bl	80013f0 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	; 0x64
 8004974:	d902      	bls.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	75fb      	strb	r3, [r7, #23]
        break;
 800497a:	e005      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800497c:	4b74      	ldr	r3, [pc, #464]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0ef      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004988:	7dfb      	ldrb	r3, [r7, #23]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d166      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800498e:	4b6f      	ldr	r3, [pc, #444]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004990:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004998:	4053      	eors	r3, r2
 800499a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d013      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049a2:	4b6a      	ldr	r3, [pc, #424]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049aa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049ac:	4b67      	ldr	r3, [pc, #412]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b0:	4a66      	ldr	r2, [pc, #408]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049b8:	4b64      	ldr	r3, [pc, #400]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049bc:	4a63      	ldr	r2, [pc, #396]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80049c4:	4a61      	ldr	r2, [pc, #388]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d4:	d115      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d6:	f7fc fd0b 	bl	80013f0 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049dc:	e00b      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049de:	f7fc fd07 	bl	80013f0 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d902      	bls.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	75fb      	strb	r3, [r7, #23]
            break;
 80049f4:	e005      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049f6:	4b55      	ldr	r3, [pc, #340]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0ed      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d126      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a16:	d10d      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004a18:	4b4c      	ldr	r3, [pc, #304]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a26:	0919      	lsrs	r1, r3, #4
 8004a28:	4b4a      	ldr	r3, [pc, #296]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004a2a:	400b      	ands	r3, r1
 8004a2c:	4947      	ldr	r1, [pc, #284]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	610b      	str	r3, [r1, #16]
 8004a32:	e005      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004a34:	4b45      	ldr	r3, [pc, #276]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	4a44      	ldr	r2, [pc, #272]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a3e:	6113      	str	r3, [r2, #16]
 8004a40:	4b42      	ldr	r3, [pc, #264]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a4e:	493f      	ldr	r1, [pc, #252]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	670b      	str	r3, [r1, #112]	; 0x70
 8004a54:	e004      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
 8004a58:	75bb      	strb	r3, [r7, #22]
 8004a5a:	e001      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
 8004a5e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8085 	beq.w	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a72:	2b28      	cmp	r3, #40	; 0x28
 8004a74:	d866      	bhi.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004b59 	.word	0x08004b59
 8004a80:	08004b45 	.word	0x08004b45
 8004a84:	08004b45 	.word	0x08004b45
 8004a88:	08004b45 	.word	0x08004b45
 8004a8c:	08004b45 	.word	0x08004b45
 8004a90:	08004b45 	.word	0x08004b45
 8004a94:	08004b45 	.word	0x08004b45
 8004a98:	08004b45 	.word	0x08004b45
 8004a9c:	08004b21 	.word	0x08004b21
 8004aa0:	08004b45 	.word	0x08004b45
 8004aa4:	08004b45 	.word	0x08004b45
 8004aa8:	08004b45 	.word	0x08004b45
 8004aac:	08004b45 	.word	0x08004b45
 8004ab0:	08004b45 	.word	0x08004b45
 8004ab4:	08004b45 	.word	0x08004b45
 8004ab8:	08004b45 	.word	0x08004b45
 8004abc:	08004b33 	.word	0x08004b33
 8004ac0:	08004b45 	.word	0x08004b45
 8004ac4:	08004b45 	.word	0x08004b45
 8004ac8:	08004b45 	.word	0x08004b45
 8004acc:	08004b45 	.word	0x08004b45
 8004ad0:	08004b45 	.word	0x08004b45
 8004ad4:	08004b45 	.word	0x08004b45
 8004ad8:	08004b45 	.word	0x08004b45
 8004adc:	08004b59 	.word	0x08004b59
 8004ae0:	08004b45 	.word	0x08004b45
 8004ae4:	08004b45 	.word	0x08004b45
 8004ae8:	08004b45 	.word	0x08004b45
 8004aec:	08004b45 	.word	0x08004b45
 8004af0:	08004b45 	.word	0x08004b45
 8004af4:	08004b45 	.word	0x08004b45
 8004af8:	08004b45 	.word	0x08004b45
 8004afc:	08004b59 	.word	0x08004b59
 8004b00:	08004b45 	.word	0x08004b45
 8004b04:	08004b45 	.word	0x08004b45
 8004b08:	08004b45 	.word	0x08004b45
 8004b0c:	08004b45 	.word	0x08004b45
 8004b10:	08004b45 	.word	0x08004b45
 8004b14:	08004b45 	.word	0x08004b45
 8004b18:	08004b45 	.word	0x08004b45
 8004b1c:	08004b59 	.word	0x08004b59
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	2101      	movs	r1, #1
 8004b26:	4618      	mov	r0, r3
 8004b28:	f001 fc1e 	bl	8006368 <RCCEx_PLL2_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004b30:	e013      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3324      	adds	r3, #36	; 0x24
 8004b36:	2101      	movs	r1, #1
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 fcc7 	bl	80064cc <RCCEx_PLL3_Config>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004b42:	e00a      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	75fb      	strb	r3, [r7, #23]
      break;
 8004b48:	e007      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004b4a:	bf00      	nop
 8004b4c:	58024400 	.word	0x58024400
 8004b50:	58024800 	.word	0x58024800
 8004b54:	00ffffcf 	.word	0x00ffffcf
      break;
 8004b58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b5a:	7dfb      	ldrb	r3, [r7, #23]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d109      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004b60:	4b96      	ldr	r3, [pc, #600]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b64:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b6c:	4993      	ldr	r1, [pc, #588]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	654b      	str	r3, [r1, #84]	; 0x54
 8004b72:	e001      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b74:	7dfb      	ldrb	r3, [r7, #23]
 8004b76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d038      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b88:	2b05      	cmp	r3, #5
 8004b8a:	d821      	bhi.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004b8c:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004bd7 	.word	0x08004bd7
 8004b98:	08004bad 	.word	0x08004bad
 8004b9c:	08004bbf 	.word	0x08004bbf
 8004ba0:	08004bd7 	.word	0x08004bd7
 8004ba4:	08004bd7 	.word	0x08004bd7
 8004ba8:	08004bd7 	.word	0x08004bd7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f001 fbd8 	bl	8006368 <RCCEx_PLL2_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004bbc:	e00c      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3324      	adds	r3, #36	; 0x24
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f001 fc81 	bl	80064cc <RCCEx_PLL3_Config>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004bce:	e003      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd4:	e000      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004bd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004bde:	4b77      	ldr	r3, [pc, #476]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be2:	f023 0207 	bic.w	r2, r3, #7
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bea:	4974      	ldr	r1, [pc, #464]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	654b      	str	r3, [r1, #84]	; 0x54
 8004bf0:	e001      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf2:	7dfb      	ldrb	r3, [r7, #23]
 8004bf4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d03a      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c08:	2b05      	cmp	r3, #5
 8004c0a:	d821      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004c0c:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c12:	bf00      	nop
 8004c14:	08004c57 	.word	0x08004c57
 8004c18:	08004c2d 	.word	0x08004c2d
 8004c1c:	08004c3f 	.word	0x08004c3f
 8004c20:	08004c57 	.word	0x08004c57
 8004c24:	08004c57 	.word	0x08004c57
 8004c28:	08004c57 	.word	0x08004c57
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	2101      	movs	r1, #1
 8004c32:	4618      	mov	r0, r3
 8004c34:	f001 fb98 	bl	8006368 <RCCEx_PLL2_Config>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004c3c:	e00c      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3324      	adds	r3, #36	; 0x24
 8004c42:	2101      	movs	r1, #1
 8004c44:	4618      	mov	r0, r3
 8004c46:	f001 fc41 	bl	80064cc <RCCEx_PLL3_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004c4e:	e003      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	75fb      	strb	r3, [r7, #23]
      break;
 8004c54:	e000      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c58:	7dfb      	ldrb	r3, [r7, #23]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10a      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c5e:	4b57      	ldr	r3, [pc, #348]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c62:	f023 0207 	bic.w	r2, r3, #7
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6c:	4953      	ldr	r1, [pc, #332]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	658b      	str	r3, [r1, #88]	; 0x58
 8004c72:	e001      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c74:	7dfb      	ldrb	r3, [r7, #23]
 8004c76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d04b      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c8e:	d02e      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c94:	d828      	bhi.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9a:	d02a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca0:	d822      	bhi.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004ca2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ca6:	d026      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004ca8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cac:	d81c      	bhi.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cb2:	d010      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cb8:	d816      	bhi.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d01d      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cc2:	d111      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	2100      	movs	r1, #0
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f001 fb4c 	bl	8006368 <RCCEx_PLL2_Config>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004cd4:	e012      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3324      	adds	r3, #36	; 0x24
 8004cda:	2102      	movs	r1, #2
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 fbf5 	bl	80064cc <RCCEx_PLL3_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ce6:	e009      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	75fb      	strb	r3, [r7, #23]
      break;
 8004cec:	e006      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004cee:	bf00      	nop
 8004cf0:	e004      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004cf2:	bf00      	nop
 8004cf4:	e002      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004cf6:	bf00      	nop
 8004cf8:	e000      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cfc:	7dfb      	ldrb	r3, [r7, #23]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d02:	4b2e      	ldr	r3, [pc, #184]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d06:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d10:	492a      	ldr	r1, [pc, #168]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	654b      	str	r3, [r1, #84]	; 0x54
 8004d16:	e001      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
 8004d1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d04d      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d32:	d02e      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004d34:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d38:	d828      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3e:	d02a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d44:	d822      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004d46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d4a:	d026      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004d4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d50:	d81c      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d56:	d010      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d5c:	d816      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01d      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d66:	d111      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f001 fafa 	bl	8006368 <RCCEx_PLL2_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004d78:	e012      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3324      	adds	r3, #36	; 0x24
 8004d7e:	2102      	movs	r1, #2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f001 fba3 	bl	80064cc <RCCEx_PLL3_Config>
 8004d86:	4603      	mov	r3, r0
 8004d88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004d8a:	e009      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d90:	e006      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004d92:	bf00      	nop
 8004d94:	e004      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004d96:	bf00      	nop
 8004d98:	e002      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004d9a:	bf00      	nop
 8004d9c:	e000      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004da0:	7dfb      	ldrb	r3, [r7, #23]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10c      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004daa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004db4:	4901      	ldr	r1, [pc, #4]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	658b      	str	r3, [r1, #88]	; 0x58
 8004dba:	e003      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004dbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc0:	7dfb      	ldrb	r3, [r7, #23]
 8004dc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d04b      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dd6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004dda:	d02e      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004ddc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004de0:	d828      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de6:	d02a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dec:	d822      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004dee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004df2:	d026      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004df4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004df8:	d81c      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004dfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dfe:	d010      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e04:	d816      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01d      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0e:	d111      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3304      	adds	r3, #4
 8004e14:	2100      	movs	r1, #0
 8004e16:	4618      	mov	r0, r3
 8004e18:	f001 faa6 	bl	8006368 <RCCEx_PLL2_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004e20:	e012      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3324      	adds	r3, #36	; 0x24
 8004e26:	2102      	movs	r1, #2
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f001 fb4f 	bl	80064cc <RCCEx_PLL3_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004e32:	e009      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	75fb      	strb	r3, [r7, #23]
      break;
 8004e38:	e006      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004e3a:	bf00      	nop
 8004e3c:	e004      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004e3e:	bf00      	nop
 8004e40:	e002      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004e42:	bf00      	nop
 8004e44:	e000      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10a      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e4e:	4b9d      	ldr	r3, [pc, #628]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e5c:	4999      	ldr	r1, [pc, #612]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	658b      	str	r3, [r1, #88]	; 0x58
 8004e62:	e001      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e64:	7dfb      	ldrb	r3, [r7, #23]
 8004e66:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d01a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e7e:	d10a      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3324      	adds	r3, #36	; 0x24
 8004e84:	2102      	movs	r1, #2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f001 fb20 	bl	80064cc <RCCEx_PLL3_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004e96:	4b8b      	ldr	r3, [pc, #556]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ea4:	4987      	ldr	r1, [pc, #540]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01a      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec0:	d10a      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3324      	adds	r3, #36	; 0x24
 8004ec6:	2102      	movs	r1, #2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f001 faff 	bl	80064cc <RCCEx_PLL3_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ed8:	4b7a      	ldr	r3, [pc, #488]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004edc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee6:	4977      	ldr	r1, [pc, #476]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d034      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004efe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f02:	d01d      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f08:	d817      	bhi.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f12:	d009      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004f14:	e011      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f001 fa23 	bl	8006368 <RCCEx_PLL2_Config>
 8004f22:	4603      	mov	r3, r0
 8004f24:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004f26:	e00c      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3324      	adds	r3, #36	; 0x24
 8004f2c:	2102      	movs	r1, #2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f001 facc 	bl	80064cc <RCCEx_PLL3_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004f38:	e003      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f3e:	e000      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f48:	4b5e      	ldr	r3, [pc, #376]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f56:	495b      	ldr	r1, [pc, #364]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	658b      	str	r3, [r1, #88]	; 0x58
 8004f5c:	e001      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
 8004f60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d033      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f78:	d01c      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004f7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f7e:	d816      	bhi.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004f80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f84:	d003      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004f86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f8a:	d007      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004f8c:	e00f      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f8e:	4b4d      	ldr	r3, [pc, #308]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	4a4c      	ldr	r2, [pc, #304]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004f9a:	e00c      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3324      	adds	r3, #36	; 0x24
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f001 fa92 	bl	80064cc <RCCEx_PLL3_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004fac:	e003      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10a      	bne.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fbc:	4b41      	ldr	r3, [pc, #260]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fca:	493e      	ldr	r1, [pc, #248]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	654b      	str	r3, [r1, #84]	; 0x54
 8004fd0:	e001      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd2:	7dfb      	ldrb	r3, [r7, #23]
 8004fd4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d029      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fee:	d007      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004ff0:	e00f      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff2:	4b34      	ldr	r3, [pc, #208]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	4a33      	ldr	r2, [pc, #204]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004ffe:	e00b      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3304      	adds	r3, #4
 8005004:	2102      	movs	r1, #2
 8005006:	4618      	mov	r0, r3
 8005008:	f001 f9ae 	bl	8006368 <RCCEx_PLL2_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005010:	e002      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	75fb      	strb	r3, [r7, #23]
      break;
 8005016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005018:	7dfb      	ldrb	r3, [r7, #23]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800501e:	4b29      	ldr	r3, [pc, #164]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005022:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502a:	4926      	ldr	r1, [pc, #152]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800502c:	4313      	orrs	r3, r2
 800502e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005030:	e001      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005032:	7dfb      	ldrb	r3, [r7, #23]
 8005034:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3324      	adds	r3, #36	; 0x24
 8005046:	2102      	movs	r1, #2
 8005048:	4618      	mov	r0, r3
 800504a:	f001 fa3f 	bl	80064cc <RCCEx_PLL3_Config>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d033      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005068:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800506c:	d017      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800506e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005072:	d811      	bhi.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005078:	d013      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800507a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800507e:	d80b      	bhi.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d010      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005088:	d106      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800508a:	4b0e      	ldr	r3, [pc, #56]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800508c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508e:	4a0d      	ldr	r2, [pc, #52]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005094:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005096:	e007      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	75fb      	strb	r3, [r7, #23]
      break;
 800509c:	e004      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800509e:	bf00      	nop
 80050a0:	e002      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80050a2:	bf00      	nop
 80050a4:	e000      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80050a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050a8:	7dfb      	ldrb	r3, [r7, #23]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10c      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050ae:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ba:	4902      	ldr	r1, [pc, #8]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	654b      	str	r3, [r1, #84]	; 0x54
 80050c0:	e004      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80050c2:	bf00      	nop
 80050c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
 80050ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d008      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050d8:	4b31      	ldr	r3, [pc, #196]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e4:	492e      	ldr	r1, [pc, #184]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80050f6:	4b2a      	ldr	r3, [pc, #168]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005104:	4926      	ldr	r1, [pc, #152]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005106:	4313      	orrs	r3, r2
 8005108:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d008      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005116:	4b22      	ldr	r3, [pc, #136]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005122:	491f      	ldr	r1, [pc, #124]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005124:	4313      	orrs	r3, r2
 8005126:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00d      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005134:	4b1a      	ldr	r3, [pc, #104]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	4a19      	ldr	r2, [pc, #100]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800513a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800513e:	6113      	str	r3, [r2, #16]
 8005140:	4b17      	ldr	r3, [pc, #92]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800514a:	4915      	ldr	r1, [pc, #84]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800514c:	4313      	orrs	r3, r2
 800514e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	da08      	bge.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005158:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800515a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005164:	490e      	ldr	r1, [pc, #56]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005166:	4313      	orrs	r3, r2
 8005168:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d009      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005176:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005184:	4906      	ldr	r1, [pc, #24]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005186:	4313      	orrs	r3, r2
 8005188:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800518a:	7dbb      	ldrb	r3, [r7, #22]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	e000      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	58024400 	.word	0x58024400

080051a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b090      	sub	sp, #64	; 0x40
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b2:	f040 8095 	bne.w	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80051b6:	4b97      	ldr	r3, [pc, #604]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80051b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	f200 8088 	bhi.w	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080051e5 	.word	0x080051e5
 80051d4:	0800520d 	.word	0x0800520d
 80051d8:	08005235 	.word	0x08005235
 80051dc:	080052d1 	.word	0x080052d1
 80051e0:	0800525d 	.word	0x0800525d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80051e4:	4b8b      	ldr	r3, [pc, #556]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051f0:	d108      	bne.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 ff64 	bl	80060c4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005200:	f000 bc94 	b.w	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005208:	f000 bc90 	b.w	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800520c:	4b81      	ldr	r3, [pc, #516]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005214:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005218:	d108      	bne.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800521a:	f107 0318 	add.w	r3, r7, #24
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fca8 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005228:	f000 bc80 	b.w	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800522c:	2300      	movs	r3, #0
 800522e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005230:	f000 bc7c 	b.w	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005234:	4b77      	ldr	r3, [pc, #476]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800523c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005240:	d108      	bne.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005242:	f107 030c 	add.w	r3, r7, #12
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fde8 	bl	8005e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005250:	f000 bc6c 	b.w	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005258:	f000 bc68 	b.w	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800525c:	4b6d      	ldr	r3, [pc, #436]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800525e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005260:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005264:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005266:	4b6b      	ldr	r3, [pc, #428]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b04      	cmp	r3, #4
 8005270:	d10c      	bne.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005274:	2b00      	cmp	r3, #0
 8005276:	d109      	bne.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005278:	4b66      	ldr	r3, [pc, #408]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	08db      	lsrs	r3, r3, #3
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	4a65      	ldr	r2, [pc, #404]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
 8005288:	63fb      	str	r3, [r7, #60]	; 0x3c
 800528a:	e01f      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800528c:	4b61      	ldr	r3, [pc, #388]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005298:	d106      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800529a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052a0:	d102      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80052a2:	4b5e      	ldr	r3, [pc, #376]	; (800541c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052a6:	e011      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052a8:	4b5a      	ldr	r3, [pc, #360]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052b4:	d106      	bne.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80052b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052bc:	d102      	bne.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80052be:	4b58      	ldr	r3, [pc, #352]	; (8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80052c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c2:	e003      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80052c8:	f000 bc30 	b.w	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80052cc:	f000 bc2e 	b.w	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80052d0:	4b54      	ldr	r3, [pc, #336]	; (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80052d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052d4:	f000 bc2a 	b.w	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80052d8:	2300      	movs	r3, #0
 80052da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052dc:	f000 bc26 	b.w	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e6:	f040 809f 	bne.w	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80052ea:	4b4a      	ldr	r3, [pc, #296]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80052ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ee:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80052f2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fa:	d04d      	beq.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005302:	f200 8084 	bhi.w	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	2bc0      	cmp	r3, #192	; 0xc0
 800530a:	d07d      	beq.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	2bc0      	cmp	r3, #192	; 0xc0
 8005310:	d87d      	bhi.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	2b80      	cmp	r3, #128	; 0x80
 8005316:	d02d      	beq.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	2b80      	cmp	r3, #128	; 0x80
 800531c:	d877      	bhi.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	d012      	beq.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800532a:	e070      	b.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800532c:	4b39      	ldr	r3, [pc, #228]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005334:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005338:	d107      	bne.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800533a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fec0 	bl	80060c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005348:	e3f0      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800534e:	e3ed      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005350:	4b30      	ldr	r3, [pc, #192]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800535c:	d107      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800535e:	f107 0318 	add.w	r3, r7, #24
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fc06 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800536c:	e3de      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005372:	e3db      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005374:	4b27      	ldr	r3, [pc, #156]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800537c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005380:	d107      	bne.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005382:	f107 030c 	add.w	r3, r7, #12
 8005386:	4618      	mov	r0, r3
 8005388:	f000 fd48 	bl	8005e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005390:	e3cc      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005396:	e3c9      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005398:	4b1e      	ldr	r3, [pc, #120]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800539a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053a0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053a2:	4b1c      	ldr	r3, [pc, #112]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d10c      	bne.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80053ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d109      	bne.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053b4:	4b17      	ldr	r3, [pc, #92]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	08db      	lsrs	r3, r3, #3
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	4a16      	ldr	r2, [pc, #88]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80053c0:	fa22 f303 	lsr.w	r3, r2, r3
 80053c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c6:	e01e      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053c8:	4b12      	ldr	r3, [pc, #72]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d4:	d106      	bne.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80053d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053dc:	d102      	bne.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80053de:	4b0f      	ldr	r3, [pc, #60]	; (800541c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e2:	e010      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053e4:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053f0:	d106      	bne.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80053f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053f8:	d102      	bne.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80053fa:	4b09      	ldr	r3, [pc, #36]	; (8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80053fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053fe:	e002      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005400:	2300      	movs	r3, #0
 8005402:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005404:	e392      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005406:	e391      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005408:	4b06      	ldr	r3, [pc, #24]	; (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800540a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800540c:	e38e      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800540e:	2300      	movs	r3, #0
 8005410:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005412:	e38b      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005414:	58024400 	.word	0x58024400
 8005418:	03d09000 	.word	0x03d09000
 800541c:	003d0900 	.word	0x003d0900
 8005420:	007a1200 	.word	0x007a1200
 8005424:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800542e:	f040 809c 	bne.w	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005432:	4b9d      	ldr	r3, [pc, #628]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005436:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800543a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005442:	d054      	beq.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800544a:	f200 808b 	bhi.w	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005454:	f000 8083 	beq.w	800555e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8005458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800545e:	f200 8081 	bhi.w	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005468:	d02f      	beq.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005470:	d878      	bhi.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800547e:	d012      	beq.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8005480:	e070      	b.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005482:	4b89      	ldr	r3, [pc, #548]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800548a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800548e:	d107      	bne.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fe15 	bl	80060c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800549e:	e345      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80054a0:	2300      	movs	r3, #0
 80054a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054a4:	e342      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054a6:	4b80      	ldr	r3, [pc, #512]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b2:	d107      	bne.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054b4:	f107 0318 	add.w	r3, r7, #24
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fb5b 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054c2:	e333      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054c8:	e330      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054ca:	4b77      	ldr	r3, [pc, #476]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d6:	d107      	bne.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054d8:	f107 030c 	add.w	r3, r7, #12
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fc9d 	bl	8005e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054e6:	e321      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054ec:	e31e      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80054ee:	4b6e      	ldr	r3, [pc, #440]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80054f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054f6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054f8:	4b6b      	ldr	r3, [pc, #428]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b04      	cmp	r3, #4
 8005502:	d10c      	bne.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800550a:	4b67      	ldr	r3, [pc, #412]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	08db      	lsrs	r3, r3, #3
 8005510:	f003 0303 	and.w	r3, r3, #3
 8005514:	4a65      	ldr	r2, [pc, #404]	; (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005516:	fa22 f303 	lsr.w	r3, r2, r3
 800551a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800551c:	e01e      	b.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800551e:	4b62      	ldr	r3, [pc, #392]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800552a:	d106      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005532:	d102      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005534:	4b5e      	ldr	r3, [pc, #376]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005538:	e010      	b.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800553a:	4b5b      	ldr	r3, [pc, #364]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005542:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005546:	d106      	bne.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800554e:	d102      	bne.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005550:	4b58      	ldr	r3, [pc, #352]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005554:	e002      	b.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800555a:	e2e7      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800555c:	e2e6      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800555e:	4b56      	ldr	r3, [pc, #344]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005560:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005562:	e2e3      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005564:	2300      	movs	r3, #0
 8005566:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005568:	e2e0      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005570:	f040 80a7 	bne.w	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005574:	4b4c      	ldr	r3, [pc, #304]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005578:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800557c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005584:	d055      	beq.n	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800558c:	f200 8096 	bhi.w	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005596:	f000 8084 	beq.w	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055a0:	f200 808c 	bhi.w	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055aa:	d030      	beq.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055b2:	f200 8083 	bhi.w	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d004      	beq.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055c2:	d012      	beq.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80055c4:	e07a      	b.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055c6:	4b38      	ldr	r3, [pc, #224]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055d2:	d107      	bne.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 fd73 	bl	80060c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055e2:	e2a3      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055e8:	e2a0      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055ea:	4b2f      	ldr	r3, [pc, #188]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055f6:	d107      	bne.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055f8:	f107 0318 	add.w	r3, r7, #24
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 fab9 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005606:	e291      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800560c:	e28e      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800560e:	4b26      	ldr	r3, [pc, #152]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800561a:	d107      	bne.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800561c:	f107 030c 	add.w	r3, r7, #12
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fbfb 	bl	8005e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800562a:	e27f      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005630:	e27c      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005632:	4b1d      	ldr	r3, [pc, #116]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005636:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800563a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800563c:	4b1a      	ldr	r3, [pc, #104]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b04      	cmp	r3, #4
 8005646:	d10c      	bne.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800564e:	4b16      	ldr	r3, [pc, #88]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	08db      	lsrs	r3, r3, #3
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	4a14      	ldr	r2, [pc, #80]	; (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800565a:	fa22 f303 	lsr.w	r3, r2, r3
 800565e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005660:	e01e      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005662:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800566e:	d106      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8005670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005672:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005676:	d102      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005678:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800567a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800567c:	e010      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800567e:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005686:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800568a:	d106      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800568c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005692:	d102      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005694:	4b07      	ldr	r3, [pc, #28]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005698:	e002      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800569a:	2300      	movs	r3, #0
 800569c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800569e:	e245      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80056a0:	e244      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80056a2:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80056a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056a6:	e241      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80056a8:	58024400 	.word	0x58024400
 80056ac:	03d09000 	.word	0x03d09000
 80056b0:	003d0900 	.word	0x003d0900
 80056b4:	007a1200 	.word	0x007a1200
 80056b8:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056c0:	e234      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c8:	f040 809c 	bne.w	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80056cc:	4b9b      	ldr	r3, [pc, #620]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80056ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80056d4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056dc:	d054      	beq.n	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056e4:	f200 808b 	bhi.w	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056ee:	f000 8083 	beq.w	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056f8:	f200 8081 	bhi.w	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80056fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005702:	d02f      	beq.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8005704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570a:	d878      	bhi.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800570c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570e:	2b00      	cmp	r3, #0
 8005710:	d004      	beq.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005718:	d012      	beq.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800571a:	e070      	b.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800571c:	4b87      	ldr	r3, [pc, #540]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005724:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005728:	d107      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800572a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800572e:	4618      	mov	r0, r3
 8005730:	f000 fcc8 	bl	80060c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005738:	e1f8      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800573a:	2300      	movs	r3, #0
 800573c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800573e:	e1f5      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005740:	4b7e      	ldr	r3, [pc, #504]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800574c:	d107      	bne.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800574e:	f107 0318 	add.w	r3, r7, #24
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fa0e 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800575c:	e1e6      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800575e:	2300      	movs	r3, #0
 8005760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005762:	e1e3      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005764:	4b75      	ldr	r3, [pc, #468]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800576c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005770:	d107      	bne.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005772:	f107 030c 	add.w	r3, r7, #12
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fb50 	bl	8005e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005780:	e1d4      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005782:	2300      	movs	r3, #0
 8005784:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005786:	e1d1      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005788:	4b6c      	ldr	r3, [pc, #432]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800578a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005790:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005792:	4b6a      	ldr	r3, [pc, #424]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b04      	cmp	r3, #4
 800579c:	d10c      	bne.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d109      	bne.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057a4:	4b65      	ldr	r3, [pc, #404]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	08db      	lsrs	r3, r3, #3
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	4a64      	ldr	r2, [pc, #400]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80057b0:	fa22 f303 	lsr.w	r3, r2, r3
 80057b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b6:	e01e      	b.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057b8:	4b60      	ldr	r3, [pc, #384]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c4:	d106      	bne.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80057c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057cc:	d102      	bne.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80057ce:	4b5d      	ldr	r3, [pc, #372]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80057d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d2:	e010      	b.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057d4:	4b59      	ldr	r3, [pc, #356]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057e0:	d106      	bne.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80057e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057e8:	d102      	bne.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80057ea:	4b57      	ldr	r3, [pc, #348]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80057ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ee:	e002      	b.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80057f4:	e19a      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80057f6:	e199      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80057f8:	4b54      	ldr	r3, [pc, #336]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057fc:	e196      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80057fe:	2300      	movs	r3, #0
 8005800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005802:	e193      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800580a:	d173      	bne.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800580c:	4b4b      	ldr	r3, [pc, #300]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800580e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005814:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800581c:	d02f      	beq.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005824:	d863      	bhi.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	2b00      	cmp	r3, #0
 800582a:	d004      	beq.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005832:	d012      	beq.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8005834:	e05b      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005836:	4b41      	ldr	r3, [pc, #260]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800583e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005842:	d107      	bne.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005844:	f107 0318 	add.w	r3, r7, #24
 8005848:	4618      	mov	r0, r3
 800584a:	f000 f993 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005852:	e16b      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005854:	2300      	movs	r3, #0
 8005856:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005858:	e168      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800585a:	4b38      	ldr	r3, [pc, #224]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005862:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005866:	d107      	bne.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005868:	f107 030c 	add.w	r3, r7, #12
 800586c:	4618      	mov	r0, r3
 800586e:	f000 fad5 	bl	8005e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005876:	e159      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005878:	2300      	movs	r3, #0
 800587a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800587c:	e156      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800587e:	4b2f      	ldr	r3, [pc, #188]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005882:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005886:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005888:	4b2c      	ldr	r3, [pc, #176]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b04      	cmp	r3, #4
 8005892:	d10c      	bne.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8005894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800589a:	4b28      	ldr	r3, [pc, #160]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	08db      	lsrs	r3, r3, #3
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	4a26      	ldr	r2, [pc, #152]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80058a6:	fa22 f303 	lsr.w	r3, r2, r3
 80058aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ac:	e01e      	b.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058ae:	4b23      	ldr	r3, [pc, #140]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ba:	d106      	bne.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80058bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058c2:	d102      	bne.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80058c4:	4b1f      	ldr	r3, [pc, #124]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80058c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058c8:	e010      	b.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058ca:	4b1c      	ldr	r3, [pc, #112]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058d6:	d106      	bne.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80058d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058de:	d102      	bne.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80058e0:	4b19      	ldr	r3, [pc, #100]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80058e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058e4:	e002      	b.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80058ea:	e11f      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80058ec:	e11e      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80058ee:	2300      	movs	r3, #0
 80058f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058f2:	e11b      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058fa:	d13e      	bne.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80058fc:	4b0f      	ldr	r3, [pc, #60]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005904:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005912:	d01d      	beq.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005914:	e02e      	b.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005916:	4b09      	ldr	r3, [pc, #36]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005922:	d107      	bne.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fbcb 	bl	80060c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005932:	e0fb      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005938:	e0f8      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800593a:	bf00      	nop
 800593c:	58024400 	.word	0x58024400
 8005940:	03d09000 	.word	0x03d09000
 8005944:	003d0900 	.word	0x003d0900
 8005948:	007a1200 	.word	0x007a1200
 800594c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005950:	4b79      	ldr	r3, [pc, #484]	; (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005958:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800595c:	d107      	bne.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800595e:	f107 0318 	add.w	r3, r7, #24
 8005962:	4618      	mov	r0, r3
 8005964:	f000 f906 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800596c:	e0de      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800596e:	2300      	movs	r3, #0
 8005970:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005972:	e0db      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005978:	e0d8      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005980:	f040 8085 	bne.w	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005984:	4b6c      	ldr	r3, [pc, #432]	; (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005988:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800598c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005994:	d06b      	beq.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800599c:	d874      	bhi.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a4:	d056      	beq.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ac:	d86c      	bhi.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059b4:	d03b      	beq.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059bc:	d864      	bhi.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059c4:	d021      	beq.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059cc:	d85c      	bhi.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80059ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d004      	beq.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80059d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059da:	d004      	beq.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80059dc:	e054      	b.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80059de:	f000 f8b3 	bl	8005b48 <HAL_RCCEx_GetD3PCLK1Freq>
 80059e2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80059e4:	e0a2      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059e6:	4b54      	ldr	r3, [pc, #336]	; (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059f2:	d107      	bne.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059f4:	f107 0318 	add.w	r3, r7, #24
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 f8bb 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a02:	e093      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a08:	e090      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a0a:	4b4b      	ldr	r3, [pc, #300]	; (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a16:	d107      	bne.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a18:	f107 030c 	add.w	r3, r7, #12
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 f9fd 	bl	8005e1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a26:	e081      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a2c:	e07e      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a2e:	4b42      	ldr	r3, [pc, #264]	; (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d109      	bne.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a3a:	4b3f      	ldr	r3, [pc, #252]	; (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	08db      	lsrs	r3, r3, #3
 8005a40:	f003 0303 	and.w	r3, r3, #3
 8005a44:	4a3d      	ldr	r2, [pc, #244]	; (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005a46:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a4c:	e06e      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a52:	e06b      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005a54:	4b38      	ldr	r3, [pc, #224]	; (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a60:	d102      	bne.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8005a62:	4b37      	ldr	r3, [pc, #220]	; (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005a64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a66:	e061      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a6c:	e05e      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a6e:	4b32      	ldr	r3, [pc, #200]	; (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a7a:	d102      	bne.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8005a7c:	4b31      	ldr	r3, [pc, #196]	; (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a80:	e054      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a86:	e051      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a8c:	e04e      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a94:	d148      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005a96:	4b28      	ldr	r3, [pc, #160]	; (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a9e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aa6:	d02a      	beq.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aae:	d838      	bhi.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8005ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d004      	beq.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005abc:	d00d      	beq.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8005abe:	e030      	b.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ac0:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005acc:	d102      	bne.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8005ace:	4b1d      	ldr	r3, [pc, #116]	; (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ad2:	e02b      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ad8:	e028      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ada:	4b17      	ldr	r3, [pc, #92]	; (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ae6:	d107      	bne.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fae9 	bl	80060c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005af6:	e019      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005afc:	e016      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005afe:	4b0e      	ldr	r3, [pc, #56]	; (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b0a:	d107      	bne.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b0c:	f107 0318 	add.w	r3, r7, #24
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 f82f 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b1a:	e007      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b20:	e004      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b26:	e001      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3740      	adds	r7, #64	; 0x40
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	58024400 	.word	0x58024400
 8005b3c:	03d09000 	.word	0x03d09000
 8005b40:	003d0900 	.word	0x003d0900
 8005b44:	007a1200 	.word	0x007a1200

08005b48 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b4c:	f7fe fb46 	bl	80041dc <HAL_RCC_GetHCLKFreq>
 8005b50:	4602      	mov	r2, r0
 8005b52:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	091b      	lsrs	r3, r3, #4
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	4904      	ldr	r1, [pc, #16]	; (8005b70 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b5e:	5ccb      	ldrb	r3, [r1, r3]
 8005b60:	f003 031f 	and.w	r3, r3, #31
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	58024400 	.word	0x58024400
 8005b70:	0800c010 	.word	0x0800c010

08005b74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b089      	sub	sp, #36	; 0x24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b7c:	4ba1      	ldr	r3, [pc, #644]	; (8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005b86:	4b9f      	ldr	r3, [pc, #636]	; (8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8a:	0b1b      	lsrs	r3, r3, #12
 8005b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b90:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b92:	4b9c      	ldr	r3, [pc, #624]	; (8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	091b      	lsrs	r3, r3, #4
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005b9e:	4b99      	ldr	r3, [pc, #612]	; (8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba2:	08db      	lsrs	r3, r3, #3
 8005ba4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	fb02 f303 	mul.w	r3, r2, r3
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 8111 	beq.w	8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	f000 8083 	beq.w	8005cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	f200 80a1 	bhi.w	8005d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d056      	beq.n	8005c8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005bde:	e099      	b.n	8005d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005be0:	4b88      	ldr	r3, [pc, #544]	; (8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d02d      	beq.n	8005c48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bec:	4b85      	ldr	r3, [pc, #532]	; (8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	08db      	lsrs	r3, r3, #3
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	4a84      	ldr	r2, [pc, #528]	; (8005e08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bfc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	ee07 3a90 	vmov	s15, r3
 8005c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c16:	4b7b      	ldr	r3, [pc, #492]	; (8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1e:	ee07 3a90 	vmov	s15, r3
 8005c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c42:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c46:	e087      	b.n	8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	ee07 3a90 	vmov	s15, r3
 8005c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c5a:	4b6a      	ldr	r3, [pc, #424]	; (8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c62:	ee07 3a90 	vmov	s15, r3
 8005c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c8a:	e065      	b.n	8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c9e:	4b59      	ldr	r3, [pc, #356]	; (8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca6:	ee07 3a90 	vmov	s15, r3
 8005caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cb2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cce:	e043      	b.n	8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce2:	4b48      	ldr	r3, [pc, #288]	; (8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cf6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d12:	e021      	b.n	8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	ee07 3a90 	vmov	s15, r3
 8005d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d26:	4b37      	ldr	r3, [pc, #220]	; (8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005d58:	4b2a      	ldr	r3, [pc, #168]	; (8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5c:	0a5b      	lsrs	r3, r3, #9
 8005d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d72:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d7e:	ee17 2a90 	vmov	r2, s15
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005d86:	4b1f      	ldr	r3, [pc, #124]	; (8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	0c1b      	lsrs	r3, r3, #16
 8005d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d90:	ee07 3a90 	vmov	s15, r3
 8005d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005da0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dac:	ee17 2a90 	vmov	r2, s15
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005db4:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db8:	0e1b      	lsrs	r3, r3, #24
 8005dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dce:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dda:	ee17 2a90 	vmov	r2, s15
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005de2:	e008      	b.n	8005df6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	609a      	str	r2, [r3, #8]
}
 8005df6:	bf00      	nop
 8005df8:	3724      	adds	r7, #36	; 0x24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	58024400 	.word	0x58024400
 8005e08:	03d09000 	.word	0x03d09000
 8005e0c:	46000000 	.word	0x46000000
 8005e10:	4c742400 	.word	0x4c742400
 8005e14:	4a742400 	.word	0x4a742400
 8005e18:	4af42400 	.word	0x4af42400

08005e1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b089      	sub	sp, #36	; 0x24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e24:	4ba1      	ldr	r3, [pc, #644]	; (80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e28:	f003 0303 	and.w	r3, r3, #3
 8005e2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005e2e:	4b9f      	ldr	r3, [pc, #636]	; (80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e32:	0d1b      	lsrs	r3, r3, #20
 8005e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e3a:	4b9c      	ldr	r3, [pc, #624]	; (80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3e:	0a1b      	lsrs	r3, r3, #8
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005e46:	4b99      	ldr	r3, [pc, #612]	; (80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4a:	08db      	lsrs	r3, r3, #3
 8005e4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	fb02 f303 	mul.w	r3, r2, r3
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 8111 	beq.w	800608c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	f000 8083 	beq.w	8005f78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	f200 80a1 	bhi.w	8005fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d056      	beq.n	8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005e86:	e099      	b.n	8005fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e88:	4b88      	ldr	r3, [pc, #544]	; (80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d02d      	beq.n	8005ef0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e94:	4b85      	ldr	r3, [pc, #532]	; (80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	08db      	lsrs	r3, r3, #3
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	4a84      	ldr	r2, [pc, #528]	; (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	ee07 3a90 	vmov	s15, r3
 8005eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ebe:	4b7b      	ldr	r3, [pc, #492]	; (80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ed2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005eee:	e087      	b.n	8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f02:	4b6a      	ldr	r3, [pc, #424]	; (80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f16:	eddf 5a67 	vldr	s11, [pc, #412]	; 80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f32:	e065      	b.n	8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80060bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f46:	4b59      	ldr	r3, [pc, #356]	; (80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4e:	ee07 3a90 	vmov	s15, r3
 8005f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f76:	e043      	b.n	8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f8a:	4b48      	ldr	r3, [pc, #288]	; (80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f92:	ee07 3a90 	vmov	s15, r3
 8005f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fba:	e021      	b.n	8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	ee07 3a90 	vmov	s15, r3
 8005fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80060bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fce:	4b37      	ldr	r3, [pc, #220]	; (80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fe2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ffa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ffe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006000:	4b2a      	ldr	r3, [pc, #168]	; (80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	0a5b      	lsrs	r3, r3, #9
 8006006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006016:	ee37 7a87 	vadd.f32	s14, s15, s14
 800601a:	edd7 6a07 	vldr	s13, [r7, #28]
 800601e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006026:	ee17 2a90 	vmov	r2, s15
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800602e:	4b1f      	ldr	r3, [pc, #124]	; (80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	0c1b      	lsrs	r3, r3, #16
 8006034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006038:	ee07 3a90 	vmov	s15, r3
 800603c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006040:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006044:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006048:	edd7 6a07 	vldr	s13, [r7, #28]
 800604c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006054:	ee17 2a90 	vmov	r2, s15
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800605c:	4b13      	ldr	r3, [pc, #76]	; (80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800605e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006060:	0e1b      	lsrs	r3, r3, #24
 8006062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006072:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006076:	edd7 6a07 	vldr	s13, [r7, #28]
 800607a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800607e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006082:	ee17 2a90 	vmov	r2, s15
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800608a:	e008      	b.n	800609e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	609a      	str	r2, [r3, #8]
}
 800609e:	bf00      	nop
 80060a0:	3724      	adds	r7, #36	; 0x24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	58024400 	.word	0x58024400
 80060b0:	03d09000 	.word	0x03d09000
 80060b4:	46000000 	.word	0x46000000
 80060b8:	4c742400 	.word	0x4c742400
 80060bc:	4a742400 	.word	0x4a742400
 80060c0:	4af42400 	.word	0x4af42400

080060c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b089      	sub	sp, #36	; 0x24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060cc:	4ba0      	ldr	r3, [pc, #640]	; (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	f003 0303 	and.w	r3, r3, #3
 80060d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80060d6:	4b9e      	ldr	r3, [pc, #632]	; (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	091b      	lsrs	r3, r3, #4
 80060dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80060e2:	4b9b      	ldr	r3, [pc, #620]	; (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80060ec:	4b98      	ldr	r3, [pc, #608]	; (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f0:	08db      	lsrs	r3, r3, #3
 80060f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	fb02 f303 	mul.w	r3, r2, r3
 80060fc:	ee07 3a90 	vmov	s15, r3
 8006100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006104:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 8111 	beq.w	8006332 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	2b02      	cmp	r3, #2
 8006114:	f000 8083 	beq.w	800621e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	2b02      	cmp	r3, #2
 800611c:	f200 80a1 	bhi.w	8006262 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d056      	beq.n	80061da <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800612c:	e099      	b.n	8006262 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800612e:	4b88      	ldr	r3, [pc, #544]	; (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b00      	cmp	r3, #0
 8006138:	d02d      	beq.n	8006196 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800613a:	4b85      	ldr	r3, [pc, #532]	; (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	08db      	lsrs	r3, r3, #3
 8006140:	f003 0303 	and.w	r3, r3, #3
 8006144:	4a83      	ldr	r2, [pc, #524]	; (8006354 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006146:	fa22 f303 	lsr.w	r3, r2, r3
 800614a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	ee07 3a90 	vmov	s15, r3
 8006152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	ee07 3a90 	vmov	s15, r3
 800615c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006160:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006164:	4b7a      	ldr	r3, [pc, #488]	; (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616c:	ee07 3a90 	vmov	s15, r3
 8006170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006174:	ed97 6a03 	vldr	s12, [r7, #12]
 8006178:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006358 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800617c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006180:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006184:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006188:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800618c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006190:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006194:	e087      	b.n	80062a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	ee07 3a90 	vmov	s15, r3
 800619c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800635c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80061a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a8:	4b69      	ldr	r3, [pc, #420]	; (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b0:	ee07 3a90 	vmov	s15, r3
 80061b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80061bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006358 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80061c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061d8:	e065      	b.n	80062a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	ee07 3a90 	vmov	s15, r3
 80061e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006360 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80061e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ec:	4b58      	ldr	r3, [pc, #352]	; (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f4:	ee07 3a90 	vmov	s15, r3
 80061f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006200:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006358 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006204:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006208:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800620c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006210:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006218:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800621c:	e043      	b.n	80062a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	ee07 3a90 	vmov	s15, r3
 8006224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006228:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800622c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006230:	4b47      	ldr	r3, [pc, #284]	; (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006238:	ee07 3a90 	vmov	s15, r3
 800623c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006240:	ed97 6a03 	vldr	s12, [r7, #12]
 8006244:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006358 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006248:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800624c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006250:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006254:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800625c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006260:	e021      	b.n	80062a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	ee07 3a90 	vmov	s15, r3
 8006268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800635c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006274:	4b36      	ldr	r3, [pc, #216]	; (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627c:	ee07 3a90 	vmov	s15, r3
 8006280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006284:	ed97 6a03 	vldr	s12, [r7, #12]
 8006288:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006358 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800628c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006290:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006294:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800629c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062a4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80062a6:	4b2a      	ldr	r3, [pc, #168]	; (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062aa:	0a5b      	lsrs	r3, r3, #9
 80062ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b0:	ee07 3a90 	vmov	s15, r3
 80062b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80062c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062cc:	ee17 2a90 	vmov	r2, s15
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80062d4:	4b1e      	ldr	r3, [pc, #120]	; (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d8:	0c1b      	lsrs	r3, r3, #16
 80062da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80062f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062fa:	ee17 2a90 	vmov	r2, s15
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006302:	4b13      	ldr	r3, [pc, #76]	; (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	0e1b      	lsrs	r3, r3, #24
 8006308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800630c:	ee07 3a90 	vmov	s15, r3
 8006310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006314:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006318:	ee37 7a87 	vadd.f32	s14, s15, s14
 800631c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006328:	ee17 2a90 	vmov	r2, s15
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006330:	e008      	b.n	8006344 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	609a      	str	r2, [r3, #8]
}
 8006344:	bf00      	nop
 8006346:	3724      	adds	r7, #36	; 0x24
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	58024400 	.word	0x58024400
 8006354:	03d09000 	.word	0x03d09000
 8006358:	46000000 	.word	0x46000000
 800635c:	4c742400 	.word	0x4c742400
 8006360:	4a742400 	.word	0x4a742400
 8006364:	4af42400 	.word	0x4af42400

08006368 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006376:	4b53      	ldr	r3, [pc, #332]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 8006378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	2b03      	cmp	r3, #3
 8006380:	d101      	bne.n	8006386 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e099      	b.n	80064ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006386:	4b4f      	ldr	r3, [pc, #316]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a4e      	ldr	r2, [pc, #312]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 800638c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006392:	f7fb f82d 	bl	80013f0 <HAL_GetTick>
 8006396:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006398:	e008      	b.n	80063ac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800639a:	f7fb f829 	bl	80013f0 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e086      	b.n	80064ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063ac:	4b45      	ldr	r3, [pc, #276]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1f0      	bne.n	800639a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80063b8:	4b42      	ldr	r3, [pc, #264]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 80063ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	031b      	lsls	r3, r3, #12
 80063c6:	493f      	ldr	r1, [pc, #252]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	628b      	str	r3, [r1, #40]	; 0x28
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	3b01      	subs	r3, #1
 80063dc:	025b      	lsls	r3, r3, #9
 80063de:	b29b      	uxth	r3, r3
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	041b      	lsls	r3, r3, #16
 80063ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063ee:	431a      	orrs	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	061b      	lsls	r3, r3, #24
 80063f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063fc:	4931      	ldr	r1, [pc, #196]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006402:	4b30      	ldr	r3, [pc, #192]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	492d      	ldr	r1, [pc, #180]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 8006410:	4313      	orrs	r3, r2
 8006412:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006414:	4b2b      	ldr	r3, [pc, #172]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	f023 0220 	bic.w	r2, r3, #32
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	4928      	ldr	r1, [pc, #160]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 8006422:	4313      	orrs	r3, r2
 8006424:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006426:	4b27      	ldr	r3, [pc, #156]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	4a26      	ldr	r2, [pc, #152]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 800642c:	f023 0310 	bic.w	r3, r3, #16
 8006430:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006432:	4b24      	ldr	r3, [pc, #144]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 8006434:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006436:	4b24      	ldr	r3, [pc, #144]	; (80064c8 <RCCEx_PLL2_Config+0x160>)
 8006438:	4013      	ands	r3, r2
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	69d2      	ldr	r2, [r2, #28]
 800643e:	00d2      	lsls	r2, r2, #3
 8006440:	4920      	ldr	r1, [pc, #128]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 8006442:	4313      	orrs	r3, r2
 8006444:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006446:	4b1f      	ldr	r3, [pc, #124]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 8006448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644a:	4a1e      	ldr	r2, [pc, #120]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 800644c:	f043 0310 	orr.w	r3, r3, #16
 8006450:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d106      	bne.n	8006466 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006458:	4b1a      	ldr	r3, [pc, #104]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	4a19      	ldr	r2, [pc, #100]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 800645e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006462:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006464:	e00f      	b.n	8006486 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d106      	bne.n	800647a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800646c:	4b15      	ldr	r3, [pc, #84]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	4a14      	ldr	r2, [pc, #80]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 8006472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006476:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006478:	e005      	b.n	8006486 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800647a:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 800647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647e:	4a11      	ldr	r2, [pc, #68]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 8006480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006484:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006486:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a0e      	ldr	r2, [pc, #56]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 800648c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006492:	f7fa ffad 	bl	80013f0 <HAL_GetTick>
 8006496:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006498:	e008      	b.n	80064ac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800649a:	f7fa ffa9 	bl	80013f0 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d901      	bls.n	80064ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e006      	b.n	80064ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <RCCEx_PLL2_Config+0x15c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d0f0      	beq.n	800649a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	58024400 	.word	0x58024400
 80064c8:	ffff0007 	.word	0xffff0007

080064cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064da:	4b53      	ldr	r3, [pc, #332]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	f003 0303 	and.w	r3, r3, #3
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d101      	bne.n	80064ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e099      	b.n	800661e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80064ea:	4b4f      	ldr	r3, [pc, #316]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a4e      	ldr	r2, [pc, #312]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 80064f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064f6:	f7fa ff7b 	bl	80013f0 <HAL_GetTick>
 80064fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064fc:	e008      	b.n	8006510 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80064fe:	f7fa ff77 	bl	80013f0 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d901      	bls.n	8006510 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e086      	b.n	800661e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006510:	4b45      	ldr	r3, [pc, #276]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1f0      	bne.n	80064fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800651c:	4b42      	ldr	r3, [pc, #264]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	051b      	lsls	r3, r3, #20
 800652a:	493f      	ldr	r1, [pc, #252]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 800652c:	4313      	orrs	r3, r2
 800652e:	628b      	str	r3, [r1, #40]	; 0x28
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	3b01      	subs	r3, #1
 8006536:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	3b01      	subs	r3, #1
 8006540:	025b      	lsls	r3, r3, #9
 8006542:	b29b      	uxth	r3, r3
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	3b01      	subs	r3, #1
 800654c:	041b      	lsls	r3, r3, #16
 800654e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	3b01      	subs	r3, #1
 800655a:	061b      	lsls	r3, r3, #24
 800655c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006560:	4931      	ldr	r1, [pc, #196]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 8006562:	4313      	orrs	r3, r2
 8006564:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006566:	4b30      	ldr	r3, [pc, #192]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 8006568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	492d      	ldr	r1, [pc, #180]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 8006574:	4313      	orrs	r3, r2
 8006576:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006578:	4b2b      	ldr	r3, [pc, #172]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	4928      	ldr	r1, [pc, #160]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 8006586:	4313      	orrs	r3, r2
 8006588:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800658a:	4b27      	ldr	r3, [pc, #156]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 800658c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658e:	4a26      	ldr	r2, [pc, #152]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 8006590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006594:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006596:	4b24      	ldr	r3, [pc, #144]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 8006598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800659a:	4b24      	ldr	r3, [pc, #144]	; (800662c <RCCEx_PLL3_Config+0x160>)
 800659c:	4013      	ands	r3, r2
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	69d2      	ldr	r2, [r2, #28]
 80065a2:	00d2      	lsls	r2, r2, #3
 80065a4:	4920      	ldr	r1, [pc, #128]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80065aa:	4b1f      	ldr	r3, [pc, #124]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 80065b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d106      	bne.n	80065ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80065bc:	4b1a      	ldr	r3, [pc, #104]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	4a19      	ldr	r2, [pc, #100]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 80065c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065c8:	e00f      	b.n	80065ea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d106      	bne.n	80065de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80065d0:	4b15      	ldr	r3, [pc, #84]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	4a14      	ldr	r2, [pc, #80]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 80065d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065dc:	e005      	b.n	80065ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80065de:	4b12      	ldr	r3, [pc, #72]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 80065e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e2:	4a11      	ldr	r2, [pc, #68]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 80065e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80065ea:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a0e      	ldr	r2, [pc, #56]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 80065f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065f6:	f7fa fefb 	bl	80013f0 <HAL_GetTick>
 80065fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065fc:	e008      	b.n	8006610 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80065fe:	f7fa fef7 	bl	80013f0 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	2b02      	cmp	r3, #2
 800660a:	d901      	bls.n	8006610 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e006      	b.n	800661e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006610:	4b05      	ldr	r3, [pc, #20]	; (8006628 <RCCEx_PLL3_Config+0x15c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0f0      	beq.n	80065fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800661c:	7bfb      	ldrb	r3, [r7, #15]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	58024400 	.word	0x58024400
 800662c:	ffff0007 	.word	0xffff0007

08006630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e049      	b.n	80066d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fa fc9a 	bl	8000f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3304      	adds	r3, #4
 800666c:	4619      	mov	r1, r3
 800666e:	4610      	mov	r0, r2
 8006670:	f000 fd72 	bl	8007158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
	...

080066e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d001      	beq.n	80066f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e054      	b.n	80067a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0201 	orr.w	r2, r2, #1
 800670e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a26      	ldr	r2, [pc, #152]	; (80067b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d022      	beq.n	8006760 <HAL_TIM_Base_Start_IT+0x80>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006722:	d01d      	beq.n	8006760 <HAL_TIM_Base_Start_IT+0x80>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a22      	ldr	r2, [pc, #136]	; (80067b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d018      	beq.n	8006760 <HAL_TIM_Base_Start_IT+0x80>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a21      	ldr	r2, [pc, #132]	; (80067b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d013      	beq.n	8006760 <HAL_TIM_Base_Start_IT+0x80>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a1f      	ldr	r2, [pc, #124]	; (80067bc <HAL_TIM_Base_Start_IT+0xdc>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d00e      	beq.n	8006760 <HAL_TIM_Base_Start_IT+0x80>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a1e      	ldr	r2, [pc, #120]	; (80067c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d009      	beq.n	8006760 <HAL_TIM_Base_Start_IT+0x80>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a1c      	ldr	r2, [pc, #112]	; (80067c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d004      	beq.n	8006760 <HAL_TIM_Base_Start_IT+0x80>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a1b      	ldr	r2, [pc, #108]	; (80067c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d115      	bne.n	800678c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689a      	ldr	r2, [r3, #8]
 8006766:	4b19      	ldr	r3, [pc, #100]	; (80067cc <HAL_TIM_Base_Start_IT+0xec>)
 8006768:	4013      	ands	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b06      	cmp	r3, #6
 8006770:	d015      	beq.n	800679e <HAL_TIM_Base_Start_IT+0xbe>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006778:	d011      	beq.n	800679e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f042 0201 	orr.w	r2, r2, #1
 8006788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800678a:	e008      	b.n	800679e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0201 	orr.w	r2, r2, #1
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	e000      	b.n	80067a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800679e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40010000 	.word	0x40010000
 80067b4:	40000400 	.word	0x40000400
 80067b8:	40000800 	.word	0x40000800
 80067bc:	40000c00 	.word	0x40000c00
 80067c0:	40010400 	.word	0x40010400
 80067c4:	40001800 	.word	0x40001800
 80067c8:	40014000 	.word	0x40014000
 80067cc:	00010007 	.word	0x00010007

080067d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e049      	b.n	8006876 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f841 	bl	800687e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	3304      	adds	r3, #4
 800680c:	4619      	mov	r1, r3
 800680e:	4610      	mov	r0, r2
 8006810:	f000 fca2 	bl	8007158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
	...

08006894 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d109      	bne.n	80068b8 <HAL_TIM_PWM_Start+0x24>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	bf14      	ite	ne
 80068b0:	2301      	movne	r3, #1
 80068b2:	2300      	moveq	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	e03c      	b.n	8006932 <HAL_TIM_PWM_Start+0x9e>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d109      	bne.n	80068d2 <HAL_TIM_PWM_Start+0x3e>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	bf14      	ite	ne
 80068ca:	2301      	movne	r3, #1
 80068cc:	2300      	moveq	r3, #0
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	e02f      	b.n	8006932 <HAL_TIM_PWM_Start+0x9e>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d109      	bne.n	80068ec <HAL_TIM_PWM_Start+0x58>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	bf14      	ite	ne
 80068e4:	2301      	movne	r3, #1
 80068e6:	2300      	moveq	r3, #0
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	e022      	b.n	8006932 <HAL_TIM_PWM_Start+0x9e>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b0c      	cmp	r3, #12
 80068f0:	d109      	bne.n	8006906 <HAL_TIM_PWM_Start+0x72>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	bf14      	ite	ne
 80068fe:	2301      	movne	r3, #1
 8006900:	2300      	moveq	r3, #0
 8006902:	b2db      	uxtb	r3, r3
 8006904:	e015      	b.n	8006932 <HAL_TIM_PWM_Start+0x9e>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b10      	cmp	r3, #16
 800690a:	d109      	bne.n	8006920 <HAL_TIM_PWM_Start+0x8c>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	bf14      	ite	ne
 8006918:	2301      	movne	r3, #1
 800691a:	2300      	moveq	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	e008      	b.n	8006932 <HAL_TIM_PWM_Start+0x9e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b01      	cmp	r3, #1
 800692a:	bf14      	ite	ne
 800692c:	2301      	movne	r3, #1
 800692e:	2300      	moveq	r3, #0
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e0a1      	b.n	8006a7e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d104      	bne.n	800694a <HAL_TIM_PWM_Start+0xb6>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006948:	e023      	b.n	8006992 <HAL_TIM_PWM_Start+0xfe>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b04      	cmp	r3, #4
 800694e:	d104      	bne.n	800695a <HAL_TIM_PWM_Start+0xc6>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006958:	e01b      	b.n	8006992 <HAL_TIM_PWM_Start+0xfe>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b08      	cmp	r3, #8
 800695e:	d104      	bne.n	800696a <HAL_TIM_PWM_Start+0xd6>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006968:	e013      	b.n	8006992 <HAL_TIM_PWM_Start+0xfe>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b0c      	cmp	r3, #12
 800696e:	d104      	bne.n	800697a <HAL_TIM_PWM_Start+0xe6>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006978:	e00b      	b.n	8006992 <HAL_TIM_PWM_Start+0xfe>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b10      	cmp	r3, #16
 800697e:	d104      	bne.n	800698a <HAL_TIM_PWM_Start+0xf6>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006988:	e003      	b.n	8006992 <HAL_TIM_PWM_Start+0xfe>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2202      	movs	r2, #2
 800698e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2201      	movs	r2, #1
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	4618      	mov	r0, r3
 800699c:	f000 ffea 	bl	8007974 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a38      	ldr	r2, [pc, #224]	; (8006a88 <HAL_TIM_PWM_Start+0x1f4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d013      	beq.n	80069d2 <HAL_TIM_PWM_Start+0x13e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a37      	ldr	r2, [pc, #220]	; (8006a8c <HAL_TIM_PWM_Start+0x1f8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00e      	beq.n	80069d2 <HAL_TIM_PWM_Start+0x13e>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a35      	ldr	r2, [pc, #212]	; (8006a90 <HAL_TIM_PWM_Start+0x1fc>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d009      	beq.n	80069d2 <HAL_TIM_PWM_Start+0x13e>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a34      	ldr	r2, [pc, #208]	; (8006a94 <HAL_TIM_PWM_Start+0x200>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d004      	beq.n	80069d2 <HAL_TIM_PWM_Start+0x13e>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a32      	ldr	r2, [pc, #200]	; (8006a98 <HAL_TIM_PWM_Start+0x204>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d101      	bne.n	80069d6 <HAL_TIM_PWM_Start+0x142>
 80069d2:	2301      	movs	r3, #1
 80069d4:	e000      	b.n	80069d8 <HAL_TIM_PWM_Start+0x144>
 80069d6:	2300      	movs	r3, #0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d007      	beq.n	80069ec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a25      	ldr	r2, [pc, #148]	; (8006a88 <HAL_TIM_PWM_Start+0x1f4>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d022      	beq.n	8006a3c <HAL_TIM_PWM_Start+0x1a8>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fe:	d01d      	beq.n	8006a3c <HAL_TIM_PWM_Start+0x1a8>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a25      	ldr	r2, [pc, #148]	; (8006a9c <HAL_TIM_PWM_Start+0x208>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d018      	beq.n	8006a3c <HAL_TIM_PWM_Start+0x1a8>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a24      	ldr	r2, [pc, #144]	; (8006aa0 <HAL_TIM_PWM_Start+0x20c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d013      	beq.n	8006a3c <HAL_TIM_PWM_Start+0x1a8>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a22      	ldr	r2, [pc, #136]	; (8006aa4 <HAL_TIM_PWM_Start+0x210>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00e      	beq.n	8006a3c <HAL_TIM_PWM_Start+0x1a8>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a1a      	ldr	r2, [pc, #104]	; (8006a8c <HAL_TIM_PWM_Start+0x1f8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d009      	beq.n	8006a3c <HAL_TIM_PWM_Start+0x1a8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a1e      	ldr	r2, [pc, #120]	; (8006aa8 <HAL_TIM_PWM_Start+0x214>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d004      	beq.n	8006a3c <HAL_TIM_PWM_Start+0x1a8>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a16      	ldr	r2, [pc, #88]	; (8006a90 <HAL_TIM_PWM_Start+0x1fc>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d115      	bne.n	8006a68 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689a      	ldr	r2, [r3, #8]
 8006a42:	4b1a      	ldr	r3, [pc, #104]	; (8006aac <HAL_TIM_PWM_Start+0x218>)
 8006a44:	4013      	ands	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b06      	cmp	r3, #6
 8006a4c:	d015      	beq.n	8006a7a <HAL_TIM_PWM_Start+0x1e6>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a54:	d011      	beq.n	8006a7a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f042 0201 	orr.w	r2, r2, #1
 8006a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a66:	e008      	b.n	8006a7a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0201 	orr.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	e000      	b.n	8006a7c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	40010000 	.word	0x40010000
 8006a8c:	40010400 	.word	0x40010400
 8006a90:	40014000 	.word	0x40014000
 8006a94:	40014400 	.word	0x40014400
 8006a98:	40014800 	.word	0x40014800
 8006a9c:	40000400 	.word	0x40000400
 8006aa0:	40000800 	.word	0x40000800
 8006aa4:	40000c00 	.word	0x40000c00
 8006aa8:	40001800 	.word	0x40001800
 8006aac:	00010007 	.word	0x00010007

08006ab0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d122      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d11b      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f06f 0202 	mvn.w	r2, #2
 8006adc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fb12 	bl	800711c <HAL_TIM_IC_CaptureCallback>
 8006af8:	e005      	b.n	8006b06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fb04 	bl	8007108 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fb15 	bl	8007130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f003 0304 	and.w	r3, r3, #4
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d122      	bne.n	8006b60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f003 0304 	and.w	r3, r3, #4
 8006b24:	2b04      	cmp	r3, #4
 8006b26:	d11b      	bne.n	8006b60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0204 	mvn.w	r2, #4
 8006b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2202      	movs	r2, #2
 8006b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fae8 	bl	800711c <HAL_TIM_IC_CaptureCallback>
 8006b4c:	e005      	b.n	8006b5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fada 	bl	8007108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 faeb 	bl	8007130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0308 	and.w	r3, r3, #8
 8006b6a:	2b08      	cmp	r3, #8
 8006b6c:	d122      	bne.n	8006bb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d11b      	bne.n	8006bb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0208 	mvn.w	r2, #8
 8006b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2204      	movs	r2, #4
 8006b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	f003 0303 	and.w	r3, r3, #3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fabe 	bl	800711c <HAL_TIM_IC_CaptureCallback>
 8006ba0:	e005      	b.n	8006bae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fab0 	bl	8007108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fac1 	bl	8007130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f003 0310 	and.w	r3, r3, #16
 8006bbe:	2b10      	cmp	r3, #16
 8006bc0:	d122      	bne.n	8006c08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f003 0310 	and.w	r3, r3, #16
 8006bcc:	2b10      	cmp	r3, #16
 8006bce:	d11b      	bne.n	8006c08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f06f 0210 	mvn.w	r2, #16
 8006bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2208      	movs	r2, #8
 8006bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fa94 	bl	800711c <HAL_TIM_IC_CaptureCallback>
 8006bf4:	e005      	b.n	8006c02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fa86 	bl	8007108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fa97 	bl	8007130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d10e      	bne.n	8006c34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d107      	bne.n	8006c34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f06f 0201 	mvn.w	r2, #1
 8006c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7fa f880 	bl	8000d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c3e:	2b80      	cmp	r3, #128	; 0x80
 8006c40:	d10e      	bne.n	8006c60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c4c:	2b80      	cmp	r3, #128	; 0x80
 8006c4e:	d107      	bne.n	8006c60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 ff48 	bl	8007af0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c6e:	d10e      	bne.n	8006c8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7a:	2b80      	cmp	r3, #128	; 0x80
 8006c7c:	d107      	bne.n	8006c8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 ff3b 	bl	8007b04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c98:	2b40      	cmp	r3, #64	; 0x40
 8006c9a:	d10e      	bne.n	8006cba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca6:	2b40      	cmp	r3, #64	; 0x40
 8006ca8:	d107      	bne.n	8006cba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fa45 	bl	8007144 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b20      	cmp	r3, #32
 8006cc6:	d10e      	bne.n	8006ce6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d107      	bne.n	8006ce6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f06f 0220 	mvn.w	r2, #32
 8006cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fefb 	bl	8007adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ce6:	bf00      	nop
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d101      	bne.n	8006d0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	e0ff      	b.n	8006f0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b14      	cmp	r3, #20
 8006d1a:	f200 80f0 	bhi.w	8006efe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d1e:	a201      	add	r2, pc, #4	; (adr r2, 8006d24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d24:	08006d79 	.word	0x08006d79
 8006d28:	08006eff 	.word	0x08006eff
 8006d2c:	08006eff 	.word	0x08006eff
 8006d30:	08006eff 	.word	0x08006eff
 8006d34:	08006db9 	.word	0x08006db9
 8006d38:	08006eff 	.word	0x08006eff
 8006d3c:	08006eff 	.word	0x08006eff
 8006d40:	08006eff 	.word	0x08006eff
 8006d44:	08006dfb 	.word	0x08006dfb
 8006d48:	08006eff 	.word	0x08006eff
 8006d4c:	08006eff 	.word	0x08006eff
 8006d50:	08006eff 	.word	0x08006eff
 8006d54:	08006e3b 	.word	0x08006e3b
 8006d58:	08006eff 	.word	0x08006eff
 8006d5c:	08006eff 	.word	0x08006eff
 8006d60:	08006eff 	.word	0x08006eff
 8006d64:	08006e7d 	.word	0x08006e7d
 8006d68:	08006eff 	.word	0x08006eff
 8006d6c:	08006eff 	.word	0x08006eff
 8006d70:	08006eff 	.word	0x08006eff
 8006d74:	08006ebd 	.word	0x08006ebd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68b9      	ldr	r1, [r7, #8]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fa84 	bl	800728c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	699a      	ldr	r2, [r3, #24]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0208 	orr.w	r2, r2, #8
 8006d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 0204 	bic.w	r2, r2, #4
 8006da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6999      	ldr	r1, [r3, #24]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	691a      	ldr	r2, [r3, #16]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	619a      	str	r2, [r3, #24]
      break;
 8006db6:	e0a5      	b.n	8006f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68b9      	ldr	r1, [r7, #8]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 faf4 	bl	80073ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699a      	ldr	r2, [r3, #24]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699a      	ldr	r2, [r3, #24]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6999      	ldr	r1, [r3, #24]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	021a      	lsls	r2, r3, #8
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	619a      	str	r2, [r3, #24]
      break;
 8006df8:	e084      	b.n	8006f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68b9      	ldr	r1, [r7, #8]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 fb5d 	bl	80074c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	69da      	ldr	r2, [r3, #28]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0208 	orr.w	r2, r2, #8
 8006e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69da      	ldr	r2, [r3, #28]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0204 	bic.w	r2, r2, #4
 8006e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	69d9      	ldr	r1, [r3, #28]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	61da      	str	r2, [r3, #28]
      break;
 8006e38:	e064      	b.n	8006f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68b9      	ldr	r1, [r7, #8]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 fbc5 	bl	80075d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69da      	ldr	r2, [r3, #28]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69da      	ldr	r2, [r3, #28]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	69d9      	ldr	r1, [r3, #28]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	021a      	lsls	r2, r3, #8
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	61da      	str	r2, [r3, #28]
      break;
 8006e7a:	e043      	b.n	8006f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68b9      	ldr	r1, [r7, #8]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fc0e 	bl	80076a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 0208 	orr.w	r2, r2, #8
 8006e96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0204 	bic.w	r2, r2, #4
 8006ea6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	691a      	ldr	r2, [r3, #16]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006eba:	e023      	b.n	8006f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68b9      	ldr	r1, [r7, #8]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 fc52 	bl	800776c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ed6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	021a      	lsls	r2, r3, #8
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006efc:	e002      	b.n	8006f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	75fb      	strb	r3, [r7, #23]
      break;
 8006f02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3718      	adds	r7, #24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop

08006f18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d101      	bne.n	8006f34 <HAL_TIM_ConfigClockSource+0x1c>
 8006f30:	2302      	movs	r3, #2
 8006f32:	e0dc      	b.n	80070ee <HAL_TIM_ConfigClockSource+0x1d6>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	4b6a      	ldr	r3, [pc, #424]	; (80070f8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006f50:	4013      	ands	r3, r2
 8006f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a64      	ldr	r2, [pc, #400]	; (80070fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	f000 80a9 	beq.w	80070c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f70:	4a62      	ldr	r2, [pc, #392]	; (80070fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	f200 80ae 	bhi.w	80070d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f78:	4a61      	ldr	r2, [pc, #388]	; (8007100 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	f000 80a1 	beq.w	80070c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f80:	4a5f      	ldr	r2, [pc, #380]	; (8007100 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	f200 80a6 	bhi.w	80070d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f88:	4a5e      	ldr	r2, [pc, #376]	; (8007104 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	f000 8099 	beq.w	80070c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f90:	4a5c      	ldr	r2, [pc, #368]	; (8007104 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	f200 809e 	bhi.w	80070d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006f9c:	f000 8091 	beq.w	80070c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006fa0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006fa4:	f200 8096 	bhi.w	80070d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fac:	f000 8089 	beq.w	80070c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fb4:	f200 808e 	bhi.w	80070d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fbc:	d03e      	beq.n	800703c <HAL_TIM_ConfigClockSource+0x124>
 8006fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fc2:	f200 8087 	bhi.w	80070d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fca:	f000 8086 	beq.w	80070da <HAL_TIM_ConfigClockSource+0x1c2>
 8006fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd2:	d87f      	bhi.n	80070d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fd4:	2b70      	cmp	r3, #112	; 0x70
 8006fd6:	d01a      	beq.n	800700e <HAL_TIM_ConfigClockSource+0xf6>
 8006fd8:	2b70      	cmp	r3, #112	; 0x70
 8006fda:	d87b      	bhi.n	80070d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fdc:	2b60      	cmp	r3, #96	; 0x60
 8006fde:	d050      	beq.n	8007082 <HAL_TIM_ConfigClockSource+0x16a>
 8006fe0:	2b60      	cmp	r3, #96	; 0x60
 8006fe2:	d877      	bhi.n	80070d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fe4:	2b50      	cmp	r3, #80	; 0x50
 8006fe6:	d03c      	beq.n	8007062 <HAL_TIM_ConfigClockSource+0x14a>
 8006fe8:	2b50      	cmp	r3, #80	; 0x50
 8006fea:	d873      	bhi.n	80070d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fec:	2b40      	cmp	r3, #64	; 0x40
 8006fee:	d058      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0x18a>
 8006ff0:	2b40      	cmp	r3, #64	; 0x40
 8006ff2:	d86f      	bhi.n	80070d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ff4:	2b30      	cmp	r3, #48	; 0x30
 8006ff6:	d064      	beq.n	80070c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006ff8:	2b30      	cmp	r3, #48	; 0x30
 8006ffa:	d86b      	bhi.n	80070d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ffc:	2b20      	cmp	r3, #32
 8006ffe:	d060      	beq.n	80070c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007000:	2b20      	cmp	r3, #32
 8007002:	d867      	bhi.n	80070d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007004:	2b00      	cmp	r3, #0
 8007006:	d05c      	beq.n	80070c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007008:	2b10      	cmp	r3, #16
 800700a:	d05a      	beq.n	80070c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800700c:	e062      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	6899      	ldr	r1, [r3, #8]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f000 fc89 	bl	8007934 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007030:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	609a      	str	r2, [r3, #8]
      break;
 800703a:	e04f      	b.n	80070dc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6818      	ldr	r0, [r3, #0]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	6899      	ldr	r1, [r3, #8]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f000 fc72 	bl	8007934 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689a      	ldr	r2, [r3, #8]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800705e:	609a      	str	r2, [r3, #8]
      break;
 8007060:	e03c      	b.n	80070dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	6859      	ldr	r1, [r3, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	461a      	mov	r2, r3
 8007070:	f000 fbe2 	bl	8007838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2150      	movs	r1, #80	; 0x50
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fc3c 	bl	80078f8 <TIM_ITRx_SetConfig>
      break;
 8007080:	e02c      	b.n	80070dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	6859      	ldr	r1, [r3, #4]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	461a      	mov	r2, r3
 8007090:	f000 fc01 	bl	8007896 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2160      	movs	r1, #96	; 0x60
 800709a:	4618      	mov	r0, r3
 800709c:	f000 fc2c 	bl	80078f8 <TIM_ITRx_SetConfig>
      break;
 80070a0:	e01c      	b.n	80070dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	6859      	ldr	r1, [r3, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	461a      	mov	r2, r3
 80070b0:	f000 fbc2 	bl	8007838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2140      	movs	r1, #64	; 0x40
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 fc1c 	bl	80078f8 <TIM_ITRx_SetConfig>
      break;
 80070c0:	e00c      	b.n	80070dc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4619      	mov	r1, r3
 80070cc:	4610      	mov	r0, r2
 80070ce:	f000 fc13 	bl	80078f8 <TIM_ITRx_SetConfig>
      break;
 80070d2:	e003      	b.n	80070dc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	73fb      	strb	r3, [r7, #15]
      break;
 80070d8:	e000      	b.n	80070dc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80070da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	ffceff88 	.word	0xffceff88
 80070fc:	00100040 	.word	0x00100040
 8007100:	00100030 	.word	0x00100030
 8007104:	00100020 	.word	0x00100020

08007108 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a40      	ldr	r2, [pc, #256]	; (800726c <TIM_Base_SetConfig+0x114>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d013      	beq.n	8007198 <TIM_Base_SetConfig+0x40>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007176:	d00f      	beq.n	8007198 <TIM_Base_SetConfig+0x40>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a3d      	ldr	r2, [pc, #244]	; (8007270 <TIM_Base_SetConfig+0x118>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d00b      	beq.n	8007198 <TIM_Base_SetConfig+0x40>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a3c      	ldr	r2, [pc, #240]	; (8007274 <TIM_Base_SetConfig+0x11c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d007      	beq.n	8007198 <TIM_Base_SetConfig+0x40>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a3b      	ldr	r2, [pc, #236]	; (8007278 <TIM_Base_SetConfig+0x120>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d003      	beq.n	8007198 <TIM_Base_SetConfig+0x40>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a3a      	ldr	r2, [pc, #232]	; (800727c <TIM_Base_SetConfig+0x124>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d108      	bne.n	80071aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a2f      	ldr	r2, [pc, #188]	; (800726c <TIM_Base_SetConfig+0x114>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d01f      	beq.n	80071f2 <TIM_Base_SetConfig+0x9a>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b8:	d01b      	beq.n	80071f2 <TIM_Base_SetConfig+0x9a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a2c      	ldr	r2, [pc, #176]	; (8007270 <TIM_Base_SetConfig+0x118>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d017      	beq.n	80071f2 <TIM_Base_SetConfig+0x9a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a2b      	ldr	r2, [pc, #172]	; (8007274 <TIM_Base_SetConfig+0x11c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d013      	beq.n	80071f2 <TIM_Base_SetConfig+0x9a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a2a      	ldr	r2, [pc, #168]	; (8007278 <TIM_Base_SetConfig+0x120>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d00f      	beq.n	80071f2 <TIM_Base_SetConfig+0x9a>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a29      	ldr	r2, [pc, #164]	; (800727c <TIM_Base_SetConfig+0x124>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d00b      	beq.n	80071f2 <TIM_Base_SetConfig+0x9a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a28      	ldr	r2, [pc, #160]	; (8007280 <TIM_Base_SetConfig+0x128>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d007      	beq.n	80071f2 <TIM_Base_SetConfig+0x9a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a27      	ldr	r2, [pc, #156]	; (8007284 <TIM_Base_SetConfig+0x12c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d003      	beq.n	80071f2 <TIM_Base_SetConfig+0x9a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a26      	ldr	r2, [pc, #152]	; (8007288 <TIM_Base_SetConfig+0x130>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d108      	bne.n	8007204 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	4313      	orrs	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	689a      	ldr	r2, [r3, #8]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a10      	ldr	r2, [pc, #64]	; (800726c <TIM_Base_SetConfig+0x114>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00f      	beq.n	8007250 <TIM_Base_SetConfig+0xf8>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a12      	ldr	r2, [pc, #72]	; (800727c <TIM_Base_SetConfig+0x124>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d00b      	beq.n	8007250 <TIM_Base_SetConfig+0xf8>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a11      	ldr	r2, [pc, #68]	; (8007280 <TIM_Base_SetConfig+0x128>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d007      	beq.n	8007250 <TIM_Base_SetConfig+0xf8>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a10      	ldr	r2, [pc, #64]	; (8007284 <TIM_Base_SetConfig+0x12c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d003      	beq.n	8007250 <TIM_Base_SetConfig+0xf8>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a0f      	ldr	r2, [pc, #60]	; (8007288 <TIM_Base_SetConfig+0x130>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d103      	bne.n	8007258 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	691a      	ldr	r2, [r3, #16]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	615a      	str	r2, [r3, #20]
}
 800725e:	bf00      	nop
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	40010000 	.word	0x40010000
 8007270:	40000400 	.word	0x40000400
 8007274:	40000800 	.word	0x40000800
 8007278:	40000c00 	.word	0x40000c00
 800727c:	40010400 	.word	0x40010400
 8007280:	40014000 	.word	0x40014000
 8007284:	40014400 	.word	0x40014400
 8007288:	40014800 	.word	0x40014800

0800728c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f023 0201 	bic.w	r2, r3, #1
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4b37      	ldr	r3, [pc, #220]	; (8007394 <TIM_OC1_SetConfig+0x108>)
 80072b8:	4013      	ands	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 0303 	bic.w	r3, r3, #3
 80072c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f023 0302 	bic.w	r3, r3, #2
 80072d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	4313      	orrs	r3, r2
 80072de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a2d      	ldr	r2, [pc, #180]	; (8007398 <TIM_OC1_SetConfig+0x10c>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d00f      	beq.n	8007308 <TIM_OC1_SetConfig+0x7c>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a2c      	ldr	r2, [pc, #176]	; (800739c <TIM_OC1_SetConfig+0x110>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d00b      	beq.n	8007308 <TIM_OC1_SetConfig+0x7c>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a2b      	ldr	r2, [pc, #172]	; (80073a0 <TIM_OC1_SetConfig+0x114>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d007      	beq.n	8007308 <TIM_OC1_SetConfig+0x7c>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a2a      	ldr	r2, [pc, #168]	; (80073a4 <TIM_OC1_SetConfig+0x118>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d003      	beq.n	8007308 <TIM_OC1_SetConfig+0x7c>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a29      	ldr	r2, [pc, #164]	; (80073a8 <TIM_OC1_SetConfig+0x11c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d10c      	bne.n	8007322 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f023 0308 	bic.w	r3, r3, #8
 800730e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	4313      	orrs	r3, r2
 8007318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f023 0304 	bic.w	r3, r3, #4
 8007320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a1c      	ldr	r2, [pc, #112]	; (8007398 <TIM_OC1_SetConfig+0x10c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d00f      	beq.n	800734a <TIM_OC1_SetConfig+0xbe>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a1b      	ldr	r2, [pc, #108]	; (800739c <TIM_OC1_SetConfig+0x110>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00b      	beq.n	800734a <TIM_OC1_SetConfig+0xbe>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a1a      	ldr	r2, [pc, #104]	; (80073a0 <TIM_OC1_SetConfig+0x114>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d007      	beq.n	800734a <TIM_OC1_SetConfig+0xbe>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a19      	ldr	r2, [pc, #100]	; (80073a4 <TIM_OC1_SetConfig+0x118>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d003      	beq.n	800734a <TIM_OC1_SetConfig+0xbe>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a18      	ldr	r2, [pc, #96]	; (80073a8 <TIM_OC1_SetConfig+0x11c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d111      	bne.n	800736e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	4313      	orrs	r3, r2
 8007362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	621a      	str	r2, [r3, #32]
}
 8007388:	bf00      	nop
 800738a:	371c      	adds	r7, #28
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	fffeff8f 	.word	0xfffeff8f
 8007398:	40010000 	.word	0x40010000
 800739c:	40010400 	.word	0x40010400
 80073a0:	40014000 	.word	0x40014000
 80073a4:	40014400 	.word	0x40014400
 80073a8:	40014800 	.word	0x40014800

080073ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	f023 0210 	bic.w	r2, r3, #16
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4b34      	ldr	r3, [pc, #208]	; (80074a8 <TIM_OC2_SetConfig+0xfc>)
 80073d8:	4013      	ands	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	021b      	lsls	r3, r3, #8
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	f023 0320 	bic.w	r3, r3, #32
 80073f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	011b      	lsls	r3, r3, #4
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	4313      	orrs	r3, r2
 8007402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a29      	ldr	r2, [pc, #164]	; (80074ac <TIM_OC2_SetConfig+0x100>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d003      	beq.n	8007414 <TIM_OC2_SetConfig+0x68>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a28      	ldr	r2, [pc, #160]	; (80074b0 <TIM_OC2_SetConfig+0x104>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d10d      	bne.n	8007430 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800741a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	011b      	lsls	r3, r3, #4
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4313      	orrs	r3, r2
 8007426:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800742e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a1e      	ldr	r2, [pc, #120]	; (80074ac <TIM_OC2_SetConfig+0x100>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d00f      	beq.n	8007458 <TIM_OC2_SetConfig+0xac>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a1d      	ldr	r2, [pc, #116]	; (80074b0 <TIM_OC2_SetConfig+0x104>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d00b      	beq.n	8007458 <TIM_OC2_SetConfig+0xac>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a1c      	ldr	r2, [pc, #112]	; (80074b4 <TIM_OC2_SetConfig+0x108>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d007      	beq.n	8007458 <TIM_OC2_SetConfig+0xac>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a1b      	ldr	r2, [pc, #108]	; (80074b8 <TIM_OC2_SetConfig+0x10c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d003      	beq.n	8007458 <TIM_OC2_SetConfig+0xac>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a1a      	ldr	r2, [pc, #104]	; (80074bc <TIM_OC2_SetConfig+0x110>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d113      	bne.n	8007480 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800745e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007466:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4313      	orrs	r3, r2
 8007472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	4313      	orrs	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	621a      	str	r2, [r3, #32]
}
 800749a:	bf00      	nop
 800749c:	371c      	adds	r7, #28
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	feff8fff 	.word	0xfeff8fff
 80074ac:	40010000 	.word	0x40010000
 80074b0:	40010400 	.word	0x40010400
 80074b4:	40014000 	.word	0x40014000
 80074b8:	40014400 	.word	0x40014400
 80074bc:	40014800 	.word	0x40014800

080074c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	4b33      	ldr	r3, [pc, #204]	; (80075b8 <TIM_OC3_SetConfig+0xf8>)
 80074ec:	4013      	ands	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f023 0303 	bic.w	r3, r3, #3
 80074f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	4313      	orrs	r3, r2
 8007500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a28      	ldr	r2, [pc, #160]	; (80075bc <TIM_OC3_SetConfig+0xfc>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d003      	beq.n	8007526 <TIM_OC3_SetConfig+0x66>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a27      	ldr	r2, [pc, #156]	; (80075c0 <TIM_OC3_SetConfig+0x100>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d10d      	bne.n	8007542 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800752c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	021b      	lsls	r3, r3, #8
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	4313      	orrs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a1d      	ldr	r2, [pc, #116]	; (80075bc <TIM_OC3_SetConfig+0xfc>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d00f      	beq.n	800756a <TIM_OC3_SetConfig+0xaa>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a1c      	ldr	r2, [pc, #112]	; (80075c0 <TIM_OC3_SetConfig+0x100>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d00b      	beq.n	800756a <TIM_OC3_SetConfig+0xaa>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a1b      	ldr	r2, [pc, #108]	; (80075c4 <TIM_OC3_SetConfig+0x104>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d007      	beq.n	800756a <TIM_OC3_SetConfig+0xaa>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a1a      	ldr	r2, [pc, #104]	; (80075c8 <TIM_OC3_SetConfig+0x108>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d003      	beq.n	800756a <TIM_OC3_SetConfig+0xaa>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a19      	ldr	r2, [pc, #100]	; (80075cc <TIM_OC3_SetConfig+0x10c>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d113      	bne.n	8007592 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	011b      	lsls	r3, r3, #4
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	4313      	orrs	r3, r2
 8007584:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	4313      	orrs	r3, r2
 8007590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	621a      	str	r2, [r3, #32]
}
 80075ac:	bf00      	nop
 80075ae:	371c      	adds	r7, #28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	fffeff8f 	.word	0xfffeff8f
 80075bc:	40010000 	.word	0x40010000
 80075c0:	40010400 	.word	0x40010400
 80075c4:	40014000 	.word	0x40014000
 80075c8:	40014400 	.word	0x40014400
 80075cc:	40014800 	.word	0x40014800

080075d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4b24      	ldr	r3, [pc, #144]	; (800768c <TIM_OC4_SetConfig+0xbc>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	021b      	lsls	r3, r3, #8
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	4313      	orrs	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800761a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	031b      	lsls	r3, r3, #12
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	4313      	orrs	r3, r2
 8007626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a19      	ldr	r2, [pc, #100]	; (8007690 <TIM_OC4_SetConfig+0xc0>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00f      	beq.n	8007650 <TIM_OC4_SetConfig+0x80>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a18      	ldr	r2, [pc, #96]	; (8007694 <TIM_OC4_SetConfig+0xc4>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00b      	beq.n	8007650 <TIM_OC4_SetConfig+0x80>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a17      	ldr	r2, [pc, #92]	; (8007698 <TIM_OC4_SetConfig+0xc8>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d007      	beq.n	8007650 <TIM_OC4_SetConfig+0x80>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a16      	ldr	r2, [pc, #88]	; (800769c <TIM_OC4_SetConfig+0xcc>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d003      	beq.n	8007650 <TIM_OC4_SetConfig+0x80>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a15      	ldr	r2, [pc, #84]	; (80076a0 <TIM_OC4_SetConfig+0xd0>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d109      	bne.n	8007664 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	695b      	ldr	r3, [r3, #20]
 800765c:	019b      	lsls	r3, r3, #6
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	4313      	orrs	r3, r2
 8007662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	621a      	str	r2, [r3, #32]
}
 800767e:	bf00      	nop
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	feff8fff 	.word	0xfeff8fff
 8007690:	40010000 	.word	0x40010000
 8007694:	40010400 	.word	0x40010400
 8007698:	40014000 	.word	0x40014000
 800769c:	40014400 	.word	0x40014400
 80076a0:	40014800 	.word	0x40014800

080076a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	4b21      	ldr	r3, [pc, #132]	; (8007754 <TIM_OC5_SetConfig+0xb0>)
 80076d0:	4013      	ands	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80076e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	041b      	lsls	r3, r3, #16
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a18      	ldr	r2, [pc, #96]	; (8007758 <TIM_OC5_SetConfig+0xb4>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d00f      	beq.n	800771a <TIM_OC5_SetConfig+0x76>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a17      	ldr	r2, [pc, #92]	; (800775c <TIM_OC5_SetConfig+0xb8>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d00b      	beq.n	800771a <TIM_OC5_SetConfig+0x76>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a16      	ldr	r2, [pc, #88]	; (8007760 <TIM_OC5_SetConfig+0xbc>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d007      	beq.n	800771a <TIM_OC5_SetConfig+0x76>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a15      	ldr	r2, [pc, #84]	; (8007764 <TIM_OC5_SetConfig+0xc0>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d003      	beq.n	800771a <TIM_OC5_SetConfig+0x76>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a14      	ldr	r2, [pc, #80]	; (8007768 <TIM_OC5_SetConfig+0xc4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d109      	bne.n	800772e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007720:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	021b      	lsls	r3, r3, #8
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	4313      	orrs	r3, r2
 800772c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	621a      	str	r2, [r3, #32]
}
 8007748:	bf00      	nop
 800774a:	371c      	adds	r7, #28
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	fffeff8f 	.word	0xfffeff8f
 8007758:	40010000 	.word	0x40010000
 800775c:	40010400 	.word	0x40010400
 8007760:	40014000 	.word	0x40014000
 8007764:	40014400 	.word	0x40014400
 8007768:	40014800 	.word	0x40014800

0800776c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a1b      	ldr	r3, [r3, #32]
 8007786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	4b22      	ldr	r3, [pc, #136]	; (8007820 <TIM_OC6_SetConfig+0xb4>)
 8007798:	4013      	ands	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	021b      	lsls	r3, r3, #8
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	051b      	lsls	r3, r3, #20
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a19      	ldr	r2, [pc, #100]	; (8007824 <TIM_OC6_SetConfig+0xb8>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d00f      	beq.n	80077e4 <TIM_OC6_SetConfig+0x78>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a18      	ldr	r2, [pc, #96]	; (8007828 <TIM_OC6_SetConfig+0xbc>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d00b      	beq.n	80077e4 <TIM_OC6_SetConfig+0x78>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a17      	ldr	r2, [pc, #92]	; (800782c <TIM_OC6_SetConfig+0xc0>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d007      	beq.n	80077e4 <TIM_OC6_SetConfig+0x78>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a16      	ldr	r2, [pc, #88]	; (8007830 <TIM_OC6_SetConfig+0xc4>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d003      	beq.n	80077e4 <TIM_OC6_SetConfig+0x78>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a15      	ldr	r2, [pc, #84]	; (8007834 <TIM_OC6_SetConfig+0xc8>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d109      	bne.n	80077f8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	029b      	lsls	r3, r3, #10
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	621a      	str	r2, [r3, #32]
}
 8007812:	bf00      	nop
 8007814:	371c      	adds	r7, #28
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	feff8fff 	.word	0xfeff8fff
 8007824:	40010000 	.word	0x40010000
 8007828:	40010400 	.word	0x40010400
 800782c:	40014000 	.word	0x40014000
 8007830:	40014400 	.word	0x40014400
 8007834:	40014800 	.word	0x40014800

08007838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	f023 0201 	bic.w	r2, r3, #1
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	4313      	orrs	r3, r2
 800786c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f023 030a 	bic.w	r3, r3, #10
 8007874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	4313      	orrs	r3, r2
 800787c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	621a      	str	r2, [r3, #32]
}
 800788a:	bf00      	nop
 800788c:	371c      	adds	r7, #28
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007896:	b480      	push	{r7}
 8007898:	b087      	sub	sp, #28
 800789a:	af00      	add	r7, sp, #0
 800789c:	60f8      	str	r0, [r7, #12]
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	f023 0210 	bic.w	r2, r3, #16
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	031b      	lsls	r3, r3, #12
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	011b      	lsls	r3, r3, #4
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	4313      	orrs	r3, r2
 80078dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	621a      	str	r2, [r3, #32]
}
 80078ea:	bf00      	nop
 80078ec:	371c      	adds	r7, #28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
	...

080078f8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	4b09      	ldr	r3, [pc, #36]	; (8007930 <TIM_ITRx_SetConfig+0x38>)
 800790c:	4013      	ands	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	4313      	orrs	r3, r2
 8007916:	f043 0307 	orr.w	r3, r3, #7
 800791a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	609a      	str	r2, [r3, #8]
}
 8007922:	bf00      	nop
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	ffcfff8f 	.word	0xffcfff8f

08007934 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
 8007940:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800794e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	021a      	lsls	r2, r3, #8
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	431a      	orrs	r2, r3
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	4313      	orrs	r3, r2
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	4313      	orrs	r3, r2
 8007960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	609a      	str	r2, [r3, #8]
}
 8007968:	bf00      	nop
 800796a:	371c      	adds	r7, #28
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f003 031f 	and.w	r3, r3, #31
 8007986:	2201      	movs	r2, #1
 8007988:	fa02 f303 	lsl.w	r3, r2, r3
 800798c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a1a      	ldr	r2, [r3, #32]
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	43db      	mvns	r3, r3
 8007996:	401a      	ands	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6a1a      	ldr	r2, [r3, #32]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f003 031f 	and.w	r3, r3, #31
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	fa01 f303 	lsl.w	r3, r1, r3
 80079ac:	431a      	orrs	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	621a      	str	r2, [r3, #32]
}
 80079b2:	bf00      	nop
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
	...

080079c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d101      	bne.n	80079d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079d4:	2302      	movs	r3, #2
 80079d6:	e06d      	b.n	8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a30      	ldr	r2, [pc, #192]	; (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d004      	beq.n	8007a0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a2f      	ldr	r2, [pc, #188]	; (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d108      	bne.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a20      	ldr	r2, [pc, #128]	; (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d022      	beq.n	8007a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a4a:	d01d      	beq.n	8007a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a1d      	ldr	r2, [pc, #116]	; (8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d018      	beq.n	8007a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a1c      	ldr	r2, [pc, #112]	; (8007acc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d013      	beq.n	8007a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a1a      	ldr	r2, [pc, #104]	; (8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d00e      	beq.n	8007a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a15      	ldr	r2, [pc, #84]	; (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d009      	beq.n	8007a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a16      	ldr	r2, [pc, #88]	; (8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d004      	beq.n	8007a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a15      	ldr	r2, [pc, #84]	; (8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d10c      	bne.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	40010000 	.word	0x40010000
 8007ac4:	40010400 	.word	0x40010400
 8007ac8:	40000400 	.word	0x40000400
 8007acc:	40000800 	.word	0x40000800
 8007ad0:	40000c00 	.word	0x40000c00
 8007ad4:	40001800 	.word	0x40001800
 8007ad8:	40014000 	.word	0x40014000

08007adc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e042      	b.n	8007bb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d106      	bne.n	8007b42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7f9 facb 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2224      	movs	r2, #36	; 0x24
 8007b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0201 	bic.w	r2, r2, #1
 8007b58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f82c 	bl	8007bb8 <UART_SetConfig>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d101      	bne.n	8007b6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e022      	b.n	8007bb0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fd88 	bl	8008688 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f042 0201 	orr.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fe0f 	bl	80087cc <UART_CheckIdleState>
 8007bae:	4603      	mov	r3, r0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bbc:	b092      	sub	sp, #72	; 0x48
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	431a      	orrs	r2, r3
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	431a      	orrs	r2, r3
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	4bbe      	ldr	r3, [pc, #760]	; (8007ee0 <UART_SetConfig+0x328>)
 8007be8:	4013      	ands	r3, r2
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	6812      	ldr	r2, [r2, #0]
 8007bee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bf0:	430b      	orrs	r3, r1
 8007bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	68da      	ldr	r2, [r3, #12]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4ab3      	ldr	r2, [pc, #716]	; (8007ee4 <UART_SetConfig+0x32c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d004      	beq.n	8007c24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c20:	4313      	orrs	r3, r2
 8007c22:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	4baf      	ldr	r3, [pc, #700]	; (8007ee8 <UART_SetConfig+0x330>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	6812      	ldr	r2, [r2, #0]
 8007c32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c34:	430b      	orrs	r3, r1
 8007c36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3e:	f023 010f 	bic.w	r1, r3, #15
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4aa6      	ldr	r2, [pc, #664]	; (8007eec <UART_SetConfig+0x334>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d177      	bne.n	8007d48 <UART_SetConfig+0x190>
 8007c58:	4ba5      	ldr	r3, [pc, #660]	; (8007ef0 <UART_SetConfig+0x338>)
 8007c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c60:	2b28      	cmp	r3, #40	; 0x28
 8007c62:	d86d      	bhi.n	8007d40 <UART_SetConfig+0x188>
 8007c64:	a201      	add	r2, pc, #4	; (adr r2, 8007c6c <UART_SetConfig+0xb4>)
 8007c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6a:	bf00      	nop
 8007c6c:	08007d11 	.word	0x08007d11
 8007c70:	08007d41 	.word	0x08007d41
 8007c74:	08007d41 	.word	0x08007d41
 8007c78:	08007d41 	.word	0x08007d41
 8007c7c:	08007d41 	.word	0x08007d41
 8007c80:	08007d41 	.word	0x08007d41
 8007c84:	08007d41 	.word	0x08007d41
 8007c88:	08007d41 	.word	0x08007d41
 8007c8c:	08007d19 	.word	0x08007d19
 8007c90:	08007d41 	.word	0x08007d41
 8007c94:	08007d41 	.word	0x08007d41
 8007c98:	08007d41 	.word	0x08007d41
 8007c9c:	08007d41 	.word	0x08007d41
 8007ca0:	08007d41 	.word	0x08007d41
 8007ca4:	08007d41 	.word	0x08007d41
 8007ca8:	08007d41 	.word	0x08007d41
 8007cac:	08007d21 	.word	0x08007d21
 8007cb0:	08007d41 	.word	0x08007d41
 8007cb4:	08007d41 	.word	0x08007d41
 8007cb8:	08007d41 	.word	0x08007d41
 8007cbc:	08007d41 	.word	0x08007d41
 8007cc0:	08007d41 	.word	0x08007d41
 8007cc4:	08007d41 	.word	0x08007d41
 8007cc8:	08007d41 	.word	0x08007d41
 8007ccc:	08007d29 	.word	0x08007d29
 8007cd0:	08007d41 	.word	0x08007d41
 8007cd4:	08007d41 	.word	0x08007d41
 8007cd8:	08007d41 	.word	0x08007d41
 8007cdc:	08007d41 	.word	0x08007d41
 8007ce0:	08007d41 	.word	0x08007d41
 8007ce4:	08007d41 	.word	0x08007d41
 8007ce8:	08007d41 	.word	0x08007d41
 8007cec:	08007d31 	.word	0x08007d31
 8007cf0:	08007d41 	.word	0x08007d41
 8007cf4:	08007d41 	.word	0x08007d41
 8007cf8:	08007d41 	.word	0x08007d41
 8007cfc:	08007d41 	.word	0x08007d41
 8007d00:	08007d41 	.word	0x08007d41
 8007d04:	08007d41 	.word	0x08007d41
 8007d08:	08007d41 	.word	0x08007d41
 8007d0c:	08007d39 	.word	0x08007d39
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d16:	e222      	b.n	800815e <UART_SetConfig+0x5a6>
 8007d18:	2304      	movs	r3, #4
 8007d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1e:	e21e      	b.n	800815e <UART_SetConfig+0x5a6>
 8007d20:	2308      	movs	r3, #8
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d26:	e21a      	b.n	800815e <UART_SetConfig+0x5a6>
 8007d28:	2310      	movs	r3, #16
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2e:	e216      	b.n	800815e <UART_SetConfig+0x5a6>
 8007d30:	2320      	movs	r3, #32
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d36:	e212      	b.n	800815e <UART_SetConfig+0x5a6>
 8007d38:	2340      	movs	r3, #64	; 0x40
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d3e:	e20e      	b.n	800815e <UART_SetConfig+0x5a6>
 8007d40:	2380      	movs	r3, #128	; 0x80
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d46:	e20a      	b.n	800815e <UART_SetConfig+0x5a6>
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a69      	ldr	r2, [pc, #420]	; (8007ef4 <UART_SetConfig+0x33c>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d130      	bne.n	8007db4 <UART_SetConfig+0x1fc>
 8007d52:	4b67      	ldr	r3, [pc, #412]	; (8007ef0 <UART_SetConfig+0x338>)
 8007d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	2b05      	cmp	r3, #5
 8007d5c:	d826      	bhi.n	8007dac <UART_SetConfig+0x1f4>
 8007d5e:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <UART_SetConfig+0x1ac>)
 8007d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d64:	08007d7d 	.word	0x08007d7d
 8007d68:	08007d85 	.word	0x08007d85
 8007d6c:	08007d8d 	.word	0x08007d8d
 8007d70:	08007d95 	.word	0x08007d95
 8007d74:	08007d9d 	.word	0x08007d9d
 8007d78:	08007da5 	.word	0x08007da5
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d82:	e1ec      	b.n	800815e <UART_SetConfig+0x5a6>
 8007d84:	2304      	movs	r3, #4
 8007d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d8a:	e1e8      	b.n	800815e <UART_SetConfig+0x5a6>
 8007d8c:	2308      	movs	r3, #8
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d92:	e1e4      	b.n	800815e <UART_SetConfig+0x5a6>
 8007d94:	2310      	movs	r3, #16
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9a:	e1e0      	b.n	800815e <UART_SetConfig+0x5a6>
 8007d9c:	2320      	movs	r3, #32
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da2:	e1dc      	b.n	800815e <UART_SetConfig+0x5a6>
 8007da4:	2340      	movs	r3, #64	; 0x40
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007daa:	e1d8      	b.n	800815e <UART_SetConfig+0x5a6>
 8007dac:	2380      	movs	r3, #128	; 0x80
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007db2:	e1d4      	b.n	800815e <UART_SetConfig+0x5a6>
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a4f      	ldr	r2, [pc, #316]	; (8007ef8 <UART_SetConfig+0x340>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d130      	bne.n	8007e20 <UART_SetConfig+0x268>
 8007dbe:	4b4c      	ldr	r3, [pc, #304]	; (8007ef0 <UART_SetConfig+0x338>)
 8007dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc2:	f003 0307 	and.w	r3, r3, #7
 8007dc6:	2b05      	cmp	r3, #5
 8007dc8:	d826      	bhi.n	8007e18 <UART_SetConfig+0x260>
 8007dca:	a201      	add	r2, pc, #4	; (adr r2, 8007dd0 <UART_SetConfig+0x218>)
 8007dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd0:	08007de9 	.word	0x08007de9
 8007dd4:	08007df1 	.word	0x08007df1
 8007dd8:	08007df9 	.word	0x08007df9
 8007ddc:	08007e01 	.word	0x08007e01
 8007de0:	08007e09 	.word	0x08007e09
 8007de4:	08007e11 	.word	0x08007e11
 8007de8:	2300      	movs	r3, #0
 8007dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dee:	e1b6      	b.n	800815e <UART_SetConfig+0x5a6>
 8007df0:	2304      	movs	r3, #4
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007df6:	e1b2      	b.n	800815e <UART_SetConfig+0x5a6>
 8007df8:	2308      	movs	r3, #8
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfe:	e1ae      	b.n	800815e <UART_SetConfig+0x5a6>
 8007e00:	2310      	movs	r3, #16
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e06:	e1aa      	b.n	800815e <UART_SetConfig+0x5a6>
 8007e08:	2320      	movs	r3, #32
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0e:	e1a6      	b.n	800815e <UART_SetConfig+0x5a6>
 8007e10:	2340      	movs	r3, #64	; 0x40
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e16:	e1a2      	b.n	800815e <UART_SetConfig+0x5a6>
 8007e18:	2380      	movs	r3, #128	; 0x80
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e1e:	e19e      	b.n	800815e <UART_SetConfig+0x5a6>
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a35      	ldr	r2, [pc, #212]	; (8007efc <UART_SetConfig+0x344>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d130      	bne.n	8007e8c <UART_SetConfig+0x2d4>
 8007e2a:	4b31      	ldr	r3, [pc, #196]	; (8007ef0 <UART_SetConfig+0x338>)
 8007e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e2e:	f003 0307 	and.w	r3, r3, #7
 8007e32:	2b05      	cmp	r3, #5
 8007e34:	d826      	bhi.n	8007e84 <UART_SetConfig+0x2cc>
 8007e36:	a201      	add	r2, pc, #4	; (adr r2, 8007e3c <UART_SetConfig+0x284>)
 8007e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3c:	08007e55 	.word	0x08007e55
 8007e40:	08007e5d 	.word	0x08007e5d
 8007e44:	08007e65 	.word	0x08007e65
 8007e48:	08007e6d 	.word	0x08007e6d
 8007e4c:	08007e75 	.word	0x08007e75
 8007e50:	08007e7d 	.word	0x08007e7d
 8007e54:	2300      	movs	r3, #0
 8007e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e5a:	e180      	b.n	800815e <UART_SetConfig+0x5a6>
 8007e5c:	2304      	movs	r3, #4
 8007e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e62:	e17c      	b.n	800815e <UART_SetConfig+0x5a6>
 8007e64:	2308      	movs	r3, #8
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e6a:	e178      	b.n	800815e <UART_SetConfig+0x5a6>
 8007e6c:	2310      	movs	r3, #16
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e72:	e174      	b.n	800815e <UART_SetConfig+0x5a6>
 8007e74:	2320      	movs	r3, #32
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e7a:	e170      	b.n	800815e <UART_SetConfig+0x5a6>
 8007e7c:	2340      	movs	r3, #64	; 0x40
 8007e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e82:	e16c      	b.n	800815e <UART_SetConfig+0x5a6>
 8007e84:	2380      	movs	r3, #128	; 0x80
 8007e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e8a:	e168      	b.n	800815e <UART_SetConfig+0x5a6>
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a1b      	ldr	r2, [pc, #108]	; (8007f00 <UART_SetConfig+0x348>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d142      	bne.n	8007f1c <UART_SetConfig+0x364>
 8007e96:	4b16      	ldr	r3, [pc, #88]	; (8007ef0 <UART_SetConfig+0x338>)
 8007e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e9a:	f003 0307 	and.w	r3, r3, #7
 8007e9e:	2b05      	cmp	r3, #5
 8007ea0:	d838      	bhi.n	8007f14 <UART_SetConfig+0x35c>
 8007ea2:	a201      	add	r2, pc, #4	; (adr r2, 8007ea8 <UART_SetConfig+0x2f0>)
 8007ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea8:	08007ec1 	.word	0x08007ec1
 8007eac:	08007ec9 	.word	0x08007ec9
 8007eb0:	08007ed1 	.word	0x08007ed1
 8007eb4:	08007ed9 	.word	0x08007ed9
 8007eb8:	08007f05 	.word	0x08007f05
 8007ebc:	08007f0d 	.word	0x08007f0d
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ec6:	e14a      	b.n	800815e <UART_SetConfig+0x5a6>
 8007ec8:	2304      	movs	r3, #4
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ece:	e146      	b.n	800815e <UART_SetConfig+0x5a6>
 8007ed0:	2308      	movs	r3, #8
 8007ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ed6:	e142      	b.n	800815e <UART_SetConfig+0x5a6>
 8007ed8:	2310      	movs	r3, #16
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ede:	e13e      	b.n	800815e <UART_SetConfig+0x5a6>
 8007ee0:	cfff69f3 	.word	0xcfff69f3
 8007ee4:	58000c00 	.word	0x58000c00
 8007ee8:	11fff4ff 	.word	0x11fff4ff
 8007eec:	40011000 	.word	0x40011000
 8007ef0:	58024400 	.word	0x58024400
 8007ef4:	40004400 	.word	0x40004400
 8007ef8:	40004800 	.word	0x40004800
 8007efc:	40004c00 	.word	0x40004c00
 8007f00:	40005000 	.word	0x40005000
 8007f04:	2320      	movs	r3, #32
 8007f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f0a:	e128      	b.n	800815e <UART_SetConfig+0x5a6>
 8007f0c:	2340      	movs	r3, #64	; 0x40
 8007f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f12:	e124      	b.n	800815e <UART_SetConfig+0x5a6>
 8007f14:	2380      	movs	r3, #128	; 0x80
 8007f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f1a:	e120      	b.n	800815e <UART_SetConfig+0x5a6>
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4acb      	ldr	r2, [pc, #812]	; (8008250 <UART_SetConfig+0x698>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d176      	bne.n	8008014 <UART_SetConfig+0x45c>
 8007f26:	4bcb      	ldr	r3, [pc, #812]	; (8008254 <UART_SetConfig+0x69c>)
 8007f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f2e:	2b28      	cmp	r3, #40	; 0x28
 8007f30:	d86c      	bhi.n	800800c <UART_SetConfig+0x454>
 8007f32:	a201      	add	r2, pc, #4	; (adr r2, 8007f38 <UART_SetConfig+0x380>)
 8007f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f38:	08007fdd 	.word	0x08007fdd
 8007f3c:	0800800d 	.word	0x0800800d
 8007f40:	0800800d 	.word	0x0800800d
 8007f44:	0800800d 	.word	0x0800800d
 8007f48:	0800800d 	.word	0x0800800d
 8007f4c:	0800800d 	.word	0x0800800d
 8007f50:	0800800d 	.word	0x0800800d
 8007f54:	0800800d 	.word	0x0800800d
 8007f58:	08007fe5 	.word	0x08007fe5
 8007f5c:	0800800d 	.word	0x0800800d
 8007f60:	0800800d 	.word	0x0800800d
 8007f64:	0800800d 	.word	0x0800800d
 8007f68:	0800800d 	.word	0x0800800d
 8007f6c:	0800800d 	.word	0x0800800d
 8007f70:	0800800d 	.word	0x0800800d
 8007f74:	0800800d 	.word	0x0800800d
 8007f78:	08007fed 	.word	0x08007fed
 8007f7c:	0800800d 	.word	0x0800800d
 8007f80:	0800800d 	.word	0x0800800d
 8007f84:	0800800d 	.word	0x0800800d
 8007f88:	0800800d 	.word	0x0800800d
 8007f8c:	0800800d 	.word	0x0800800d
 8007f90:	0800800d 	.word	0x0800800d
 8007f94:	0800800d 	.word	0x0800800d
 8007f98:	08007ff5 	.word	0x08007ff5
 8007f9c:	0800800d 	.word	0x0800800d
 8007fa0:	0800800d 	.word	0x0800800d
 8007fa4:	0800800d 	.word	0x0800800d
 8007fa8:	0800800d 	.word	0x0800800d
 8007fac:	0800800d 	.word	0x0800800d
 8007fb0:	0800800d 	.word	0x0800800d
 8007fb4:	0800800d 	.word	0x0800800d
 8007fb8:	08007ffd 	.word	0x08007ffd
 8007fbc:	0800800d 	.word	0x0800800d
 8007fc0:	0800800d 	.word	0x0800800d
 8007fc4:	0800800d 	.word	0x0800800d
 8007fc8:	0800800d 	.word	0x0800800d
 8007fcc:	0800800d 	.word	0x0800800d
 8007fd0:	0800800d 	.word	0x0800800d
 8007fd4:	0800800d 	.word	0x0800800d
 8007fd8:	08008005 	.word	0x08008005
 8007fdc:	2301      	movs	r3, #1
 8007fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fe2:	e0bc      	b.n	800815e <UART_SetConfig+0x5a6>
 8007fe4:	2304      	movs	r3, #4
 8007fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fea:	e0b8      	b.n	800815e <UART_SetConfig+0x5a6>
 8007fec:	2308      	movs	r3, #8
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ff2:	e0b4      	b.n	800815e <UART_SetConfig+0x5a6>
 8007ff4:	2310      	movs	r3, #16
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ffa:	e0b0      	b.n	800815e <UART_SetConfig+0x5a6>
 8007ffc:	2320      	movs	r3, #32
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008002:	e0ac      	b.n	800815e <UART_SetConfig+0x5a6>
 8008004:	2340      	movs	r3, #64	; 0x40
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800a:	e0a8      	b.n	800815e <UART_SetConfig+0x5a6>
 800800c:	2380      	movs	r3, #128	; 0x80
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008012:	e0a4      	b.n	800815e <UART_SetConfig+0x5a6>
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a8f      	ldr	r2, [pc, #572]	; (8008258 <UART_SetConfig+0x6a0>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d130      	bne.n	8008080 <UART_SetConfig+0x4c8>
 800801e:	4b8d      	ldr	r3, [pc, #564]	; (8008254 <UART_SetConfig+0x69c>)
 8008020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	2b05      	cmp	r3, #5
 8008028:	d826      	bhi.n	8008078 <UART_SetConfig+0x4c0>
 800802a:	a201      	add	r2, pc, #4	; (adr r2, 8008030 <UART_SetConfig+0x478>)
 800802c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008030:	08008049 	.word	0x08008049
 8008034:	08008051 	.word	0x08008051
 8008038:	08008059 	.word	0x08008059
 800803c:	08008061 	.word	0x08008061
 8008040:	08008069 	.word	0x08008069
 8008044:	08008071 	.word	0x08008071
 8008048:	2300      	movs	r3, #0
 800804a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800804e:	e086      	b.n	800815e <UART_SetConfig+0x5a6>
 8008050:	2304      	movs	r3, #4
 8008052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008056:	e082      	b.n	800815e <UART_SetConfig+0x5a6>
 8008058:	2308      	movs	r3, #8
 800805a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800805e:	e07e      	b.n	800815e <UART_SetConfig+0x5a6>
 8008060:	2310      	movs	r3, #16
 8008062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008066:	e07a      	b.n	800815e <UART_SetConfig+0x5a6>
 8008068:	2320      	movs	r3, #32
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800806e:	e076      	b.n	800815e <UART_SetConfig+0x5a6>
 8008070:	2340      	movs	r3, #64	; 0x40
 8008072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008076:	e072      	b.n	800815e <UART_SetConfig+0x5a6>
 8008078:	2380      	movs	r3, #128	; 0x80
 800807a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807e:	e06e      	b.n	800815e <UART_SetConfig+0x5a6>
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a75      	ldr	r2, [pc, #468]	; (800825c <UART_SetConfig+0x6a4>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d130      	bne.n	80080ec <UART_SetConfig+0x534>
 800808a:	4b72      	ldr	r3, [pc, #456]	; (8008254 <UART_SetConfig+0x69c>)
 800808c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808e:	f003 0307 	and.w	r3, r3, #7
 8008092:	2b05      	cmp	r3, #5
 8008094:	d826      	bhi.n	80080e4 <UART_SetConfig+0x52c>
 8008096:	a201      	add	r2, pc, #4	; (adr r2, 800809c <UART_SetConfig+0x4e4>)
 8008098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809c:	080080b5 	.word	0x080080b5
 80080a0:	080080bd 	.word	0x080080bd
 80080a4:	080080c5 	.word	0x080080c5
 80080a8:	080080cd 	.word	0x080080cd
 80080ac:	080080d5 	.word	0x080080d5
 80080b0:	080080dd 	.word	0x080080dd
 80080b4:	2300      	movs	r3, #0
 80080b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ba:	e050      	b.n	800815e <UART_SetConfig+0x5a6>
 80080bc:	2304      	movs	r3, #4
 80080be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080c2:	e04c      	b.n	800815e <UART_SetConfig+0x5a6>
 80080c4:	2308      	movs	r3, #8
 80080c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ca:	e048      	b.n	800815e <UART_SetConfig+0x5a6>
 80080cc:	2310      	movs	r3, #16
 80080ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080d2:	e044      	b.n	800815e <UART_SetConfig+0x5a6>
 80080d4:	2320      	movs	r3, #32
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080da:	e040      	b.n	800815e <UART_SetConfig+0x5a6>
 80080dc:	2340      	movs	r3, #64	; 0x40
 80080de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e2:	e03c      	b.n	800815e <UART_SetConfig+0x5a6>
 80080e4:	2380      	movs	r3, #128	; 0x80
 80080e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ea:	e038      	b.n	800815e <UART_SetConfig+0x5a6>
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a5b      	ldr	r2, [pc, #364]	; (8008260 <UART_SetConfig+0x6a8>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d130      	bne.n	8008158 <UART_SetConfig+0x5a0>
 80080f6:	4b57      	ldr	r3, [pc, #348]	; (8008254 <UART_SetConfig+0x69c>)
 80080f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080fa:	f003 0307 	and.w	r3, r3, #7
 80080fe:	2b05      	cmp	r3, #5
 8008100:	d826      	bhi.n	8008150 <UART_SetConfig+0x598>
 8008102:	a201      	add	r2, pc, #4	; (adr r2, 8008108 <UART_SetConfig+0x550>)
 8008104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008108:	08008121 	.word	0x08008121
 800810c:	08008129 	.word	0x08008129
 8008110:	08008131 	.word	0x08008131
 8008114:	08008139 	.word	0x08008139
 8008118:	08008141 	.word	0x08008141
 800811c:	08008149 	.word	0x08008149
 8008120:	2302      	movs	r3, #2
 8008122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008126:	e01a      	b.n	800815e <UART_SetConfig+0x5a6>
 8008128:	2304      	movs	r3, #4
 800812a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800812e:	e016      	b.n	800815e <UART_SetConfig+0x5a6>
 8008130:	2308      	movs	r3, #8
 8008132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008136:	e012      	b.n	800815e <UART_SetConfig+0x5a6>
 8008138:	2310      	movs	r3, #16
 800813a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800813e:	e00e      	b.n	800815e <UART_SetConfig+0x5a6>
 8008140:	2320      	movs	r3, #32
 8008142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008146:	e00a      	b.n	800815e <UART_SetConfig+0x5a6>
 8008148:	2340      	movs	r3, #64	; 0x40
 800814a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800814e:	e006      	b.n	800815e <UART_SetConfig+0x5a6>
 8008150:	2380      	movs	r3, #128	; 0x80
 8008152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008156:	e002      	b.n	800815e <UART_SetConfig+0x5a6>
 8008158:	2380      	movs	r3, #128	; 0x80
 800815a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a3f      	ldr	r2, [pc, #252]	; (8008260 <UART_SetConfig+0x6a8>)
 8008164:	4293      	cmp	r3, r2
 8008166:	f040 80f8 	bne.w	800835a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800816a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800816e:	2b20      	cmp	r3, #32
 8008170:	dc46      	bgt.n	8008200 <UART_SetConfig+0x648>
 8008172:	2b02      	cmp	r3, #2
 8008174:	f2c0 8082 	blt.w	800827c <UART_SetConfig+0x6c4>
 8008178:	3b02      	subs	r3, #2
 800817a:	2b1e      	cmp	r3, #30
 800817c:	d87e      	bhi.n	800827c <UART_SetConfig+0x6c4>
 800817e:	a201      	add	r2, pc, #4	; (adr r2, 8008184 <UART_SetConfig+0x5cc>)
 8008180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008184:	08008207 	.word	0x08008207
 8008188:	0800827d 	.word	0x0800827d
 800818c:	0800820f 	.word	0x0800820f
 8008190:	0800827d 	.word	0x0800827d
 8008194:	0800827d 	.word	0x0800827d
 8008198:	0800827d 	.word	0x0800827d
 800819c:	0800821f 	.word	0x0800821f
 80081a0:	0800827d 	.word	0x0800827d
 80081a4:	0800827d 	.word	0x0800827d
 80081a8:	0800827d 	.word	0x0800827d
 80081ac:	0800827d 	.word	0x0800827d
 80081b0:	0800827d 	.word	0x0800827d
 80081b4:	0800827d 	.word	0x0800827d
 80081b8:	0800827d 	.word	0x0800827d
 80081bc:	0800822f 	.word	0x0800822f
 80081c0:	0800827d 	.word	0x0800827d
 80081c4:	0800827d 	.word	0x0800827d
 80081c8:	0800827d 	.word	0x0800827d
 80081cc:	0800827d 	.word	0x0800827d
 80081d0:	0800827d 	.word	0x0800827d
 80081d4:	0800827d 	.word	0x0800827d
 80081d8:	0800827d 	.word	0x0800827d
 80081dc:	0800827d 	.word	0x0800827d
 80081e0:	0800827d 	.word	0x0800827d
 80081e4:	0800827d 	.word	0x0800827d
 80081e8:	0800827d 	.word	0x0800827d
 80081ec:	0800827d 	.word	0x0800827d
 80081f0:	0800827d 	.word	0x0800827d
 80081f4:	0800827d 	.word	0x0800827d
 80081f8:	0800827d 	.word	0x0800827d
 80081fc:	0800826f 	.word	0x0800826f
 8008200:	2b40      	cmp	r3, #64	; 0x40
 8008202:	d037      	beq.n	8008274 <UART_SetConfig+0x6bc>
 8008204:	e03a      	b.n	800827c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008206:	f7fd fc9f 	bl	8005b48 <HAL_RCCEx_GetD3PCLK1Freq>
 800820a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800820c:	e03c      	b.n	8008288 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800820e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008212:	4618      	mov	r0, r3
 8008214:	f7fd fcae 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800821c:	e034      	b.n	8008288 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800821e:	f107 0318 	add.w	r3, r7, #24
 8008222:	4618      	mov	r0, r3
 8008224:	f7fd fdfa 	bl	8005e1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800822c:	e02c      	b.n	8008288 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800822e:	4b09      	ldr	r3, [pc, #36]	; (8008254 <UART_SetConfig+0x69c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0320 	and.w	r3, r3, #32
 8008236:	2b00      	cmp	r3, #0
 8008238:	d016      	beq.n	8008268 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800823a:	4b06      	ldr	r3, [pc, #24]	; (8008254 <UART_SetConfig+0x69c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	08db      	lsrs	r3, r3, #3
 8008240:	f003 0303 	and.w	r3, r3, #3
 8008244:	4a07      	ldr	r2, [pc, #28]	; (8008264 <UART_SetConfig+0x6ac>)
 8008246:	fa22 f303 	lsr.w	r3, r2, r3
 800824a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800824c:	e01c      	b.n	8008288 <UART_SetConfig+0x6d0>
 800824e:	bf00      	nop
 8008250:	40011400 	.word	0x40011400
 8008254:	58024400 	.word	0x58024400
 8008258:	40007800 	.word	0x40007800
 800825c:	40007c00 	.word	0x40007c00
 8008260:	58000c00 	.word	0x58000c00
 8008264:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008268:	4b9d      	ldr	r3, [pc, #628]	; (80084e0 <UART_SetConfig+0x928>)
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800826c:	e00c      	b.n	8008288 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800826e:	4b9d      	ldr	r3, [pc, #628]	; (80084e4 <UART_SetConfig+0x92c>)
 8008270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008272:	e009      	b.n	8008288 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008274:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008278:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800827a:	e005      	b.n	8008288 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008286:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 81de 	beq.w	800864c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008294:	4a94      	ldr	r2, [pc, #592]	; (80084e8 <UART_SetConfig+0x930>)
 8008296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800829a:	461a      	mov	r2, r3
 800829c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800829e:	fbb3 f3f2 	udiv	r3, r3, r2
 80082a2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	4613      	mov	r3, r2
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	4413      	add	r3, r2
 80082ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d305      	bcc.n	80082c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082bc:	429a      	cmp	r2, r3
 80082be:	d903      	bls.n	80082c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80082c6:	e1c1      	b.n	800864c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ca:	2200      	movs	r2, #0
 80082cc:	60bb      	str	r3, [r7, #8]
 80082ce:	60fa      	str	r2, [r7, #12]
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	4a84      	ldr	r2, [pc, #528]	; (80084e8 <UART_SetConfig+0x930>)
 80082d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082da:	b29b      	uxth	r3, r3
 80082dc:	2200      	movs	r2, #0
 80082de:	603b      	str	r3, [r7, #0]
 80082e0:	607a      	str	r2, [r7, #4]
 80082e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082ea:	f7f7 fff9 	bl	80002e0 <__aeabi_uldivmod>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	4610      	mov	r0, r2
 80082f4:	4619      	mov	r1, r3
 80082f6:	f04f 0200 	mov.w	r2, #0
 80082fa:	f04f 0300 	mov.w	r3, #0
 80082fe:	020b      	lsls	r3, r1, #8
 8008300:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008304:	0202      	lsls	r2, r0, #8
 8008306:	6979      	ldr	r1, [r7, #20]
 8008308:	6849      	ldr	r1, [r1, #4]
 800830a:	0849      	lsrs	r1, r1, #1
 800830c:	2000      	movs	r0, #0
 800830e:	460c      	mov	r4, r1
 8008310:	4605      	mov	r5, r0
 8008312:	eb12 0804 	adds.w	r8, r2, r4
 8008316:	eb43 0905 	adc.w	r9, r3, r5
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	469a      	mov	sl, r3
 8008322:	4693      	mov	fp, r2
 8008324:	4652      	mov	r2, sl
 8008326:	465b      	mov	r3, fp
 8008328:	4640      	mov	r0, r8
 800832a:	4649      	mov	r1, r9
 800832c:	f7f7 ffd8 	bl	80002e0 <__aeabi_uldivmod>
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	4613      	mov	r3, r2
 8008336:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800833e:	d308      	bcc.n	8008352 <UART_SetConfig+0x79a>
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008346:	d204      	bcs.n	8008352 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800834e:	60da      	str	r2, [r3, #12]
 8008350:	e17c      	b.n	800864c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008358:	e178      	b.n	800864c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008362:	f040 80c5 	bne.w	80084f0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008366:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800836a:	2b20      	cmp	r3, #32
 800836c:	dc48      	bgt.n	8008400 <UART_SetConfig+0x848>
 800836e:	2b00      	cmp	r3, #0
 8008370:	db7b      	blt.n	800846a <UART_SetConfig+0x8b2>
 8008372:	2b20      	cmp	r3, #32
 8008374:	d879      	bhi.n	800846a <UART_SetConfig+0x8b2>
 8008376:	a201      	add	r2, pc, #4	; (adr r2, 800837c <UART_SetConfig+0x7c4>)
 8008378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837c:	08008407 	.word	0x08008407
 8008380:	0800840f 	.word	0x0800840f
 8008384:	0800846b 	.word	0x0800846b
 8008388:	0800846b 	.word	0x0800846b
 800838c:	08008417 	.word	0x08008417
 8008390:	0800846b 	.word	0x0800846b
 8008394:	0800846b 	.word	0x0800846b
 8008398:	0800846b 	.word	0x0800846b
 800839c:	08008427 	.word	0x08008427
 80083a0:	0800846b 	.word	0x0800846b
 80083a4:	0800846b 	.word	0x0800846b
 80083a8:	0800846b 	.word	0x0800846b
 80083ac:	0800846b 	.word	0x0800846b
 80083b0:	0800846b 	.word	0x0800846b
 80083b4:	0800846b 	.word	0x0800846b
 80083b8:	0800846b 	.word	0x0800846b
 80083bc:	08008437 	.word	0x08008437
 80083c0:	0800846b 	.word	0x0800846b
 80083c4:	0800846b 	.word	0x0800846b
 80083c8:	0800846b 	.word	0x0800846b
 80083cc:	0800846b 	.word	0x0800846b
 80083d0:	0800846b 	.word	0x0800846b
 80083d4:	0800846b 	.word	0x0800846b
 80083d8:	0800846b 	.word	0x0800846b
 80083dc:	0800846b 	.word	0x0800846b
 80083e0:	0800846b 	.word	0x0800846b
 80083e4:	0800846b 	.word	0x0800846b
 80083e8:	0800846b 	.word	0x0800846b
 80083ec:	0800846b 	.word	0x0800846b
 80083f0:	0800846b 	.word	0x0800846b
 80083f4:	0800846b 	.word	0x0800846b
 80083f8:	0800846b 	.word	0x0800846b
 80083fc:	0800845d 	.word	0x0800845d
 8008400:	2b40      	cmp	r3, #64	; 0x40
 8008402:	d02e      	beq.n	8008462 <UART_SetConfig+0x8aa>
 8008404:	e031      	b.n	800846a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008406:	f7fb ff19 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 800840a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800840c:	e033      	b.n	8008476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800840e:	f7fb ff2b 	bl	8004268 <HAL_RCC_GetPCLK2Freq>
 8008412:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008414:	e02f      	b.n	8008476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800841a:	4618      	mov	r0, r3
 800841c:	f7fd fbaa 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008424:	e027      	b.n	8008476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008426:	f107 0318 	add.w	r3, r7, #24
 800842a:	4618      	mov	r0, r3
 800842c:	f7fd fcf6 	bl	8005e1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008434:	e01f      	b.n	8008476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008436:	4b2d      	ldr	r3, [pc, #180]	; (80084ec <UART_SetConfig+0x934>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0320 	and.w	r3, r3, #32
 800843e:	2b00      	cmp	r3, #0
 8008440:	d009      	beq.n	8008456 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008442:	4b2a      	ldr	r3, [pc, #168]	; (80084ec <UART_SetConfig+0x934>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	08db      	lsrs	r3, r3, #3
 8008448:	f003 0303 	and.w	r3, r3, #3
 800844c:	4a24      	ldr	r2, [pc, #144]	; (80084e0 <UART_SetConfig+0x928>)
 800844e:	fa22 f303 	lsr.w	r3, r2, r3
 8008452:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008454:	e00f      	b.n	8008476 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008456:	4b22      	ldr	r3, [pc, #136]	; (80084e0 <UART_SetConfig+0x928>)
 8008458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800845a:	e00c      	b.n	8008476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800845c:	4b21      	ldr	r3, [pc, #132]	; (80084e4 <UART_SetConfig+0x92c>)
 800845e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008460:	e009      	b.n	8008476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008468:	e005      	b.n	8008476 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008474:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 80e7 	beq.w	800864c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008482:	4a19      	ldr	r2, [pc, #100]	; (80084e8 <UART_SetConfig+0x930>)
 8008484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008488:	461a      	mov	r2, r3
 800848a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800848c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008490:	005a      	lsls	r2, r3, #1
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	085b      	lsrs	r3, r3, #1
 8008498:	441a      	add	r2, r3
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	2b0f      	cmp	r3, #15
 80084a8:	d916      	bls.n	80084d8 <UART_SetConfig+0x920>
 80084aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084b0:	d212      	bcs.n	80084d8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	f023 030f 	bic.w	r3, r3, #15
 80084ba:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084be:	085b      	lsrs	r3, r3, #1
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	f003 0307 	and.w	r3, r3, #7
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80084ca:	4313      	orrs	r3, r2
 80084cc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80084d4:	60da      	str	r2, [r3, #12]
 80084d6:	e0b9      	b.n	800864c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80084de:	e0b5      	b.n	800864c <UART_SetConfig+0xa94>
 80084e0:	03d09000 	.word	0x03d09000
 80084e4:	003d0900 	.word	0x003d0900
 80084e8:	0800c044 	.word	0x0800c044
 80084ec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80084f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80084f4:	2b20      	cmp	r3, #32
 80084f6:	dc49      	bgt.n	800858c <UART_SetConfig+0x9d4>
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	db7c      	blt.n	80085f6 <UART_SetConfig+0xa3e>
 80084fc:	2b20      	cmp	r3, #32
 80084fe:	d87a      	bhi.n	80085f6 <UART_SetConfig+0xa3e>
 8008500:	a201      	add	r2, pc, #4	; (adr r2, 8008508 <UART_SetConfig+0x950>)
 8008502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008506:	bf00      	nop
 8008508:	08008593 	.word	0x08008593
 800850c:	0800859b 	.word	0x0800859b
 8008510:	080085f7 	.word	0x080085f7
 8008514:	080085f7 	.word	0x080085f7
 8008518:	080085a3 	.word	0x080085a3
 800851c:	080085f7 	.word	0x080085f7
 8008520:	080085f7 	.word	0x080085f7
 8008524:	080085f7 	.word	0x080085f7
 8008528:	080085b3 	.word	0x080085b3
 800852c:	080085f7 	.word	0x080085f7
 8008530:	080085f7 	.word	0x080085f7
 8008534:	080085f7 	.word	0x080085f7
 8008538:	080085f7 	.word	0x080085f7
 800853c:	080085f7 	.word	0x080085f7
 8008540:	080085f7 	.word	0x080085f7
 8008544:	080085f7 	.word	0x080085f7
 8008548:	080085c3 	.word	0x080085c3
 800854c:	080085f7 	.word	0x080085f7
 8008550:	080085f7 	.word	0x080085f7
 8008554:	080085f7 	.word	0x080085f7
 8008558:	080085f7 	.word	0x080085f7
 800855c:	080085f7 	.word	0x080085f7
 8008560:	080085f7 	.word	0x080085f7
 8008564:	080085f7 	.word	0x080085f7
 8008568:	080085f7 	.word	0x080085f7
 800856c:	080085f7 	.word	0x080085f7
 8008570:	080085f7 	.word	0x080085f7
 8008574:	080085f7 	.word	0x080085f7
 8008578:	080085f7 	.word	0x080085f7
 800857c:	080085f7 	.word	0x080085f7
 8008580:	080085f7 	.word	0x080085f7
 8008584:	080085f7 	.word	0x080085f7
 8008588:	080085e9 	.word	0x080085e9
 800858c:	2b40      	cmp	r3, #64	; 0x40
 800858e:	d02e      	beq.n	80085ee <UART_SetConfig+0xa36>
 8008590:	e031      	b.n	80085f6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008592:	f7fb fe53 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 8008596:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008598:	e033      	b.n	8008602 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800859a:	f7fb fe65 	bl	8004268 <HAL_RCC_GetPCLK2Freq>
 800859e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085a0:	e02f      	b.n	8008602 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fd fae4 	bl	8005b74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085b0:	e027      	b.n	8008602 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085b2:	f107 0318 	add.w	r3, r7, #24
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fd fc30 	bl	8005e1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085c0:	e01f      	b.n	8008602 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085c2:	4b2d      	ldr	r3, [pc, #180]	; (8008678 <UART_SetConfig+0xac0>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0320 	and.w	r3, r3, #32
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d009      	beq.n	80085e2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085ce:	4b2a      	ldr	r3, [pc, #168]	; (8008678 <UART_SetConfig+0xac0>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	08db      	lsrs	r3, r3, #3
 80085d4:	f003 0303 	and.w	r3, r3, #3
 80085d8:	4a28      	ldr	r2, [pc, #160]	; (800867c <UART_SetConfig+0xac4>)
 80085da:	fa22 f303 	lsr.w	r3, r2, r3
 80085de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085e0:	e00f      	b.n	8008602 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80085e2:	4b26      	ldr	r3, [pc, #152]	; (800867c <UART_SetConfig+0xac4>)
 80085e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085e6:	e00c      	b.n	8008602 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085e8:	4b25      	ldr	r3, [pc, #148]	; (8008680 <UART_SetConfig+0xac8>)
 80085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ec:	e009      	b.n	8008602 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085f4:	e005      	b.n	8008602 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008600:	bf00      	nop
    }

    if (pclk != 0U)
 8008602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008604:	2b00      	cmp	r3, #0
 8008606:	d021      	beq.n	800864c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	4a1d      	ldr	r2, [pc, #116]	; (8008684 <UART_SetConfig+0xacc>)
 800860e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008612:	461a      	mov	r2, r3
 8008614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008616:	fbb3 f2f2 	udiv	r2, r3, r2
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	085b      	lsrs	r3, r3, #1
 8008620:	441a      	add	r2, r3
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	fbb2 f3f3 	udiv	r3, r2, r3
 800862a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800862c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862e:	2b0f      	cmp	r3, #15
 8008630:	d909      	bls.n	8008646 <UART_SetConfig+0xa8e>
 8008632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008638:	d205      	bcs.n	8008646 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	b29a      	uxth	r2, r3
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	60da      	str	r2, [r3, #12]
 8008644:	e002      	b.n	800864c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	2201      	movs	r2, #1
 8008650:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	2201      	movs	r2, #1
 8008658:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2200      	movs	r2, #0
 8008660:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2200      	movs	r2, #0
 8008666:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008668:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800866c:	4618      	mov	r0, r3
 800866e:	3748      	adds	r7, #72	; 0x48
 8008670:	46bd      	mov	sp, r7
 8008672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008676:	bf00      	nop
 8008678:	58024400 	.word	0x58024400
 800867c:	03d09000 	.word	0x03d09000
 8008680:	003d0900 	.word	0x003d0900
 8008684:	0800c044 	.word	0x0800c044

08008688 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008694:	f003 0301 	and.w	r3, r3, #1
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00a      	beq.n	80086b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	430a      	orrs	r2, r1
 80086b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b6:	f003 0302 	and.w	r3, r3, #2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00a      	beq.n	80086d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	430a      	orrs	r2, r1
 80086d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d8:	f003 0304 	and.w	r3, r3, #4
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00a      	beq.n	80086f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fa:	f003 0308 	and.w	r3, r3, #8
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00a      	beq.n	8008718 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	430a      	orrs	r2, r1
 8008716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871c:	f003 0310 	and.w	r3, r3, #16
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00a      	beq.n	800873a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	430a      	orrs	r2, r1
 8008738:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873e:	f003 0320 	and.w	r3, r3, #32
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00a      	beq.n	800875c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	430a      	orrs	r2, r1
 800875a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008764:	2b00      	cmp	r3, #0
 8008766:	d01a      	beq.n	800879e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	430a      	orrs	r2, r1
 800877c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008786:	d10a      	bne.n	800879e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00a      	beq.n	80087c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	430a      	orrs	r2, r1
 80087be:	605a      	str	r2, [r3, #4]
  }
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af02      	add	r7, sp, #8
 80087d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087dc:	f7f8 fe08 	bl	80013f0 <HAL_GetTick>
 80087e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0308 	and.w	r3, r3, #8
 80087ec:	2b08      	cmp	r3, #8
 80087ee:	d10e      	bne.n	800880e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f82f 	bl	8008862 <UART_WaitOnFlagUntilTimeout>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e025      	b.n	800885a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0304 	and.w	r3, r3, #4
 8008818:	2b04      	cmp	r3, #4
 800881a:	d10e      	bne.n	800883a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800881c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f819 	bl	8008862 <UART_WaitOnFlagUntilTimeout>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008836:	2303      	movs	r3, #3
 8008838:	e00f      	b.n	800885a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2220      	movs	r2, #32
 800883e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b09c      	sub	sp, #112	; 0x70
 8008866:	af00      	add	r7, sp, #0
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	603b      	str	r3, [r7, #0]
 800886e:	4613      	mov	r3, r2
 8008870:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008872:	e0a9      	b.n	80089c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887a:	f000 80a5 	beq.w	80089c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800887e:	f7f8 fdb7 	bl	80013f0 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800888a:	429a      	cmp	r2, r3
 800888c:	d302      	bcc.n	8008894 <UART_WaitOnFlagUntilTimeout+0x32>
 800888e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008890:	2b00      	cmp	r3, #0
 8008892:	d140      	bne.n	8008916 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800889c:	e853 3f00 	ldrex	r3, [r3]
 80088a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80088a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088a8:	667b      	str	r3, [r7, #100]	; 0x64
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088ba:	e841 2300 	strex	r3, r2, [r1]
 80088be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80088c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1e6      	bne.n	8008894 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3308      	adds	r3, #8
 80088cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088d0:	e853 3f00 	ldrex	r3, [r3]
 80088d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	f023 0301 	bic.w	r3, r3, #1
 80088dc:	663b      	str	r3, [r7, #96]	; 0x60
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3308      	adds	r3, #8
 80088e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80088e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088ee:	e841 2300 	strex	r3, r2, [r1]
 80088f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1e5      	bne.n	80088c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2220      	movs	r2, #32
 80088fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2220      	movs	r2, #32
 8008906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e069      	b.n	80089ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 0304 	and.w	r3, r3, #4
 8008920:	2b00      	cmp	r3, #0
 8008922:	d051      	beq.n	80089c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800892e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008932:	d149      	bne.n	80089c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800893c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	e853 3f00 	ldrex	r3, [r3]
 800894a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008952:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	461a      	mov	r2, r3
 800895a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800895c:	637b      	str	r3, [r7, #52]	; 0x34
 800895e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008960:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008964:	e841 2300 	strex	r3, r2, [r1]
 8008968:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800896a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1e6      	bne.n	800893e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3308      	adds	r3, #8
 8008976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	e853 3f00 	ldrex	r3, [r3]
 800897e:	613b      	str	r3, [r7, #16]
   return(result);
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	f023 0301 	bic.w	r3, r3, #1
 8008986:	66bb      	str	r3, [r7, #104]	; 0x68
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3308      	adds	r3, #8
 800898e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008990:	623a      	str	r2, [r7, #32]
 8008992:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008994:	69f9      	ldr	r1, [r7, #28]
 8008996:	6a3a      	ldr	r2, [r7, #32]
 8008998:	e841 2300 	strex	r3, r2, [r1]
 800899c:	61bb      	str	r3, [r7, #24]
   return(result);
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1e5      	bne.n	8008970 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2220      	movs	r2, #32
 80089a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2220      	movs	r2, #32
 80089b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e010      	b.n	80089ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	69da      	ldr	r2, [r3, #28]
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	4013      	ands	r3, r2
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	bf0c      	ite	eq
 80089d8:	2301      	moveq	r3, #1
 80089da:	2300      	movne	r3, #0
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	461a      	mov	r2, r3
 80089e0:	79fb      	ldrb	r3, [r7, #7]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	f43f af46 	beq.w	8008874 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3770      	adds	r7, #112	; 0x70
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b085      	sub	sp, #20
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d101      	bne.n	8008a08 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a04:	2302      	movs	r3, #2
 8008a06:	e027      	b.n	8008a58 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2224      	movs	r2, #36	; 0x24
 8008a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f022 0201 	bic.w	r2, r2, #1
 8008a2e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d101      	bne.n	8008a7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	e02d      	b.n	8008ad8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2224      	movs	r2, #36	; 0x24
 8008a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 0201 	bic.w	r2, r2, #1
 8008aa2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f84f 	bl	8008b5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2220      	movs	r2, #32
 8008aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d101      	bne.n	8008af8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008af4:	2302      	movs	r3, #2
 8008af6:	e02d      	b.n	8008b54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2224      	movs	r2, #36	; 0x24
 8008b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f022 0201 	bic.w	r2, r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 f811 	bl	8008b5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d108      	bne.n	8008b7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b7c:	e031      	b.n	8008be2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b7e:	2310      	movs	r3, #16
 8008b80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b82:	2310      	movs	r3, #16
 8008b84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	0e5b      	lsrs	r3, r3, #25
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	f003 0307 	and.w	r3, r3, #7
 8008b94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	0f5b      	lsrs	r3, r3, #29
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	f003 0307 	and.w	r3, r3, #7
 8008ba4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ba6:	7bbb      	ldrb	r3, [r7, #14]
 8008ba8:	7b3a      	ldrb	r2, [r7, #12]
 8008baa:	4911      	ldr	r1, [pc, #68]	; (8008bf0 <UARTEx_SetNbDataToProcess+0x94>)
 8008bac:	5c8a      	ldrb	r2, [r1, r2]
 8008bae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008bb2:	7b3a      	ldrb	r2, [r7, #12]
 8008bb4:	490f      	ldr	r1, [pc, #60]	; (8008bf4 <UARTEx_SetNbDataToProcess+0x98>)
 8008bb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	7b7a      	ldrb	r2, [r7, #13]
 8008bc8:	4909      	ldr	r1, [pc, #36]	; (8008bf0 <UARTEx_SetNbDataToProcess+0x94>)
 8008bca:	5c8a      	ldrb	r2, [r1, r2]
 8008bcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bd0:	7b7a      	ldrb	r2, [r7, #13]
 8008bd2:	4908      	ldr	r1, [pc, #32]	; (8008bf4 <UARTEx_SetNbDataToProcess+0x98>)
 8008bd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008be2:	bf00      	nop
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	0800c05c 	.word	0x0800c05c
 8008bf4:	0800c064 	.word	0x0800c064

08008bf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	f107 001c 	add.w	r0, r7, #28
 8008c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d120      	bne.n	8008c52 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	4b2a      	ldr	r3, [pc, #168]	; (8008ccc <USB_CoreInit+0xd4>)
 8008c22:	4013      	ands	r3, r2
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d105      	bne.n	8008c46 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 faac 	bl	80091a4 <USB_CoreReset>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73fb      	strb	r3, [r7, #15]
 8008c50:	e01a      	b.n	8008c88 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 faa0 	bl	80091a4 <USB_CoreReset>
 8008c64:	4603      	mov	r3, r0
 8008c66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d106      	bne.n	8008c7c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	639a      	str	r2, [r3, #56]	; 0x38
 8008c7a:	e005      	b.n	8008c88 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d116      	bne.n	8008cbc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c9c:	4b0c      	ldr	r3, [pc, #48]	; (8008cd0 <USB_CoreInit+0xd8>)
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f043 0206 	orr.w	r2, r3, #6
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	f043 0220 	orr.w	r2, r3, #32
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cc8:	b004      	add	sp, #16
 8008cca:	4770      	bx	lr
 8008ccc:	ffbdffbf 	.word	0xffbdffbf
 8008cd0:	03ee0000 	.word	0x03ee0000

08008cd4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f023 0201 	bic.w	r2, r3, #1
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	460b      	mov	r3, r1
 8008d00:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008d02:	2300      	movs	r3, #0
 8008d04:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d12:	78fb      	ldrb	r3, [r7, #3]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d115      	bne.n	8008d44 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d24:	2001      	movs	r0, #1
 8008d26:	f7f8 fb6f 	bl	8001408 <HAL_Delay>
      ms++;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fa29 	bl	8009188 <USB_GetMode>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d01e      	beq.n	8008d7a <USB_SetCurrentMode+0x84>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2b31      	cmp	r3, #49	; 0x31
 8008d40:	d9f0      	bls.n	8008d24 <USB_SetCurrentMode+0x2e>
 8008d42:	e01a      	b.n	8008d7a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d115      	bne.n	8008d76 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d56:	2001      	movs	r0, #1
 8008d58:	f7f8 fb56 	bl	8001408 <HAL_Delay>
      ms++;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fa10 	bl	8009188 <USB_GetMode>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d005      	beq.n	8008d7a <USB_SetCurrentMode+0x84>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2b31      	cmp	r3, #49	; 0x31
 8008d72:	d9f0      	bls.n	8008d56 <USB_SetCurrentMode+0x60>
 8008d74:	e001      	b.n	8008d7a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e005      	b.n	8008d86 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2b32      	cmp	r3, #50	; 0x32
 8008d7e:	d101      	bne.n	8008d84 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e000      	b.n	8008d86 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
	...

08008d90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d90:	b084      	sub	sp, #16
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b086      	sub	sp, #24
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
 8008d9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008daa:	2300      	movs	r3, #0
 8008dac:	613b      	str	r3, [r7, #16]
 8008dae:	e009      	b.n	8008dc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	3340      	adds	r3, #64	; 0x40
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	2200      	movs	r2, #0
 8008dbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	613b      	str	r3, [r7, #16]
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	2b0e      	cmp	r3, #14
 8008dc8:	d9f2      	bls.n	8008db0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d11c      	bne.n	8008e0a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dde:	f043 0302 	orr.w	r3, r3, #2
 8008de2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	601a      	str	r2, [r3, #0]
 8008e08:	e005      	b.n	8008e16 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	2300      	movs	r3, #0
 8008e20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e28:	4619      	mov	r1, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e30:	461a      	mov	r2, r3
 8008e32:	680b      	ldr	r3, [r1, #0]
 8008e34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d10c      	bne.n	8008e56 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d104      	bne.n	8008e4c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e42:	2100      	movs	r1, #0
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f965 	bl	8009114 <USB_SetDevSpeed>
 8008e4a:	e008      	b.n	8008e5e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008e4c:	2101      	movs	r1, #1
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f960 	bl	8009114 <USB_SetDevSpeed>
 8008e54:	e003      	b.n	8008e5e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008e56:	2103      	movs	r1, #3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f95b 	bl	8009114 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e5e:	2110      	movs	r1, #16
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f8f3 	bl	800904c <USB_FlushTxFifo>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f91f 	bl	80090b4 <USB_FlushRxFifo>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e86:	461a      	mov	r2, r3
 8008e88:	2300      	movs	r3, #0
 8008e8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e92:	461a      	mov	r2, r3
 8008e94:	2300      	movs	r3, #0
 8008e96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	613b      	str	r3, [r7, #16]
 8008ea8:	e043      	b.n	8008f32 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ec0:	d118      	bne.n	8008ef4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10a      	bne.n	8008ede <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	e013      	b.n	8008f06 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	015a      	lsls	r2, r3, #5
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eea:	461a      	mov	r2, r3
 8008eec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ef0:	6013      	str	r3, [r2, #0]
 8008ef2:	e008      	b.n	8008f06 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f00:	461a      	mov	r2, r3
 8008f02:	2300      	movs	r3, #0
 8008f04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f12:	461a      	mov	r2, r3
 8008f14:	2300      	movs	r3, #0
 8008f16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f24:	461a      	mov	r2, r3
 8008f26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	613b      	str	r3, [r7, #16]
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d3b7      	bcc.n	8008eaa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	613b      	str	r3, [r7, #16]
 8008f3e:	e043      	b.n	8008fc8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f56:	d118      	bne.n	8008f8a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10a      	bne.n	8008f74 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	015a      	lsls	r2, r3, #5
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4413      	add	r3, r2
 8008f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f70:	6013      	str	r3, [r2, #0]
 8008f72:	e013      	b.n	8008f9c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	015a      	lsls	r2, r3, #5
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f80:	461a      	mov	r2, r3
 8008f82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f86:	6013      	str	r3, [r2, #0]
 8008f88:	e008      	b.n	8008f9c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	015a      	lsls	r2, r3, #5
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f96:	461a      	mov	r2, r3
 8008f98:	2300      	movs	r3, #0
 8008f9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa8:	461a      	mov	r2, r3
 8008faa:	2300      	movs	r3, #0
 8008fac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	015a      	lsls	r2, r3, #5
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fba:	461a      	mov	r2, r3
 8008fbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008fc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	613b      	str	r3, [r7, #16]
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fca:	693a      	ldr	r2, [r7, #16]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d3b7      	bcc.n	8008f40 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fe2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008ff0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d105      	bne.n	8009004 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	f043 0210 	orr.w	r2, r3, #16
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	699a      	ldr	r2, [r3, #24]
 8009008:	4b0e      	ldr	r3, [pc, #56]	; (8009044 <USB_DevInit+0x2b4>)
 800900a:	4313      	orrs	r3, r2
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009012:	2b00      	cmp	r3, #0
 8009014:	d005      	beq.n	8009022 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	f043 0208 	orr.w	r2, r3, #8
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009024:	2b01      	cmp	r3, #1
 8009026:	d105      	bne.n	8009034 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	699a      	ldr	r2, [r3, #24]
 800902c:	4b06      	ldr	r3, [pc, #24]	; (8009048 <USB_DevInit+0x2b8>)
 800902e:	4313      	orrs	r3, r2
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009034:	7dfb      	ldrb	r3, [r7, #23]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3718      	adds	r7, #24
 800903a:	46bd      	mov	sp, r7
 800903c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009040:	b004      	add	sp, #16
 8009042:	4770      	bx	lr
 8009044:	803c3800 	.word	0x803c3800
 8009048:	40000004 	.word	0x40000004

0800904c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009056:	2300      	movs	r3, #0
 8009058:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	3301      	adds	r3, #1
 800905e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4a13      	ldr	r2, [pc, #76]	; (80090b0 <USB_FlushTxFifo+0x64>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d901      	bls.n	800906c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e01b      	b.n	80090a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	2b00      	cmp	r3, #0
 8009072:	daf2      	bge.n	800905a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009074:	2300      	movs	r3, #0
 8009076:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	019b      	lsls	r3, r3, #6
 800907c:	f043 0220 	orr.w	r2, r3, #32
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	3301      	adds	r3, #1
 8009088:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	4a08      	ldr	r2, [pc, #32]	; (80090b0 <USB_FlushTxFifo+0x64>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d901      	bls.n	8009096 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e006      	b.n	80090a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	f003 0320 	and.w	r3, r3, #32
 800909e:	2b20      	cmp	r3, #32
 80090a0:	d0f0      	beq.n	8009084 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	00030d40 	.word	0x00030d40

080090b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090bc:	2300      	movs	r3, #0
 80090be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3301      	adds	r3, #1
 80090c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	4a11      	ldr	r2, [pc, #68]	; (8009110 <USB_FlushRxFifo+0x5c>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d901      	bls.n	80090d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e018      	b.n	8009104 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	daf2      	bge.n	80090c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2210      	movs	r2, #16
 80090e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3301      	adds	r3, #1
 80090e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	4a08      	ldr	r2, [pc, #32]	; (8009110 <USB_FlushRxFifo+0x5c>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d901      	bls.n	80090f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e006      	b.n	8009104 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	f003 0310 	and.w	r3, r3, #16
 80090fe:	2b10      	cmp	r3, #16
 8009100:	d0f0      	beq.n	80090e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	00030d40 	.word	0x00030d40

08009114 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	78fb      	ldrb	r3, [r7, #3]
 800912e:	68f9      	ldr	r1, [r7, #12]
 8009130:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009134:	4313      	orrs	r3, r2
 8009136:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009146:	b480      	push	{r7}
 8009148:	b085      	sub	sp, #20
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009160:	f023 0303 	bic.w	r3, r3, #3
 8009164:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009174:	f043 0302 	orr.w	r3, r3, #2
 8009178:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	695b      	ldr	r3, [r3, #20]
 8009194:	f003 0301 	and.w	r3, r3, #1
}
 8009198:	4618      	mov	r0, r3
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091ac:	2300      	movs	r3, #0
 80091ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	3301      	adds	r3, #1
 80091b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	4a13      	ldr	r2, [pc, #76]	; (8009208 <USB_CoreReset+0x64>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d901      	bls.n	80091c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e01b      	b.n	80091fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	daf2      	bge.n	80091b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	f043 0201 	orr.w	r2, r3, #1
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3301      	adds	r3, #1
 80091de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	4a09      	ldr	r2, [pc, #36]	; (8009208 <USB_CoreReset+0x64>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d901      	bls.n	80091ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e006      	b.n	80091fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d0f0      	beq.n	80091da <USB_CoreReset+0x36>

  return HAL_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	00030d40 	.word	0x00030d40

0800920c <__NVIC_SetPriority>:
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	6039      	str	r1, [r7, #0]
 8009216:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800921c:	2b00      	cmp	r3, #0
 800921e:	db0a      	blt.n	8009236 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	b2da      	uxtb	r2, r3
 8009224:	490c      	ldr	r1, [pc, #48]	; (8009258 <__NVIC_SetPriority+0x4c>)
 8009226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800922a:	0112      	lsls	r2, r2, #4
 800922c:	b2d2      	uxtb	r2, r2
 800922e:	440b      	add	r3, r1
 8009230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009234:	e00a      	b.n	800924c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	b2da      	uxtb	r2, r3
 800923a:	4908      	ldr	r1, [pc, #32]	; (800925c <__NVIC_SetPriority+0x50>)
 800923c:	88fb      	ldrh	r3, [r7, #6]
 800923e:	f003 030f 	and.w	r3, r3, #15
 8009242:	3b04      	subs	r3, #4
 8009244:	0112      	lsls	r2, r2, #4
 8009246:	b2d2      	uxtb	r2, r2
 8009248:	440b      	add	r3, r1
 800924a:	761a      	strb	r2, [r3, #24]
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	e000e100 	.word	0xe000e100
 800925c:	e000ed00 	.word	0xe000ed00

08009260 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009264:	4b05      	ldr	r3, [pc, #20]	; (800927c <SysTick_Handler+0x1c>)
 8009266:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009268:	f002 f962 	bl	800b530 <xTaskGetSchedulerState>
 800926c:	4603      	mov	r3, r0
 800926e:	2b01      	cmp	r3, #1
 8009270:	d001      	beq.n	8009276 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009272:	f000 fd99 	bl	8009da8 <xPortSysTickHandler>
  }
}
 8009276:	bf00      	nop
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	e000e010 	.word	0xe000e010

08009280 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009280:	b580      	push	{r7, lr}
 8009282:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009284:	2100      	movs	r1, #0
 8009286:	f06f 0004 	mvn.w	r0, #4
 800928a:	f7ff ffbf 	bl	800920c <__NVIC_SetPriority>
#endif
}
 800928e:	bf00      	nop
 8009290:	bd80      	pop	{r7, pc}
	...

08009294 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800929a:	f3ef 8305 	mrs	r3, IPSR
 800929e:	603b      	str	r3, [r7, #0]
  return(result);
 80092a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80092a6:	f06f 0305 	mvn.w	r3, #5
 80092aa:	607b      	str	r3, [r7, #4]
 80092ac:	e00c      	b.n	80092c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80092ae:	4b0a      	ldr	r3, [pc, #40]	; (80092d8 <osKernelInitialize+0x44>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d105      	bne.n	80092c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80092b6:	4b08      	ldr	r3, [pc, #32]	; (80092d8 <osKernelInitialize+0x44>)
 80092b8:	2201      	movs	r2, #1
 80092ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80092bc:	2300      	movs	r3, #0
 80092be:	607b      	str	r3, [r7, #4]
 80092c0:	e002      	b.n	80092c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80092c2:	f04f 33ff 	mov.w	r3, #4294967295
 80092c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80092c8:	687b      	ldr	r3, [r7, #4]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	370c      	adds	r7, #12
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	240007d4 	.word	0x240007d4

080092dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092e2:	f3ef 8305 	mrs	r3, IPSR
 80092e6:	603b      	str	r3, [r7, #0]
  return(result);
 80092e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80092ee:	f06f 0305 	mvn.w	r3, #5
 80092f2:	607b      	str	r3, [r7, #4]
 80092f4:	e010      	b.n	8009318 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80092f6:	4b0b      	ldr	r3, [pc, #44]	; (8009324 <osKernelStart+0x48>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d109      	bne.n	8009312 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80092fe:	f7ff ffbf 	bl	8009280 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009302:	4b08      	ldr	r3, [pc, #32]	; (8009324 <osKernelStart+0x48>)
 8009304:	2202      	movs	r2, #2
 8009306:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009308:	f001 fcb6 	bl	800ac78 <vTaskStartScheduler>
      stat = osOK;
 800930c:	2300      	movs	r3, #0
 800930e:	607b      	str	r3, [r7, #4]
 8009310:	e002      	b.n	8009318 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009312:	f04f 33ff 	mov.w	r3, #4294967295
 8009316:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009318:	687b      	ldr	r3, [r7, #4]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	240007d4 	.word	0x240007d4

08009328 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009328:	b580      	push	{r7, lr}
 800932a:	b08e      	sub	sp, #56	; 0x38
 800932c:	af04      	add	r7, sp, #16
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009334:	2300      	movs	r3, #0
 8009336:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009338:	f3ef 8305 	mrs	r3, IPSR
 800933c:	617b      	str	r3, [r7, #20]
  return(result);
 800933e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009340:	2b00      	cmp	r3, #0
 8009342:	d17e      	bne.n	8009442 <osThreadNew+0x11a>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d07b      	beq.n	8009442 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800934a:	2380      	movs	r3, #128	; 0x80
 800934c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800934e:	2318      	movs	r3, #24
 8009350:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009352:	2300      	movs	r3, #0
 8009354:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009356:	f04f 33ff 	mov.w	r3, #4294967295
 800935a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d045      	beq.n	80093ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d002      	beq.n	8009370 <osThreadNew+0x48>
        name = attr->name;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d008      	beq.n	8009396 <osThreadNew+0x6e>
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	2b38      	cmp	r3, #56	; 0x38
 8009388:	d805      	bhi.n	8009396 <osThreadNew+0x6e>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	f003 0301 	and.w	r3, r3, #1
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <osThreadNew+0x72>
        return (NULL);
 8009396:	2300      	movs	r3, #0
 8009398:	e054      	b.n	8009444 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	695b      	ldr	r3, [r3, #20]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	695b      	ldr	r3, [r3, #20]
 80093a6:	089b      	lsrs	r3, r3, #2
 80093a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00e      	beq.n	80093d0 <osThreadNew+0xa8>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	2bbb      	cmp	r3, #187	; 0xbb
 80093b8:	d90a      	bls.n	80093d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d006      	beq.n	80093d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d002      	beq.n	80093d0 <osThreadNew+0xa8>
        mem = 1;
 80093ca:	2301      	movs	r3, #1
 80093cc:	61bb      	str	r3, [r7, #24]
 80093ce:	e010      	b.n	80093f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10c      	bne.n	80093f2 <osThreadNew+0xca>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d108      	bne.n	80093f2 <osThreadNew+0xca>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d104      	bne.n	80093f2 <osThreadNew+0xca>
          mem = 0;
 80093e8:	2300      	movs	r3, #0
 80093ea:	61bb      	str	r3, [r7, #24]
 80093ec:	e001      	b.n	80093f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80093ee:	2300      	movs	r3, #0
 80093f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d110      	bne.n	800941a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009400:	9202      	str	r2, [sp, #8]
 8009402:	9301      	str	r3, [sp, #4]
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	6a3a      	ldr	r2, [r7, #32]
 800940c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f001 fa46 	bl	800a8a0 <xTaskCreateStatic>
 8009414:	4603      	mov	r3, r0
 8009416:	613b      	str	r3, [r7, #16]
 8009418:	e013      	b.n	8009442 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d110      	bne.n	8009442 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009420:	6a3b      	ldr	r3, [r7, #32]
 8009422:	b29a      	uxth	r2, r3
 8009424:	f107 0310 	add.w	r3, r7, #16
 8009428:	9301      	str	r3, [sp, #4]
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f001 fa91 	bl	800a95a <xTaskCreate>
 8009438:	4603      	mov	r3, r0
 800943a:	2b01      	cmp	r3, #1
 800943c:	d001      	beq.n	8009442 <osThreadNew+0x11a>
            hTask = NULL;
 800943e:	2300      	movs	r3, #0
 8009440:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009442:	693b      	ldr	r3, [r7, #16]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3728      	adds	r7, #40	; 0x28
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009454:	f3ef 8305 	mrs	r3, IPSR
 8009458:	60bb      	str	r3, [r7, #8]
  return(result);
 800945a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800945c:	2b00      	cmp	r3, #0
 800945e:	d003      	beq.n	8009468 <osDelay+0x1c>
    stat = osErrorISR;
 8009460:	f06f 0305 	mvn.w	r3, #5
 8009464:	60fb      	str	r3, [r7, #12]
 8009466:	e007      	b.n	8009478 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009468:	2300      	movs	r3, #0
 800946a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d002      	beq.n	8009478 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f001 fbcc 	bl	800ac10 <vTaskDelay>
    }
  }

  return (stat);
 8009478:	68fb      	ldr	r3, [r7, #12]
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
	...

08009484 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	4a07      	ldr	r2, [pc, #28]	; (80094b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009494:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	4a06      	ldr	r2, [pc, #24]	; (80094b4 <vApplicationGetIdleTaskMemory+0x30>)
 800949a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2280      	movs	r2, #128	; 0x80
 80094a0:	601a      	str	r2, [r3, #0]
}
 80094a2:	bf00      	nop
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	240007d8 	.word	0x240007d8
 80094b4:	24000894 	.word	0x24000894

080094b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	4a07      	ldr	r2, [pc, #28]	; (80094e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80094c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	4a06      	ldr	r2, [pc, #24]	; (80094e8 <vApplicationGetTimerTaskMemory+0x30>)
 80094ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094d6:	601a      	str	r2, [r3, #0]
}
 80094d8:	bf00      	nop
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	24000a94 	.word	0x24000a94
 80094e8:	24000b50 	.word	0x24000b50

080094ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08a      	sub	sp, #40	; 0x28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094f4:	2300      	movs	r3, #0
 80094f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094f8:	f001 fc2e 	bl	800ad58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094fc:	4b5b      	ldr	r3, [pc, #364]	; (800966c <pvPortMalloc+0x180>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d101      	bne.n	8009508 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009504:	f000 f920 	bl	8009748 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009508:	4b59      	ldr	r3, [pc, #356]	; (8009670 <pvPortMalloc+0x184>)
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4013      	ands	r3, r2
 8009510:	2b00      	cmp	r3, #0
 8009512:	f040 8093 	bne.w	800963c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d01d      	beq.n	8009558 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800951c:	2208      	movs	r2, #8
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4413      	add	r3, r2
 8009522:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f003 0307 	and.w	r3, r3, #7
 800952a:	2b00      	cmp	r3, #0
 800952c:	d014      	beq.n	8009558 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f023 0307 	bic.w	r3, r3, #7
 8009534:	3308      	adds	r3, #8
 8009536:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f003 0307 	and.w	r3, r3, #7
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00a      	beq.n	8009558 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009554:	bf00      	nop
 8009556:	e7fe      	b.n	8009556 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d06e      	beq.n	800963c <pvPortMalloc+0x150>
 800955e:	4b45      	ldr	r3, [pc, #276]	; (8009674 <pvPortMalloc+0x188>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	429a      	cmp	r2, r3
 8009566:	d869      	bhi.n	800963c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009568:	4b43      	ldr	r3, [pc, #268]	; (8009678 <pvPortMalloc+0x18c>)
 800956a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800956c:	4b42      	ldr	r3, [pc, #264]	; (8009678 <pvPortMalloc+0x18c>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009572:	e004      	b.n	800957e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800957e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	429a      	cmp	r2, r3
 8009586:	d903      	bls.n	8009590 <pvPortMalloc+0xa4>
 8009588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d1f1      	bne.n	8009574 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009590:	4b36      	ldr	r3, [pc, #216]	; (800966c <pvPortMalloc+0x180>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009596:	429a      	cmp	r2, r3
 8009598:	d050      	beq.n	800963c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2208      	movs	r2, #8
 80095a0:	4413      	add	r3, r2
 80095a2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	6a3b      	ldr	r3, [r7, #32]
 80095aa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	1ad2      	subs	r2, r2, r3
 80095b4:	2308      	movs	r3, #8
 80095b6:	005b      	lsls	r3, r3, #1
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d91f      	bls.n	80095fc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80095bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4413      	add	r3, r2
 80095c2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	f003 0307 	and.w	r3, r3, #7
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00a      	beq.n	80095e4 <pvPortMalloc+0xf8>
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	613b      	str	r3, [r7, #16]
}
 80095e0:	bf00      	nop
 80095e2:	e7fe      	b.n	80095e2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	1ad2      	subs	r2, r2, r3
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095f6:	69b8      	ldr	r0, [r7, #24]
 80095f8:	f000 f908 	bl	800980c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095fc:	4b1d      	ldr	r3, [pc, #116]	; (8009674 <pvPortMalloc+0x188>)
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	4a1b      	ldr	r2, [pc, #108]	; (8009674 <pvPortMalloc+0x188>)
 8009608:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800960a:	4b1a      	ldr	r3, [pc, #104]	; (8009674 <pvPortMalloc+0x188>)
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	4b1b      	ldr	r3, [pc, #108]	; (800967c <pvPortMalloc+0x190>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	429a      	cmp	r2, r3
 8009614:	d203      	bcs.n	800961e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009616:	4b17      	ldr	r3, [pc, #92]	; (8009674 <pvPortMalloc+0x188>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a18      	ldr	r2, [pc, #96]	; (800967c <pvPortMalloc+0x190>)
 800961c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009620:	685a      	ldr	r2, [r3, #4]
 8009622:	4b13      	ldr	r3, [pc, #76]	; (8009670 <pvPortMalloc+0x184>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	431a      	orrs	r2, r3
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	2200      	movs	r2, #0
 8009630:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009632:	4b13      	ldr	r3, [pc, #76]	; (8009680 <pvPortMalloc+0x194>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	3301      	adds	r3, #1
 8009638:	4a11      	ldr	r2, [pc, #68]	; (8009680 <pvPortMalloc+0x194>)
 800963a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800963c:	f001 fb9a 	bl	800ad74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	f003 0307 	and.w	r3, r3, #7
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00a      	beq.n	8009660 <pvPortMalloc+0x174>
	__asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	60fb      	str	r3, [r7, #12]
}
 800965c:	bf00      	nop
 800965e:	e7fe      	b.n	800965e <pvPortMalloc+0x172>
	return pvReturn;
 8009660:	69fb      	ldr	r3, [r7, #28]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3728      	adds	r7, #40	; 0x28
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	24004b58 	.word	0x24004b58
 8009670:	24004b6c 	.word	0x24004b6c
 8009674:	24004b5c 	.word	0x24004b5c
 8009678:	24004b50 	.word	0x24004b50
 800967c:	24004b60 	.word	0x24004b60
 8009680:	24004b64 	.word	0x24004b64

08009684 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d04d      	beq.n	8009732 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009696:	2308      	movs	r3, #8
 8009698:	425b      	negs	r3, r3
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	4413      	add	r3, r2
 800969e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	685a      	ldr	r2, [r3, #4]
 80096a8:	4b24      	ldr	r3, [pc, #144]	; (800973c <vPortFree+0xb8>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4013      	ands	r3, r2
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d10a      	bne.n	80096c8 <vPortFree+0x44>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	60fb      	str	r3, [r7, #12]
}
 80096c4:	bf00      	nop
 80096c6:	e7fe      	b.n	80096c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00a      	beq.n	80096e6 <vPortFree+0x62>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	60bb      	str	r3, [r7, #8]
}
 80096e2:	bf00      	nop
 80096e4:	e7fe      	b.n	80096e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	4b14      	ldr	r3, [pc, #80]	; (800973c <vPortFree+0xb8>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4013      	ands	r3, r2
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d01e      	beq.n	8009732 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d11a      	bne.n	8009732 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	4b0e      	ldr	r3, [pc, #56]	; (800973c <vPortFree+0xb8>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	43db      	mvns	r3, r3
 8009706:	401a      	ands	r2, r3
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800970c:	f001 fb24 	bl	800ad58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	4b0a      	ldr	r3, [pc, #40]	; (8009740 <vPortFree+0xbc>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4413      	add	r3, r2
 800971a:	4a09      	ldr	r2, [pc, #36]	; (8009740 <vPortFree+0xbc>)
 800971c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800971e:	6938      	ldr	r0, [r7, #16]
 8009720:	f000 f874 	bl	800980c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009724:	4b07      	ldr	r3, [pc, #28]	; (8009744 <vPortFree+0xc0>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	3301      	adds	r3, #1
 800972a:	4a06      	ldr	r2, [pc, #24]	; (8009744 <vPortFree+0xc0>)
 800972c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800972e:	f001 fb21 	bl	800ad74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009732:	bf00      	nop
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	24004b6c 	.word	0x24004b6c
 8009740:	24004b5c 	.word	0x24004b5c
 8009744:	24004b68 	.word	0x24004b68

08009748 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800974e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009752:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009754:	4b27      	ldr	r3, [pc, #156]	; (80097f4 <prvHeapInit+0xac>)
 8009756:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f003 0307 	and.w	r3, r3, #7
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00c      	beq.n	800977c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	3307      	adds	r3, #7
 8009766:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f023 0307 	bic.w	r3, r3, #7
 800976e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	4a1f      	ldr	r2, [pc, #124]	; (80097f4 <prvHeapInit+0xac>)
 8009778:	4413      	add	r3, r2
 800977a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009780:	4a1d      	ldr	r2, [pc, #116]	; (80097f8 <prvHeapInit+0xb0>)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009786:	4b1c      	ldr	r3, [pc, #112]	; (80097f8 <prvHeapInit+0xb0>)
 8009788:	2200      	movs	r2, #0
 800978a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	4413      	add	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009794:	2208      	movs	r2, #8
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	1a9b      	subs	r3, r3, r2
 800979a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f023 0307 	bic.w	r3, r3, #7
 80097a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	4a15      	ldr	r2, [pc, #84]	; (80097fc <prvHeapInit+0xb4>)
 80097a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097aa:	4b14      	ldr	r3, [pc, #80]	; (80097fc <prvHeapInit+0xb4>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2200      	movs	r2, #0
 80097b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80097b2:	4b12      	ldr	r3, [pc, #72]	; (80097fc <prvHeapInit+0xb4>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2200      	movs	r2, #0
 80097b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	1ad2      	subs	r2, r2, r3
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097c8:	4b0c      	ldr	r3, [pc, #48]	; (80097fc <prvHeapInit+0xb4>)
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	4a0a      	ldr	r2, [pc, #40]	; (8009800 <prvHeapInit+0xb8>)
 80097d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	4a09      	ldr	r2, [pc, #36]	; (8009804 <prvHeapInit+0xbc>)
 80097de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097e0:	4b09      	ldr	r3, [pc, #36]	; (8009808 <prvHeapInit+0xc0>)
 80097e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097e6:	601a      	str	r2, [r3, #0]
}
 80097e8:	bf00      	nop
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	24000f50 	.word	0x24000f50
 80097f8:	24004b50 	.word	0x24004b50
 80097fc:	24004b58 	.word	0x24004b58
 8009800:	24004b60 	.word	0x24004b60
 8009804:	24004b5c 	.word	0x24004b5c
 8009808:	24004b6c 	.word	0x24004b6c

0800980c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009814:	4b28      	ldr	r3, [pc, #160]	; (80098b8 <prvInsertBlockIntoFreeList+0xac>)
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	e002      	b.n	8009820 <prvInsertBlockIntoFreeList+0x14>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	60fb      	str	r3, [r7, #12]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	429a      	cmp	r2, r3
 8009828:	d8f7      	bhi.n	800981a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	4413      	add	r3, r2
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	429a      	cmp	r2, r3
 800983a:	d108      	bne.n	800984e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	685a      	ldr	r2, [r3, #4]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	441a      	add	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	441a      	add	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	429a      	cmp	r2, r3
 8009860:	d118      	bne.n	8009894 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	4b15      	ldr	r3, [pc, #84]	; (80098bc <prvInsertBlockIntoFreeList+0xb0>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	429a      	cmp	r2, r3
 800986c:	d00d      	beq.n	800988a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685a      	ldr	r2, [r3, #4]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	441a      	add	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	e008      	b.n	800989c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800988a:	4b0c      	ldr	r3, [pc, #48]	; (80098bc <prvInsertBlockIntoFreeList+0xb0>)
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	601a      	str	r2, [r3, #0]
 8009892:	e003      	b.n	800989c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d002      	beq.n	80098aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098aa:	bf00      	nop
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	24004b50 	.word	0x24004b50
 80098bc:	24004b58 	.word	0x24004b58

080098c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f103 0208 	add.w	r2, r3, #8
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f04f 32ff 	mov.w	r2, #4294967295
 80098d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f103 0208 	add.w	r2, r3, #8
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f103 0208 	add.w	r2, r3, #8
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800990e:	bf00      	nop
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800991a:	b480      	push	{r7}
 800991c:	b085      	sub	sp, #20
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	689a      	ldr	r2, [r3, #8]
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	683a      	ldr	r2, [r7, #0]
 800993e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	683a      	ldr	r2, [r7, #0]
 8009944:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	1c5a      	adds	r2, r3, #1
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	601a      	str	r2, [r3, #0]
}
 8009956:	bf00      	nop
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009962:	b480      	push	{r7}
 8009964:	b085      	sub	sp, #20
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009978:	d103      	bne.n	8009982 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	60fb      	str	r3, [r7, #12]
 8009980:	e00c      	b.n	800999c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	3308      	adds	r3, #8
 8009986:	60fb      	str	r3, [r7, #12]
 8009988:	e002      	b.n	8009990 <vListInsert+0x2e>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	60fb      	str	r3, [r7, #12]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	429a      	cmp	r2, r3
 800999a:	d2f6      	bcs.n	800998a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	685a      	ldr	r2, [r3, #4]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	683a      	ldr	r2, [r7, #0]
 80099aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	683a      	ldr	r2, [r7, #0]
 80099b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	1c5a      	adds	r2, r3, #1
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	601a      	str	r2, [r3, #0]
}
 80099c8:	bf00      	nop
 80099ca:	3714      	adds	r7, #20
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	6892      	ldr	r2, [r2, #8]
 80099ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	6852      	ldr	r2, [r2, #4]
 80099f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d103      	bne.n	8009a08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	689a      	ldr	r2, [r3, #8]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	1e5a      	subs	r2, r3, #1
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	3b04      	subs	r3, #4
 8009a38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	3b04      	subs	r3, #4
 8009a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	f023 0201 	bic.w	r2, r3, #1
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	3b04      	subs	r3, #4
 8009a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a58:	4a0c      	ldr	r2, [pc, #48]	; (8009a8c <pxPortInitialiseStack+0x64>)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	3b14      	subs	r3, #20
 8009a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	3b04      	subs	r3, #4
 8009a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f06f 0202 	mvn.w	r2, #2
 8009a76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	3b20      	subs	r3, #32
 8009a7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	08009a91 	.word	0x08009a91

08009a90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a9a:	4b12      	ldr	r3, [pc, #72]	; (8009ae4 <prvTaskExitError+0x54>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa2:	d00a      	beq.n	8009aba <prvTaskExitError+0x2a>
	__asm volatile
 8009aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	60fb      	str	r3, [r7, #12]
}
 8009ab6:	bf00      	nop
 8009ab8:	e7fe      	b.n	8009ab8 <prvTaskExitError+0x28>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	60bb      	str	r3, [r7, #8]
}
 8009acc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ace:	bf00      	nop
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d0fc      	beq.n	8009ad0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ad6:	bf00      	nop
 8009ad8:	bf00      	nop
 8009ada:	3714      	adds	r7, #20
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr
 8009ae4:	24000010 	.word	0x24000010
	...

08009af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009af0:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <pxCurrentTCBConst2>)
 8009af2:	6819      	ldr	r1, [r3, #0]
 8009af4:	6808      	ldr	r0, [r1, #0]
 8009af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afa:	f380 8809 	msr	PSP, r0
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f04f 0000 	mov.w	r0, #0
 8009b06:	f380 8811 	msr	BASEPRI, r0
 8009b0a:	4770      	bx	lr
 8009b0c:	f3af 8000 	nop.w

08009b10 <pxCurrentTCBConst2>:
 8009b10:	24004bb8 	.word	0x24004bb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b14:	bf00      	nop
 8009b16:	bf00      	nop

08009b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b18:	4808      	ldr	r0, [pc, #32]	; (8009b3c <prvPortStartFirstTask+0x24>)
 8009b1a:	6800      	ldr	r0, [r0, #0]
 8009b1c:	6800      	ldr	r0, [r0, #0]
 8009b1e:	f380 8808 	msr	MSP, r0
 8009b22:	f04f 0000 	mov.w	r0, #0
 8009b26:	f380 8814 	msr	CONTROL, r0
 8009b2a:	b662      	cpsie	i
 8009b2c:	b661      	cpsie	f
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	df00      	svc	0
 8009b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b3a:	bf00      	nop
 8009b3c:	e000ed08 	.word	0xe000ed08

08009b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b46:	4b46      	ldr	r3, [pc, #280]	; (8009c60 <xPortStartScheduler+0x120>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a46      	ldr	r2, [pc, #280]	; (8009c64 <xPortStartScheduler+0x124>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d10a      	bne.n	8009b66 <xPortStartScheduler+0x26>
	__asm volatile
 8009b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	613b      	str	r3, [r7, #16]
}
 8009b62:	bf00      	nop
 8009b64:	e7fe      	b.n	8009b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009b66:	4b3e      	ldr	r3, [pc, #248]	; (8009c60 <xPortStartScheduler+0x120>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a3f      	ldr	r2, [pc, #252]	; (8009c68 <xPortStartScheduler+0x128>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d10a      	bne.n	8009b86 <xPortStartScheduler+0x46>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	60fb      	str	r3, [r7, #12]
}
 8009b82:	bf00      	nop
 8009b84:	e7fe      	b.n	8009b84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b86:	4b39      	ldr	r3, [pc, #228]	; (8009c6c <xPortStartScheduler+0x12c>)
 8009b88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	22ff      	movs	r2, #255	; 0xff
 8009b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ba0:	78fb      	ldrb	r3, [r7, #3]
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	4b31      	ldr	r3, [pc, #196]	; (8009c70 <xPortStartScheduler+0x130>)
 8009bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009bae:	4b31      	ldr	r3, [pc, #196]	; (8009c74 <xPortStartScheduler+0x134>)
 8009bb0:	2207      	movs	r2, #7
 8009bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bb4:	e009      	b.n	8009bca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009bb6:	4b2f      	ldr	r3, [pc, #188]	; (8009c74 <xPortStartScheduler+0x134>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	4a2d      	ldr	r2, [pc, #180]	; (8009c74 <xPortStartScheduler+0x134>)
 8009bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	005b      	lsls	r3, r3, #1
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bca:	78fb      	ldrb	r3, [r7, #3]
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bd2:	2b80      	cmp	r3, #128	; 0x80
 8009bd4:	d0ef      	beq.n	8009bb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009bd6:	4b27      	ldr	r3, [pc, #156]	; (8009c74 <xPortStartScheduler+0x134>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f1c3 0307 	rsb	r3, r3, #7
 8009bde:	2b04      	cmp	r3, #4
 8009be0:	d00a      	beq.n	8009bf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	60bb      	str	r3, [r7, #8]
}
 8009bf4:	bf00      	nop
 8009bf6:	e7fe      	b.n	8009bf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009bf8:	4b1e      	ldr	r3, [pc, #120]	; (8009c74 <xPortStartScheduler+0x134>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	021b      	lsls	r3, r3, #8
 8009bfe:	4a1d      	ldr	r2, [pc, #116]	; (8009c74 <xPortStartScheduler+0x134>)
 8009c00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c02:	4b1c      	ldr	r3, [pc, #112]	; (8009c74 <xPortStartScheduler+0x134>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c0a:	4a1a      	ldr	r2, [pc, #104]	; (8009c74 <xPortStartScheduler+0x134>)
 8009c0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c16:	4b18      	ldr	r3, [pc, #96]	; (8009c78 <xPortStartScheduler+0x138>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a17      	ldr	r2, [pc, #92]	; (8009c78 <xPortStartScheduler+0x138>)
 8009c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c22:	4b15      	ldr	r3, [pc, #84]	; (8009c78 <xPortStartScheduler+0x138>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a14      	ldr	r2, [pc, #80]	; (8009c78 <xPortStartScheduler+0x138>)
 8009c28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c2e:	f000 f8dd 	bl	8009dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c32:	4b12      	ldr	r3, [pc, #72]	; (8009c7c <xPortStartScheduler+0x13c>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c38:	f000 f8fc 	bl	8009e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c3c:	4b10      	ldr	r3, [pc, #64]	; (8009c80 <xPortStartScheduler+0x140>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a0f      	ldr	r2, [pc, #60]	; (8009c80 <xPortStartScheduler+0x140>)
 8009c42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c48:	f7ff ff66 	bl	8009b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c4c:	f001 f9fa 	bl	800b044 <vTaskSwitchContext>
	prvTaskExitError();
 8009c50:	f7ff ff1e 	bl	8009a90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	e000ed00 	.word	0xe000ed00
 8009c64:	410fc271 	.word	0x410fc271
 8009c68:	410fc270 	.word	0x410fc270
 8009c6c:	e000e400 	.word	0xe000e400
 8009c70:	24004b70 	.word	0x24004b70
 8009c74:	24004b74 	.word	0x24004b74
 8009c78:	e000ed20 	.word	0xe000ed20
 8009c7c:	24000010 	.word	0x24000010
 8009c80:	e000ef34 	.word	0xe000ef34

08009c84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
	__asm volatile
 8009c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	607b      	str	r3, [r7, #4]
}
 8009c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c9e:	4b0f      	ldr	r3, [pc, #60]	; (8009cdc <vPortEnterCritical+0x58>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	4a0d      	ldr	r2, [pc, #52]	; (8009cdc <vPortEnterCritical+0x58>)
 8009ca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ca8:	4b0c      	ldr	r3, [pc, #48]	; (8009cdc <vPortEnterCritical+0x58>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d10f      	bne.n	8009cd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009cb0:	4b0b      	ldr	r3, [pc, #44]	; (8009ce0 <vPortEnterCritical+0x5c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00a      	beq.n	8009cd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	603b      	str	r3, [r7, #0]
}
 8009ccc:	bf00      	nop
 8009cce:	e7fe      	b.n	8009cce <vPortEnterCritical+0x4a>
	}
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	24000010 	.word	0x24000010
 8009ce0:	e000ed04 	.word	0xe000ed04

08009ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009cea:	4b12      	ldr	r3, [pc, #72]	; (8009d34 <vPortExitCritical+0x50>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10a      	bne.n	8009d08 <vPortExitCritical+0x24>
	__asm volatile
 8009cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	607b      	str	r3, [r7, #4]
}
 8009d04:	bf00      	nop
 8009d06:	e7fe      	b.n	8009d06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009d08:	4b0a      	ldr	r3, [pc, #40]	; (8009d34 <vPortExitCritical+0x50>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	4a09      	ldr	r2, [pc, #36]	; (8009d34 <vPortExitCritical+0x50>)
 8009d10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d12:	4b08      	ldr	r3, [pc, #32]	; (8009d34 <vPortExitCritical+0x50>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d105      	bne.n	8009d26 <vPortExitCritical+0x42>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009d24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d26:	bf00      	nop
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	24000010 	.word	0x24000010
	...

08009d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d40:	f3ef 8009 	mrs	r0, PSP
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	4b15      	ldr	r3, [pc, #84]	; (8009da0 <pxCurrentTCBConst>)
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	f01e 0f10 	tst.w	lr, #16
 8009d50:	bf08      	it	eq
 8009d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5a:	6010      	str	r0, [r2, #0]
 8009d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d64:	f380 8811 	msr	BASEPRI, r0
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f001 f968 	bl	800b044 <vTaskSwitchContext>
 8009d74:	f04f 0000 	mov.w	r0, #0
 8009d78:	f380 8811 	msr	BASEPRI, r0
 8009d7c:	bc09      	pop	{r0, r3}
 8009d7e:	6819      	ldr	r1, [r3, #0]
 8009d80:	6808      	ldr	r0, [r1, #0]
 8009d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d86:	f01e 0f10 	tst.w	lr, #16
 8009d8a:	bf08      	it	eq
 8009d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d90:	f380 8809 	msr	PSP, r0
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	f3af 8000 	nop.w

08009da0 <pxCurrentTCBConst>:
 8009da0:	24004bb8 	.word	0x24004bb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009da4:	bf00      	nop
 8009da6:	bf00      	nop

08009da8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	607b      	str	r3, [r7, #4]
}
 8009dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009dc2:	f001 f885 	bl	800aed0 <xTaskIncrementTick>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d003      	beq.n	8009dd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009dcc:	4b06      	ldr	r3, [pc, #24]	; (8009de8 <xPortSysTickHandler+0x40>)
 8009dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dd2:	601a      	str	r2, [r3, #0]
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	f383 8811 	msr	BASEPRI, r3
}
 8009dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009de0:	bf00      	nop
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	e000ed04 	.word	0xe000ed04

08009dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009dec:	b480      	push	{r7}
 8009dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009df0:	4b0b      	ldr	r3, [pc, #44]	; (8009e20 <vPortSetupTimerInterrupt+0x34>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009df6:	4b0b      	ldr	r3, [pc, #44]	; (8009e24 <vPortSetupTimerInterrupt+0x38>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009dfc:	4b0a      	ldr	r3, [pc, #40]	; (8009e28 <vPortSetupTimerInterrupt+0x3c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a0a      	ldr	r2, [pc, #40]	; (8009e2c <vPortSetupTimerInterrupt+0x40>)
 8009e02:	fba2 2303 	umull	r2, r3, r2, r3
 8009e06:	099b      	lsrs	r3, r3, #6
 8009e08:	4a09      	ldr	r2, [pc, #36]	; (8009e30 <vPortSetupTimerInterrupt+0x44>)
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e0e:	4b04      	ldr	r3, [pc, #16]	; (8009e20 <vPortSetupTimerInterrupt+0x34>)
 8009e10:	2207      	movs	r2, #7
 8009e12:	601a      	str	r2, [r3, #0]
}
 8009e14:	bf00      	nop
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	e000e010 	.word	0xe000e010
 8009e24:	e000e018 	.word	0xe000e018
 8009e28:	24000000 	.word	0x24000000
 8009e2c:	10624dd3 	.word	0x10624dd3
 8009e30:	e000e014 	.word	0xe000e014

08009e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e44 <vPortEnableVFP+0x10>
 8009e38:	6801      	ldr	r1, [r0, #0]
 8009e3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e3e:	6001      	str	r1, [r0, #0]
 8009e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e42:	bf00      	nop
 8009e44:	e000ed88 	.word	0xe000ed88

08009e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e4e:	f3ef 8305 	mrs	r3, IPSR
 8009e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2b0f      	cmp	r3, #15
 8009e58:	d914      	bls.n	8009e84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e5a:	4a17      	ldr	r2, [pc, #92]	; (8009eb8 <vPortValidateInterruptPriority+0x70>)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	4413      	add	r3, r2
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e64:	4b15      	ldr	r3, [pc, #84]	; (8009ebc <vPortValidateInterruptPriority+0x74>)
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	7afa      	ldrb	r2, [r7, #11]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d20a      	bcs.n	8009e84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e72:	f383 8811 	msr	BASEPRI, r3
 8009e76:	f3bf 8f6f 	isb	sy
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	607b      	str	r3, [r7, #4]
}
 8009e80:	bf00      	nop
 8009e82:	e7fe      	b.n	8009e82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e84:	4b0e      	ldr	r3, [pc, #56]	; (8009ec0 <vPortValidateInterruptPriority+0x78>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e8c:	4b0d      	ldr	r3, [pc, #52]	; (8009ec4 <vPortValidateInterruptPriority+0x7c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d90a      	bls.n	8009eaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	603b      	str	r3, [r7, #0]
}
 8009ea6:	bf00      	nop
 8009ea8:	e7fe      	b.n	8009ea8 <vPortValidateInterruptPriority+0x60>
	}
 8009eaa:	bf00      	nop
 8009eac:	3714      	adds	r7, #20
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	e000e3f0 	.word	0xe000e3f0
 8009ebc:	24004b70 	.word	0x24004b70
 8009ec0:	e000ed0c 	.word	0xe000ed0c
 8009ec4:	24004b74 	.word	0x24004b74

08009ec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10a      	bne.n	8009ef2 <xQueueGenericReset+0x2a>
	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	60bb      	str	r3, [r7, #8]
}
 8009eee:	bf00      	nop
 8009ef0:	e7fe      	b.n	8009ef0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ef2:	f7ff fec7 	bl	8009c84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009efe:	68f9      	ldr	r1, [r7, #12]
 8009f00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f02:	fb01 f303 	mul.w	r3, r1, r3
 8009f06:	441a      	add	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f22:	3b01      	subs	r3, #1
 8009f24:	68f9      	ldr	r1, [r7, #12]
 8009f26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f28:	fb01 f303 	mul.w	r3, r1, r3
 8009f2c:	441a      	add	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	22ff      	movs	r2, #255	; 0xff
 8009f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	22ff      	movs	r2, #255	; 0xff
 8009f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d114      	bne.n	8009f72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d01a      	beq.n	8009f86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	3310      	adds	r3, #16
 8009f54:	4618      	mov	r0, r3
 8009f56:	f001 f929 	bl	800b1ac <xTaskRemoveFromEventList>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d012      	beq.n	8009f86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f60:	4b0c      	ldr	r3, [pc, #48]	; (8009f94 <xQueueGenericReset+0xcc>)
 8009f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	e009      	b.n	8009f86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3310      	adds	r3, #16
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7ff fca2 	bl	80098c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	3324      	adds	r3, #36	; 0x24
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7ff fc9d 	bl	80098c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f86:	f7ff fead 	bl	8009ce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f8a:	2301      	movs	r3, #1
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	e000ed04 	.word	0xe000ed04

08009f98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b08e      	sub	sp, #56	; 0x38
 8009f9c:	af02      	add	r7, sp, #8
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
 8009fa4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10a      	bne.n	8009fc2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb0:	f383 8811 	msr	BASEPRI, r3
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fbe:	bf00      	nop
 8009fc0:	e7fe      	b.n	8009fc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10a      	bne.n	8009fde <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009fda:	bf00      	nop
 8009fdc:	e7fe      	b.n	8009fdc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d002      	beq.n	8009fea <xQueueGenericCreateStatic+0x52>
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <xQueueGenericCreateStatic+0x56>
 8009fea:	2301      	movs	r3, #1
 8009fec:	e000      	b.n	8009ff0 <xQueueGenericCreateStatic+0x58>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d10a      	bne.n	800a00a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff8:	f383 8811 	msr	BASEPRI, r3
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	623b      	str	r3, [r7, #32]
}
 800a006:	bf00      	nop
 800a008:	e7fe      	b.n	800a008 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d102      	bne.n	800a016 <xQueueGenericCreateStatic+0x7e>
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d101      	bne.n	800a01a <xQueueGenericCreateStatic+0x82>
 800a016:	2301      	movs	r3, #1
 800a018:	e000      	b.n	800a01c <xQueueGenericCreateStatic+0x84>
 800a01a:	2300      	movs	r3, #0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10a      	bne.n	800a036 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	61fb      	str	r3, [r7, #28]
}
 800a032:	bf00      	nop
 800a034:	e7fe      	b.n	800a034 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a036:	2350      	movs	r3, #80	; 0x50
 800a038:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	2b50      	cmp	r3, #80	; 0x50
 800a03e:	d00a      	beq.n	800a056 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	61bb      	str	r3, [r7, #24]
}
 800a052:	bf00      	nop
 800a054:	e7fe      	b.n	800a054 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a056:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00d      	beq.n	800a07e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a064:	2201      	movs	r2, #1
 800a066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a06a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	4613      	mov	r3, r2
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	68b9      	ldr	r1, [r7, #8]
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f000 f805 	bl	800a088 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a080:	4618      	mov	r0, r3
 800a082:	3730      	adds	r7, #48	; 0x30
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d103      	bne.n	800a0a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	69ba      	ldr	r2, [r7, #24]
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	e002      	b.n	800a0aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	69b8      	ldr	r0, [r7, #24]
 800a0ba:	f7ff ff05 	bl	8009ec8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	78fa      	ldrb	r2, [r7, #3]
 800a0c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a0c6:	bf00      	nop
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
	...

0800a0d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b08e      	sub	sp, #56	; 0x38
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
 800a0dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10a      	bne.n	800a102 <xQueueGenericSend+0x32>
	__asm volatile
 800a0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a0fe:	bf00      	nop
 800a100:	e7fe      	b.n	800a100 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d103      	bne.n	800a110 <xQueueGenericSend+0x40>
 800a108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d101      	bne.n	800a114 <xQueueGenericSend+0x44>
 800a110:	2301      	movs	r3, #1
 800a112:	e000      	b.n	800a116 <xQueueGenericSend+0x46>
 800a114:	2300      	movs	r3, #0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10a      	bne.n	800a130 <xQueueGenericSend+0x60>
	__asm volatile
 800a11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11e:	f383 8811 	msr	BASEPRI, r3
 800a122:	f3bf 8f6f 	isb	sy
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a12c:	bf00      	nop
 800a12e:	e7fe      	b.n	800a12e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	2b02      	cmp	r3, #2
 800a134:	d103      	bne.n	800a13e <xQueueGenericSend+0x6e>
 800a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d101      	bne.n	800a142 <xQueueGenericSend+0x72>
 800a13e:	2301      	movs	r3, #1
 800a140:	e000      	b.n	800a144 <xQueueGenericSend+0x74>
 800a142:	2300      	movs	r3, #0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10a      	bne.n	800a15e <xQueueGenericSend+0x8e>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	623b      	str	r3, [r7, #32]
}
 800a15a:	bf00      	nop
 800a15c:	e7fe      	b.n	800a15c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a15e:	f001 f9e7 	bl	800b530 <xTaskGetSchedulerState>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d102      	bne.n	800a16e <xQueueGenericSend+0x9e>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d101      	bne.n	800a172 <xQueueGenericSend+0xa2>
 800a16e:	2301      	movs	r3, #1
 800a170:	e000      	b.n	800a174 <xQueueGenericSend+0xa4>
 800a172:	2300      	movs	r3, #0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10a      	bne.n	800a18e <xQueueGenericSend+0xbe>
	__asm volatile
 800a178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17c:	f383 8811 	msr	BASEPRI, r3
 800a180:	f3bf 8f6f 	isb	sy
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	61fb      	str	r3, [r7, #28]
}
 800a18a:	bf00      	nop
 800a18c:	e7fe      	b.n	800a18c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a18e:	f7ff fd79 	bl	8009c84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d302      	bcc.n	800a1a4 <xQueueGenericSend+0xd4>
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d129      	bne.n	800a1f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	68b9      	ldr	r1, [r7, #8]
 800a1a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1aa:	f000 fa0b 	bl	800a5c4 <prvCopyDataToQueue>
 800a1ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d010      	beq.n	800a1da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ba:	3324      	adds	r3, #36	; 0x24
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f000 fff5 	bl	800b1ac <xTaskRemoveFromEventList>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d013      	beq.n	800a1f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a1c8:	4b3f      	ldr	r3, [pc, #252]	; (800a2c8 <xQueueGenericSend+0x1f8>)
 800a1ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	e00a      	b.n	800a1f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d007      	beq.n	800a1f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a1e0:	4b39      	ldr	r3, [pc, #228]	; (800a2c8 <xQueueGenericSend+0x1f8>)
 800a1e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1e6:	601a      	str	r2, [r3, #0]
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a1f0:	f7ff fd78 	bl	8009ce4 <vPortExitCritical>
				return pdPASS;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e063      	b.n	800a2c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d103      	bne.n	800a206 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1fe:	f7ff fd71 	bl	8009ce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a202:	2300      	movs	r3, #0
 800a204:	e05c      	b.n	800a2c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d106      	bne.n	800a21a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a20c:	f107 0314 	add.w	r3, r7, #20
 800a210:	4618      	mov	r0, r3
 800a212:	f001 f82f 	bl	800b274 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a216:	2301      	movs	r3, #1
 800a218:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a21a:	f7ff fd63 	bl	8009ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a21e:	f000 fd9b 	bl	800ad58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a222:	f7ff fd2f 	bl	8009c84 <vPortEnterCritical>
 800a226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a22c:	b25b      	sxtb	r3, r3
 800a22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a232:	d103      	bne.n	800a23c <xQueueGenericSend+0x16c>
 800a234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a236:	2200      	movs	r2, #0
 800a238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a242:	b25b      	sxtb	r3, r3
 800a244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a248:	d103      	bne.n	800a252 <xQueueGenericSend+0x182>
 800a24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a252:	f7ff fd47 	bl	8009ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a256:	1d3a      	adds	r2, r7, #4
 800a258:	f107 0314 	add.w	r3, r7, #20
 800a25c:	4611      	mov	r1, r2
 800a25e:	4618      	mov	r0, r3
 800a260:	f001 f81e 	bl	800b2a0 <xTaskCheckForTimeOut>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d124      	bne.n	800a2b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a26a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a26c:	f000 faa2 	bl	800a7b4 <prvIsQueueFull>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d018      	beq.n	800a2a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a278:	3310      	adds	r3, #16
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	4611      	mov	r1, r2
 800a27e:	4618      	mov	r0, r3
 800a280:	f000 ff44 	bl	800b10c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a286:	f000 fa2d 	bl	800a6e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a28a:	f000 fd73 	bl	800ad74 <xTaskResumeAll>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	f47f af7c 	bne.w	800a18e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a296:	4b0c      	ldr	r3, [pc, #48]	; (800a2c8 <xQueueGenericSend+0x1f8>)
 800a298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	e772      	b.n	800a18e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2aa:	f000 fa1b 	bl	800a6e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2ae:	f000 fd61 	bl	800ad74 <xTaskResumeAll>
 800a2b2:	e76c      	b.n	800a18e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2b6:	f000 fa15 	bl	800a6e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2ba:	f000 fd5b 	bl	800ad74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a2be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3738      	adds	r7, #56	; 0x38
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	e000ed04 	.word	0xe000ed04

0800a2cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b090      	sub	sp, #64	; 0x40
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
 800a2d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10a      	bne.n	800a2fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e8:	f383 8811 	msr	BASEPRI, r3
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2f6:	bf00      	nop
 800a2f8:	e7fe      	b.n	800a2f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d103      	bne.n	800a308 <xQueueGenericSendFromISR+0x3c>
 800a300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a304:	2b00      	cmp	r3, #0
 800a306:	d101      	bne.n	800a30c <xQueueGenericSendFromISR+0x40>
 800a308:	2301      	movs	r3, #1
 800a30a:	e000      	b.n	800a30e <xQueueGenericSendFromISR+0x42>
 800a30c:	2300      	movs	r3, #0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10a      	bne.n	800a328 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a324:	bf00      	nop
 800a326:	e7fe      	b.n	800a326 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d103      	bne.n	800a336 <xQueueGenericSendFromISR+0x6a>
 800a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a332:	2b01      	cmp	r3, #1
 800a334:	d101      	bne.n	800a33a <xQueueGenericSendFromISR+0x6e>
 800a336:	2301      	movs	r3, #1
 800a338:	e000      	b.n	800a33c <xQueueGenericSendFromISR+0x70>
 800a33a:	2300      	movs	r3, #0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10a      	bne.n	800a356 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a344:	f383 8811 	msr	BASEPRI, r3
 800a348:	f3bf 8f6f 	isb	sy
 800a34c:	f3bf 8f4f 	dsb	sy
 800a350:	623b      	str	r3, [r7, #32]
}
 800a352:	bf00      	nop
 800a354:	e7fe      	b.n	800a354 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a356:	f7ff fd77 	bl	8009e48 <vPortValidateInterruptPriority>
	__asm volatile
 800a35a:	f3ef 8211 	mrs	r2, BASEPRI
 800a35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	61fa      	str	r2, [r7, #28]
 800a370:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a372:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a374:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a37e:	429a      	cmp	r2, r3
 800a380:	d302      	bcc.n	800a388 <xQueueGenericSendFromISR+0xbc>
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b02      	cmp	r3, #2
 800a386:	d12f      	bne.n	800a3e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a396:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	68b9      	ldr	r1, [r7, #8]
 800a39c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a39e:	f000 f911 	bl	800a5c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3aa:	d112      	bne.n	800a3d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d016      	beq.n	800a3e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b6:	3324      	adds	r3, #36	; 0x24
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f000 fef7 	bl	800b1ac <xTaskRemoveFromEventList>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00e      	beq.n	800a3e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00b      	beq.n	800a3e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	e007      	b.n	800a3e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	b25a      	sxtb	r2, r3
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a3e6:	e001      	b.n	800a3ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ee:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	f383 8811 	msr	BASEPRI, r3
}
 800a3f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3740      	adds	r7, #64	; 0x40
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
	...

0800a404 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08c      	sub	sp, #48	; 0x30
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a410:	2300      	movs	r3, #0
 800a412:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10a      	bne.n	800a434 <xQueueReceive+0x30>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	623b      	str	r3, [r7, #32]
}
 800a430:	bf00      	nop
 800a432:	e7fe      	b.n	800a432 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d103      	bne.n	800a442 <xQueueReceive+0x3e>
 800a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d101      	bne.n	800a446 <xQueueReceive+0x42>
 800a442:	2301      	movs	r3, #1
 800a444:	e000      	b.n	800a448 <xQueueReceive+0x44>
 800a446:	2300      	movs	r3, #0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10a      	bne.n	800a462 <xQueueReceive+0x5e>
	__asm volatile
 800a44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	61fb      	str	r3, [r7, #28]
}
 800a45e:	bf00      	nop
 800a460:	e7fe      	b.n	800a460 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a462:	f001 f865 	bl	800b530 <xTaskGetSchedulerState>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d102      	bne.n	800a472 <xQueueReceive+0x6e>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d101      	bne.n	800a476 <xQueueReceive+0x72>
 800a472:	2301      	movs	r3, #1
 800a474:	e000      	b.n	800a478 <xQueueReceive+0x74>
 800a476:	2300      	movs	r3, #0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10a      	bne.n	800a492 <xQueueReceive+0x8e>
	__asm volatile
 800a47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a480:	f383 8811 	msr	BASEPRI, r3
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	f3bf 8f4f 	dsb	sy
 800a48c:	61bb      	str	r3, [r7, #24]
}
 800a48e:	bf00      	nop
 800a490:	e7fe      	b.n	800a490 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a492:	f7ff fbf7 	bl	8009c84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d01f      	beq.n	800a4e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4a2:	68b9      	ldr	r1, [r7, #8]
 800a4a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4a6:	f000 f8f7 	bl	800a698 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ac:	1e5a      	subs	r2, r3, #1
 800a4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00f      	beq.n	800a4da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4bc:	3310      	adds	r3, #16
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 fe74 	bl	800b1ac <xTaskRemoveFromEventList>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d007      	beq.n	800a4da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4ca:	4b3d      	ldr	r3, [pc, #244]	; (800a5c0 <xQueueReceive+0x1bc>)
 800a4cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4d0:	601a      	str	r2, [r3, #0]
 800a4d2:	f3bf 8f4f 	dsb	sy
 800a4d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4da:	f7ff fc03 	bl	8009ce4 <vPortExitCritical>
				return pdPASS;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e069      	b.n	800a5b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d103      	bne.n	800a4f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4e8:	f7ff fbfc 	bl	8009ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	e062      	b.n	800a5b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d106      	bne.n	800a504 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4f6:	f107 0310 	add.w	r3, r7, #16
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 feba 	bl	800b274 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a500:	2301      	movs	r3, #1
 800a502:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a504:	f7ff fbee 	bl	8009ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a508:	f000 fc26 	bl	800ad58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a50c:	f7ff fbba 	bl	8009c84 <vPortEnterCritical>
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a516:	b25b      	sxtb	r3, r3
 800a518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51c:	d103      	bne.n	800a526 <xQueueReceive+0x122>
 800a51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a520:	2200      	movs	r2, #0
 800a522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a52c:	b25b      	sxtb	r3, r3
 800a52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a532:	d103      	bne.n	800a53c <xQueueReceive+0x138>
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	2200      	movs	r2, #0
 800a538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a53c:	f7ff fbd2 	bl	8009ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a540:	1d3a      	adds	r2, r7, #4
 800a542:	f107 0310 	add.w	r3, r7, #16
 800a546:	4611      	mov	r1, r2
 800a548:	4618      	mov	r0, r3
 800a54a:	f000 fea9 	bl	800b2a0 <xTaskCheckForTimeOut>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d123      	bne.n	800a59c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a556:	f000 f917 	bl	800a788 <prvIsQueueEmpty>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d017      	beq.n	800a590 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a562:	3324      	adds	r3, #36	; 0x24
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	4611      	mov	r1, r2
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 fdcf 	bl	800b10c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a56e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a570:	f000 f8b8 	bl	800a6e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a574:	f000 fbfe 	bl	800ad74 <xTaskResumeAll>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d189      	bne.n	800a492 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a57e:	4b10      	ldr	r3, [pc, #64]	; (800a5c0 <xQueueReceive+0x1bc>)
 800a580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a584:	601a      	str	r2, [r3, #0]
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	e780      	b.n	800a492 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a592:	f000 f8a7 	bl	800a6e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a596:	f000 fbed 	bl	800ad74 <xTaskResumeAll>
 800a59a:	e77a      	b.n	800a492 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a59c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a59e:	f000 f8a1 	bl	800a6e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5a2:	f000 fbe7 	bl	800ad74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a8:	f000 f8ee 	bl	800a788 <prvIsQueueEmpty>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	f43f af6f 	beq.w	800a492 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3730      	adds	r7, #48	; 0x30
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	e000ed04 	.word	0xe000ed04

0800a5c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10d      	bne.n	800a5fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d14d      	bne.n	800a686 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 ffbc 	bl	800b56c <xTaskPriorityDisinherit>
 800a5f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	609a      	str	r2, [r3, #8]
 800a5fc:	e043      	b.n	800a686 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d119      	bne.n	800a638 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6858      	ldr	r0, [r3, #4]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60c:	461a      	mov	r2, r3
 800a60e:	68b9      	ldr	r1, [r7, #8]
 800a610:	f001 fbe2 	bl	800bdd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61c:	441a      	add	r2, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	685a      	ldr	r2, [r3, #4]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d32b      	bcc.n	800a686 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	605a      	str	r2, [r3, #4]
 800a636:	e026      	b.n	800a686 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	68d8      	ldr	r0, [r3, #12]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a640:	461a      	mov	r2, r3
 800a642:	68b9      	ldr	r1, [r7, #8]
 800a644:	f001 fbc8 	bl	800bdd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	68da      	ldr	r2, [r3, #12]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a650:	425b      	negs	r3, r3
 800a652:	441a      	add	r2, r3
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	68da      	ldr	r2, [r3, #12]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	429a      	cmp	r2, r3
 800a662:	d207      	bcs.n	800a674 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	689a      	ldr	r2, [r3, #8]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66c:	425b      	negs	r3, r3
 800a66e:	441a      	add	r2, r3
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b02      	cmp	r3, #2
 800a678:	d105      	bne.n	800a686 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d002      	beq.n	800a686 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	3b01      	subs	r3, #1
 800a684:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	1c5a      	adds	r2, r3, #1
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a68e:	697b      	ldr	r3, [r7, #20]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3718      	adds	r7, #24
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d018      	beq.n	800a6dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	68da      	ldr	r2, [r3, #12]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b2:	441a      	add	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	68da      	ldr	r2, [r3, #12]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d303      	bcc.n	800a6cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	68d9      	ldr	r1, [r3, #12]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	6838      	ldr	r0, [r7, #0]
 800a6d8:	f001 fb7e 	bl	800bdd8 <memcpy>
	}
}
 800a6dc:	bf00      	nop
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a6ec:	f7ff faca 	bl	8009c84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6f8:	e011      	b.n	800a71e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d012      	beq.n	800a728 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	3324      	adds	r3, #36	; 0x24
 800a706:	4618      	mov	r0, r3
 800a708:	f000 fd50 	bl	800b1ac <xTaskRemoveFromEventList>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d001      	beq.n	800a716 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a712:	f000 fe27 	bl	800b364 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a716:	7bfb      	ldrb	r3, [r7, #15]
 800a718:	3b01      	subs	r3, #1
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a71e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a722:	2b00      	cmp	r3, #0
 800a724:	dce9      	bgt.n	800a6fa <prvUnlockQueue+0x16>
 800a726:	e000      	b.n	800a72a <prvUnlockQueue+0x46>
					break;
 800a728:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	22ff      	movs	r2, #255	; 0xff
 800a72e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a732:	f7ff fad7 	bl	8009ce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a736:	f7ff faa5 	bl	8009c84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a740:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a742:	e011      	b.n	800a768 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d012      	beq.n	800a772 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3310      	adds	r3, #16
 800a750:	4618      	mov	r0, r3
 800a752:	f000 fd2b 	bl	800b1ac <xTaskRemoveFromEventList>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d001      	beq.n	800a760 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a75c:	f000 fe02 	bl	800b364 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a760:	7bbb      	ldrb	r3, [r7, #14]
 800a762:	3b01      	subs	r3, #1
 800a764:	b2db      	uxtb	r3, r3
 800a766:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	dce9      	bgt.n	800a744 <prvUnlockQueue+0x60>
 800a770:	e000      	b.n	800a774 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a772:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	22ff      	movs	r2, #255	; 0xff
 800a778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a77c:	f7ff fab2 	bl	8009ce4 <vPortExitCritical>
}
 800a780:	bf00      	nop
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a790:	f7ff fa78 	bl	8009c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d102      	bne.n	800a7a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a79c:	2301      	movs	r3, #1
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	e001      	b.n	800a7a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7a6:	f7ff fa9d 	bl	8009ce4 <vPortExitCritical>

	return xReturn;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7bc:	f7ff fa62 	bl	8009c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d102      	bne.n	800a7d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	60fb      	str	r3, [r7, #12]
 800a7d0:	e001      	b.n	800a7d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7d6:	f7ff fa85 	bl	8009ce4 <vPortExitCritical>

	return xReturn;
 800a7da:	68fb      	ldr	r3, [r7, #12]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60fb      	str	r3, [r7, #12]
 800a7f2:	e014      	b.n	800a81e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a7f4:	4a0f      	ldr	r2, [pc, #60]	; (800a834 <vQueueAddToRegistry+0x50>)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d10b      	bne.n	800a818 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a800:	490c      	ldr	r1, [pc, #48]	; (800a834 <vQueueAddToRegistry+0x50>)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	683a      	ldr	r2, [r7, #0]
 800a806:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a80a:	4a0a      	ldr	r2, [pc, #40]	; (800a834 <vQueueAddToRegistry+0x50>)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	00db      	lsls	r3, r3, #3
 800a810:	4413      	add	r3, r2
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a816:	e006      	b.n	800a826 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	3301      	adds	r3, #1
 800a81c:	60fb      	str	r3, [r7, #12]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2b07      	cmp	r3, #7
 800a822:	d9e7      	bls.n	800a7f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a824:	bf00      	nop
 800a826:	bf00      	nop
 800a828:	3714      	adds	r7, #20
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	24004b78 	.word	0x24004b78

0800a838 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a848:	f7ff fa1c 	bl	8009c84 <vPortEnterCritical>
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a852:	b25b      	sxtb	r3, r3
 800a854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a858:	d103      	bne.n	800a862 <vQueueWaitForMessageRestricted+0x2a>
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a868:	b25b      	sxtb	r3, r3
 800a86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86e:	d103      	bne.n	800a878 <vQueueWaitForMessageRestricted+0x40>
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a878:	f7ff fa34 	bl	8009ce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a880:	2b00      	cmp	r3, #0
 800a882:	d106      	bne.n	800a892 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	3324      	adds	r3, #36	; 0x24
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	68b9      	ldr	r1, [r7, #8]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 fc61 	bl	800b154 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a892:	6978      	ldr	r0, [r7, #20]
 800a894:	f7ff ff26 	bl	800a6e4 <prvUnlockQueue>
	}
 800a898:	bf00      	nop
 800a89a:	3718      	adds	r7, #24
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b08e      	sub	sp, #56	; 0x38
 800a8a4:	af04      	add	r7, sp, #16
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10a      	bne.n	800a8ca <xTaskCreateStatic+0x2a>
	__asm volatile
 800a8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b8:	f383 8811 	msr	BASEPRI, r3
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	623b      	str	r3, [r7, #32]
}
 800a8c6:	bf00      	nop
 800a8c8:	e7fe      	b.n	800a8c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10a      	bne.n	800a8e6 <xTaskCreateStatic+0x46>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	61fb      	str	r3, [r7, #28]
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a8e6:	23bc      	movs	r3, #188	; 0xbc
 800a8e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	2bbc      	cmp	r3, #188	; 0xbc
 800a8ee:	d00a      	beq.n	800a906 <xTaskCreateStatic+0x66>
	__asm volatile
 800a8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f4:	f383 8811 	msr	BASEPRI, r3
 800a8f8:	f3bf 8f6f 	isb	sy
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	61bb      	str	r3, [r7, #24]
}
 800a902:	bf00      	nop
 800a904:	e7fe      	b.n	800a904 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a906:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d01e      	beq.n	800a94c <xTaskCreateStatic+0xac>
 800a90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a910:	2b00      	cmp	r3, #0
 800a912:	d01b      	beq.n	800a94c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a916:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a91c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	2202      	movs	r2, #2
 800a922:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a926:	2300      	movs	r3, #0
 800a928:	9303      	str	r3, [sp, #12]
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	9302      	str	r3, [sp, #8]
 800a92e:	f107 0314 	add.w	r3, r7, #20
 800a932:	9301      	str	r3, [sp, #4]
 800a934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	68b9      	ldr	r1, [r7, #8]
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f000 f850 	bl	800a9e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a944:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a946:	f000 f8f3 	bl	800ab30 <prvAddNewTaskToReadyList>
 800a94a:	e001      	b.n	800a950 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a94c:	2300      	movs	r3, #0
 800a94e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a950:	697b      	ldr	r3, [r7, #20]
	}
 800a952:	4618      	mov	r0, r3
 800a954:	3728      	adds	r7, #40	; 0x28
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b08c      	sub	sp, #48	; 0x30
 800a95e:	af04      	add	r7, sp, #16
 800a960:	60f8      	str	r0, [r7, #12]
 800a962:	60b9      	str	r1, [r7, #8]
 800a964:	603b      	str	r3, [r7, #0]
 800a966:	4613      	mov	r3, r2
 800a968:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a96a:	88fb      	ldrh	r3, [r7, #6]
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fe fdbc 	bl	80094ec <pvPortMalloc>
 800a974:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00e      	beq.n	800a99a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a97c:	20bc      	movs	r0, #188	; 0xbc
 800a97e:	f7fe fdb5 	bl	80094ec <pvPortMalloc>
 800a982:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d003      	beq.n	800a992 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	697a      	ldr	r2, [r7, #20]
 800a98e:	631a      	str	r2, [r3, #48]	; 0x30
 800a990:	e005      	b.n	800a99e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a992:	6978      	ldr	r0, [r7, #20]
 800a994:	f7fe fe76 	bl	8009684 <vPortFree>
 800a998:	e001      	b.n	800a99e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a99a:	2300      	movs	r3, #0
 800a99c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d017      	beq.n	800a9d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a9ac:	88fa      	ldrh	r2, [r7, #6]
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	9303      	str	r3, [sp, #12]
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	9302      	str	r3, [sp, #8]
 800a9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b8:	9301      	str	r3, [sp, #4]
 800a9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9bc:	9300      	str	r3, [sp, #0]
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	68b9      	ldr	r1, [r7, #8]
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f000 f80e 	bl	800a9e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9c8:	69f8      	ldr	r0, [r7, #28]
 800a9ca:	f000 f8b1 	bl	800ab30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	61bb      	str	r3, [r7, #24]
 800a9d2:	e002      	b.n	800a9da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a9d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a9da:	69bb      	ldr	r3, [r7, #24]
	}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3720      	adds	r7, #32
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b088      	sub	sp, #32
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
 800a9f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	21a5      	movs	r1, #165	; 0xa5
 800a9fe:	f001 f9f9 	bl	800bdf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa06:	6879      	ldr	r1, [r7, #4]
 800aa08:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800aa0c:	440b      	add	r3, r1
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4413      	add	r3, r2
 800aa12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	f023 0307 	bic.w	r3, r3, #7
 800aa1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	f003 0307 	and.w	r3, r3, #7
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00a      	beq.n	800aa3c <prvInitialiseNewTask+0x58>
	__asm volatile
 800aa26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	617b      	str	r3, [r7, #20]
}
 800aa38:	bf00      	nop
 800aa3a:	e7fe      	b.n	800aa3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d01f      	beq.n	800aa82 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa42:	2300      	movs	r3, #0
 800aa44:	61fb      	str	r3, [r7, #28]
 800aa46:	e012      	b.n	800aa6e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	7819      	ldrb	r1, [r3, #0]
 800aa50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	4413      	add	r3, r2
 800aa56:	3334      	adds	r3, #52	; 0x34
 800aa58:	460a      	mov	r2, r1
 800aa5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	4413      	add	r3, r2
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d006      	beq.n	800aa76 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	61fb      	str	r3, [r7, #28]
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	2b0f      	cmp	r3, #15
 800aa72:	d9e9      	bls.n	800aa48 <prvInitialiseNewTask+0x64>
 800aa74:	e000      	b.n	800aa78 <prvInitialiseNewTask+0x94>
			{
				break;
 800aa76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa80:	e003      	b.n	800aa8a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa84:	2200      	movs	r2, #0
 800aa86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8c:	2b37      	cmp	r3, #55	; 0x37
 800aa8e:	d901      	bls.n	800aa94 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa90:	2337      	movs	r3, #55	; 0x37
 800aa92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aaa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa8:	3304      	adds	r3, #4
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fe ff28 	bl	8009900 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab2:	3318      	adds	r3, #24
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7fe ff23 	bl	8009900 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aabe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aace:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad2:	2200      	movs	r2, #0
 800aad4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae2:	3354      	adds	r3, #84	; 0x54
 800aae4:	2260      	movs	r2, #96	; 0x60
 800aae6:	2100      	movs	r1, #0
 800aae8:	4618      	mov	r0, r3
 800aaea:	f001 f983 	bl	800bdf4 <memset>
 800aaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf0:	4a0c      	ldr	r2, [pc, #48]	; (800ab24 <prvInitialiseNewTask+0x140>)
 800aaf2:	659a      	str	r2, [r3, #88]	; 0x58
 800aaf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf6:	4a0c      	ldr	r2, [pc, #48]	; (800ab28 <prvInitialiseNewTask+0x144>)
 800aaf8:	65da      	str	r2, [r3, #92]	; 0x5c
 800aafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafc:	4a0b      	ldr	r2, [pc, #44]	; (800ab2c <prvInitialiseNewTask+0x148>)
 800aafe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab00:	683a      	ldr	r2, [r7, #0]
 800ab02:	68f9      	ldr	r1, [r7, #12]
 800ab04:	69b8      	ldr	r0, [r7, #24]
 800ab06:	f7fe ff8f 	bl	8009a28 <pxPortInitialiseStack>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d002      	beq.n	800ab1c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab1c:	bf00      	nop
 800ab1e:	3720      	adds	r7, #32
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	0800c08c 	.word	0x0800c08c
 800ab28:	0800c0ac 	.word	0x0800c0ac
 800ab2c:	0800c06c 	.word	0x0800c06c

0800ab30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab38:	f7ff f8a4 	bl	8009c84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab3c:	4b2d      	ldr	r3, [pc, #180]	; (800abf4 <prvAddNewTaskToReadyList+0xc4>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	3301      	adds	r3, #1
 800ab42:	4a2c      	ldr	r2, [pc, #176]	; (800abf4 <prvAddNewTaskToReadyList+0xc4>)
 800ab44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ab46:	4b2c      	ldr	r3, [pc, #176]	; (800abf8 <prvAddNewTaskToReadyList+0xc8>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d109      	bne.n	800ab62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab4e:	4a2a      	ldr	r2, [pc, #168]	; (800abf8 <prvAddNewTaskToReadyList+0xc8>)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab54:	4b27      	ldr	r3, [pc, #156]	; (800abf4 <prvAddNewTaskToReadyList+0xc4>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d110      	bne.n	800ab7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab5c:	f000 fc26 	bl	800b3ac <prvInitialiseTaskLists>
 800ab60:	e00d      	b.n	800ab7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab62:	4b26      	ldr	r3, [pc, #152]	; (800abfc <prvAddNewTaskToReadyList+0xcc>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d109      	bne.n	800ab7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab6a:	4b23      	ldr	r3, [pc, #140]	; (800abf8 <prvAddNewTaskToReadyList+0xc8>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d802      	bhi.n	800ab7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab78:	4a1f      	ldr	r2, [pc, #124]	; (800abf8 <prvAddNewTaskToReadyList+0xc8>)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab7e:	4b20      	ldr	r3, [pc, #128]	; (800ac00 <prvAddNewTaskToReadyList+0xd0>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3301      	adds	r3, #1
 800ab84:	4a1e      	ldr	r2, [pc, #120]	; (800ac00 <prvAddNewTaskToReadyList+0xd0>)
 800ab86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab88:	4b1d      	ldr	r3, [pc, #116]	; (800ac00 <prvAddNewTaskToReadyList+0xd0>)
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab94:	4b1b      	ldr	r3, [pc, #108]	; (800ac04 <prvAddNewTaskToReadyList+0xd4>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d903      	bls.n	800aba4 <prvAddNewTaskToReadyList+0x74>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba0:	4a18      	ldr	r2, [pc, #96]	; (800ac04 <prvAddNewTaskToReadyList+0xd4>)
 800aba2:	6013      	str	r3, [r2, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba8:	4613      	mov	r3, r2
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	4413      	add	r3, r2
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	4a15      	ldr	r2, [pc, #84]	; (800ac08 <prvAddNewTaskToReadyList+0xd8>)
 800abb2:	441a      	add	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	3304      	adds	r3, #4
 800abb8:	4619      	mov	r1, r3
 800abba:	4610      	mov	r0, r2
 800abbc:	f7fe fead 	bl	800991a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800abc0:	f7ff f890 	bl	8009ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800abc4:	4b0d      	ldr	r3, [pc, #52]	; (800abfc <prvAddNewTaskToReadyList+0xcc>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00e      	beq.n	800abea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800abcc:	4b0a      	ldr	r3, [pc, #40]	; (800abf8 <prvAddNewTaskToReadyList+0xc8>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d207      	bcs.n	800abea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800abda:	4b0c      	ldr	r3, [pc, #48]	; (800ac0c <prvAddNewTaskToReadyList+0xdc>)
 800abdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abe0:	601a      	str	r2, [r3, #0]
 800abe2:	f3bf 8f4f 	dsb	sy
 800abe6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abea:	bf00      	nop
 800abec:	3708      	adds	r7, #8
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	2400508c 	.word	0x2400508c
 800abf8:	24004bb8 	.word	0x24004bb8
 800abfc:	24005098 	.word	0x24005098
 800ac00:	240050a8 	.word	0x240050a8
 800ac04:	24005094 	.word	0x24005094
 800ac08:	24004bbc 	.word	0x24004bbc
 800ac0c:	e000ed04 	.word	0xe000ed04

0800ac10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d017      	beq.n	800ac52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac22:	4b13      	ldr	r3, [pc, #76]	; (800ac70 <vTaskDelay+0x60>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00a      	beq.n	800ac40 <vTaskDelay+0x30>
	__asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	60bb      	str	r3, [r7, #8]
}
 800ac3c:	bf00      	nop
 800ac3e:	e7fe      	b.n	800ac3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ac40:	f000 f88a 	bl	800ad58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac44:	2100      	movs	r1, #0
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fcfe 	bl	800b648 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac4c:	f000 f892 	bl	800ad74 <xTaskResumeAll>
 800ac50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d107      	bne.n	800ac68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ac58:	4b06      	ldr	r3, [pc, #24]	; (800ac74 <vTaskDelay+0x64>)
 800ac5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac5e:	601a      	str	r2, [r3, #0]
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac68:	bf00      	nop
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	240050b4 	.word	0x240050b4
 800ac74:	e000ed04 	.word	0xe000ed04

0800ac78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b08a      	sub	sp, #40	; 0x28
 800ac7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac86:	463a      	mov	r2, r7
 800ac88:	1d39      	adds	r1, r7, #4
 800ac8a:	f107 0308 	add.w	r3, r7, #8
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fe fbf8 	bl	8009484 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac94:	6839      	ldr	r1, [r7, #0]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	9202      	str	r2, [sp, #8]
 800ac9c:	9301      	str	r3, [sp, #4]
 800ac9e:	2300      	movs	r3, #0
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	2300      	movs	r3, #0
 800aca4:	460a      	mov	r2, r1
 800aca6:	4924      	ldr	r1, [pc, #144]	; (800ad38 <vTaskStartScheduler+0xc0>)
 800aca8:	4824      	ldr	r0, [pc, #144]	; (800ad3c <vTaskStartScheduler+0xc4>)
 800acaa:	f7ff fdf9 	bl	800a8a0 <xTaskCreateStatic>
 800acae:	4603      	mov	r3, r0
 800acb0:	4a23      	ldr	r2, [pc, #140]	; (800ad40 <vTaskStartScheduler+0xc8>)
 800acb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800acb4:	4b22      	ldr	r3, [pc, #136]	; (800ad40 <vTaskStartScheduler+0xc8>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800acbc:	2301      	movs	r3, #1
 800acbe:	617b      	str	r3, [r7, #20]
 800acc0:	e001      	b.n	800acc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800acc2:	2300      	movs	r3, #0
 800acc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d102      	bne.n	800acd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800accc:	f000 fd10 	bl	800b6f0 <xTimerCreateTimerTask>
 800acd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d11b      	bne.n	800ad10 <vTaskStartScheduler+0x98>
	__asm volatile
 800acd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acdc:	f383 8811 	msr	BASEPRI, r3
 800ace0:	f3bf 8f6f 	isb	sy
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	613b      	str	r3, [r7, #16]
}
 800acea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800acec:	4b15      	ldr	r3, [pc, #84]	; (800ad44 <vTaskStartScheduler+0xcc>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	3354      	adds	r3, #84	; 0x54
 800acf2:	4a15      	ldr	r2, [pc, #84]	; (800ad48 <vTaskStartScheduler+0xd0>)
 800acf4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800acf6:	4b15      	ldr	r3, [pc, #84]	; (800ad4c <vTaskStartScheduler+0xd4>)
 800acf8:	f04f 32ff 	mov.w	r2, #4294967295
 800acfc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800acfe:	4b14      	ldr	r3, [pc, #80]	; (800ad50 <vTaskStartScheduler+0xd8>)
 800ad00:	2201      	movs	r2, #1
 800ad02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad04:	4b13      	ldr	r3, [pc, #76]	; (800ad54 <vTaskStartScheduler+0xdc>)
 800ad06:	2200      	movs	r2, #0
 800ad08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad0a:	f7fe ff19 	bl	8009b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad0e:	e00e      	b.n	800ad2e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad16:	d10a      	bne.n	800ad2e <vTaskStartScheduler+0xb6>
	__asm volatile
 800ad18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1c:	f383 8811 	msr	BASEPRI, r3
 800ad20:	f3bf 8f6f 	isb	sy
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	60fb      	str	r3, [r7, #12]
}
 800ad2a:	bf00      	nop
 800ad2c:	e7fe      	b.n	800ad2c <vTaskStartScheduler+0xb4>
}
 800ad2e:	bf00      	nop
 800ad30:	3718      	adds	r7, #24
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	0800bff8 	.word	0x0800bff8
 800ad3c:	0800b37d 	.word	0x0800b37d
 800ad40:	240050b0 	.word	0x240050b0
 800ad44:	24004bb8 	.word	0x24004bb8
 800ad48:	24000014 	.word	0x24000014
 800ad4c:	240050ac 	.word	0x240050ac
 800ad50:	24005098 	.word	0x24005098
 800ad54:	24005090 	.word	0x24005090

0800ad58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad58:	b480      	push	{r7}
 800ad5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ad5c:	4b04      	ldr	r3, [pc, #16]	; (800ad70 <vTaskSuspendAll+0x18>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	3301      	adds	r3, #1
 800ad62:	4a03      	ldr	r2, [pc, #12]	; (800ad70 <vTaskSuspendAll+0x18>)
 800ad64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ad66:	bf00      	nop
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	240050b4 	.word	0x240050b4

0800ad74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad82:	4b42      	ldr	r3, [pc, #264]	; (800ae8c <xTaskResumeAll+0x118>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d10a      	bne.n	800ada0 <xTaskResumeAll+0x2c>
	__asm volatile
 800ad8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8e:	f383 8811 	msr	BASEPRI, r3
 800ad92:	f3bf 8f6f 	isb	sy
 800ad96:	f3bf 8f4f 	dsb	sy
 800ad9a:	603b      	str	r3, [r7, #0]
}
 800ad9c:	bf00      	nop
 800ad9e:	e7fe      	b.n	800ad9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ada0:	f7fe ff70 	bl	8009c84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ada4:	4b39      	ldr	r3, [pc, #228]	; (800ae8c <xTaskResumeAll+0x118>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	4a38      	ldr	r2, [pc, #224]	; (800ae8c <xTaskResumeAll+0x118>)
 800adac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adae:	4b37      	ldr	r3, [pc, #220]	; (800ae8c <xTaskResumeAll+0x118>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d162      	bne.n	800ae7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800adb6:	4b36      	ldr	r3, [pc, #216]	; (800ae90 <xTaskResumeAll+0x11c>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d05e      	beq.n	800ae7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800adbe:	e02f      	b.n	800ae20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adc0:	4b34      	ldr	r3, [pc, #208]	; (800ae94 <xTaskResumeAll+0x120>)
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	3318      	adds	r3, #24
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fe fe01 	bl	80099d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	3304      	adds	r3, #4
 800add6:	4618      	mov	r0, r3
 800add8:	f7fe fdfc 	bl	80099d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade0:	4b2d      	ldr	r3, [pc, #180]	; (800ae98 <xTaskResumeAll+0x124>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d903      	bls.n	800adf0 <xTaskResumeAll+0x7c>
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adec:	4a2a      	ldr	r2, [pc, #168]	; (800ae98 <xTaskResumeAll+0x124>)
 800adee:	6013      	str	r3, [r2, #0]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf4:	4613      	mov	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4413      	add	r3, r2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	4a27      	ldr	r2, [pc, #156]	; (800ae9c <xTaskResumeAll+0x128>)
 800adfe:	441a      	add	r2, r3
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	3304      	adds	r3, #4
 800ae04:	4619      	mov	r1, r3
 800ae06:	4610      	mov	r0, r2
 800ae08:	f7fe fd87 	bl	800991a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae10:	4b23      	ldr	r3, [pc, #140]	; (800aea0 <xTaskResumeAll+0x12c>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d302      	bcc.n	800ae20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ae1a:	4b22      	ldr	r3, [pc, #136]	; (800aea4 <xTaskResumeAll+0x130>)
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae20:	4b1c      	ldr	r3, [pc, #112]	; (800ae94 <xTaskResumeAll+0x120>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1cb      	bne.n	800adc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d001      	beq.n	800ae32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae2e:	f000 fb5f 	bl	800b4f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ae32:	4b1d      	ldr	r3, [pc, #116]	; (800aea8 <xTaskResumeAll+0x134>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d010      	beq.n	800ae60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae3e:	f000 f847 	bl	800aed0 <xTaskIncrementTick>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d002      	beq.n	800ae4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ae48:	4b16      	ldr	r3, [pc, #88]	; (800aea4 <xTaskResumeAll+0x130>)
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	3b01      	subs	r3, #1
 800ae52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1f1      	bne.n	800ae3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ae5a:	4b13      	ldr	r3, [pc, #76]	; (800aea8 <xTaskResumeAll+0x134>)
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae60:	4b10      	ldr	r3, [pc, #64]	; (800aea4 <xTaskResumeAll+0x130>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d009      	beq.n	800ae7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae6c:	4b0f      	ldr	r3, [pc, #60]	; (800aeac <xTaskResumeAll+0x138>)
 800ae6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	f3bf 8f4f 	dsb	sy
 800ae78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae7c:	f7fe ff32 	bl	8009ce4 <vPortExitCritical>

	return xAlreadyYielded;
 800ae80:	68bb      	ldr	r3, [r7, #8]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	240050b4 	.word	0x240050b4
 800ae90:	2400508c 	.word	0x2400508c
 800ae94:	2400504c 	.word	0x2400504c
 800ae98:	24005094 	.word	0x24005094
 800ae9c:	24004bbc 	.word	0x24004bbc
 800aea0:	24004bb8 	.word	0x24004bb8
 800aea4:	240050a0 	.word	0x240050a0
 800aea8:	2400509c 	.word	0x2400509c
 800aeac:	e000ed04 	.word	0xe000ed04

0800aeb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aeb6:	4b05      	ldr	r3, [pc, #20]	; (800aecc <xTaskGetTickCount+0x1c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aebc:	687b      	ldr	r3, [r7, #4]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	370c      	adds	r7, #12
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	24005090 	.word	0x24005090

0800aed0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aed6:	2300      	movs	r3, #0
 800aed8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aeda:	4b4f      	ldr	r3, [pc, #316]	; (800b018 <xTaskIncrementTick+0x148>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f040 808f 	bne.w	800b002 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aee4:	4b4d      	ldr	r3, [pc, #308]	; (800b01c <xTaskIncrementTick+0x14c>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	3301      	adds	r3, #1
 800aeea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aeec:	4a4b      	ldr	r2, [pc, #300]	; (800b01c <xTaskIncrementTick+0x14c>)
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d120      	bne.n	800af3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aef8:	4b49      	ldr	r3, [pc, #292]	; (800b020 <xTaskIncrementTick+0x150>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00a      	beq.n	800af18 <xTaskIncrementTick+0x48>
	__asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	603b      	str	r3, [r7, #0]
}
 800af14:	bf00      	nop
 800af16:	e7fe      	b.n	800af16 <xTaskIncrementTick+0x46>
 800af18:	4b41      	ldr	r3, [pc, #260]	; (800b020 <xTaskIncrementTick+0x150>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	60fb      	str	r3, [r7, #12]
 800af1e:	4b41      	ldr	r3, [pc, #260]	; (800b024 <xTaskIncrementTick+0x154>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a3f      	ldr	r2, [pc, #252]	; (800b020 <xTaskIncrementTick+0x150>)
 800af24:	6013      	str	r3, [r2, #0]
 800af26:	4a3f      	ldr	r2, [pc, #252]	; (800b024 <xTaskIncrementTick+0x154>)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6013      	str	r3, [r2, #0]
 800af2c:	4b3e      	ldr	r3, [pc, #248]	; (800b028 <xTaskIncrementTick+0x158>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	3301      	adds	r3, #1
 800af32:	4a3d      	ldr	r2, [pc, #244]	; (800b028 <xTaskIncrementTick+0x158>)
 800af34:	6013      	str	r3, [r2, #0]
 800af36:	f000 fadb 	bl	800b4f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af3a:	4b3c      	ldr	r3, [pc, #240]	; (800b02c <xTaskIncrementTick+0x15c>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	429a      	cmp	r2, r3
 800af42:	d349      	bcc.n	800afd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af44:	4b36      	ldr	r3, [pc, #216]	; (800b020 <xTaskIncrementTick+0x150>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d104      	bne.n	800af58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af4e:	4b37      	ldr	r3, [pc, #220]	; (800b02c <xTaskIncrementTick+0x15c>)
 800af50:	f04f 32ff 	mov.w	r2, #4294967295
 800af54:	601a      	str	r2, [r3, #0]
					break;
 800af56:	e03f      	b.n	800afd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af58:	4b31      	ldr	r3, [pc, #196]	; (800b020 <xTaskIncrementTick+0x150>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d203      	bcs.n	800af78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af70:	4a2e      	ldr	r2, [pc, #184]	; (800b02c <xTaskIncrementTick+0x15c>)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af76:	e02f      	b.n	800afd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	3304      	adds	r3, #4
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7fe fd29 	bl	80099d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af86:	2b00      	cmp	r3, #0
 800af88:	d004      	beq.n	800af94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	3318      	adds	r3, #24
 800af8e:	4618      	mov	r0, r3
 800af90:	f7fe fd20 	bl	80099d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af98:	4b25      	ldr	r3, [pc, #148]	; (800b030 <xTaskIncrementTick+0x160>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d903      	bls.n	800afa8 <xTaskIncrementTick+0xd8>
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa4:	4a22      	ldr	r2, [pc, #136]	; (800b030 <xTaskIncrementTick+0x160>)
 800afa6:	6013      	str	r3, [r2, #0]
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afac:	4613      	mov	r3, r2
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	4413      	add	r3, r2
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	4a1f      	ldr	r2, [pc, #124]	; (800b034 <xTaskIncrementTick+0x164>)
 800afb6:	441a      	add	r2, r3
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	3304      	adds	r3, #4
 800afbc:	4619      	mov	r1, r3
 800afbe:	4610      	mov	r0, r2
 800afc0:	f7fe fcab 	bl	800991a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc8:	4b1b      	ldr	r3, [pc, #108]	; (800b038 <xTaskIncrementTick+0x168>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afce:	429a      	cmp	r2, r3
 800afd0:	d3b8      	bcc.n	800af44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800afd2:	2301      	movs	r3, #1
 800afd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afd6:	e7b5      	b.n	800af44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800afd8:	4b17      	ldr	r3, [pc, #92]	; (800b038 <xTaskIncrementTick+0x168>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afde:	4915      	ldr	r1, [pc, #84]	; (800b034 <xTaskIncrementTick+0x164>)
 800afe0:	4613      	mov	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	4413      	add	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	440b      	add	r3, r1
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d901      	bls.n	800aff4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800aff0:	2301      	movs	r3, #1
 800aff2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aff4:	4b11      	ldr	r3, [pc, #68]	; (800b03c <xTaskIncrementTick+0x16c>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d007      	beq.n	800b00c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800affc:	2301      	movs	r3, #1
 800affe:	617b      	str	r3, [r7, #20]
 800b000:	e004      	b.n	800b00c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b002:	4b0f      	ldr	r3, [pc, #60]	; (800b040 <xTaskIncrementTick+0x170>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	3301      	adds	r3, #1
 800b008:	4a0d      	ldr	r2, [pc, #52]	; (800b040 <xTaskIncrementTick+0x170>)
 800b00a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b00c:	697b      	ldr	r3, [r7, #20]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3718      	adds	r7, #24
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	240050b4 	.word	0x240050b4
 800b01c:	24005090 	.word	0x24005090
 800b020:	24005044 	.word	0x24005044
 800b024:	24005048 	.word	0x24005048
 800b028:	240050a4 	.word	0x240050a4
 800b02c:	240050ac 	.word	0x240050ac
 800b030:	24005094 	.word	0x24005094
 800b034:	24004bbc 	.word	0x24004bbc
 800b038:	24004bb8 	.word	0x24004bb8
 800b03c:	240050a0 	.word	0x240050a0
 800b040:	2400509c 	.word	0x2400509c

0800b044 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b04a:	4b2a      	ldr	r3, [pc, #168]	; (800b0f4 <vTaskSwitchContext+0xb0>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d003      	beq.n	800b05a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b052:	4b29      	ldr	r3, [pc, #164]	; (800b0f8 <vTaskSwitchContext+0xb4>)
 800b054:	2201      	movs	r2, #1
 800b056:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b058:	e046      	b.n	800b0e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b05a:	4b27      	ldr	r3, [pc, #156]	; (800b0f8 <vTaskSwitchContext+0xb4>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b060:	4b26      	ldr	r3, [pc, #152]	; (800b0fc <vTaskSwitchContext+0xb8>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	60fb      	str	r3, [r7, #12]
 800b066:	e010      	b.n	800b08a <vTaskSwitchContext+0x46>
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10a      	bne.n	800b084 <vTaskSwitchContext+0x40>
	__asm volatile
 800b06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b072:	f383 8811 	msr	BASEPRI, r3
 800b076:	f3bf 8f6f 	isb	sy
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	607b      	str	r3, [r7, #4]
}
 800b080:	bf00      	nop
 800b082:	e7fe      	b.n	800b082 <vTaskSwitchContext+0x3e>
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	3b01      	subs	r3, #1
 800b088:	60fb      	str	r3, [r7, #12]
 800b08a:	491d      	ldr	r1, [pc, #116]	; (800b100 <vTaskSwitchContext+0xbc>)
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	4613      	mov	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4413      	add	r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	440b      	add	r3, r1
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d0e4      	beq.n	800b068 <vTaskSwitchContext+0x24>
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4413      	add	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4a15      	ldr	r2, [pc, #84]	; (800b100 <vTaskSwitchContext+0xbc>)
 800b0aa:	4413      	add	r3, r2
 800b0ac:	60bb      	str	r3, [r7, #8]
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	685a      	ldr	r2, [r3, #4]
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	605a      	str	r2, [r3, #4]
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	685a      	ldr	r2, [r3, #4]
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	3308      	adds	r3, #8
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d104      	bne.n	800b0ce <vTaskSwitchContext+0x8a>
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	685a      	ldr	r2, [r3, #4]
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	605a      	str	r2, [r3, #4]
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	4a0b      	ldr	r2, [pc, #44]	; (800b104 <vTaskSwitchContext+0xc0>)
 800b0d6:	6013      	str	r3, [r2, #0]
 800b0d8:	4a08      	ldr	r2, [pc, #32]	; (800b0fc <vTaskSwitchContext+0xb8>)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0de:	4b09      	ldr	r3, [pc, #36]	; (800b104 <vTaskSwitchContext+0xc0>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	3354      	adds	r3, #84	; 0x54
 800b0e4:	4a08      	ldr	r2, [pc, #32]	; (800b108 <vTaskSwitchContext+0xc4>)
 800b0e6:	6013      	str	r3, [r2, #0]
}
 800b0e8:	bf00      	nop
 800b0ea:	3714      	adds	r7, #20
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr
 800b0f4:	240050b4 	.word	0x240050b4
 800b0f8:	240050a0 	.word	0x240050a0
 800b0fc:	24005094 	.word	0x24005094
 800b100:	24004bbc 	.word	0x24004bbc
 800b104:	24004bb8 	.word	0x24004bb8
 800b108:	24000014 	.word	0x24000014

0800b10c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10a      	bne.n	800b132 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b120:	f383 8811 	msr	BASEPRI, r3
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	60fb      	str	r3, [r7, #12]
}
 800b12e:	bf00      	nop
 800b130:	e7fe      	b.n	800b130 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b132:	4b07      	ldr	r3, [pc, #28]	; (800b150 <vTaskPlaceOnEventList+0x44>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3318      	adds	r3, #24
 800b138:	4619      	mov	r1, r3
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7fe fc11 	bl	8009962 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b140:	2101      	movs	r1, #1
 800b142:	6838      	ldr	r0, [r7, #0]
 800b144:	f000 fa80 	bl	800b648 <prvAddCurrentTaskToDelayedList>
}
 800b148:	bf00      	nop
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	24004bb8 	.word	0x24004bb8

0800b154 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10a      	bne.n	800b17c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	617b      	str	r3, [r7, #20]
}
 800b178:	bf00      	nop
 800b17a:	e7fe      	b.n	800b17a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b17c:	4b0a      	ldr	r3, [pc, #40]	; (800b1a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	3318      	adds	r3, #24
 800b182:	4619      	mov	r1, r3
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f7fe fbc8 	bl	800991a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d002      	beq.n	800b196 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b190:	f04f 33ff 	mov.w	r3, #4294967295
 800b194:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b196:	6879      	ldr	r1, [r7, #4]
 800b198:	68b8      	ldr	r0, [r7, #8]
 800b19a:	f000 fa55 	bl	800b648 <prvAddCurrentTaskToDelayedList>
	}
 800b19e:	bf00      	nop
 800b1a0:	3718      	adds	r7, #24
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	24004bb8 	.word	0x24004bb8

0800b1ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b086      	sub	sp, #24
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d10a      	bne.n	800b1d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	60fb      	str	r3, [r7, #12]
}
 800b1d4:	bf00      	nop
 800b1d6:	e7fe      	b.n	800b1d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	3318      	adds	r3, #24
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7fe fbf9 	bl	80099d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1e2:	4b1e      	ldr	r3, [pc, #120]	; (800b25c <xTaskRemoveFromEventList+0xb0>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d11d      	bne.n	800b226 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	3304      	adds	r3, #4
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fe fbf0 	bl	80099d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f8:	4b19      	ldr	r3, [pc, #100]	; (800b260 <xTaskRemoveFromEventList+0xb4>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d903      	bls.n	800b208 <xTaskRemoveFromEventList+0x5c>
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b204:	4a16      	ldr	r2, [pc, #88]	; (800b260 <xTaskRemoveFromEventList+0xb4>)
 800b206:	6013      	str	r3, [r2, #0]
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b20c:	4613      	mov	r3, r2
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	4413      	add	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	4a13      	ldr	r2, [pc, #76]	; (800b264 <xTaskRemoveFromEventList+0xb8>)
 800b216:	441a      	add	r2, r3
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	3304      	adds	r3, #4
 800b21c:	4619      	mov	r1, r3
 800b21e:	4610      	mov	r0, r2
 800b220:	f7fe fb7b 	bl	800991a <vListInsertEnd>
 800b224:	e005      	b.n	800b232 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	3318      	adds	r3, #24
 800b22a:	4619      	mov	r1, r3
 800b22c:	480e      	ldr	r0, [pc, #56]	; (800b268 <xTaskRemoveFromEventList+0xbc>)
 800b22e:	f7fe fb74 	bl	800991a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b236:	4b0d      	ldr	r3, [pc, #52]	; (800b26c <xTaskRemoveFromEventList+0xc0>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d905      	bls.n	800b24c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b240:	2301      	movs	r3, #1
 800b242:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b244:	4b0a      	ldr	r3, [pc, #40]	; (800b270 <xTaskRemoveFromEventList+0xc4>)
 800b246:	2201      	movs	r2, #1
 800b248:	601a      	str	r2, [r3, #0]
 800b24a:	e001      	b.n	800b250 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b24c:	2300      	movs	r3, #0
 800b24e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b250:	697b      	ldr	r3, [r7, #20]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3718      	adds	r7, #24
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	240050b4 	.word	0x240050b4
 800b260:	24005094 	.word	0x24005094
 800b264:	24004bbc 	.word	0x24004bbc
 800b268:	2400504c 	.word	0x2400504c
 800b26c:	24004bb8 	.word	0x24004bb8
 800b270:	240050a0 	.word	0x240050a0

0800b274 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b27c:	4b06      	ldr	r3, [pc, #24]	; (800b298 <vTaskInternalSetTimeOutState+0x24>)
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b284:	4b05      	ldr	r3, [pc, #20]	; (800b29c <vTaskInternalSetTimeOutState+0x28>)
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	605a      	str	r2, [r3, #4]
}
 800b28c:	bf00      	nop
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr
 800b298:	240050a4 	.word	0x240050a4
 800b29c:	24005090 	.word	0x24005090

0800b2a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b088      	sub	sp, #32
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d10a      	bne.n	800b2c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	613b      	str	r3, [r7, #16]
}
 800b2c2:	bf00      	nop
 800b2c4:	e7fe      	b.n	800b2c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d10a      	bne.n	800b2e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	60fb      	str	r3, [r7, #12]
}
 800b2de:	bf00      	nop
 800b2e0:	e7fe      	b.n	800b2e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b2e2:	f7fe fccf 	bl	8009c84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b2e6:	4b1d      	ldr	r3, [pc, #116]	; (800b35c <xTaskCheckForTimeOut+0xbc>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	69ba      	ldr	r2, [r7, #24]
 800b2f2:	1ad3      	subs	r3, r2, r3
 800b2f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fe:	d102      	bne.n	800b306 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b300:	2300      	movs	r3, #0
 800b302:	61fb      	str	r3, [r7, #28]
 800b304:	e023      	b.n	800b34e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	4b15      	ldr	r3, [pc, #84]	; (800b360 <xTaskCheckForTimeOut+0xc0>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d007      	beq.n	800b322 <xTaskCheckForTimeOut+0x82>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	69ba      	ldr	r2, [r7, #24]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d302      	bcc.n	800b322 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b31c:	2301      	movs	r3, #1
 800b31e:	61fb      	str	r3, [r7, #28]
 800b320:	e015      	b.n	800b34e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	697a      	ldr	r2, [r7, #20]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d20b      	bcs.n	800b344 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	1ad2      	subs	r2, r2, r3
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f7ff ff9b 	bl	800b274 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b33e:	2300      	movs	r3, #0
 800b340:	61fb      	str	r3, [r7, #28]
 800b342:	e004      	b.n	800b34e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	2200      	movs	r2, #0
 800b348:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b34a:	2301      	movs	r3, #1
 800b34c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b34e:	f7fe fcc9 	bl	8009ce4 <vPortExitCritical>

	return xReturn;
 800b352:	69fb      	ldr	r3, [r7, #28]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3720      	adds	r7, #32
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	24005090 	.word	0x24005090
 800b360:	240050a4 	.word	0x240050a4

0800b364 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b364:	b480      	push	{r7}
 800b366:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b368:	4b03      	ldr	r3, [pc, #12]	; (800b378 <vTaskMissedYield+0x14>)
 800b36a:	2201      	movs	r2, #1
 800b36c:	601a      	str	r2, [r3, #0]
}
 800b36e:	bf00      	nop
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	240050a0 	.word	0x240050a0

0800b37c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b384:	f000 f852 	bl	800b42c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b388:	4b06      	ldr	r3, [pc, #24]	; (800b3a4 <prvIdleTask+0x28>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d9f9      	bls.n	800b384 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b390:	4b05      	ldr	r3, [pc, #20]	; (800b3a8 <prvIdleTask+0x2c>)
 800b392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b3a0:	e7f0      	b.n	800b384 <prvIdleTask+0x8>
 800b3a2:	bf00      	nop
 800b3a4:	24004bbc 	.word	0x24004bbc
 800b3a8:	e000ed04 	.word	0xe000ed04

0800b3ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	607b      	str	r3, [r7, #4]
 800b3b6:	e00c      	b.n	800b3d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	4613      	mov	r3, r2
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	4413      	add	r3, r2
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	4a12      	ldr	r2, [pc, #72]	; (800b40c <prvInitialiseTaskLists+0x60>)
 800b3c4:	4413      	add	r3, r2
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7fe fa7a 	bl	80098c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	607b      	str	r3, [r7, #4]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b37      	cmp	r3, #55	; 0x37
 800b3d6:	d9ef      	bls.n	800b3b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b3d8:	480d      	ldr	r0, [pc, #52]	; (800b410 <prvInitialiseTaskLists+0x64>)
 800b3da:	f7fe fa71 	bl	80098c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b3de:	480d      	ldr	r0, [pc, #52]	; (800b414 <prvInitialiseTaskLists+0x68>)
 800b3e0:	f7fe fa6e 	bl	80098c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b3e4:	480c      	ldr	r0, [pc, #48]	; (800b418 <prvInitialiseTaskLists+0x6c>)
 800b3e6:	f7fe fa6b 	bl	80098c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b3ea:	480c      	ldr	r0, [pc, #48]	; (800b41c <prvInitialiseTaskLists+0x70>)
 800b3ec:	f7fe fa68 	bl	80098c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b3f0:	480b      	ldr	r0, [pc, #44]	; (800b420 <prvInitialiseTaskLists+0x74>)
 800b3f2:	f7fe fa65 	bl	80098c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b3f6:	4b0b      	ldr	r3, [pc, #44]	; (800b424 <prvInitialiseTaskLists+0x78>)
 800b3f8:	4a05      	ldr	r2, [pc, #20]	; (800b410 <prvInitialiseTaskLists+0x64>)
 800b3fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b3fc:	4b0a      	ldr	r3, [pc, #40]	; (800b428 <prvInitialiseTaskLists+0x7c>)
 800b3fe:	4a05      	ldr	r2, [pc, #20]	; (800b414 <prvInitialiseTaskLists+0x68>)
 800b400:	601a      	str	r2, [r3, #0]
}
 800b402:	bf00      	nop
 800b404:	3708      	adds	r7, #8
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	24004bbc 	.word	0x24004bbc
 800b410:	2400501c 	.word	0x2400501c
 800b414:	24005030 	.word	0x24005030
 800b418:	2400504c 	.word	0x2400504c
 800b41c:	24005060 	.word	0x24005060
 800b420:	24005078 	.word	0x24005078
 800b424:	24005044 	.word	0x24005044
 800b428:	24005048 	.word	0x24005048

0800b42c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b432:	e019      	b.n	800b468 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b434:	f7fe fc26 	bl	8009c84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b438:	4b10      	ldr	r3, [pc, #64]	; (800b47c <prvCheckTasksWaitingTermination+0x50>)
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	3304      	adds	r3, #4
 800b444:	4618      	mov	r0, r3
 800b446:	f7fe fac5 	bl	80099d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b44a:	4b0d      	ldr	r3, [pc, #52]	; (800b480 <prvCheckTasksWaitingTermination+0x54>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	3b01      	subs	r3, #1
 800b450:	4a0b      	ldr	r2, [pc, #44]	; (800b480 <prvCheckTasksWaitingTermination+0x54>)
 800b452:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b454:	4b0b      	ldr	r3, [pc, #44]	; (800b484 <prvCheckTasksWaitingTermination+0x58>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	3b01      	subs	r3, #1
 800b45a:	4a0a      	ldr	r2, [pc, #40]	; (800b484 <prvCheckTasksWaitingTermination+0x58>)
 800b45c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b45e:	f7fe fc41 	bl	8009ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f810 	bl	800b488 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b468:	4b06      	ldr	r3, [pc, #24]	; (800b484 <prvCheckTasksWaitingTermination+0x58>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1e1      	bne.n	800b434 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b470:	bf00      	nop
 800b472:	bf00      	nop
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	24005060 	.word	0x24005060
 800b480:	2400508c 	.word	0x2400508c
 800b484:	24005074 	.word	0x24005074

0800b488 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	3354      	adds	r3, #84	; 0x54
 800b494:	4618      	mov	r0, r3
 800b496:	f000 fcc3 	bl	800be20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d108      	bne.n	800b4b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7fe f8eb 	bl	8009684 <vPortFree>
				vPortFree( pxTCB );
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f7fe f8e8 	bl	8009684 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b4b4:	e018      	b.n	800b4e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d103      	bne.n	800b4c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f7fe f8df 	bl	8009684 <vPortFree>
	}
 800b4c6:	e00f      	b.n	800b4e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b4ce:	2b02      	cmp	r3, #2
 800b4d0:	d00a      	beq.n	800b4e8 <prvDeleteTCB+0x60>
	__asm volatile
 800b4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d6:	f383 8811 	msr	BASEPRI, r3
 800b4da:	f3bf 8f6f 	isb	sy
 800b4de:	f3bf 8f4f 	dsb	sy
 800b4e2:	60fb      	str	r3, [r7, #12]
}
 800b4e4:	bf00      	nop
 800b4e6:	e7fe      	b.n	800b4e6 <prvDeleteTCB+0x5e>
	}
 800b4e8:	bf00      	nop
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4f6:	4b0c      	ldr	r3, [pc, #48]	; (800b528 <prvResetNextTaskUnblockTime+0x38>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d104      	bne.n	800b50a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b500:	4b0a      	ldr	r3, [pc, #40]	; (800b52c <prvResetNextTaskUnblockTime+0x3c>)
 800b502:	f04f 32ff 	mov.w	r2, #4294967295
 800b506:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b508:	e008      	b.n	800b51c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b50a:	4b07      	ldr	r3, [pc, #28]	; (800b528 <prvResetNextTaskUnblockTime+0x38>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	4a04      	ldr	r2, [pc, #16]	; (800b52c <prvResetNextTaskUnblockTime+0x3c>)
 800b51a:	6013      	str	r3, [r2, #0]
}
 800b51c:	bf00      	nop
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr
 800b528:	24005044 	.word	0x24005044
 800b52c:	240050ac 	.word	0x240050ac

0800b530 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b536:	4b0b      	ldr	r3, [pc, #44]	; (800b564 <xTaskGetSchedulerState+0x34>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d102      	bne.n	800b544 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b53e:	2301      	movs	r3, #1
 800b540:	607b      	str	r3, [r7, #4]
 800b542:	e008      	b.n	800b556 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b544:	4b08      	ldr	r3, [pc, #32]	; (800b568 <xTaskGetSchedulerState+0x38>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d102      	bne.n	800b552 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b54c:	2302      	movs	r3, #2
 800b54e:	607b      	str	r3, [r7, #4]
 800b550:	e001      	b.n	800b556 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b552:	2300      	movs	r3, #0
 800b554:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b556:	687b      	ldr	r3, [r7, #4]
	}
 800b558:	4618      	mov	r0, r3
 800b55a:	370c      	adds	r7, #12
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr
 800b564:	24005098 	.word	0x24005098
 800b568:	240050b4 	.word	0x240050b4

0800b56c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b578:	2300      	movs	r3, #0
 800b57a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d056      	beq.n	800b630 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b582:	4b2e      	ldr	r3, [pc, #184]	; (800b63c <xTaskPriorityDisinherit+0xd0>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	693a      	ldr	r2, [r7, #16]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d00a      	beq.n	800b5a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b590:	f383 8811 	msr	BASEPRI, r3
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	60fb      	str	r3, [r7, #12]
}
 800b59e:	bf00      	nop
 800b5a0:	e7fe      	b.n	800b5a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10a      	bne.n	800b5c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ae:	f383 8811 	msr	BASEPRI, r3
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	60bb      	str	r3, [r7, #8]
}
 800b5bc:	bf00      	nop
 800b5be:	e7fe      	b.n	800b5be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c4:	1e5a      	subs	r2, r3, #1
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d02c      	beq.n	800b630 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d128      	bne.n	800b630 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7fe f9f6 	bl	80099d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b600:	4b0f      	ldr	r3, [pc, #60]	; (800b640 <xTaskPriorityDisinherit+0xd4>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	429a      	cmp	r2, r3
 800b606:	d903      	bls.n	800b610 <xTaskPriorityDisinherit+0xa4>
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60c:	4a0c      	ldr	r2, [pc, #48]	; (800b640 <xTaskPriorityDisinherit+0xd4>)
 800b60e:	6013      	str	r3, [r2, #0]
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b614:	4613      	mov	r3, r2
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	4413      	add	r3, r2
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	4a09      	ldr	r2, [pc, #36]	; (800b644 <xTaskPriorityDisinherit+0xd8>)
 800b61e:	441a      	add	r2, r3
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	3304      	adds	r3, #4
 800b624:	4619      	mov	r1, r3
 800b626:	4610      	mov	r0, r2
 800b628:	f7fe f977 	bl	800991a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b62c:	2301      	movs	r3, #1
 800b62e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b630:	697b      	ldr	r3, [r7, #20]
	}
 800b632:	4618      	mov	r0, r3
 800b634:	3718      	adds	r7, #24
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	24004bb8 	.word	0x24004bb8
 800b640:	24005094 	.word	0x24005094
 800b644:	24004bbc 	.word	0x24004bbc

0800b648 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b652:	4b21      	ldr	r3, [pc, #132]	; (800b6d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b658:	4b20      	ldr	r3, [pc, #128]	; (800b6dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	3304      	adds	r3, #4
 800b65e:	4618      	mov	r0, r3
 800b660:	f7fe f9b8 	bl	80099d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b66a:	d10a      	bne.n	800b682 <prvAddCurrentTaskToDelayedList+0x3a>
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d007      	beq.n	800b682 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b672:	4b1a      	ldr	r3, [pc, #104]	; (800b6dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	3304      	adds	r3, #4
 800b678:	4619      	mov	r1, r3
 800b67a:	4819      	ldr	r0, [pc, #100]	; (800b6e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b67c:	f7fe f94d 	bl	800991a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b680:	e026      	b.n	800b6d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4413      	add	r3, r2
 800b688:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b68a:	4b14      	ldr	r3, [pc, #80]	; (800b6dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	68ba      	ldr	r2, [r7, #8]
 800b690:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	429a      	cmp	r2, r3
 800b698:	d209      	bcs.n	800b6ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b69a:	4b12      	ldr	r3, [pc, #72]	; (800b6e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	4b0f      	ldr	r3, [pc, #60]	; (800b6dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3304      	adds	r3, #4
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	4610      	mov	r0, r2
 800b6a8:	f7fe f95b 	bl	8009962 <vListInsert>
}
 800b6ac:	e010      	b.n	800b6d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6ae:	4b0e      	ldr	r3, [pc, #56]	; (800b6e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	4b0a      	ldr	r3, [pc, #40]	; (800b6dc <prvAddCurrentTaskToDelayedList+0x94>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	3304      	adds	r3, #4
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	4610      	mov	r0, r2
 800b6bc:	f7fe f951 	bl	8009962 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b6c0:	4b0a      	ldr	r3, [pc, #40]	; (800b6ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d202      	bcs.n	800b6d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b6ca:	4a08      	ldr	r2, [pc, #32]	; (800b6ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	6013      	str	r3, [r2, #0]
}
 800b6d0:	bf00      	nop
 800b6d2:	3710      	adds	r7, #16
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	24005090 	.word	0x24005090
 800b6dc:	24004bb8 	.word	0x24004bb8
 800b6e0:	24005078 	.word	0x24005078
 800b6e4:	24005048 	.word	0x24005048
 800b6e8:	24005044 	.word	0x24005044
 800b6ec:	240050ac 	.word	0x240050ac

0800b6f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b08a      	sub	sp, #40	; 0x28
 800b6f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b6fa:	f000 fb07 	bl	800bd0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b6fe:	4b1c      	ldr	r3, [pc, #112]	; (800b770 <xTimerCreateTimerTask+0x80>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d021      	beq.n	800b74a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b706:	2300      	movs	r3, #0
 800b708:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b70a:	2300      	movs	r3, #0
 800b70c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b70e:	1d3a      	adds	r2, r7, #4
 800b710:	f107 0108 	add.w	r1, r7, #8
 800b714:	f107 030c 	add.w	r3, r7, #12
 800b718:	4618      	mov	r0, r3
 800b71a:	f7fd fecd 	bl	80094b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b71e:	6879      	ldr	r1, [r7, #4]
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	9202      	str	r2, [sp, #8]
 800b726:	9301      	str	r3, [sp, #4]
 800b728:	2302      	movs	r3, #2
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	2300      	movs	r3, #0
 800b72e:	460a      	mov	r2, r1
 800b730:	4910      	ldr	r1, [pc, #64]	; (800b774 <xTimerCreateTimerTask+0x84>)
 800b732:	4811      	ldr	r0, [pc, #68]	; (800b778 <xTimerCreateTimerTask+0x88>)
 800b734:	f7ff f8b4 	bl	800a8a0 <xTaskCreateStatic>
 800b738:	4603      	mov	r3, r0
 800b73a:	4a10      	ldr	r2, [pc, #64]	; (800b77c <xTimerCreateTimerTask+0x8c>)
 800b73c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b73e:	4b0f      	ldr	r3, [pc, #60]	; (800b77c <xTimerCreateTimerTask+0x8c>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b746:	2301      	movs	r3, #1
 800b748:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d10a      	bne.n	800b766 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b754:	f383 8811 	msr	BASEPRI, r3
 800b758:	f3bf 8f6f 	isb	sy
 800b75c:	f3bf 8f4f 	dsb	sy
 800b760:	613b      	str	r3, [r7, #16]
}
 800b762:	bf00      	nop
 800b764:	e7fe      	b.n	800b764 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b766:	697b      	ldr	r3, [r7, #20]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3718      	adds	r7, #24
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	240050e8 	.word	0x240050e8
 800b774:	0800c000 	.word	0x0800c000
 800b778:	0800b8b5 	.word	0x0800b8b5
 800b77c:	240050ec 	.word	0x240050ec

0800b780 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b08a      	sub	sp, #40	; 0x28
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
 800b78c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b78e:	2300      	movs	r3, #0
 800b790:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d10a      	bne.n	800b7ae <xTimerGenericCommand+0x2e>
	__asm volatile
 800b798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79c:	f383 8811 	msr	BASEPRI, r3
 800b7a0:	f3bf 8f6f 	isb	sy
 800b7a4:	f3bf 8f4f 	dsb	sy
 800b7a8:	623b      	str	r3, [r7, #32]
}
 800b7aa:	bf00      	nop
 800b7ac:	e7fe      	b.n	800b7ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b7ae:	4b1a      	ldr	r3, [pc, #104]	; (800b818 <xTimerGenericCommand+0x98>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d02a      	beq.n	800b80c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	2b05      	cmp	r3, #5
 800b7c6:	dc18      	bgt.n	800b7fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b7c8:	f7ff feb2 	bl	800b530 <xTaskGetSchedulerState>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d109      	bne.n	800b7e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b7d2:	4b11      	ldr	r3, [pc, #68]	; (800b818 <xTimerGenericCommand+0x98>)
 800b7d4:	6818      	ldr	r0, [r3, #0]
 800b7d6:	f107 0110 	add.w	r1, r7, #16
 800b7da:	2300      	movs	r3, #0
 800b7dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7de:	f7fe fc77 	bl	800a0d0 <xQueueGenericSend>
 800b7e2:	6278      	str	r0, [r7, #36]	; 0x24
 800b7e4:	e012      	b.n	800b80c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b7e6:	4b0c      	ldr	r3, [pc, #48]	; (800b818 <xTimerGenericCommand+0x98>)
 800b7e8:	6818      	ldr	r0, [r3, #0]
 800b7ea:	f107 0110 	add.w	r1, r7, #16
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f7fe fc6d 	bl	800a0d0 <xQueueGenericSend>
 800b7f6:	6278      	str	r0, [r7, #36]	; 0x24
 800b7f8:	e008      	b.n	800b80c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b7fa:	4b07      	ldr	r3, [pc, #28]	; (800b818 <xTimerGenericCommand+0x98>)
 800b7fc:	6818      	ldr	r0, [r3, #0]
 800b7fe:	f107 0110 	add.w	r1, r7, #16
 800b802:	2300      	movs	r3, #0
 800b804:	683a      	ldr	r2, [r7, #0]
 800b806:	f7fe fd61 	bl	800a2cc <xQueueGenericSendFromISR>
 800b80a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3728      	adds	r7, #40	; 0x28
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	240050e8 	.word	0x240050e8

0800b81c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b088      	sub	sp, #32
 800b820:	af02      	add	r7, sp, #8
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b826:	4b22      	ldr	r3, [pc, #136]	; (800b8b0 <prvProcessExpiredTimer+0x94>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	3304      	adds	r3, #4
 800b834:	4618      	mov	r0, r3
 800b836:	f7fe f8cd 	bl	80099d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b840:	f003 0304 	and.w	r3, r3, #4
 800b844:	2b00      	cmp	r3, #0
 800b846:	d022      	beq.n	800b88e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	699a      	ldr	r2, [r3, #24]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	18d1      	adds	r1, r2, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	683a      	ldr	r2, [r7, #0]
 800b854:	6978      	ldr	r0, [r7, #20]
 800b856:	f000 f8d1 	bl	800b9fc <prvInsertTimerInActiveList>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d01f      	beq.n	800b8a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b860:	2300      	movs	r3, #0
 800b862:	9300      	str	r3, [sp, #0]
 800b864:	2300      	movs	r3, #0
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	2100      	movs	r1, #0
 800b86a:	6978      	ldr	r0, [r7, #20]
 800b86c:	f7ff ff88 	bl	800b780 <xTimerGenericCommand>
 800b870:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d113      	bne.n	800b8a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87c:	f383 8811 	msr	BASEPRI, r3
 800b880:	f3bf 8f6f 	isb	sy
 800b884:	f3bf 8f4f 	dsb	sy
 800b888:	60fb      	str	r3, [r7, #12]
}
 800b88a:	bf00      	nop
 800b88c:	e7fe      	b.n	800b88c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b894:	f023 0301 	bic.w	r3, r3, #1
 800b898:	b2da      	uxtb	r2, r3
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	6a1b      	ldr	r3, [r3, #32]
 800b8a4:	6978      	ldr	r0, [r7, #20]
 800b8a6:	4798      	blx	r3
}
 800b8a8:	bf00      	nop
 800b8aa:	3718      	adds	r7, #24
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	240050e0 	.word	0x240050e0

0800b8b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8bc:	f107 0308 	add.w	r3, r7, #8
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f000 f857 	bl	800b974 <prvGetNextExpireTime>
 800b8c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	68f8      	ldr	r0, [r7, #12]
 800b8ce:	f000 f803 	bl	800b8d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b8d2:	f000 f8d5 	bl	800ba80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8d6:	e7f1      	b.n	800b8bc <prvTimerTask+0x8>

0800b8d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b8e2:	f7ff fa39 	bl	800ad58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8e6:	f107 0308 	add.w	r3, r7, #8
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f000 f866 	bl	800b9bc <prvSampleTimeNow>
 800b8f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d130      	bne.n	800b95a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10a      	bne.n	800b914 <prvProcessTimerOrBlockTask+0x3c>
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	429a      	cmp	r2, r3
 800b904:	d806      	bhi.n	800b914 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b906:	f7ff fa35 	bl	800ad74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b90a:	68f9      	ldr	r1, [r7, #12]
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f7ff ff85 	bl	800b81c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b912:	e024      	b.n	800b95e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d008      	beq.n	800b92c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b91a:	4b13      	ldr	r3, [pc, #76]	; (800b968 <prvProcessTimerOrBlockTask+0x90>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d101      	bne.n	800b928 <prvProcessTimerOrBlockTask+0x50>
 800b924:	2301      	movs	r3, #1
 800b926:	e000      	b.n	800b92a <prvProcessTimerOrBlockTask+0x52>
 800b928:	2300      	movs	r3, #0
 800b92a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b92c:	4b0f      	ldr	r3, [pc, #60]	; (800b96c <prvProcessTimerOrBlockTask+0x94>)
 800b92e:	6818      	ldr	r0, [r3, #0]
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	683a      	ldr	r2, [r7, #0]
 800b938:	4619      	mov	r1, r3
 800b93a:	f7fe ff7d 	bl	800a838 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b93e:	f7ff fa19 	bl	800ad74 <xTaskResumeAll>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10a      	bne.n	800b95e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b948:	4b09      	ldr	r3, [pc, #36]	; (800b970 <prvProcessTimerOrBlockTask+0x98>)
 800b94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b94e:	601a      	str	r2, [r3, #0]
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	f3bf 8f6f 	isb	sy
}
 800b958:	e001      	b.n	800b95e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b95a:	f7ff fa0b 	bl	800ad74 <xTaskResumeAll>
}
 800b95e:	bf00      	nop
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	240050e4 	.word	0x240050e4
 800b96c:	240050e8 	.word	0x240050e8
 800b970:	e000ed04 	.word	0xe000ed04

0800b974 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b97c:	4b0e      	ldr	r3, [pc, #56]	; (800b9b8 <prvGetNextExpireTime+0x44>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d101      	bne.n	800b98a <prvGetNextExpireTime+0x16>
 800b986:	2201      	movs	r2, #1
 800b988:	e000      	b.n	800b98c <prvGetNextExpireTime+0x18>
 800b98a:	2200      	movs	r2, #0
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d105      	bne.n	800b9a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b998:	4b07      	ldr	r3, [pc, #28]	; (800b9b8 <prvGetNextExpireTime+0x44>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	60fb      	str	r3, [r7, #12]
 800b9a2:	e001      	b.n	800b9a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3714      	adds	r7, #20
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop
 800b9b8:	240050e0 	.word	0x240050e0

0800b9bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b9c4:	f7ff fa74 	bl	800aeb0 <xTaskGetTickCount>
 800b9c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b9ca:	4b0b      	ldr	r3, [pc, #44]	; (800b9f8 <prvSampleTimeNow+0x3c>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d205      	bcs.n	800b9e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b9d4:	f000 f936 	bl	800bc44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	601a      	str	r2, [r3, #0]
 800b9de:	e002      	b.n	800b9e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b9e6:	4a04      	ldr	r2, [pc, #16]	; (800b9f8 <prvSampleTimeNow+0x3c>)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	240050f0 	.word	0x240050f0

0800b9fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b086      	sub	sp, #24
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
 800ba08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	68ba      	ldr	r2, [r7, #8]
 800ba12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d812      	bhi.n	800ba48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	1ad2      	subs	r2, r2, r3
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	699b      	ldr	r3, [r3, #24]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d302      	bcc.n	800ba36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ba30:	2301      	movs	r3, #1
 800ba32:	617b      	str	r3, [r7, #20]
 800ba34:	e01b      	b.n	800ba6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba36:	4b10      	ldr	r3, [pc, #64]	; (800ba78 <prvInsertTimerInActiveList+0x7c>)
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	3304      	adds	r3, #4
 800ba3e:	4619      	mov	r1, r3
 800ba40:	4610      	mov	r0, r2
 800ba42:	f7fd ff8e 	bl	8009962 <vListInsert>
 800ba46:	e012      	b.n	800ba6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d206      	bcs.n	800ba5e <prvInsertTimerInActiveList+0x62>
 800ba50:	68ba      	ldr	r2, [r7, #8]
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d302      	bcc.n	800ba5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	617b      	str	r3, [r7, #20]
 800ba5c:	e007      	b.n	800ba6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba5e:	4b07      	ldr	r3, [pc, #28]	; (800ba7c <prvInsertTimerInActiveList+0x80>)
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	3304      	adds	r3, #4
 800ba66:	4619      	mov	r1, r3
 800ba68:	4610      	mov	r0, r2
 800ba6a:	f7fd ff7a 	bl	8009962 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ba6e:	697b      	ldr	r3, [r7, #20]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3718      	adds	r7, #24
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	240050e4 	.word	0x240050e4
 800ba7c:	240050e0 	.word	0x240050e0

0800ba80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b08e      	sub	sp, #56	; 0x38
 800ba84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba86:	e0ca      	b.n	800bc1e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	da18      	bge.n	800bac0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ba8e:	1d3b      	adds	r3, r7, #4
 800ba90:	3304      	adds	r3, #4
 800ba92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ba94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10a      	bne.n	800bab0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ba9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	61fb      	str	r3, [r7, #28]
}
 800baac:	bf00      	nop
 800baae:	e7fe      	b.n	800baae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bab6:	6850      	ldr	r0, [r2, #4]
 800bab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baba:	6892      	ldr	r2, [r2, #8]
 800babc:	4611      	mov	r1, r2
 800babe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f2c0 80aa 	blt.w	800bc1c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bace:	695b      	ldr	r3, [r3, #20]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d004      	beq.n	800bade <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad6:	3304      	adds	r3, #4
 800bad8:	4618      	mov	r0, r3
 800bada:	f7fd ff7b 	bl	80099d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bade:	463b      	mov	r3, r7
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7ff ff6b 	bl	800b9bc <prvSampleTimeNow>
 800bae6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2b09      	cmp	r3, #9
 800baec:	f200 8097 	bhi.w	800bc1e <prvProcessReceivedCommands+0x19e>
 800baf0:	a201      	add	r2, pc, #4	; (adr r2, 800baf8 <prvProcessReceivedCommands+0x78>)
 800baf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf6:	bf00      	nop
 800baf8:	0800bb21 	.word	0x0800bb21
 800bafc:	0800bb21 	.word	0x0800bb21
 800bb00:	0800bb21 	.word	0x0800bb21
 800bb04:	0800bb95 	.word	0x0800bb95
 800bb08:	0800bba9 	.word	0x0800bba9
 800bb0c:	0800bbf3 	.word	0x0800bbf3
 800bb10:	0800bb21 	.word	0x0800bb21
 800bb14:	0800bb21 	.word	0x0800bb21
 800bb18:	0800bb95 	.word	0x0800bb95
 800bb1c:	0800bba9 	.word	0x0800bba9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb26:	f043 0301 	orr.w	r3, r3, #1
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb32:	68ba      	ldr	r2, [r7, #8]
 800bb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb36:	699b      	ldr	r3, [r3, #24]
 800bb38:	18d1      	adds	r1, r2, r3
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb40:	f7ff ff5c 	bl	800b9fc <prvInsertTimerInActiveList>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d069      	beq.n	800bc1e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb58:	f003 0304 	and.w	r3, r3, #4
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d05e      	beq.n	800bc1e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bb60:	68ba      	ldr	r2, [r7, #8]
 800bb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb64:	699b      	ldr	r3, [r3, #24]
 800bb66:	441a      	add	r2, r3
 800bb68:	2300      	movs	r3, #0
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	2100      	movs	r1, #0
 800bb70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb72:	f7ff fe05 	bl	800b780 <xTimerGenericCommand>
 800bb76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bb78:	6a3b      	ldr	r3, [r7, #32]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d14f      	bne.n	800bc1e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb82:	f383 8811 	msr	BASEPRI, r3
 800bb86:	f3bf 8f6f 	isb	sy
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	61bb      	str	r3, [r7, #24]
}
 800bb90:	bf00      	nop
 800bb92:	e7fe      	b.n	800bb92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb9a:	f023 0301 	bic.w	r3, r3, #1
 800bb9e:	b2da      	uxtb	r2, r3
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bba6:	e03a      	b.n	800bc1e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbae:	f043 0301 	orr.w	r3, r3, #1
 800bbb2:	b2da      	uxtb	r2, r3
 800bbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bbba:	68ba      	ldr	r2, [r7, #8]
 800bbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbbe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc2:	699b      	ldr	r3, [r3, #24]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d10a      	bne.n	800bbde <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbcc:	f383 8811 	msr	BASEPRI, r3
 800bbd0:	f3bf 8f6f 	isb	sy
 800bbd4:	f3bf 8f4f 	dsb	sy
 800bbd8:	617b      	str	r3, [r7, #20]
}
 800bbda:	bf00      	nop
 800bbdc:	e7fe      	b.n	800bbdc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe0:	699a      	ldr	r2, [r3, #24]
 800bbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe4:	18d1      	adds	r1, r2, r3
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbec:	f7ff ff06 	bl	800b9fc <prvInsertTimerInActiveList>
					break;
 800bbf0:	e015      	b.n	800bc1e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbf8:	f003 0302 	and.w	r3, r3, #2
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d103      	bne.n	800bc08 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bc00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc02:	f7fd fd3f 	bl	8009684 <vPortFree>
 800bc06:	e00a      	b.n	800bc1e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc0e:	f023 0301 	bic.w	r3, r3, #1
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bc1a:	e000      	b.n	800bc1e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bc1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc1e:	4b08      	ldr	r3, [pc, #32]	; (800bc40 <prvProcessReceivedCommands+0x1c0>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	1d39      	adds	r1, r7, #4
 800bc24:	2200      	movs	r2, #0
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7fe fbec 	bl	800a404 <xQueueReceive>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f47f af2a 	bne.w	800ba88 <prvProcessReceivedCommands+0x8>
	}
}
 800bc34:	bf00      	nop
 800bc36:	bf00      	nop
 800bc38:	3730      	adds	r7, #48	; 0x30
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	240050e8 	.word	0x240050e8

0800bc44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b088      	sub	sp, #32
 800bc48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc4a:	e048      	b.n	800bcde <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc4c:	4b2d      	ldr	r3, [pc, #180]	; (800bd04 <prvSwitchTimerLists+0xc0>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc56:	4b2b      	ldr	r3, [pc, #172]	; (800bd04 <prvSwitchTimerLists+0xc0>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	3304      	adds	r3, #4
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7fd feb5 	bl	80099d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6a1b      	ldr	r3, [r3, #32]
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc78:	f003 0304 	and.w	r3, r3, #4
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d02e      	beq.n	800bcde <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	699b      	ldr	r3, [r3, #24]
 800bc84:	693a      	ldr	r2, [r7, #16]
 800bc86:	4413      	add	r3, r2
 800bc88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bc8a:	68ba      	ldr	r2, [r7, #8]
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d90e      	bls.n	800bcb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	68ba      	ldr	r2, [r7, #8]
 800bc96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	68fa      	ldr	r2, [r7, #12]
 800bc9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc9e:	4b19      	ldr	r3, [pc, #100]	; (800bd04 <prvSwitchTimerLists+0xc0>)
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	3304      	adds	r3, #4
 800bca6:	4619      	mov	r1, r3
 800bca8:	4610      	mov	r0, r2
 800bcaa:	f7fd fe5a 	bl	8009962 <vListInsert>
 800bcae:	e016      	b.n	800bcde <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	9300      	str	r3, [sp, #0]
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	693a      	ldr	r2, [r7, #16]
 800bcb8:	2100      	movs	r1, #0
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f7ff fd60 	bl	800b780 <xTimerGenericCommand>
 800bcc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10a      	bne.n	800bcde <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bccc:	f383 8811 	msr	BASEPRI, r3
 800bcd0:	f3bf 8f6f 	isb	sy
 800bcd4:	f3bf 8f4f 	dsb	sy
 800bcd8:	603b      	str	r3, [r7, #0]
}
 800bcda:	bf00      	nop
 800bcdc:	e7fe      	b.n	800bcdc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcde:	4b09      	ldr	r3, [pc, #36]	; (800bd04 <prvSwitchTimerLists+0xc0>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d1b1      	bne.n	800bc4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bce8:	4b06      	ldr	r3, [pc, #24]	; (800bd04 <prvSwitchTimerLists+0xc0>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bcee:	4b06      	ldr	r3, [pc, #24]	; (800bd08 <prvSwitchTimerLists+0xc4>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a04      	ldr	r2, [pc, #16]	; (800bd04 <prvSwitchTimerLists+0xc0>)
 800bcf4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bcf6:	4a04      	ldr	r2, [pc, #16]	; (800bd08 <prvSwitchTimerLists+0xc4>)
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	6013      	str	r3, [r2, #0]
}
 800bcfc:	bf00      	nop
 800bcfe:	3718      	adds	r7, #24
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	240050e0 	.word	0x240050e0
 800bd08:	240050e4 	.word	0x240050e4

0800bd0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bd12:	f7fd ffb7 	bl	8009c84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bd16:	4b15      	ldr	r3, [pc, #84]	; (800bd6c <prvCheckForValidListAndQueue+0x60>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d120      	bne.n	800bd60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bd1e:	4814      	ldr	r0, [pc, #80]	; (800bd70 <prvCheckForValidListAndQueue+0x64>)
 800bd20:	f7fd fdce 	bl	80098c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bd24:	4813      	ldr	r0, [pc, #76]	; (800bd74 <prvCheckForValidListAndQueue+0x68>)
 800bd26:	f7fd fdcb 	bl	80098c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bd2a:	4b13      	ldr	r3, [pc, #76]	; (800bd78 <prvCheckForValidListAndQueue+0x6c>)
 800bd2c:	4a10      	ldr	r2, [pc, #64]	; (800bd70 <prvCheckForValidListAndQueue+0x64>)
 800bd2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bd30:	4b12      	ldr	r3, [pc, #72]	; (800bd7c <prvCheckForValidListAndQueue+0x70>)
 800bd32:	4a10      	ldr	r2, [pc, #64]	; (800bd74 <prvCheckForValidListAndQueue+0x68>)
 800bd34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bd36:	2300      	movs	r3, #0
 800bd38:	9300      	str	r3, [sp, #0]
 800bd3a:	4b11      	ldr	r3, [pc, #68]	; (800bd80 <prvCheckForValidListAndQueue+0x74>)
 800bd3c:	4a11      	ldr	r2, [pc, #68]	; (800bd84 <prvCheckForValidListAndQueue+0x78>)
 800bd3e:	2110      	movs	r1, #16
 800bd40:	200a      	movs	r0, #10
 800bd42:	f7fe f929 	bl	8009f98 <xQueueGenericCreateStatic>
 800bd46:	4603      	mov	r3, r0
 800bd48:	4a08      	ldr	r2, [pc, #32]	; (800bd6c <prvCheckForValidListAndQueue+0x60>)
 800bd4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bd4c:	4b07      	ldr	r3, [pc, #28]	; (800bd6c <prvCheckForValidListAndQueue+0x60>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d005      	beq.n	800bd60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bd54:	4b05      	ldr	r3, [pc, #20]	; (800bd6c <prvCheckForValidListAndQueue+0x60>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	490b      	ldr	r1, [pc, #44]	; (800bd88 <prvCheckForValidListAndQueue+0x7c>)
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7fe fd42 	bl	800a7e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd60:	f7fd ffc0 	bl	8009ce4 <vPortExitCritical>
}
 800bd64:	bf00      	nop
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	240050e8 	.word	0x240050e8
 800bd70:	240050b8 	.word	0x240050b8
 800bd74:	240050cc 	.word	0x240050cc
 800bd78:	240050e0 	.word	0x240050e0
 800bd7c:	240050e4 	.word	0x240050e4
 800bd80:	24005194 	.word	0x24005194
 800bd84:	240050f4 	.word	0x240050f4
 800bd88:	0800c008 	.word	0x0800c008

0800bd8c <__libc_init_array>:
 800bd8c:	b570      	push	{r4, r5, r6, lr}
 800bd8e:	4d0d      	ldr	r5, [pc, #52]	; (800bdc4 <__libc_init_array+0x38>)
 800bd90:	4c0d      	ldr	r4, [pc, #52]	; (800bdc8 <__libc_init_array+0x3c>)
 800bd92:	1b64      	subs	r4, r4, r5
 800bd94:	10a4      	asrs	r4, r4, #2
 800bd96:	2600      	movs	r6, #0
 800bd98:	42a6      	cmp	r6, r4
 800bd9a:	d109      	bne.n	800bdb0 <__libc_init_array+0x24>
 800bd9c:	4d0b      	ldr	r5, [pc, #44]	; (800bdcc <__libc_init_array+0x40>)
 800bd9e:	4c0c      	ldr	r4, [pc, #48]	; (800bdd0 <__libc_init_array+0x44>)
 800bda0:	f000 f8f2 	bl	800bf88 <_init>
 800bda4:	1b64      	subs	r4, r4, r5
 800bda6:	10a4      	asrs	r4, r4, #2
 800bda8:	2600      	movs	r6, #0
 800bdaa:	42a6      	cmp	r6, r4
 800bdac:	d105      	bne.n	800bdba <__libc_init_array+0x2e>
 800bdae:	bd70      	pop	{r4, r5, r6, pc}
 800bdb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdb4:	4798      	blx	r3
 800bdb6:	3601      	adds	r6, #1
 800bdb8:	e7ee      	b.n	800bd98 <__libc_init_array+0xc>
 800bdba:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdbe:	4798      	blx	r3
 800bdc0:	3601      	adds	r6, #1
 800bdc2:	e7f2      	b.n	800bdaa <__libc_init_array+0x1e>
 800bdc4:	0800c0d4 	.word	0x0800c0d4
 800bdc8:	0800c0d4 	.word	0x0800c0d4
 800bdcc:	0800c0d4 	.word	0x0800c0d4
 800bdd0:	0800c0d8 	.word	0x0800c0d8

0800bdd4 <__retarget_lock_acquire_recursive>:
 800bdd4:	4770      	bx	lr

0800bdd6 <__retarget_lock_release_recursive>:
 800bdd6:	4770      	bx	lr

0800bdd8 <memcpy>:
 800bdd8:	440a      	add	r2, r1
 800bdda:	4291      	cmp	r1, r2
 800bddc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bde0:	d100      	bne.n	800bde4 <memcpy+0xc>
 800bde2:	4770      	bx	lr
 800bde4:	b510      	push	{r4, lr}
 800bde6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdee:	4291      	cmp	r1, r2
 800bdf0:	d1f9      	bne.n	800bde6 <memcpy+0xe>
 800bdf2:	bd10      	pop	{r4, pc}

0800bdf4 <memset>:
 800bdf4:	4402      	add	r2, r0
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d100      	bne.n	800bdfe <memset+0xa>
 800bdfc:	4770      	bx	lr
 800bdfe:	f803 1b01 	strb.w	r1, [r3], #1
 800be02:	e7f9      	b.n	800bdf8 <memset+0x4>

0800be04 <cleanup_glue>:
 800be04:	b538      	push	{r3, r4, r5, lr}
 800be06:	460c      	mov	r4, r1
 800be08:	6809      	ldr	r1, [r1, #0]
 800be0a:	4605      	mov	r5, r0
 800be0c:	b109      	cbz	r1, 800be12 <cleanup_glue+0xe>
 800be0e:	f7ff fff9 	bl	800be04 <cleanup_glue>
 800be12:	4621      	mov	r1, r4
 800be14:	4628      	mov	r0, r5
 800be16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be1a:	f000 b869 	b.w	800bef0 <_free_r>
	...

0800be20 <_reclaim_reent>:
 800be20:	4b2c      	ldr	r3, [pc, #176]	; (800bed4 <_reclaim_reent+0xb4>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4283      	cmp	r3, r0
 800be26:	b570      	push	{r4, r5, r6, lr}
 800be28:	4604      	mov	r4, r0
 800be2a:	d051      	beq.n	800bed0 <_reclaim_reent+0xb0>
 800be2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800be2e:	b143      	cbz	r3, 800be42 <_reclaim_reent+0x22>
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d14a      	bne.n	800becc <_reclaim_reent+0xac>
 800be36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be38:	6819      	ldr	r1, [r3, #0]
 800be3a:	b111      	cbz	r1, 800be42 <_reclaim_reent+0x22>
 800be3c:	4620      	mov	r0, r4
 800be3e:	f000 f857 	bl	800bef0 <_free_r>
 800be42:	6961      	ldr	r1, [r4, #20]
 800be44:	b111      	cbz	r1, 800be4c <_reclaim_reent+0x2c>
 800be46:	4620      	mov	r0, r4
 800be48:	f000 f852 	bl	800bef0 <_free_r>
 800be4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800be4e:	b111      	cbz	r1, 800be56 <_reclaim_reent+0x36>
 800be50:	4620      	mov	r0, r4
 800be52:	f000 f84d 	bl	800bef0 <_free_r>
 800be56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800be58:	b111      	cbz	r1, 800be60 <_reclaim_reent+0x40>
 800be5a:	4620      	mov	r0, r4
 800be5c:	f000 f848 	bl	800bef0 <_free_r>
 800be60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800be62:	b111      	cbz	r1, 800be6a <_reclaim_reent+0x4a>
 800be64:	4620      	mov	r0, r4
 800be66:	f000 f843 	bl	800bef0 <_free_r>
 800be6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800be6c:	b111      	cbz	r1, 800be74 <_reclaim_reent+0x54>
 800be6e:	4620      	mov	r0, r4
 800be70:	f000 f83e 	bl	800bef0 <_free_r>
 800be74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800be76:	b111      	cbz	r1, 800be7e <_reclaim_reent+0x5e>
 800be78:	4620      	mov	r0, r4
 800be7a:	f000 f839 	bl	800bef0 <_free_r>
 800be7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800be80:	b111      	cbz	r1, 800be88 <_reclaim_reent+0x68>
 800be82:	4620      	mov	r0, r4
 800be84:	f000 f834 	bl	800bef0 <_free_r>
 800be88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be8a:	b111      	cbz	r1, 800be92 <_reclaim_reent+0x72>
 800be8c:	4620      	mov	r0, r4
 800be8e:	f000 f82f 	bl	800bef0 <_free_r>
 800be92:	69a3      	ldr	r3, [r4, #24]
 800be94:	b1e3      	cbz	r3, 800bed0 <_reclaim_reent+0xb0>
 800be96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800be98:	4620      	mov	r0, r4
 800be9a:	4798      	blx	r3
 800be9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800be9e:	b1b9      	cbz	r1, 800bed0 <_reclaim_reent+0xb0>
 800bea0:	4620      	mov	r0, r4
 800bea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bea6:	f7ff bfad 	b.w	800be04 <cleanup_glue>
 800beaa:	5949      	ldr	r1, [r1, r5]
 800beac:	b941      	cbnz	r1, 800bec0 <_reclaim_reent+0xa0>
 800beae:	3504      	adds	r5, #4
 800beb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800beb2:	2d80      	cmp	r5, #128	; 0x80
 800beb4:	68d9      	ldr	r1, [r3, #12]
 800beb6:	d1f8      	bne.n	800beaa <_reclaim_reent+0x8a>
 800beb8:	4620      	mov	r0, r4
 800beba:	f000 f819 	bl	800bef0 <_free_r>
 800bebe:	e7ba      	b.n	800be36 <_reclaim_reent+0x16>
 800bec0:	680e      	ldr	r6, [r1, #0]
 800bec2:	4620      	mov	r0, r4
 800bec4:	f000 f814 	bl	800bef0 <_free_r>
 800bec8:	4631      	mov	r1, r6
 800beca:	e7ef      	b.n	800beac <_reclaim_reent+0x8c>
 800becc:	2500      	movs	r5, #0
 800bece:	e7ef      	b.n	800beb0 <_reclaim_reent+0x90>
 800bed0:	bd70      	pop	{r4, r5, r6, pc}
 800bed2:	bf00      	nop
 800bed4:	24000014 	.word	0x24000014

0800bed8 <__malloc_lock>:
 800bed8:	4801      	ldr	r0, [pc, #4]	; (800bee0 <__malloc_lock+0x8>)
 800beda:	f7ff bf7b 	b.w	800bdd4 <__retarget_lock_acquire_recursive>
 800bede:	bf00      	nop
 800bee0:	240051e4 	.word	0x240051e4

0800bee4 <__malloc_unlock>:
 800bee4:	4801      	ldr	r0, [pc, #4]	; (800beec <__malloc_unlock+0x8>)
 800bee6:	f7ff bf76 	b.w	800bdd6 <__retarget_lock_release_recursive>
 800beea:	bf00      	nop
 800beec:	240051e4 	.word	0x240051e4

0800bef0 <_free_r>:
 800bef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bef2:	2900      	cmp	r1, #0
 800bef4:	d044      	beq.n	800bf80 <_free_r+0x90>
 800bef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800befa:	9001      	str	r0, [sp, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	f1a1 0404 	sub.w	r4, r1, #4
 800bf02:	bfb8      	it	lt
 800bf04:	18e4      	addlt	r4, r4, r3
 800bf06:	f7ff ffe7 	bl	800bed8 <__malloc_lock>
 800bf0a:	4a1e      	ldr	r2, [pc, #120]	; (800bf84 <_free_r+0x94>)
 800bf0c:	9801      	ldr	r0, [sp, #4]
 800bf0e:	6813      	ldr	r3, [r2, #0]
 800bf10:	b933      	cbnz	r3, 800bf20 <_free_r+0x30>
 800bf12:	6063      	str	r3, [r4, #4]
 800bf14:	6014      	str	r4, [r2, #0]
 800bf16:	b003      	add	sp, #12
 800bf18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf1c:	f7ff bfe2 	b.w	800bee4 <__malloc_unlock>
 800bf20:	42a3      	cmp	r3, r4
 800bf22:	d908      	bls.n	800bf36 <_free_r+0x46>
 800bf24:	6825      	ldr	r5, [r4, #0]
 800bf26:	1961      	adds	r1, r4, r5
 800bf28:	428b      	cmp	r3, r1
 800bf2a:	bf01      	itttt	eq
 800bf2c:	6819      	ldreq	r1, [r3, #0]
 800bf2e:	685b      	ldreq	r3, [r3, #4]
 800bf30:	1949      	addeq	r1, r1, r5
 800bf32:	6021      	streq	r1, [r4, #0]
 800bf34:	e7ed      	b.n	800bf12 <_free_r+0x22>
 800bf36:	461a      	mov	r2, r3
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	b10b      	cbz	r3, 800bf40 <_free_r+0x50>
 800bf3c:	42a3      	cmp	r3, r4
 800bf3e:	d9fa      	bls.n	800bf36 <_free_r+0x46>
 800bf40:	6811      	ldr	r1, [r2, #0]
 800bf42:	1855      	adds	r5, r2, r1
 800bf44:	42a5      	cmp	r5, r4
 800bf46:	d10b      	bne.n	800bf60 <_free_r+0x70>
 800bf48:	6824      	ldr	r4, [r4, #0]
 800bf4a:	4421      	add	r1, r4
 800bf4c:	1854      	adds	r4, r2, r1
 800bf4e:	42a3      	cmp	r3, r4
 800bf50:	6011      	str	r1, [r2, #0]
 800bf52:	d1e0      	bne.n	800bf16 <_free_r+0x26>
 800bf54:	681c      	ldr	r4, [r3, #0]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	6053      	str	r3, [r2, #4]
 800bf5a:	4421      	add	r1, r4
 800bf5c:	6011      	str	r1, [r2, #0]
 800bf5e:	e7da      	b.n	800bf16 <_free_r+0x26>
 800bf60:	d902      	bls.n	800bf68 <_free_r+0x78>
 800bf62:	230c      	movs	r3, #12
 800bf64:	6003      	str	r3, [r0, #0]
 800bf66:	e7d6      	b.n	800bf16 <_free_r+0x26>
 800bf68:	6825      	ldr	r5, [r4, #0]
 800bf6a:	1961      	adds	r1, r4, r5
 800bf6c:	428b      	cmp	r3, r1
 800bf6e:	bf04      	itt	eq
 800bf70:	6819      	ldreq	r1, [r3, #0]
 800bf72:	685b      	ldreq	r3, [r3, #4]
 800bf74:	6063      	str	r3, [r4, #4]
 800bf76:	bf04      	itt	eq
 800bf78:	1949      	addeq	r1, r1, r5
 800bf7a:	6021      	streq	r1, [r4, #0]
 800bf7c:	6054      	str	r4, [r2, #4]
 800bf7e:	e7ca      	b.n	800bf16 <_free_r+0x26>
 800bf80:	b003      	add	sp, #12
 800bf82:	bd30      	pop	{r4, r5, pc}
 800bf84:	240051e8 	.word	0x240051e8

0800bf88 <_init>:
 800bf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf8a:	bf00      	nop
 800bf8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf8e:	bc08      	pop	{r3}
 800bf90:	469e      	mov	lr, r3
 800bf92:	4770      	bx	lr

0800bf94 <_fini>:
 800bf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf96:	bf00      	nop
 800bf98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf9a:	bc08      	pop	{r3}
 800bf9c:	469e      	mov	lr, r3
 800bf9e:	4770      	bx	lr
