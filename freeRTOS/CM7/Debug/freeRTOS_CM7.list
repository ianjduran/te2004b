
freeRTOS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae7c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800b120  0800b120  0001b120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b594  0800b594  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b594  0800b594  0001b594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b59c  0800b59c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b59c  0800b59c  0001b59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5a0  0800b5a0  0001b5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  0800b5a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bbc  240001e4  0800b788  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004da0  0800b788  00024da0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000270e8  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043ae  00000000  00000000  000472fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c88  00000000  00000000  0004b6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af0  00000000  00000000  0004d330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ceaa  00000000  00000000  0004ee20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022a36  00000000  00000000  0008bcca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001914b1  00000000  00000000  000ae700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0023fbb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087c8  00000000  00000000  0023fc04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b104 	.word	0x0800b104

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	0800b104 	.word	0x0800b104

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ca:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007cc:	bf00      	nop
 80007ce:	4b29      	ldr	r3, [pc, #164]	; (8000874 <main+0xb4>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d004      	beq.n	80007e4 <main+0x24>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dcf4      	bgt.n	80007ce <main+0xe>
  if ( timeout < 0 )
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	da01      	bge.n	80007ee <main+0x2e>
  {
  Error_Handler();
 80007ea:	f000 fa87 	bl	8000cfc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 fd23 	bl	8001238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f847 	bl	8000884 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <main+0xb4>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4a1d      	ldr	r2, [pc, #116]	; (8000874 <main+0xb4>)
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <main+0xb4>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000814:	2000      	movs	r0, #0
 8000816:	f001 f83b 	bl	8001890 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800081a:	2100      	movs	r1, #0
 800081c:	2000      	movs	r0, #0
 800081e:	f001 f851 	bl	80018c4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000826:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000828:	bf00      	nop
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <main+0xb4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <main+0x80>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	dcf4      	bgt.n	800082a <main+0x6a>
if ( timeout < 0 )
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	da01      	bge.n	800084a <main+0x8a>
{
Error_Handler();
 8000846:	f000 fa59 	bl	8000cfc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 f949 	bl	8000ae0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800084e:	f000 f8fb 	bl	8000a48 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000852:	f000 f891 	bl	8000978 <MX_I2C1_Init>
  MX_TIM17_Init();
 8000856:	f000 f8cf 	bl	80009f8 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800085a:	f005 f9b7 	bl	8005bcc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800085e:	4a06      	ldr	r2, [pc, #24]	; (8000878 <main+0xb8>)
 8000860:	2100      	movs	r1, #0
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <main+0xbc>)
 8000864:	f005 f9fc 	bl	8005c60 <osThreadNew>
 8000868:	4603      	mov	r3, r0
 800086a:	4a05      	ldr	r2, [pc, #20]	; (8000880 <main+0xc0>)
 800086c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800086e:	f005 f9d1 	bl	8005c14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000872:	e7fe      	b.n	8000872 <main+0xb2>
 8000874:	58024400 	.word	0x58024400
 8000878:	0800b170 	.word	0x0800b170
 800087c:	08000bc9 	.word	0x08000bc9
 8000880:	24000328 	.word	0x24000328

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b09c      	sub	sp, #112	; 0x70
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	224c      	movs	r2, #76	; 0x4c
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f008 f843 	bl	800891e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2220      	movs	r2, #32
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f008 f83d 	bl	800891e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008a4:	2004      	movs	r0, #4
 80008a6:	f001 f949 	bl	8001b3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b30      	ldr	r3, [pc, #192]	; (8000970 <SystemClock_Config+0xec>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	4a2f      	ldr	r2, [pc, #188]	; (8000970 <SystemClock_Config+0xec>)
 80008b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008b8:	6193      	str	r3, [r2, #24]
 80008ba:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <SystemClock_Config+0xec>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <SystemClock_Config+0xf0>)
 80008c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c8:	4a2a      	ldr	r2, [pc, #168]	; (8000974 <SystemClock_Config+0xf0>)
 80008ca:	f043 0301 	orr.w	r3, r3, #1
 80008ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <SystemClock_Config+0xf0>)
 80008d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008dc:	bf00      	nop
 80008de:	4b24      	ldr	r3, [pc, #144]	; (8000970 <SystemClock_Config+0xec>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ea:	d1f8      	bne.n	80008de <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ec:	2301      	movs	r3, #1
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f6:	2302      	movs	r3, #2
 80008f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fa:	2302      	movs	r3, #2
 80008fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008fe:	2302      	movs	r3, #2
 8000900:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000902:	23f0      	movs	r3, #240	; 0xf0
 8000904:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000906:	2302      	movs	r3, #2
 8000908:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800090a:	2302      	movs	r3, #2
 800090c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800090e:	2302      	movs	r3, #2
 8000910:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000912:	2308      	movs	r3, #8
 8000914:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000916:	2300      	movs	r3, #0
 8000918:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	4618      	mov	r0, r3
 8000924:	f001 f964 	bl	8001bf0 <HAL_RCC_OscConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800092e:	f000 f9e5 	bl	8000cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	233f      	movs	r3, #63	; 0x3f
 8000934:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	2303      	movs	r3, #3
 8000938:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800093e:	2308      	movs	r3, #8
 8000940:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000946:	2340      	movs	r3, #64	; 0x40
 8000948:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800094a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000950:	2340      	movs	r3, #64	; 0x40
 8000952:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2104      	movs	r1, #4
 8000958:	4618      	mov	r0, r3
 800095a:	f001 fd77 	bl	800244c <HAL_RCC_ClockConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000964:	f000 f9ca 	bl	8000cfc <Error_Handler>
  }
}
 8000968:	bf00      	nop
 800096a:	3770      	adds	r7, #112	; 0x70
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	58024800 	.word	0x58024800
 8000974:	58000400 	.word	0x58000400

08000978 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_I2C1_Init+0x74>)
 800097e:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <MX_I2C1_Init+0x78>)
 8000980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_I2C1_Init+0x74>)
 8000984:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <MX_I2C1_Init+0x7c>)
 8000986:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_I2C1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_I2C1_Init+0x74>)
 8000990:	2201      	movs	r2, #1
 8000992:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_I2C1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_I2C1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <MX_I2C1_Init+0x74>)
 80009b4:	f000 ff9a 	bl	80018ec <HAL_I2C_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009be:	f000 f99d 	bl	8000cfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009c2:	2100      	movs	r1, #0
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <MX_I2C1_Init+0x74>)
 80009c6:	f001 f821 	bl	8001a0c <HAL_I2CEx_ConfigAnalogFilter>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009d0:	f000 f994 	bl	8000cfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_I2C1_Init+0x74>)
 80009d8:	f001 f863 	bl	8001aa2 <HAL_I2CEx_ConfigDigitalFilter>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 f98b 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	24000200 	.word	0x24000200
 80009f0:	40005400 	.word	0x40005400
 80009f4:	307075b1 	.word	0x307075b1

080009f8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_TIM17_Init+0x48>)
 80009fe:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <MX_TIM17_Init+0x4c>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 65535;
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_TIM17_Init+0x48>)
 8000a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a08:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <MX_TIM17_Init+0x48>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_TIM17_Init+0x48>)
 8000a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a16:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_TIM17_Init+0x48>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_TIM17_Init+0x48>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_TIM17_Init+0x48>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_TIM17_Init+0x48>)
 8000a2c:	f003 fc44 	bl	80042b8 <HAL_TIM_Base_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000a36:	f000 f961 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2400024c 	.word	0x2400024c
 8000a44:	40014800 	.word	0x40014800

08000a48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a4e:	4a23      	ldr	r2, [pc, #140]	; (8000adc <MX_USART3_UART_Init+0x94>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a90:	4811      	ldr	r0, [pc, #68]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a92:	f003 ff51 	bl	8004938 <HAL_UART_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a9c:	f000 f92e 	bl	8000cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000aa4:	f004 ff84 	bl	80059b0 <HAL_UARTEx_SetTxFifoThreshold>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aae:	f000 f925 	bl	8000cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000ab6:	f004 ffb9 	bl	8005a2c <HAL_UARTEx_SetRxFifoThreshold>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ac0:	f000 f91c 	bl	8000cfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000ac6:	f004 ff3a 	bl	800593e <HAL_UARTEx_DisableFifoMode>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ad0:	f000 f914 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	24000298 	.word	0x24000298
 8000adc:	40004800 	.word	0x40004800

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <MX_GPIO_Init+0xdc>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	4a2f      	ldr	r2, [pc, #188]	; (8000bbc <MX_GPIO_Init+0xdc>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b06:	4b2d      	ldr	r3, [pc, #180]	; (8000bbc <MX_GPIO_Init+0xdc>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b14:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <MX_GPIO_Init+0xdc>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	4a28      	ldr	r2, [pc, #160]	; (8000bbc <MX_GPIO_Init+0xdc>)
 8000b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b24:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <MX_GPIO_Init+0xdc>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <MX_GPIO_Init+0xdc>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	4a20      	ldr	r2, [pc, #128]	; (8000bbc <MX_GPIO_Init+0xdc>)
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <MX_GPIO_Init+0xdc>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b50:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <MX_GPIO_Init+0xdc>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b56:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <MX_GPIO_Init+0xdc>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_GPIO_Init+0xdc>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	f003 0308 	and.w	r3, r3, #8
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b74:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <MX_GPIO_Init+0xe0>)
 8000b76:	f000 fe57 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000b7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <MX_GPIO_Init+0xe4>)
 8000b90:	f000 fc9a 	bl	80014c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b94:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <MX_GPIO_Init+0xe0>)
 8000bae:	f000 fc8b 	bl	80014c8 <HAL_GPIO_Init>

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	58024400 	.word	0x58024400
 8000bc0:	58020400 	.word	0x58020400
 8000bc4:	58020800 	.word	0x58020800

08000bc8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b090      	sub	sp, #64	; 0x40
 8000bcc:	af02      	add	r7, sp, #8
 8000bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_TIM_Base_Start(&htim17);
 8000bd0:	483d      	ldr	r0, [pc, #244]	; (8000cc8 <StartDefaultTask+0x100>)
 8000bd2:	f003 fbc9 	bl	8004368 <HAL_TIM_Base_Start>
	long cantidadIntervalos = 10000000;
 8000bd6:	4b3d      	ldr	r3, [pc, #244]	; (8000ccc <StartDefaultTask+0x104>)
 8000bd8:	623b      	str	r3, [r7, #32]
	double baseIntervalo;
	double fdx;
	double acum = 0;
 8000bda:	f04f 0200 	mov.w	r2, #0
 8000bde:	f04f 0300 	mov.w	r3, #0
 8000be2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	double x;
	long i;
	baseIntervalo = 1.0 / cantidadIntervalos;
 8000be6:	6a3b      	ldr	r3, [r7, #32]
 8000be8:	ee07 3a90 	vmov	s15, r3
 8000bec:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bf0:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000bf4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000bf8:	ed87 7b06 	vstr	d7, [r7, #24]

	uint16_t start_t = __HAL_TIM_GET_COUNTER(&htim17);
 8000bfc:	4b32      	ldr	r3, [pc, #200]	; (8000cc8 <StartDefaultTask+0x100>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c02:	82fb      	strh	r3, [r7, #22]

	for (i = 0, x = 0.0; i < cantidadIntervalos; i++) {
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
 8000c08:	f04f 0200 	mov.w	r2, #0
 8000c0c:	f04f 0300 	mov.w	r3, #0
 8000c10:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000c14:	e024      	b.n	8000c60 <StartDefaultTask+0x98>
			fdx = 4 / (1 + x * x);
 8000c16:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000c1a:	ee27 7b07 	vmul.f64	d7, d7, d7
 8000c1e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000c22:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000c26:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000c2a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c2e:	ed87 7b02 	vstr	d7, [r7, #8]
			acum = acum + (fdx * baseIntervalo);
 8000c32:	ed97 6b02 	vldr	d6, [r7, #8]
 8000c36:	ed97 7b06 	vldr	d7, [r7, #24]
 8000c3a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c3e:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8000c42:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c46:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
			x = x + baseIntervalo;
 8000c4a:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8000c4e:	ed97 7b06 	vldr	d7, [r7, #24]
 8000c52:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c56:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	for (i = 0, x = 0.0; i < cantidadIntervalos; i++) {
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c62:	6a3b      	ldr	r3, [r7, #32]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbd6      	blt.n	8000c16 <StartDefaultTask+0x4e>
	}
	uint16_t end_t = __HAL_TIM_GET_COUNTER(&htim17);
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <StartDefaultTask+0x100>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6e:	82bb      	strh	r3, [r7, #20]
	uint16_t total_t = end_t - start_t;
 8000c70:	8aba      	ldrh	r2, [r7, #20]
 8000c72:	8afb      	ldrh	r3, [r7, #22]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	827b      	strh	r3, [r7, #18]
	printf("Resultado=%f (%f seconds)\r\n", acum, ((float)total_t * 65535.0)/240000000.0);
 8000c78:	8a7b      	ldrh	r3, [r7, #18]
 8000c7a:	ee07 3a90 	vmov	s15, r3
 8000c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c86:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000cb8 <StartDefaultTask+0xf0>
 8000c8a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c8e:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000cc0 <StartDefaultTask+0xf8>
 8000c92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c96:	ed8d 7b00 	vstr	d7, [sp]
 8000c9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000c9e:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <StartDefaultTask+0x108>)
 8000ca0:	f008 fb1c 	bl	80092dc <iprintf>
  /* Infinite loop */
  for(;;)
  {
	//printf("Hello from FreeRTOS STM32H7 world!!\r\n");
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <StartDefaultTask+0x10c>)
 8000ca8:	f000 fdd7 	bl	800185a <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000cac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cb0:	f005 f868 	bl	8005d84 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000cb4:	e7f6      	b.n	8000ca4 <StartDefaultTask+0xdc>
 8000cb6:	bf00      	nop
 8000cb8:	00000000 	.word	0x00000000
 8000cbc:	40efffe0 	.word	0x40efffe0
 8000cc0:	00000000 	.word	0x00000000
 8000cc4:	41ac9c38 	.word	0x41ac9c38
 8000cc8:	2400024c 	.word	0x2400024c
 8000ccc:	00989680 	.word	0x00989680
 8000cd0:	0800b12c 	.word	0x0800b12c
 8000cd4:	58020400 	.word	0x58020400

08000cd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d101      	bne.n	8000cee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cea:	f000 fae1 	bl	80012b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40001400 	.word	0x40001400

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d10:	1d39      	adds	r1, r7, #4
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	2201      	movs	r2, #1
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <__io_putchar+0x20>)
 8000d1a:	f003 fe5d 	bl	80049d8 <HAL_UART_Transmit>
  return ch;
 8000d1e:	687b      	ldr	r3, [r7, #4]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	24000298 	.word	0x24000298

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_MspInit+0x38>)
 8000d34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_MspInit+0x38>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_MspInit+0x38>)
 8000d44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	210f      	movs	r1, #15
 8000d54:	f06f 0001 	mvn.w	r0, #1
 8000d58:	f000 fb8e 	bl	8001478 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	58024400 	.word	0x58024400

08000d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0b8      	sub	sp, #224	; 0xe0
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	22bc      	movs	r2, #188	; 0xbc
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f007 fdc8 	bl	800891e <memset>
  if(hi2c->Instance==I2C1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a24      	ldr	r2, [pc, #144]	; (8000e24 <HAL_I2C_MspInit+0xbc>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d141      	bne.n	8000e1c <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 ff1e 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000db2:	f7ff ffa3 	bl	8000cfc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <HAL_I2C_MspInit+0xc0>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	4a1a      	ldr	r2, [pc, #104]	; (8000e28 <HAL_I2C_MspInit+0xc0>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_I2C_MspInit+0xc0>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd4:	23c0      	movs	r3, #192	; 0xc0
 8000dd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dda:	2312      	movs	r3, #18
 8000ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dec:	2304      	movs	r3, #4
 8000dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <HAL_I2C_MspInit+0xc4>)
 8000dfa:	f000 fb65 	bl	80014c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_I2C_MspInit+0xc0>)
 8000e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e04:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <HAL_I2C_MspInit+0xc0>)
 8000e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_I2C_MspInit+0xc0>)
 8000e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e1c:	bf00      	nop
 8000e1e:	37e0      	adds	r7, #224	; 0xe0
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40005400 	.word	0x40005400
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	58020400 	.word	0x58020400

08000e30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <HAL_TIM_Base_MspInit+0x3c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d10e      	bne.n	8000e60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_TIM_Base_MspInit+0x40>)
 8000e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e48:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <HAL_TIM_Base_MspInit+0x40>)
 8000e4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <HAL_TIM_Base_MspInit+0x40>)
 8000e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	40014800 	.word	0x40014800
 8000e70:	58024400 	.word	0x58024400

08000e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b0b8      	sub	sp, #224	; 0xe0
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	22bc      	movs	r2, #188	; 0xbc
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f007 fd42 	bl	800891e <memset>
  if(huart->Instance==USART3)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a25      	ldr	r2, [pc, #148]	; (8000f34 <HAL_UART_MspInit+0xc0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d142      	bne.n	8000f2a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 fe98 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ebe:	f7ff ff1d 	bl	8000cfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <HAL_UART_MspInit+0xc4>)
 8000ec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ec8:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <HAL_UART_MspInit+0xc4>)
 8000eca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ece:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_UART_MspInit+0xc4>)
 8000ed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_UART_MspInit+0xc4>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee6:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <HAL_UART_MspInit+0xc4>)
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_UART_MspInit+0xc4>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000efe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f18:	2307      	movs	r3, #7
 8000f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_UART_MspInit+0xc8>)
 8000f26:	f000 facf 	bl	80014c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	37e0      	adds	r7, #224	; 0xe0
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40004800 	.word	0x40004800
 8000f38:	58024400 	.word	0x58024400
 8000f3c:	58020c00 	.word	0x58020c00

08000f40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b090      	sub	sp, #64	; 0x40
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b0f      	cmp	r3, #15
 8000f4c:	d827      	bhi.n	8000f9e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	2037      	movs	r0, #55	; 0x37
 8000f54:	f000 fa90 	bl	8001478 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f58:	2037      	movs	r0, #55	; 0x37
 8000f5a:	f000 faa7 	bl	80014ac <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000f5e:	4a29      	ldr	r2, [pc, #164]	; (8001004 <HAL_InitTick+0xc4>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000f64:	4b28      	ldr	r3, [pc, #160]	; (8001008 <HAL_InitTick+0xc8>)
 8000f66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f6a:	4a27      	ldr	r2, [pc, #156]	; (8001008 <HAL_InitTick+0xc8>)
 8000f6c:	f043 0320 	orr.w	r3, r3, #32
 8000f70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <HAL_InitTick+0xc8>)
 8000f76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f7a:	f003 0320 	and.w	r3, r3, #32
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f82:	f107 0210 	add.w	r2, r7, #16
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 fde9 	bl	8002b64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d106      	bne.n	8000faa <HAL_InitTick+0x6a>
 8000f9c:	e001      	b.n	8000fa2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e02b      	b.n	8000ffa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fa2:	f001 fdb3 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 8000fa6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000fa8:	e004      	b.n	8000fb4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000faa:	f001 fdaf 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb6:	4a15      	ldr	r2, [pc, #84]	; (800100c <HAL_InitTick+0xcc>)
 8000fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbc:	0c9b      	lsrs	r3, r3, #18
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <HAL_InitTick+0xd0>)
 8000fc4:	4a13      	ldr	r2, [pc, #76]	; (8001014 <HAL_InitTick+0xd4>)
 8000fc6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_InitTick+0xd0>)
 8000fca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fce:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <HAL_InitTick+0xd0>)
 8000fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_InitTick+0xd0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_InitTick+0xd0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000fe2:	480b      	ldr	r0, [pc, #44]	; (8001010 <HAL_InitTick+0xd0>)
 8000fe4:	f003 f968 	bl	80042b8 <HAL_TIM_Base_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d104      	bne.n	8000ff8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000fee:	4808      	ldr	r0, [pc, #32]	; (8001010 <HAL_InitTick+0xd0>)
 8000ff0:	f003 fa2a 	bl	8004448 <HAL_TIM_Base_Start_IT>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	e000      	b.n	8000ffa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3740      	adds	r7, #64	; 0x40
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	24000008 	.word	0x24000008
 8001008:	58024400 	.word	0x58024400
 800100c:	431bde83 	.word	0x431bde83
 8001010:	2400032c 	.word	0x2400032c
 8001014:	40001400 	.word	0x40001400

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800101c:	e7fe      	b.n	800101c <NMI_Handler+0x4>

0800101e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <HardFault_Handler+0x4>

08001024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <MemManage_Handler+0x4>

0800102a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <BusFault_Handler+0x4>

08001030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <UsageFault_Handler+0x4>

08001036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <TIM7_IRQHandler+0x10>)
 800104a:	f003 fa75 	bl	8004538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2400032c 	.word	0x2400032c

08001058 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
	return 1;
 800105c:	2301      	movs	r3, #1
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <_kill>:

int _kill(int pid, int sig)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001072:	f007 fb23 	bl	80086bc <__errno>
 8001076:	4603      	mov	r3, r0
 8001078:	2216      	movs	r2, #22
 800107a:	601a      	str	r2, [r3, #0]
	return -1;
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_exit>:

void _exit (int status)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ffe7 	bl	8001068 <_kill>
	while (1) {}		/* Make sure we hang here */
 800109a:	e7fe      	b.n	800109a <_exit+0x12>

0800109c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	e00a      	b.n	80010c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ae:	f3af 8000 	nop.w
 80010b2:	4601      	mov	r1, r0
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	60ba      	str	r2, [r7, #8]
 80010ba:	b2ca      	uxtb	r2, r1
 80010bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3301      	adds	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	dbf0      	blt.n	80010ae <_read+0x12>
	}

return len;
 80010cc:	687b      	ldr	r3, [r7, #4]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	e009      	b.n	80010fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	60ba      	str	r2, [r7, #8]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fe09 	bl	8000d08 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	3301      	adds	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	dbf1      	blt.n	80010e8 <_write+0x12>
	}
	return len;
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <_close>:

int _close(int file)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
	return -1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001136:	605a      	str	r2, [r3, #4]
	return 0;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_isatty>:

int _isatty(int file)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	return 1;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
	return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <_sbrk+0x5c>)
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <_sbrk+0x60>)
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <_sbrk+0x64>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <_sbrk+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d207      	bcs.n	80011b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a8:	f007 fa88 	bl	80086bc <__errno>
 80011ac:	4603      	mov	r3, r0
 80011ae:	220c      	movs	r2, #12
 80011b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	e009      	b.n	80011cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <_sbrk+0x64>)
 80011c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	24080000 	.word	0x24080000
 80011d8:	00000400 	.word	0x00000400
 80011dc:	24000378 	.word	0x24000378
 80011e0:	24004da0 	.word	0x24004da0

080011e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800121c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011e8:	f7ff fa54 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ee:	490d      	ldr	r1, [pc, #52]	; (8001224 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001204:	4c0a      	ldr	r4, [pc, #40]	; (8001230 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001212:	f007 fb4f 	bl	80088b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001216:	f7ff fad3 	bl	80007c0 <main>
  bx  lr
 800121a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800121c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001220:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001224:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8001228:	0800b5a4 	.word	0x0800b5a4
  ldr r2, =_sbss
 800122c:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 8001230:	24004da0 	.word	0x24004da0

08001234 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC3_IRQHandler>
	...

08001238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123e:	2003      	movs	r0, #3
 8001240:	f000 f90f 	bl	8001462 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001244:	f001 fab8 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8001248:	4602      	mov	r2, r0
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_Init+0x68>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	f003 030f 	and.w	r3, r3, #15
 8001254:	4913      	ldr	r1, [pc, #76]	; (80012a4 <HAL_Init+0x6c>)
 8001256:	5ccb      	ldrb	r3, [r1, r3]
 8001258:	f003 031f 	and.w	r3, r3, #31
 800125c:	fa22 f303 	lsr.w	r3, r2, r3
 8001260:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_Init+0x68>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <HAL_Init+0x6c>)
 800126c:	5cd3      	ldrb	r3, [r2, r3]
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
 8001278:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <HAL_Init+0x70>)
 800127a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800127c:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <HAL_Init+0x74>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001282:	200f      	movs	r0, #15
 8001284:	f7ff fe5c 	bl	8000f40 <HAL_InitTick>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e002      	b.n	8001298 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001292:	f7ff fd4b 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	58024400 	.word	0x58024400
 80012a4:	0800b160 	.word	0x0800b160
 80012a8:	24000004 	.word	0x24000004
 80012ac:	24000000 	.word	0x24000000

080012b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_IncTick+0x20>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x24>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_IncTick+0x24>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2400000c 	.word	0x2400000c
 80012d4:	2400037c 	.word	0x2400037c

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	2400037c 	.word	0x2400037c

080012f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_GetREVID+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	0c1b      	lsrs	r3, r3, #16
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	5c001000 	.word	0x5c001000

08001308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <__NVIC_SetPriorityGrouping+0x40>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001324:	4013      	ands	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	4313      	orrs	r3, r2
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x40>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00
 800134c:	05fa0000 	.word	0x05fa0000

08001350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <__NVIC_GetPriorityGrouping+0x18>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 0307 	and.w	r3, r3, #7
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	2b00      	cmp	r3, #0
 800137c:	db0b      	blt.n	8001396 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	f003 021f 	and.w	r2, r3, #31
 8001384:	4907      	ldr	r1, [pc, #28]	; (80013a4 <__NVIC_EnableIRQ+0x38>)
 8001386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	; (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ff4c 	bl	8001308 <__NVIC_SetPriorityGrouping>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001486:	f7ff ff63 	bl	8001350 <__NVIC_GetPriorityGrouping>
 800148a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	6978      	ldr	r0, [r7, #20]
 8001492:	f7ff ffb3 	bl	80013fc <NVIC_EncodePriority>
 8001496:	4602      	mov	r2, r0
 8001498:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff82 	bl	80013a8 <__NVIC_SetPriority>
}
 80014a4:	bf00      	nop
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff56 	bl	800136c <__NVIC_EnableIRQ>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014d6:	4b89      	ldr	r3, [pc, #548]	; (80016fc <HAL_GPIO_Init+0x234>)
 80014d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014da:	e194      	b.n	8001806 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	2101      	movs	r1, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8186 	beq.w	8001800 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d005      	beq.n	800150c <HAL_GPIO_Init+0x44>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d130      	bne.n	800156e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001542:	2201      	movs	r2, #1
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	091b      	lsrs	r3, r3, #4
 8001558:	f003 0201 	and.w	r2, r3, #1
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b03      	cmp	r3, #3
 8001578:	d017      	beq.n	80015aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d123      	bne.n	80015fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	08da      	lsrs	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3208      	adds	r2, #8
 80015be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	220f      	movs	r2, #15
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	691a      	ldr	r2, [r3, #16]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	08da      	lsrs	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3208      	adds	r2, #8
 80015f8:	69b9      	ldr	r1, [r7, #24]
 80015fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	2203      	movs	r2, #3
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0203 	and.w	r2, r3, #3
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 80e0 	beq.w	8001800 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001640:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <HAL_GPIO_Init+0x238>)
 8001642:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001646:	4a2e      	ldr	r2, [pc, #184]	; (8001700 <HAL_GPIO_Init+0x238>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001650:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <HAL_GPIO_Init+0x238>)
 8001652:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800165e:	4a29      	ldr	r2, [pc, #164]	; (8001704 <HAL_GPIO_Init+0x23c>)
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	3302      	adds	r3, #2
 8001666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	220f      	movs	r2, #15
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a20      	ldr	r2, [pc, #128]	; (8001708 <HAL_GPIO_Init+0x240>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d052      	beq.n	8001730 <HAL_GPIO_Init+0x268>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a1f      	ldr	r2, [pc, #124]	; (800170c <HAL_GPIO_Init+0x244>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d031      	beq.n	80016f6 <HAL_GPIO_Init+0x22e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <HAL_GPIO_Init+0x248>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d02b      	beq.n	80016f2 <HAL_GPIO_Init+0x22a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <HAL_GPIO_Init+0x24c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d025      	beq.n	80016ee <HAL_GPIO_Init+0x226>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <HAL_GPIO_Init+0x250>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d01f      	beq.n	80016ea <HAL_GPIO_Init+0x222>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a1b      	ldr	r2, [pc, #108]	; (800171c <HAL_GPIO_Init+0x254>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d019      	beq.n	80016e6 <HAL_GPIO_Init+0x21e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a1a      	ldr	r2, [pc, #104]	; (8001720 <HAL_GPIO_Init+0x258>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d013      	beq.n	80016e2 <HAL_GPIO_Init+0x21a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a19      	ldr	r2, [pc, #100]	; (8001724 <HAL_GPIO_Init+0x25c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00d      	beq.n	80016de <HAL_GPIO_Init+0x216>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a18      	ldr	r2, [pc, #96]	; (8001728 <HAL_GPIO_Init+0x260>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d007      	beq.n	80016da <HAL_GPIO_Init+0x212>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a17      	ldr	r2, [pc, #92]	; (800172c <HAL_GPIO_Init+0x264>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <HAL_GPIO_Init+0x20e>
 80016d2:	2309      	movs	r3, #9
 80016d4:	e02d      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016d6:	230a      	movs	r3, #10
 80016d8:	e02b      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016da:	2308      	movs	r3, #8
 80016dc:	e029      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016de:	2307      	movs	r3, #7
 80016e0:	e027      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016e2:	2306      	movs	r3, #6
 80016e4:	e025      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016e6:	2305      	movs	r3, #5
 80016e8:	e023      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016ea:	2304      	movs	r3, #4
 80016ec:	e021      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e01f      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e01d      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e01b      	b.n	8001732 <HAL_GPIO_Init+0x26a>
 80016fa:	bf00      	nop
 80016fc:	58000080 	.word	0x58000080
 8001700:	58024400 	.word	0x58024400
 8001704:	58000400 	.word	0x58000400
 8001708:	58020000 	.word	0x58020000
 800170c:	58020400 	.word	0x58020400
 8001710:	58020800 	.word	0x58020800
 8001714:	58020c00 	.word	0x58020c00
 8001718:	58021000 	.word	0x58021000
 800171c:	58021400 	.word	0x58021400
 8001720:	58021800 	.word	0x58021800
 8001724:	58021c00 	.word	0x58021c00
 8001728:	58022000 	.word	0x58022000
 800172c:	58022400 	.word	0x58022400
 8001730:	2300      	movs	r3, #0
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	f002 0203 	and.w	r2, r2, #3
 8001738:	0092      	lsls	r2, r2, #2
 800173a:	4093      	lsls	r3, r2
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001742:	4938      	ldr	r1, [pc, #224]	; (8001824 <HAL_GPIO_Init+0x35c>)
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	3302      	adds	r3, #2
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800177e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	3301      	adds	r3, #1
 8001804:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	f47f ae63 	bne.w	80014dc <HAL_GPIO_Init+0x14>
  }
}
 8001816:	bf00      	nop
 8001818:	bf00      	nop
 800181a:	3724      	adds	r7, #36	; 0x24
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	58000400 	.word	0x58000400

08001828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001838:	787b      	ldrb	r3, [r7, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001844:	e003      	b.n	800184e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	041a      	lsls	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	619a      	str	r2, [r3, #24]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800185a:	b480      	push	{r7}
 800185c:	b085      	sub	sp, #20
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800186c:	887a      	ldrh	r2, [r7, #2]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4013      	ands	r3, r2
 8001872:	041a      	lsls	r2, r3, #16
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	43d9      	mvns	r1, r3
 8001878:	887b      	ldrh	r3, [r7, #2]
 800187a:	400b      	ands	r3, r1
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	619a      	str	r2, [r3, #24]
}
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001898:	4a08      	ldr	r2, [pc, #32]	; (80018bc <HAL_HSEM_FastTake+0x2c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3320      	adds	r3, #32
 800189e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a2:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <HAL_HSEM_FastTake+0x30>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d101      	bne.n	80018ac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	e000      	b.n	80018ae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	58026400 	.word	0x58026400
 80018c0:	80000300 	.word	0x80000300

080018c4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80018ce:	4906      	ldr	r1, [pc, #24]	; (80018e8 <HAL_HSEM_Release+0x24>)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	58026400 	.word	0x58026400

080018ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e07f      	b.n	80019fe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fa28 	bl	8000d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2224      	movs	r2, #36	; 0x24
 800191c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0201 	bic.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800193c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800194c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d107      	bne.n	8001966 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	e006      	b.n	8001974 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001972:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d104      	bne.n	8001986 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001984:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <HAL_I2C_Init+0x11c>)
 8001992:	430b      	orrs	r3, r1
 8001994:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691a      	ldr	r2, [r3, #16]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69d9      	ldr	r1, [r3, #28]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1a      	ldr	r2, [r3, #32]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2220      	movs	r2, #32
 80019ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	02008000 	.word	0x02008000

08001a0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	d138      	bne.n	8001a94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e032      	b.n	8001a96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2224      	movs	r2, #36	; 0x24
 8001a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0201 	bic.w	r2, r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6819      	ldr	r1, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2220      	movs	r2, #32
 8001a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	e000      	b.n	8001a96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a94:	2302      	movs	r3, #2
  }
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b085      	sub	sp, #20
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b20      	cmp	r3, #32
 8001ab6:	d139      	bne.n	8001b2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e033      	b.n	8001b2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2224      	movs	r2, #36	; 0x24
 8001ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0201 	bic.w	r2, r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001af4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0201 	orr.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	e000      	b.n	8001b2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b2c:	2302      	movs	r3, #2
  }
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001b44:	4b29      	ldr	r3, [pc, #164]	; (8001bec <HAL_PWREx_ConfigSupply+0xb0>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	2b06      	cmp	r3, #6
 8001b4e:	d00a      	beq.n	8001b66 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b50:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_PWREx_ConfigSupply+0xb0>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d001      	beq.n	8001b62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e040      	b.n	8001be4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e03e      	b.n	8001be4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_PWREx_ConfigSupply+0xb0>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001b6e:	491f      	ldr	r1, [pc, #124]	; (8001bec <HAL_PWREx_ConfigSupply+0xb0>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b76:	f7ff fbaf 	bl	80012d8 <HAL_GetTick>
 8001b7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b7c:	e009      	b.n	8001b92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b7e:	f7ff fbab 	bl	80012d8 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b8c:	d901      	bls.n	8001b92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e028      	b.n	8001be4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <HAL_PWREx_ConfigSupply+0xb0>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b9e:	d1ee      	bne.n	8001b7e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b1e      	cmp	r3, #30
 8001ba4:	d008      	beq.n	8001bb8 <HAL_PWREx_ConfigSupply+0x7c>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b2e      	cmp	r3, #46	; 0x2e
 8001baa:	d005      	beq.n	8001bb8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b1d      	cmp	r3, #29
 8001bb0:	d002      	beq.n	8001bb8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b2d      	cmp	r3, #45	; 0x2d
 8001bb6:	d114      	bne.n	8001be2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001bb8:	f7ff fb8e 	bl	80012d8 <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001bbe:	e009      	b.n	8001bd4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001bc0:	f7ff fb8a 	bl	80012d8 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bce:	d901      	bls.n	8001bd4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e007      	b.n	8001be4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_PWREx_ConfigSupply+0xb0>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be0:	d1ee      	bne.n	8001bc0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	58024800 	.word	0x58024800

08001bf0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	; 0x30
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	f000 bc1d 	b.w	800243e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 8087 	beq.w	8001d20 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c12:	4b99      	ldr	r3, [pc, #612]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c1c:	4b96      	ldr	r3, [pc, #600]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c24:	2b10      	cmp	r3, #16
 8001c26:	d007      	beq.n	8001c38 <HAL_RCC_OscConfig+0x48>
 8001c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2a:	2b18      	cmp	r3, #24
 8001c2c:	d110      	bne.n	8001c50 <HAL_RCC_OscConfig+0x60>
 8001c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d10b      	bne.n	8001c50 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c38:	4b8f      	ldr	r3, [pc, #572]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d06c      	beq.n	8001d1e <HAL_RCC_OscConfig+0x12e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d168      	bne.n	8001d1e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e3f6      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c58:	d106      	bne.n	8001c68 <HAL_RCC_OscConfig+0x78>
 8001c5a:	4b87      	ldr	r3, [pc, #540]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a86      	ldr	r2, [pc, #536]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e02e      	b.n	8001cc6 <HAL_RCC_OscConfig+0xd6>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10c      	bne.n	8001c8a <HAL_RCC_OscConfig+0x9a>
 8001c70:	4b81      	ldr	r3, [pc, #516]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a80      	ldr	r2, [pc, #512]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	4b7e      	ldr	r3, [pc, #504]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a7d      	ldr	r2, [pc, #500]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e01d      	b.n	8001cc6 <HAL_RCC_OscConfig+0xd6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c92:	d10c      	bne.n	8001cae <HAL_RCC_OscConfig+0xbe>
 8001c94:	4b78      	ldr	r3, [pc, #480]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a77      	ldr	r2, [pc, #476]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001c9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b75      	ldr	r3, [pc, #468]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a74      	ldr	r2, [pc, #464]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	e00b      	b.n	8001cc6 <HAL_RCC_OscConfig+0xd6>
 8001cae:	4b72      	ldr	r3, [pc, #456]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a71      	ldr	r2, [pc, #452]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	4b6f      	ldr	r3, [pc, #444]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a6e      	ldr	r2, [pc, #440]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d013      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7ff fb03 	bl	80012d8 <HAL_GetTick>
 8001cd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cd6:	f7ff faff 	bl	80012d8 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b64      	cmp	r3, #100	; 0x64
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e3aa      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ce8:	4b63      	ldr	r3, [pc, #396]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0xe6>
 8001cf4:	e014      	b.n	8001d20 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7ff faef 	bl	80012d8 <HAL_GetTick>
 8001cfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cfe:	f7ff faeb 	bl	80012d8 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b64      	cmp	r3, #100	; 0x64
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e396      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d10:	4b59      	ldr	r3, [pc, #356]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f0      	bne.n	8001cfe <HAL_RCC_OscConfig+0x10e>
 8001d1c:	e000      	b.n	8001d20 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80cb 	beq.w	8001ec4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d2e:	4b52      	ldr	r3, [pc, #328]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d36:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d38:	4b4f      	ldr	r3, [pc, #316]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d007      	beq.n	8001d54 <HAL_RCC_OscConfig+0x164>
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	2b18      	cmp	r3, #24
 8001d48:	d156      	bne.n	8001df8 <HAL_RCC_OscConfig+0x208>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d151      	bne.n	8001df8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d54:	4b48      	ldr	r3, [pc, #288]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_OscConfig+0x17c>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e368      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d6c:	4b42      	ldr	r3, [pc, #264]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 0219 	bic.w	r2, r3, #25
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	493f      	ldr	r1, [pc, #252]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d7e:	f7ff faab 	bl	80012d8 <HAL_GetTick>
 8001d82:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d86:	f7ff faa7 	bl	80012d8 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e352      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d98:	4b37      	ldr	r3, [pc, #220]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	f7ff faa4 	bl	80012f0 <HAL_GetREVID>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f241 0203 	movw	r2, #4099	; 0x1003
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d817      	bhi.n	8001de2 <HAL_RCC_OscConfig+0x1f2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b40      	cmp	r3, #64	; 0x40
 8001db8:	d108      	bne.n	8001dcc <HAL_RCC_OscConfig+0x1dc>
 8001dba:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001dc2:	4a2d      	ldr	r2, [pc, #180]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dca:	e07b      	b.n	8001ec4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	031b      	lsls	r3, r3, #12
 8001dda:	4927      	ldr	r1, [pc, #156]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de0:	e070      	b.n	8001ec4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de2:	4b25      	ldr	r3, [pc, #148]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	061b      	lsls	r3, r3, #24
 8001df0:	4921      	ldr	r1, [pc, #132]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df6:	e065      	b.n	8001ec4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d048      	beq.n	8001e92 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 0219 	bic.w	r2, r3, #25
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	491a      	ldr	r1, [pc, #104]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7ff fa61 	bl	80012d8 <HAL_GetTick>
 8001e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7ff fa5d 	bl	80012d8 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e308      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	f7ff fa5a 	bl	80012f0 <HAL_GetREVID>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d81a      	bhi.n	8001e7c <HAL_RCC_OscConfig+0x28c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b40      	cmp	r3, #64	; 0x40
 8001e4c:	d108      	bne.n	8001e60 <HAL_RCC_OscConfig+0x270>
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e56:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e5c:	6053      	str	r3, [r2, #4]
 8001e5e:	e031      	b.n	8001ec4 <HAL_RCC_OscConfig+0x2d4>
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	031b      	lsls	r3, r3, #12
 8001e6e:	4902      	ldr	r1, [pc, #8]	; (8001e78 <HAL_RCC_OscConfig+0x288>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]
 8001e74:	e026      	b.n	8001ec4 <HAL_RCC_OscConfig+0x2d4>
 8001e76:	bf00      	nop
 8001e78:	58024400 	.word	0x58024400
 8001e7c:	4b9a      	ldr	r3, [pc, #616]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	061b      	lsls	r3, r3, #24
 8001e8a:	4997      	ldr	r1, [pc, #604]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
 8001e90:	e018      	b.n	8001ec4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e92:	4b95      	ldr	r3, [pc, #596]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a94      	ldr	r2, [pc, #592]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fa1b 	bl	80012d8 <HAL_GetTick>
 8001ea2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea6:	f7ff fa17 	bl	80012d8 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e2c2      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001eb8:	4b8b      	ldr	r3, [pc, #556]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80a9 	beq.w	8002024 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed2:	4b85      	ldr	r3, [pc, #532]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001eda:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001edc:	4b82      	ldr	r3, [pc, #520]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d007      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x308>
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2b18      	cmp	r3, #24
 8001eec:	d13a      	bne.n	8001f64 <HAL_RCC_OscConfig+0x374>
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d135      	bne.n	8001f64 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ef8:	4b7b      	ldr	r3, [pc, #492]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_OscConfig+0x320>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	2b80      	cmp	r3, #128	; 0x80
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e296      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f10:	f7ff f9ee 	bl	80012f0 <HAL_GetREVID>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d817      	bhi.n	8001f4e <HAL_RCC_OscConfig+0x35e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	2b20      	cmp	r3, #32
 8001f24:	d108      	bne.n	8001f38 <HAL_RCC_OscConfig+0x348>
 8001f26:	4b70      	ldr	r3, [pc, #448]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f2e:	4a6e      	ldr	r2, [pc, #440]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001f30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f34:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f36:	e075      	b.n	8002024 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f38:	4b6b      	ldr	r3, [pc, #428]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	069b      	lsls	r3, r3, #26
 8001f46:	4968      	ldr	r1, [pc, #416]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f4c:	e06a      	b.n	8002024 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f4e:	4b66      	ldr	r3, [pc, #408]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	061b      	lsls	r3, r3, #24
 8001f5c:	4962      	ldr	r1, [pc, #392]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f62:	e05f      	b.n	8002024 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d042      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f6c:	4b5e      	ldr	r3, [pc, #376]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a5d      	ldr	r2, [pc, #372]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7ff f9ae 	bl	80012d8 <HAL_GetTick>
 8001f7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f80:	f7ff f9aa 	bl	80012d8 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e255      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f92:	4b55      	ldr	r3, [pc, #340]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f9e:	f7ff f9a7 	bl	80012f0 <HAL_GetREVID>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d817      	bhi.n	8001fdc <HAL_RCC_OscConfig+0x3ec>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d108      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3d6>
 8001fb4:	4b4c      	ldr	r3, [pc, #304]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001fbc:	4a4a      	ldr	r2, [pc, #296]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001fbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fc2:	6053      	str	r3, [r2, #4]
 8001fc4:	e02e      	b.n	8002024 <HAL_RCC_OscConfig+0x434>
 8001fc6:	4b48      	ldr	r3, [pc, #288]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	069b      	lsls	r3, r3, #26
 8001fd4:	4944      	ldr	r1, [pc, #272]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
 8001fda:	e023      	b.n	8002024 <HAL_RCC_OscConfig+0x434>
 8001fdc:	4b42      	ldr	r3, [pc, #264]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	061b      	lsls	r3, r3, #24
 8001fea:	493f      	ldr	r1, [pc, #252]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60cb      	str	r3, [r1, #12]
 8001ff0:	e018      	b.n	8002024 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a3c      	ldr	r2, [pc, #240]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8001ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7ff f96b 	bl	80012d8 <HAL_GetTick>
 8002002:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002006:	f7ff f967 	bl	80012d8 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e212      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002018:	4b33      	ldr	r3, [pc, #204]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f0      	bne.n	8002006 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d036      	beq.n	800209e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d019      	beq.n	800206c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002038:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 800203a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203c:	4a2a      	ldr	r2, [pc, #168]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7ff f948 	bl	80012d8 <HAL_GetTick>
 8002048:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204c:	f7ff f944 	bl	80012d8 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e1ef      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800205e:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8002060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x45c>
 800206a:	e018      	b.n	800209e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206c:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 800206e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002070:	4a1d      	ldr	r2, [pc, #116]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8002072:	f023 0301 	bic.w	r3, r3, #1
 8002076:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7ff f92e 	bl	80012d8 <HAL_GetTick>
 800207c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002080:	f7ff f92a 	bl	80012d8 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e1d5      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 8002094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d039      	beq.n	800211e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01c      	beq.n	80020ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a0c      	ldr	r2, [pc, #48]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 80020b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020be:	f7ff f90b 	bl	80012d8 <HAL_GetTick>
 80020c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80020c6:	f7ff f907 	bl	80012d8 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e1b2      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_RCC_OscConfig+0x4f8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x4d6>
 80020e4:	e01b      	b.n	800211e <HAL_RCC_OscConfig+0x52e>
 80020e6:	bf00      	nop
 80020e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020ec:	4b9b      	ldr	r3, [pc, #620]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a9a      	ldr	r2, [pc, #616]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 80020f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020f8:	f7ff f8ee 	bl	80012d8 <HAL_GetTick>
 80020fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002100:	f7ff f8ea 	bl	80012d8 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e195      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002112:	4b92      	ldr	r3, [pc, #584]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8081 	beq.w	800222e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800212c:	4b8c      	ldr	r3, [pc, #560]	; (8002360 <HAL_RCC_OscConfig+0x770>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a8b      	ldr	r2, [pc, #556]	; (8002360 <HAL_RCC_OscConfig+0x770>)
 8002132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002136:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002138:	f7ff f8ce 	bl	80012d8 <HAL_GetTick>
 800213c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002140:	f7ff f8ca 	bl	80012d8 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e175      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002152:	4b83      	ldr	r3, [pc, #524]	; (8002360 <HAL_RCC_OscConfig+0x770>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d106      	bne.n	8002174 <HAL_RCC_OscConfig+0x584>
 8002166:	4b7d      	ldr	r3, [pc, #500]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	4a7c      	ldr	r2, [pc, #496]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6713      	str	r3, [r2, #112]	; 0x70
 8002172:	e02d      	b.n	80021d0 <HAL_RCC_OscConfig+0x5e0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10c      	bne.n	8002196 <HAL_RCC_OscConfig+0x5a6>
 800217c:	4b77      	ldr	r3, [pc, #476]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a76      	ldr	r2, [pc, #472]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
 8002188:	4b74      	ldr	r3, [pc, #464]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	4a73      	ldr	r2, [pc, #460]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 800218e:	f023 0304 	bic.w	r3, r3, #4
 8002192:	6713      	str	r3, [r2, #112]	; 0x70
 8002194:	e01c      	b.n	80021d0 <HAL_RCC_OscConfig+0x5e0>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b05      	cmp	r3, #5
 800219c:	d10c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x5c8>
 800219e:	4b6f      	ldr	r3, [pc, #444]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	4a6e      	ldr	r2, [pc, #440]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 80021a4:	f043 0304 	orr.w	r3, r3, #4
 80021a8:	6713      	str	r3, [r2, #112]	; 0x70
 80021aa:	4b6c      	ldr	r3, [pc, #432]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	4a6b      	ldr	r2, [pc, #428]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6713      	str	r3, [r2, #112]	; 0x70
 80021b6:	e00b      	b.n	80021d0 <HAL_RCC_OscConfig+0x5e0>
 80021b8:	4b68      	ldr	r3, [pc, #416]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021bc:	4a67      	ldr	r2, [pc, #412]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	6713      	str	r3, [r2, #112]	; 0x70
 80021c4:	4b65      	ldr	r3, [pc, #404]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c8:	4a64      	ldr	r2, [pc, #400]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 80021ca:	f023 0304 	bic.w	r3, r3, #4
 80021ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d015      	beq.n	8002204 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d8:	f7ff f87e 	bl	80012d8 <HAL_GetTick>
 80021dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f7ff f87a 	bl	80012d8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e123      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021f6:	4b59      	ldr	r3, [pc, #356]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0ee      	beq.n	80021e0 <HAL_RCC_OscConfig+0x5f0>
 8002202:	e014      	b.n	800222e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002204:	f7ff f868 	bl	80012d8 <HAL_GetTick>
 8002208:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800220a:	e00a      	b.n	8002222 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220c:	f7ff f864 	bl	80012d8 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e10d      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002222:	4b4e      	ldr	r3, [pc, #312]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1ee      	bne.n	800220c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8102 	beq.w	800243c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002238:	4b48      	ldr	r3, [pc, #288]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002240:	2b18      	cmp	r3, #24
 8002242:	f000 80bd 	beq.w	80023c0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	2b02      	cmp	r3, #2
 800224c:	f040 809e 	bne.w	800238c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002250:	4b42      	ldr	r3, [pc, #264]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a41      	ldr	r2, [pc, #260]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800225a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff f83c 	bl	80012d8 <HAL_GetTick>
 8002260:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff f838 	bl	80012d8 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e0e3      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002276:	4b39      	ldr	r3, [pc, #228]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002282:	4b36      	ldr	r3, [pc, #216]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002286:	4b37      	ldr	r3, [pc, #220]	; (8002364 <HAL_RCC_OscConfig+0x774>)
 8002288:	4013      	ands	r3, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002292:	0112      	lsls	r2, r2, #4
 8002294:	430a      	orrs	r2, r1
 8002296:	4931      	ldr	r1, [pc, #196]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002298:	4313      	orrs	r3, r2
 800229a:	628b      	str	r3, [r1, #40]	; 0x28
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	3b01      	subs	r3, #1
 80022a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022aa:	3b01      	subs	r3, #1
 80022ac:	025b      	lsls	r3, r3, #9
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	3b01      	subs	r3, #1
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	3b01      	subs	r3, #1
 80022c6:	061b      	lsls	r3, r3, #24
 80022c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80022cc:	4923      	ldr	r1, [pc, #140]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80022d2:	4b22      	ldr	r3, [pc, #136]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	4a21      	ldr	r2, [pc, #132]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 80022d8:	f023 0301 	bic.w	r3, r3, #1
 80022dc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022de:	4b1f      	ldr	r3, [pc, #124]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 80022e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e2:	4b21      	ldr	r3, [pc, #132]	; (8002368 <HAL_RCC_OscConfig+0x778>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022ea:	00d2      	lsls	r2, r2, #3
 80022ec:	491b      	ldr	r1, [pc, #108]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022f2:	4b1a      	ldr	r3, [pc, #104]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	f023 020c 	bic.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4917      	ldr	r1, [pc, #92]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002300:	4313      	orrs	r3, r2
 8002302:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002304:	4b15      	ldr	r3, [pc, #84]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	f023 0202 	bic.w	r2, r3, #2
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	4912      	ldr	r1, [pc, #72]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002312:	4313      	orrs	r3, r2
 8002314:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	4a10      	ldr	r2, [pc, #64]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 800231c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002320:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	4a0d      	ldr	r2, [pc, #52]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800232e:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	4a0a      	ldr	r2, [pc, #40]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002338:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	4a07      	ldr	r2, [pc, #28]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_RCC_OscConfig+0x76c>)
 800234c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7fe ffc1 	bl	80012d8 <HAL_GetTick>
 8002356:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002358:	e011      	b.n	800237e <HAL_RCC_OscConfig+0x78e>
 800235a:	bf00      	nop
 800235c:	58024400 	.word	0x58024400
 8002360:	58024800 	.word	0x58024800
 8002364:	fffffc0c 	.word	0xfffffc0c
 8002368:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800236c:	f7fe ffb4 	bl	80012d8 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e05f      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800237e:	4b32      	ldr	r3, [pc, #200]	; (8002448 <HAL_RCC_OscConfig+0x858>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x77c>
 800238a:	e057      	b.n	800243c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238c:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <HAL_RCC_OscConfig+0x858>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a2d      	ldr	r2, [pc, #180]	; (8002448 <HAL_RCC_OscConfig+0x858>)
 8002392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7fe ff9e 	bl	80012d8 <HAL_GetTick>
 800239c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a0:	f7fe ff9a 	bl	80012d8 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e045      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023b2:	4b25      	ldr	r3, [pc, #148]	; (8002448 <HAL_RCC_OscConfig+0x858>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x7b0>
 80023be:	e03d      	b.n	800243c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80023c0:	4b21      	ldr	r3, [pc, #132]	; (8002448 <HAL_RCC_OscConfig+0x858>)
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <HAL_RCC_OscConfig+0x858>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d031      	beq.n	8002438 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f003 0203 	and.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023de:	429a      	cmp	r2, r3
 80023e0:	d12a      	bne.n	8002438 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d122      	bne.n	8002438 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d11a      	bne.n	8002438 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	0a5b      	lsrs	r3, r3, #9
 8002406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d111      	bne.n	8002438 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	0c1b      	lsrs	r3, r3, #16
 8002418:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002420:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002422:	429a      	cmp	r2, r3
 8002424:	d108      	bne.n	8002438 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	0e1b      	lsrs	r3, r3, #24
 800242a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002432:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3730      	adds	r7, #48	; 0x30
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	58024400 	.word	0x58024400

0800244c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e19c      	b.n	800279a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b8a      	ldr	r3, [pc, #552]	; (800268c <HAL_RCC_ClockConfig+0x240>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d910      	bls.n	8002490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b87      	ldr	r3, [pc, #540]	; (800268c <HAL_RCC_ClockConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 020f 	bic.w	r2, r3, #15
 8002476:	4985      	ldr	r1, [pc, #532]	; (800268c <HAL_RCC_ClockConfig+0x240>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b83      	ldr	r3, [pc, #524]	; (800268c <HAL_RCC_ClockConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e184      	b.n	800279a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d010      	beq.n	80024be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	4b7b      	ldr	r3, [pc, #492]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d908      	bls.n	80024be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024ac:	4b78      	ldr	r3, [pc, #480]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	4975      	ldr	r1, [pc, #468]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d010      	beq.n	80024ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	4b70      	ldr	r3, [pc, #448]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d908      	bls.n	80024ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024da:	4b6d      	ldr	r3, [pc, #436]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	496a      	ldr	r1, [pc, #424]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d010      	beq.n	800251a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699a      	ldr	r2, [r3, #24]
 80024fc:	4b64      	ldr	r3, [pc, #400]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002504:	429a      	cmp	r2, r3
 8002506:	d908      	bls.n	800251a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002508:	4b61      	ldr	r3, [pc, #388]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	495e      	ldr	r1, [pc, #376]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 8002516:	4313      	orrs	r3, r2
 8002518:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b00      	cmp	r3, #0
 8002524:	d010      	beq.n	8002548 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69da      	ldr	r2, [r3, #28]
 800252a:	4b59      	ldr	r3, [pc, #356]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002532:	429a      	cmp	r2, r3
 8002534:	d908      	bls.n	8002548 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002536:	4b56      	ldr	r3, [pc, #344]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4953      	ldr	r1, [pc, #332]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 8002544:	4313      	orrs	r3, r2
 8002546:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d010      	beq.n	8002576 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	4b4d      	ldr	r3, [pc, #308]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	429a      	cmp	r2, r3
 8002562:	d908      	bls.n	8002576 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002564:	4b4a      	ldr	r3, [pc, #296]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f023 020f 	bic.w	r2, r3, #15
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4947      	ldr	r1, [pc, #284]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 8002572:	4313      	orrs	r3, r2
 8002574:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d055      	beq.n	800262e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002582:	4b43      	ldr	r3, [pc, #268]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	4940      	ldr	r1, [pc, #256]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 8002590:	4313      	orrs	r3, r2
 8002592:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d107      	bne.n	80025ac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800259c:	4b3c      	ldr	r3, [pc, #240]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d121      	bne.n	80025ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0f6      	b.n	800279a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d107      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025b4:	4b36      	ldr	r3, [pc, #216]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d115      	bne.n	80025ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0ea      	b.n	800279a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d107      	bne.n	80025dc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025cc:	4b30      	ldr	r3, [pc, #192]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0de      	b.n	800279a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025dc:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0d6      	b.n	800279a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025ec:	4b28      	ldr	r3, [pc, #160]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f023 0207 	bic.w	r2, r3, #7
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4925      	ldr	r1, [pc, #148]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fe:	f7fe fe6b 	bl	80012d8 <HAL_GetTick>
 8002602:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002604:	e00a      	b.n	800261c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002606:	f7fe fe67 	bl	80012d8 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	f241 3288 	movw	r2, #5000	; 0x1388
 8002614:	4293      	cmp	r3, r2
 8002616:	d901      	bls.n	800261c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e0be      	b.n	800279a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261c:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	429a      	cmp	r2, r3
 800262c:	d1eb      	bne.n	8002606 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d010      	beq.n	800265c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	429a      	cmp	r2, r3
 8002648:	d208      	bcs.n	800265c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	f023 020f 	bic.w	r2, r3, #15
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	490e      	ldr	r1, [pc, #56]	; (8002690 <HAL_RCC_ClockConfig+0x244>)
 8002658:	4313      	orrs	r3, r2
 800265a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_ClockConfig+0x240>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d214      	bcs.n	8002694 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_RCC_ClockConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 020f 	bic.w	r2, r3, #15
 8002672:	4906      	ldr	r1, [pc, #24]	; (800268c <HAL_RCC_ClockConfig+0x240>)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b04      	ldr	r3, [pc, #16]	; (800268c <HAL_RCC_ClockConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e086      	b.n	800279a <HAL_RCC_ClockConfig+0x34e>
 800268c:	52002000 	.word	0x52002000
 8002690:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d010      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	4b3f      	ldr	r3, [pc, #252]	; (80027a4 <HAL_RCC_ClockConfig+0x358>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d208      	bcs.n	80026c2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026b0:	4b3c      	ldr	r3, [pc, #240]	; (80027a4 <HAL_RCC_ClockConfig+0x358>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	4939      	ldr	r1, [pc, #228]	; (80027a4 <HAL_RCC_ClockConfig+0x358>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d010      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <HAL_RCC_ClockConfig+0x358>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026da:	429a      	cmp	r2, r3
 80026dc:	d208      	bcs.n	80026f0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026de:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <HAL_RCC_ClockConfig+0x358>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	492e      	ldr	r1, [pc, #184]	; (80027a4 <HAL_RCC_ClockConfig+0x358>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d010      	beq.n	800271e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699a      	ldr	r2, [r3, #24]
 8002700:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <HAL_RCC_ClockConfig+0x358>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002708:	429a      	cmp	r2, r3
 800270a:	d208      	bcs.n	800271e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800270c:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <HAL_RCC_ClockConfig+0x358>)
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4922      	ldr	r1, [pc, #136]	; (80027a4 <HAL_RCC_ClockConfig+0x358>)
 800271a:	4313      	orrs	r3, r2
 800271c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0320 	and.w	r3, r3, #32
 8002726:	2b00      	cmp	r3, #0
 8002728:	d010      	beq.n	800274c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69da      	ldr	r2, [r3, #28]
 800272e:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <HAL_RCC_ClockConfig+0x358>)
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002736:	429a      	cmp	r2, r3
 8002738:	d208      	bcs.n	800274c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800273a:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <HAL_RCC_ClockConfig+0x358>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	4917      	ldr	r1, [pc, #92]	; (80027a4 <HAL_RCC_ClockConfig+0x358>)
 8002748:	4313      	orrs	r3, r2
 800274a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800274c:	f000 f834 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <HAL_RCC_ClockConfig+0x358>)
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	4912      	ldr	r1, [pc, #72]	; (80027a8 <HAL_RCC_ClockConfig+0x35c>)
 800275e:	5ccb      	ldrb	r3, [r1, r3]
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
 8002768:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <HAL_RCC_ClockConfig+0x358>)
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	4a0d      	ldr	r2, [pc, #52]	; (80027a8 <HAL_RCC_ClockConfig+0x35c>)
 8002774:	5cd3      	ldrb	r3, [r2, r3]
 8002776:	f003 031f 	and.w	r3, r3, #31
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
 8002780:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <HAL_RCC_ClockConfig+0x360>)
 8002782:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002784:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <HAL_RCC_ClockConfig+0x364>)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_RCC_ClockConfig+0x368>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fbd6 	bl	8000f40 <HAL_InitTick>
 8002794:	4603      	mov	r3, r0
 8002796:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	58024400 	.word	0x58024400
 80027a8:	0800b160 	.word	0x0800b160
 80027ac:	24000004 	.word	0x24000004
 80027b0:	24000000 	.word	0x24000000
 80027b4:	24000008 	.word	0x24000008

080027b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027be:	4bb3      	ldr	r3, [pc, #716]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027c6:	2b18      	cmp	r3, #24
 80027c8:	f200 8155 	bhi.w	8002a76 <HAL_RCC_GetSysClockFreq+0x2be>
 80027cc:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80027ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d2:	bf00      	nop
 80027d4:	08002839 	.word	0x08002839
 80027d8:	08002a77 	.word	0x08002a77
 80027dc:	08002a77 	.word	0x08002a77
 80027e0:	08002a77 	.word	0x08002a77
 80027e4:	08002a77 	.word	0x08002a77
 80027e8:	08002a77 	.word	0x08002a77
 80027ec:	08002a77 	.word	0x08002a77
 80027f0:	08002a77 	.word	0x08002a77
 80027f4:	0800285f 	.word	0x0800285f
 80027f8:	08002a77 	.word	0x08002a77
 80027fc:	08002a77 	.word	0x08002a77
 8002800:	08002a77 	.word	0x08002a77
 8002804:	08002a77 	.word	0x08002a77
 8002808:	08002a77 	.word	0x08002a77
 800280c:	08002a77 	.word	0x08002a77
 8002810:	08002a77 	.word	0x08002a77
 8002814:	08002865 	.word	0x08002865
 8002818:	08002a77 	.word	0x08002a77
 800281c:	08002a77 	.word	0x08002a77
 8002820:	08002a77 	.word	0x08002a77
 8002824:	08002a77 	.word	0x08002a77
 8002828:	08002a77 	.word	0x08002a77
 800282c:	08002a77 	.word	0x08002a77
 8002830:	08002a77 	.word	0x08002a77
 8002834:	0800286b 	.word	0x0800286b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002838:	4b94      	ldr	r3, [pc, #592]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b00      	cmp	r3, #0
 8002842:	d009      	beq.n	8002858 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002844:	4b91      	ldr	r3, [pc, #580]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	08db      	lsrs	r3, r3, #3
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	4a90      	ldr	r2, [pc, #576]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
 8002854:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002856:	e111      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002858:	4b8d      	ldr	r3, [pc, #564]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800285a:	61bb      	str	r3, [r7, #24]
    break;
 800285c:	e10e      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800285e:	4b8d      	ldr	r3, [pc, #564]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002860:	61bb      	str	r3, [r7, #24]
    break;
 8002862:	e10b      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002864:	4b8c      	ldr	r3, [pc, #560]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002866:	61bb      	str	r3, [r7, #24]
    break;
 8002868:	e108      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800286a:	4b88      	ldr	r3, [pc, #544]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002874:	4b85      	ldr	r3, [pc, #532]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800287e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002880:	4b82      	ldr	r3, [pc, #520]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800288a:	4b80      	ldr	r3, [pc, #512]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288e:	08db      	lsrs	r3, r3, #3
 8002890:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	fb02 f303 	mul.w	r3, r2, r3
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80e1 	beq.w	8002a70 <HAL_RCC_GetSysClockFreq+0x2b8>
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	f000 8083 	beq.w	80029bc <HAL_RCC_GetSysClockFreq+0x204>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	f200 80a1 	bhi.w	8002a00 <HAL_RCC_GetSysClockFreq+0x248>
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x114>
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d056      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0x1c0>
 80028ca:	e099      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028cc:	4b6f      	ldr	r3, [pc, #444]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d02d      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80028d8:	4b6c      	ldr	r3, [pc, #432]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	08db      	lsrs	r3, r3, #3
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	4a6b      	ldr	r2, [pc, #428]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
 80028e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	ee07 3a90 	vmov	s15, r3
 80028f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	ee07 3a90 	vmov	s15, r3
 80028fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002902:	4b62      	ldr	r3, [pc, #392]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002912:	ed97 6a02 	vldr	s12, [r7, #8]
 8002916:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 800291a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800291e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800292a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800292e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002932:	e087      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	ee07 3a90 	vmov	s15, r3
 800293a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800293e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002aa0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002946:	4b51      	ldr	r3, [pc, #324]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002956:	ed97 6a02 	vldr	s12, [r7, #8]
 800295a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 800295e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800296a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800296e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002976:	e065      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002982:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002aa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800298a:	4b40      	ldr	r3, [pc, #256]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002992:	ee07 3a90 	vmov	s15, r3
 8002996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800299a:	ed97 6a02 	vldr	s12, [r7, #8]
 800299e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 80029a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029ba:	e043      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	ee07 3a90 	vmov	s15, r3
 80029c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002aa8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80029ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ce:	4b2f      	ldr	r3, [pc, #188]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d6:	ee07 3a90 	vmov	s15, r3
 80029da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029de:	ed97 6a02 	vldr	s12, [r7, #8]
 80029e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 80029e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029fe:	e021      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a0a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002aa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a12:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a1a:	ee07 3a90 	vmov	s15, r3
 8002a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a26:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002a9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a42:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	0a5b      	lsrs	r3, r3, #9
 8002a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a4e:	3301      	adds	r3, #1
 8002a50:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a68:	ee17 3a90 	vmov	r3, s15
 8002a6c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002a6e:	e005      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61bb      	str	r3, [r7, #24]
    break;
 8002a74:	e002      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002a76:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a78:	61bb      	str	r3, [r7, #24]
    break;
 8002a7a:	bf00      	nop
  }

  return sysclockfreq;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3724      	adds	r7, #36	; 0x24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	58024400 	.word	0x58024400
 8002a90:	03d09000 	.word	0x03d09000
 8002a94:	003d0900 	.word	0x003d0900
 8002a98:	007a1200 	.word	0x007a1200
 8002a9c:	46000000 	.word	0x46000000
 8002aa0:	4c742400 	.word	0x4c742400
 8002aa4:	4a742400 	.word	0x4a742400
 8002aa8:	4af42400 	.word	0x4af42400

08002aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002ab2:	f7ff fe81 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	4b10      	ldr	r3, [pc, #64]	; (8002afc <HAL_RCC_GetHCLKFreq+0x50>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	490f      	ldr	r1, [pc, #60]	; (8002b00 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ac4:	5ccb      	ldrb	r3, [r1, r3]
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ace:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_RCC_GetHCLKFreq+0x50>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	4a09      	ldr	r2, [pc, #36]	; (8002b00 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ada:	5cd3      	ldrb	r3, [r2, r3]
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae6:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ae8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002aea:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <HAL_RCC_GetHCLKFreq+0x58>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	58024400 	.word	0x58024400
 8002b00:	0800b160 	.word	0x0800b160
 8002b04:	24000004 	.word	0x24000004
 8002b08:	24000000 	.word	0x24000000

08002b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002b10:	f7ff ffcc 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	091b      	lsrs	r3, r3, #4
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	4904      	ldr	r1, [pc, #16]	; (8002b34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b22:	5ccb      	ldrb	r3, [r1, r3]
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	58024400 	.word	0x58024400
 8002b34:	0800b160 	.word	0x0800b160

08002b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002b3c:	f7ff ffb6 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002b40:	4602      	mov	r2, r0
 8002b42:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	0a1b      	lsrs	r3, r3, #8
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	4904      	ldr	r1, [pc, #16]	; (8002b60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b4e:	5ccb      	ldrb	r3, [r1, r3]
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	58024400 	.word	0x58024400
 8002b60:	0800b160 	.word	0x0800b160

08002b64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	223f      	movs	r2, #63	; 0x3f
 8002b72:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b74:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <HAL_RCC_GetClockConfig+0x7c>)
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f003 0207 	and.w	r2, r3, #7
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002b80:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <HAL_RCC_GetClockConfig+0x7c>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <HAL_RCC_GetClockConfig+0x7c>)
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	f003 020f 	and.w	r2, r3, #15
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <HAL_RCC_GetClockConfig+0x7c>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <HAL_RCC_GetClockConfig+0x7c>)
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_RCC_GetClockConfig+0x7c>)
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002bbc:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <HAL_RCC_GetClockConfig+0x7c>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_RCC_GetClockConfig+0x80>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 020f 	and.w	r2, r3, #15
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	601a      	str	r2, [r3, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	58024400 	.word	0x58024400
 8002be4:	52002000 	.word	0x52002000

08002be8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d03f      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c0c:	d02a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c12:	d824      	bhi.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c18:	d018      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c1e:	d81e      	bhi.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c28:	d007      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c2a:	e018      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c2c:	4ba3      	ldr	r3, [pc, #652]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	4aa2      	ldr	r2, [pc, #648]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002c38:	e015      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2102      	movs	r1, #2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 f9d5 	bl	8003ff0 <RCCEx_PLL2_Config>
 8002c46:	4603      	mov	r3, r0
 8002c48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002c4a:	e00c      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3324      	adds	r3, #36	; 0x24
 8002c50:	2102      	movs	r1, #2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 fa7e 	bl	8004154 <RCCEx_PLL3_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002c5c:	e003      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	75fb      	strb	r3, [r7, #23]
      break;
 8002c62:	e000      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002c6c:	4b93      	ldr	r3, [pc, #588]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c78:	4990      	ldr	r1, [pc, #576]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	650b      	str	r3, [r1, #80]	; 0x50
 8002c7e:	e001      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
 8002c82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d03d      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d826      	bhi.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002c98:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9e:	bf00      	nop
 8002ca0:	08002cb5 	.word	0x08002cb5
 8002ca4:	08002cc3 	.word	0x08002cc3
 8002ca8:	08002cd5 	.word	0x08002cd5
 8002cac:	08002ced 	.word	0x08002ced
 8002cb0:	08002ced 	.word	0x08002ced
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb4:	4b81      	ldr	r3, [pc, #516]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	4a80      	ldr	r2, [pc, #512]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002cc0:	e015      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f001 f991 	bl	8003ff0 <RCCEx_PLL2_Config>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002cd2:	e00c      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3324      	adds	r3, #36	; 0x24
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 fa3a 	bl	8004154 <RCCEx_PLL3_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ce4:	e003      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8002cea:	e000      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cf4:	4b71      	ldr	r3, [pc, #452]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf8:	f023 0207 	bic.w	r2, r3, #7
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	496e      	ldr	r1, [pc, #440]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	650b      	str	r3, [r1, #80]	; 0x50
 8002d06:	e001      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d042      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d20:	d02b      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d26:	d825      	bhi.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002d28:	2bc0      	cmp	r3, #192	; 0xc0
 8002d2a:	d028      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002d2c:	2bc0      	cmp	r3, #192	; 0xc0
 8002d2e:	d821      	bhi.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002d30:	2b80      	cmp	r3, #128	; 0x80
 8002d32:	d016      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002d34:	2b80      	cmp	r3, #128	; 0x80
 8002d36:	d81d      	bhi.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	d007      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002d40:	e018      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d42:	4b5e      	ldr	r3, [pc, #376]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	4a5d      	ldr	r2, [pc, #372]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002d4e:	e017      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3304      	adds	r3, #4
 8002d54:	2100      	movs	r1, #0
 8002d56:	4618      	mov	r0, r3
 8002d58:	f001 f94a 	bl	8003ff0 <RCCEx_PLL2_Config>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002d60:	e00e      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3324      	adds	r3, #36	; 0x24
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f001 f9f3 	bl	8004154 <RCCEx_PLL3_Config>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002d72:	e005      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	75fb      	strb	r3, [r7, #23]
      break;
 8002d78:	e002      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e000      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d80:	7dfb      	ldrb	r3, [r7, #23]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002d86:	4b4d      	ldr	r3, [pc, #308]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	494a      	ldr	r1, [pc, #296]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	650b      	str	r3, [r1, #80]	; 0x50
 8002d98:	e001      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
 8002d9c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d049      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002db0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002db4:	d030      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002db6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dba:	d82a      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002dbc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002dc0:	d02c      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002dc2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002dc6:	d824      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dcc:	d018      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd2:	d81e      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002dd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ddc:	d007      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002dde:	e018      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002de0:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	4a35      	ldr	r2, [pc, #212]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002dec:	e017      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3304      	adds	r3, #4
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f001 f8fb 	bl	8003ff0 <RCCEx_PLL2_Config>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002dfe:	e00e      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3324      	adds	r3, #36	; 0x24
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f001 f9a4 	bl	8004154 <RCCEx_PLL3_Config>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e10:	e005      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
      break;
 8002e16:	e002      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002e18:	bf00      	nop
 8002e1a:	e000      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e1e:	7dfb      	ldrb	r3, [r7, #23]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002e24:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e32:	4922      	ldr	r1, [pc, #136]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	658b      	str	r3, [r1, #88]	; 0x58
 8002e38:	e001      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3a:	7dfb      	ldrb	r3, [r7, #23]
 8002e3c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d04b      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002e50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e54:	d030      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002e56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e5a:	d82a      	bhi.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002e5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e60:	d02e      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002e62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e66:	d824      	bhi.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002e68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e6c:	d018      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002e6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e72:	d81e      	bhi.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e7c:	d007      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002e7e:	e018      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e8c:	e019      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3304      	adds	r3, #4
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f001 f8ab 	bl	8003ff0 <RCCEx_PLL2_Config>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002e9e:	e010      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3324      	adds	r3, #36	; 0x24
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f001 f954 	bl	8004154 <RCCEx_PLL3_Config>
 8002eac:	4603      	mov	r3, r0
 8002eae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002eb0:	e007      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8002eb6:	e004      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002eb8:	bf00      	nop
 8002eba:	e002      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002ebc:	58024400 	.word	0x58024400
      break;
 8002ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002ec8:	4b99      	ldr	r3, [pc, #612]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ed6:	4996      	ldr	r1, [pc, #600]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	658b      	str	r3, [r1, #88]	; 0x58
 8002edc:	e001      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
 8002ee0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d032      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef2:	2b30      	cmp	r3, #48	; 0x30
 8002ef4:	d01c      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002ef6:	2b30      	cmp	r3, #48	; 0x30
 8002ef8:	d817      	bhi.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	d00c      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	d813      	bhi.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d016      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002f06:	2b10      	cmp	r3, #16
 8002f08:	d10f      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f0a:	4b89      	ldr	r3, [pc, #548]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	4a88      	ldr	r2, [pc, #544]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002f16:	e00e      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	2102      	movs	r1, #2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f001 f866 	bl	8003ff0 <RCCEx_PLL2_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002f28:	e005      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8002f2e:	e002      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002f30:	bf00      	nop
 8002f32:	e000      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d109      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f3c:	4b7c      	ldr	r3, [pc, #496]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f48:	4979      	ldr	r1, [pc, #484]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f4e:	e001      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d047      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f68:	d030      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002f6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f6e:	d82a      	bhi.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002f70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f74:	d02c      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002f76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f7a:	d824      	bhi.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f80:	d018      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f86:	d81e      	bhi.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f90:	d007      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002f92:	e018      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f94:	4b66      	ldr	r3, [pc, #408]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	4a65      	ldr	r2, [pc, #404]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002fa0:	e017      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 f821 	bl	8003ff0 <RCCEx_PLL2_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002fb2:	e00e      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3324      	adds	r3, #36	; 0x24
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f001 f8ca 	bl	8004154 <RCCEx_PLL3_Config>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002fc4:	e005      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8002fca:	e002      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002fcc:	bf00      	nop
 8002fce:	e000      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd2:	7dfb      	ldrb	r3, [r7, #23]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d109      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002fd8:	4b55      	ldr	r3, [pc, #340]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fdc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	4952      	ldr	r1, [pc, #328]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	650b      	str	r3, [r1, #80]	; 0x50
 8002fea:	e001      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d049      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003004:	d02e      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003006:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800300a:	d828      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800300c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003010:	d02a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003012:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003016:	d822      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003018:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800301c:	d026      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800301e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003022:	d81c      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003028:	d010      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800302a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800302e:	d816      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01d      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003038:	d111      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3304      	adds	r3, #4
 800303e:	2101      	movs	r1, #1
 8003040:	4618      	mov	r0, r3
 8003042:	f000 ffd5 	bl	8003ff0 <RCCEx_PLL2_Config>
 8003046:	4603      	mov	r3, r0
 8003048:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800304a:	e012      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3324      	adds	r3, #36	; 0x24
 8003050:	2101      	movs	r1, #1
 8003052:	4618      	mov	r0, r3
 8003054:	f001 f87e 	bl	8004154 <RCCEx_PLL3_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800305c:	e009      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	75fb      	strb	r3, [r7, #23]
      break;
 8003062:	e006      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003064:	bf00      	nop
 8003066:	e004      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003068:	bf00      	nop
 800306a:	e002      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800306c:	bf00      	nop
 800306e:	e000      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003072:	7dfb      	ldrb	r3, [r7, #23]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d109      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003078:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800307a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800307c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003084:	492a      	ldr	r1, [pc, #168]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003086:	4313      	orrs	r3, r2
 8003088:	650b      	str	r3, [r1, #80]	; 0x50
 800308a:	e001      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308c:	7dfb      	ldrb	r3, [r7, #23]
 800308e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d04d      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80030a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030a6:	d02e      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80030a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030ac:	d828      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80030ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b2:	d02a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80030b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b8:	d822      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80030ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030be:	d026      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80030c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030c4:	d81c      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80030c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030ca:	d010      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x506>
 80030cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030d0:	d816      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d01d      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80030d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030da:	d111      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3304      	adds	r3, #4
 80030e0:	2101      	movs	r1, #1
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 ff84 	bl	8003ff0 <RCCEx_PLL2_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80030ec:	e012      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3324      	adds	r3, #36	; 0x24
 80030f2:	2101      	movs	r1, #1
 80030f4:	4618      	mov	r0, r3
 80030f6:	f001 f82d 	bl	8004154 <RCCEx_PLL3_Config>
 80030fa:	4603      	mov	r3, r0
 80030fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80030fe:	e009      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	75fb      	strb	r3, [r7, #23]
      break;
 8003104:	e006      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003106:	bf00      	nop
 8003108:	e004      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800310a:	bf00      	nop
 800310c:	e002      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800310e:	bf00      	nop
 8003110:	e000      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003112:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003114:	7dfb      	ldrb	r3, [r7, #23]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10c      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003128:	4901      	ldr	r1, [pc, #4]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800312a:	4313      	orrs	r3, r2
 800312c:	658b      	str	r3, [r1, #88]	; 0x58
 800312e:	e003      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003130:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003134:	7dfb      	ldrb	r3, [r7, #23]
 8003136:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d02f      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800314c:	d00e      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800314e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003152:	d814      	bhi.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d015      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800315c:	d10f      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800315e:	4baf      	ldr	r3, [pc, #700]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	4aae      	ldr	r2, [pc, #696]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003168:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800316a:	e00c      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3304      	adds	r3, #4
 8003170:	2101      	movs	r1, #1
 8003172:	4618      	mov	r0, r3
 8003174:	f000 ff3c 	bl	8003ff0 <RCCEx_PLL2_Config>
 8003178:	4603      	mov	r3, r0
 800317a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800317c:	e003      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	75fb      	strb	r3, [r7, #23]
      break;
 8003182:	e000      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003186:	7dfb      	ldrb	r3, [r7, #23]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d109      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800318c:	4ba3      	ldr	r3, [pc, #652]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800318e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003190:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003198:	49a0      	ldr	r1, [pc, #640]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800319a:	4313      	orrs	r3, r2
 800319c:	650b      	str	r3, [r1, #80]	; 0x50
 800319e:	e001      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d032      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d81b      	bhi.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80031b8:	a201      	add	r2, pc, #4	; (adr r2, 80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80031ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031be:	bf00      	nop
 80031c0:	080031f7 	.word	0x080031f7
 80031c4:	080031d1 	.word	0x080031d1
 80031c8:	080031df 	.word	0x080031df
 80031cc:	080031f7 	.word	0x080031f7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031d0:	4b92      	ldr	r3, [pc, #584]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	4a91      	ldr	r2, [pc, #580]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80031dc:	e00c      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3304      	adds	r3, #4
 80031e2:	2102      	movs	r1, #2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 ff03 	bl	8003ff0 <RCCEx_PLL2_Config>
 80031ea:	4603      	mov	r3, r0
 80031ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80031ee:	e003      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	75fb      	strb	r3, [r7, #23]
      break;
 80031f4:	e000      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80031f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80031fe:	4b87      	ldr	r3, [pc, #540]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003202:	f023 0203 	bic.w	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	4984      	ldr	r1, [pc, #528]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800320c:	4313      	orrs	r3, r2
 800320e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003210:	e001      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003212:	7dfb      	ldrb	r3, [r7, #23]
 8003214:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 8086 	beq.w	8003330 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003224:	4b7e      	ldr	r3, [pc, #504]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a7d      	ldr	r2, [pc, #500]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800322a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003230:	f7fe f852 	bl	80012d8 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003236:	e009      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003238:	f7fe f84e 	bl	80012d8 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d902      	bls.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	75fb      	strb	r3, [r7, #23]
        break;
 800324a:	e005      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800324c:	4b74      	ldr	r3, [pc, #464]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0ef      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d166      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800325e:	4b6f      	ldr	r3, [pc, #444]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003260:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003268:	4053      	eors	r3, r2
 800326a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326e:	2b00      	cmp	r3, #0
 8003270:	d013      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003272:	4b6a      	ldr	r3, [pc, #424]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800327a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800327c:	4b67      	ldr	r3, [pc, #412]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	4a66      	ldr	r2, [pc, #408]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003286:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003288:	4b64      	ldr	r3, [pc, #400]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	4a63      	ldr	r2, [pc, #396]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800328e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003292:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003294:	4a61      	ldr	r2, [pc, #388]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a4:	d115      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fe f817 	bl	80012d8 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032ac:	e00b      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fe f813 	bl	80012d8 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d902      	bls.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	75fb      	strb	r3, [r7, #23]
            break;
 80032c4:	e005      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032c6:	4b55      	ldr	r3, [pc, #340]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0ed      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80032d2:	7dfb      	ldrb	r3, [r7, #23]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d126      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032e6:	d10d      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80032e8:	4b4c      	ldr	r3, [pc, #304]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032f6:	0919      	lsrs	r1, r3, #4
 80032f8:	4b4a      	ldr	r3, [pc, #296]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80032fa:	400b      	ands	r3, r1
 80032fc:	4947      	ldr	r1, [pc, #284]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	610b      	str	r3, [r1, #16]
 8003302:	e005      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003304:	4b45      	ldr	r3, [pc, #276]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	4a44      	ldr	r2, [pc, #272]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800330a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800330e:	6113      	str	r3, [r2, #16]
 8003310:	4b42      	ldr	r3, [pc, #264]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003312:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800331a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800331e:	493f      	ldr	r1, [pc, #252]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003320:	4313      	orrs	r3, r2
 8003322:	670b      	str	r3, [r1, #112]	; 0x70
 8003324:	e004      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003326:	7dfb      	ldrb	r3, [r7, #23]
 8003328:	75bb      	strb	r3, [r7, #22]
 800332a:	e001      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800332c:	7dfb      	ldrb	r3, [r7, #23]
 800332e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8085 	beq.w	8003448 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003342:	2b28      	cmp	r3, #40	; 0x28
 8003344:	d866      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003346:	a201      	add	r2, pc, #4	; (adr r2, 800334c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	08003429 	.word	0x08003429
 8003350:	08003415 	.word	0x08003415
 8003354:	08003415 	.word	0x08003415
 8003358:	08003415 	.word	0x08003415
 800335c:	08003415 	.word	0x08003415
 8003360:	08003415 	.word	0x08003415
 8003364:	08003415 	.word	0x08003415
 8003368:	08003415 	.word	0x08003415
 800336c:	080033f1 	.word	0x080033f1
 8003370:	08003415 	.word	0x08003415
 8003374:	08003415 	.word	0x08003415
 8003378:	08003415 	.word	0x08003415
 800337c:	08003415 	.word	0x08003415
 8003380:	08003415 	.word	0x08003415
 8003384:	08003415 	.word	0x08003415
 8003388:	08003415 	.word	0x08003415
 800338c:	08003403 	.word	0x08003403
 8003390:	08003415 	.word	0x08003415
 8003394:	08003415 	.word	0x08003415
 8003398:	08003415 	.word	0x08003415
 800339c:	08003415 	.word	0x08003415
 80033a0:	08003415 	.word	0x08003415
 80033a4:	08003415 	.word	0x08003415
 80033a8:	08003415 	.word	0x08003415
 80033ac:	08003429 	.word	0x08003429
 80033b0:	08003415 	.word	0x08003415
 80033b4:	08003415 	.word	0x08003415
 80033b8:	08003415 	.word	0x08003415
 80033bc:	08003415 	.word	0x08003415
 80033c0:	08003415 	.word	0x08003415
 80033c4:	08003415 	.word	0x08003415
 80033c8:	08003415 	.word	0x08003415
 80033cc:	08003429 	.word	0x08003429
 80033d0:	08003415 	.word	0x08003415
 80033d4:	08003415 	.word	0x08003415
 80033d8:	08003415 	.word	0x08003415
 80033dc:	08003415 	.word	0x08003415
 80033e0:	08003415 	.word	0x08003415
 80033e4:	08003415 	.word	0x08003415
 80033e8:	08003415 	.word	0x08003415
 80033ec:	08003429 	.word	0x08003429
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	2101      	movs	r1, #1
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fdfa 	bl	8003ff0 <RCCEx_PLL2_Config>
 80033fc:	4603      	mov	r3, r0
 80033fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003400:	e013      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3324      	adds	r3, #36	; 0x24
 8003406:	2101      	movs	r1, #1
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fea3 	bl	8004154 <RCCEx_PLL3_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003412:	e00a      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	75fb      	strb	r3, [r7, #23]
      break;
 8003418:	e007      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800341a:	bf00      	nop
 800341c:	58024400 	.word	0x58024400
 8003420:	58024800 	.word	0x58024800
 8003424:	00ffffcf 	.word	0x00ffffcf
      break;
 8003428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800342a:	7dfb      	ldrb	r3, [r7, #23]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d109      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003430:	4b96      	ldr	r3, [pc, #600]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003434:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800343c:	4993      	ldr	r1, [pc, #588]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800343e:	4313      	orrs	r3, r2
 8003440:	654b      	str	r3, [r1, #84]	; 0x54
 8003442:	e001      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003444:	7dfb      	ldrb	r3, [r7, #23]
 8003446:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d038      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003458:	2b05      	cmp	r3, #5
 800345a:	d821      	bhi.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800345c:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	080034a7 	.word	0x080034a7
 8003468:	0800347d 	.word	0x0800347d
 800346c:	0800348f 	.word	0x0800348f
 8003470:	080034a7 	.word	0x080034a7
 8003474:	080034a7 	.word	0x080034a7
 8003478:	080034a7 	.word	0x080034a7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3304      	adds	r3, #4
 8003480:	2101      	movs	r1, #1
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fdb4 	bl	8003ff0 <RCCEx_PLL2_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800348c:	e00c      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3324      	adds	r3, #36	; 0x24
 8003492:	2101      	movs	r1, #1
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fe5d 	bl	8004154 <RCCEx_PLL3_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800349e:	e003      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	75fb      	strb	r3, [r7, #23]
      break;
 80034a4:	e000      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80034a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80034ae:	4b77      	ldr	r3, [pc, #476]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80034b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b2:	f023 0207 	bic.w	r2, r3, #7
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ba:	4974      	ldr	r1, [pc, #464]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	654b      	str	r3, [r1, #84]	; 0x54
 80034c0:	e001      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
 80034c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d03a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	2b05      	cmp	r3, #5
 80034da:	d821      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80034dc:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80034de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e2:	bf00      	nop
 80034e4:	08003527 	.word	0x08003527
 80034e8:	080034fd 	.word	0x080034fd
 80034ec:	0800350f 	.word	0x0800350f
 80034f0:	08003527 	.word	0x08003527
 80034f4:	08003527 	.word	0x08003527
 80034f8:	08003527 	.word	0x08003527
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3304      	adds	r3, #4
 8003500:	2101      	movs	r1, #1
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fd74 	bl	8003ff0 <RCCEx_PLL2_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800350c:	e00c      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3324      	adds	r3, #36	; 0x24
 8003512:	2101      	movs	r1, #1
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fe1d 	bl	8004154 <RCCEx_PLL3_Config>
 800351a:	4603      	mov	r3, r0
 800351c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800351e:	e003      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	75fb      	strb	r3, [r7, #23]
      break;
 8003524:	e000      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003528:	7dfb      	ldrb	r3, [r7, #23]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10a      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800352e:	4b57      	ldr	r3, [pc, #348]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003532:	f023 0207 	bic.w	r2, r3, #7
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353c:	4953      	ldr	r1, [pc, #332]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	658b      	str	r3, [r1, #88]	; 0x58
 8003542:	e001      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d04b      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800355a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800355e:	d02e      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003564:	d828      	bhi.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356a:	d02a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800356c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003570:	d822      	bhi.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003572:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003576:	d026      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003578:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800357c:	d81c      	bhi.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800357e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003582:	d010      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003588:	d816      	bhi.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01d      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800358e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003592:	d111      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3304      	adds	r3, #4
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fd28 	bl	8003ff0 <RCCEx_PLL2_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80035a4:	e012      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3324      	adds	r3, #36	; 0x24
 80035aa:	2102      	movs	r1, #2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fdd1 	bl	8004154 <RCCEx_PLL3_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80035b6:	e009      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	75fb      	strb	r3, [r7, #23]
      break;
 80035bc:	e006      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80035be:	bf00      	nop
 80035c0:	e004      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80035c2:	bf00      	nop
 80035c4:	e002      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80035c6:	bf00      	nop
 80035c8:	e000      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80035ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10a      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035d2:	4b2e      	ldr	r3, [pc, #184]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e0:	492a      	ldr	r1, [pc, #168]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	654b      	str	r3, [r1, #84]	; 0x54
 80035e6:	e001      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
 80035ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d04d      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003602:	d02e      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003604:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003608:	d828      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360e:	d02a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003614:	d822      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003616:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800361a:	d026      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800361c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003620:	d81c      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003626:	d010      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800362c:	d816      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01d      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003636:	d111      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3304      	adds	r3, #4
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fcd6 	bl	8003ff0 <RCCEx_PLL2_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003648:	e012      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3324      	adds	r3, #36	; 0x24
 800364e:	2102      	movs	r1, #2
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fd7f 	bl	8004154 <RCCEx_PLL3_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800365a:	e009      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	75fb      	strb	r3, [r7, #23]
      break;
 8003660:	e006      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003662:	bf00      	nop
 8003664:	e004      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003666:	bf00      	nop
 8003668:	e002      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800366e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10c      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003684:	4901      	ldr	r1, [pc, #4]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003686:	4313      	orrs	r3, r2
 8003688:	658b      	str	r3, [r1, #88]	; 0x58
 800368a:	e003      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800368c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	7dfb      	ldrb	r3, [r7, #23]
 8003692:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369c:	2b00      	cmp	r3, #0
 800369e:	d04b      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80036aa:	d02e      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80036ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80036b0:	d828      	bhi.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80036b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b6:	d02a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80036b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036bc:	d822      	bhi.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80036be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80036c2:	d026      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80036c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80036c8:	d81c      	bhi.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80036ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ce:	d010      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80036d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036d4:	d816      	bhi.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d01d      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80036da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036de:	d111      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3304      	adds	r3, #4
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 fc82 	bl	8003ff0 <RCCEx_PLL2_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80036f0:	e012      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3324      	adds	r3, #36	; 0x24
 80036f6:	2102      	movs	r1, #2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fd2b 	bl	8004154 <RCCEx_PLL3_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003702:	e009      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	75fb      	strb	r3, [r7, #23]
      break;
 8003708:	e006      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800370a:	bf00      	nop
 800370c:	e004      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800370e:	bf00      	nop
 8003710:	e002      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800371e:	4b9d      	ldr	r3, [pc, #628]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800372c:	4999      	ldr	r1, [pc, #612]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800372e:	4313      	orrs	r3, r2
 8003730:	658b      	str	r3, [r1, #88]	; 0x58
 8003732:	e001      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800374a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374e:	d10a      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3324      	adds	r3, #36	; 0x24
 8003754:	2102      	movs	r1, #2
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fcfc 	bl	8004154 <RCCEx_PLL3_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003766:	4b8b      	ldr	r3, [pc, #556]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003774:	4987      	ldr	r1, [pc, #540]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003776:	4313      	orrs	r3, r2
 8003778:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b00      	cmp	r3, #0
 8003784:	d01a      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003790:	d10a      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3324      	adds	r3, #36	; 0x24
 8003796:	2102      	movs	r1, #2
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fcdb 	bl	8004154 <RCCEx_PLL3_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037a8:	4b7a      	ldr	r3, [pc, #488]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b6:	4977      	ldr	r1, [pc, #476]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d034      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037d2:	d01d      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80037d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037d8:	d817      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80037de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e2:	d009      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80037e4:	e011      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3304      	adds	r3, #4
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fbff 	bl	8003ff0 <RCCEx_PLL2_Config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80037f6:	e00c      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3324      	adds	r3, #36	; 0x24
 80037fc:	2102      	movs	r1, #2
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fca8 	bl	8004154 <RCCEx_PLL3_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003808:	e003      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	75fb      	strb	r3, [r7, #23]
      break;
 800380e:	e000      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003812:	7dfb      	ldrb	r3, [r7, #23]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10a      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003818:	4b5e      	ldr	r3, [pc, #376]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003826:	495b      	ldr	r1, [pc, #364]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003828:	4313      	orrs	r3, r2
 800382a:	658b      	str	r3, [r1, #88]	; 0x58
 800382c:	e001      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382e:	7dfb      	ldrb	r3, [r7, #23]
 8003830:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d033      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003844:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003848:	d01c      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800384a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800384e:	d816      	bhi.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003850:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003854:	d003      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003856:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800385a:	d007      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800385c:	e00f      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800385e:	4b4d      	ldr	r3, [pc, #308]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	4a4c      	ldr	r2, [pc, #304]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003868:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800386a:	e00c      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3324      	adds	r3, #36	; 0x24
 8003870:	2101      	movs	r1, #1
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fc6e 	bl	8004154 <RCCEx_PLL3_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800387c:	e003      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	75fb      	strb	r3, [r7, #23]
      break;
 8003882:	e000      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003884:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003886:	7dfb      	ldrb	r3, [r7, #23]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10a      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800388c:	4b41      	ldr	r3, [pc, #260]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800388e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003890:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800389a:	493e      	ldr	r1, [pc, #248]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800389c:	4313      	orrs	r3, r2
 800389e:	654b      	str	r3, [r1, #84]	; 0x54
 80038a0:	e001      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
 80038a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d029      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80038ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038be:	d007      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80038c0:	e00f      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c2:	4b34      	ldr	r3, [pc, #208]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	4a33      	ldr	r2, [pc, #204]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80038ce:	e00b      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	2102      	movs	r1, #2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fb8a 	bl	8003ff0 <RCCEx_PLL2_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80038e0:	e002      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	75fb      	strb	r3, [r7, #23]
      break;
 80038e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d109      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80038ee:	4b29      	ldr	r3, [pc, #164]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fa:	4926      	ldr	r1, [pc, #152]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003900:	e001      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003902:	7dfb      	ldrb	r3, [r7, #23]
 8003904:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3324      	adds	r3, #36	; 0x24
 8003916:	2102      	movs	r1, #2
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fc1b 	bl	8004154 <RCCEx_PLL3_Config>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d033      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003938:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800393c:	d017      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800393e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003942:	d811      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003948:	d013      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800394a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800394e:	d80b      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003958:	d106      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800395a:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	4a0d      	ldr	r2, [pc, #52]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003964:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003966:	e007      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	75fb      	strb	r3, [r7, #23]
      break;
 800396c:	e004      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800396e:	bf00      	nop
 8003970:	e002      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003972:	bf00      	nop
 8003974:	e000      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003978:	7dfb      	ldrb	r3, [r7, #23]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10c      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800398a:	4902      	ldr	r1, [pc, #8]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800398c:	4313      	orrs	r3, r2
 800398e:	654b      	str	r3, [r1, #84]	; 0x54
 8003990:	e004      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003992:	bf00      	nop
 8003994:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039a8:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80039aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b4:	492e      	ldr	r1, [pc, #184]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80039c6:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039d4:	4926      	ldr	r1, [pc, #152]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039e6:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80039e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f2:	491f      	ldr	r1, [pc, #124]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00d      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a04:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	4a19      	ldr	r2, [pc, #100]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a0e:	6113      	str	r3, [r2, #16]
 8003a10:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003a1a:	4915      	ldr	r1, [pc, #84]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	da08      	bge.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003a28:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a34:	490e      	ldr	r1, [pc, #56]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a54:	4906      	ldr	r1, [pc, #24]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003a5a:	7dbb      	ldrb	r3, [r7, #22]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e000      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	58024400 	.word	0x58024400

08003a74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003a78:	f7ff f818 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	091b      	lsrs	r3, r3, #4
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	4904      	ldr	r1, [pc, #16]	; (8003a9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	58024400 	.word	0x58024400
 8003a9c:	0800b160 	.word	0x0800b160

08003aa0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b089      	sub	sp, #36	; 0x24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003aa8:	4ba1      	ldr	r3, [pc, #644]	; (8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003ab2:	4b9f      	ldr	r3, [pc, #636]	; (8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	0b1b      	lsrs	r3, r3, #12
 8003ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003abc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003abe:	4b9c      	ldr	r3, [pc, #624]	; (8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003aca:	4b99      	ldr	r3, [pc, #612]	; (8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	08db      	lsrs	r3, r3, #3
 8003ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8111 	beq.w	8003d10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	f000 8083 	beq.w	8003bfc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	f200 80a1 	bhi.w	8003c40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d056      	beq.n	8003bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003b0a:	e099      	b.n	8003c40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b0c:	4b88      	ldr	r3, [pc, #544]	; (8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d02d      	beq.n	8003b74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b18:	4b85      	ldr	r3, [pc, #532]	; (8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	08db      	lsrs	r3, r3, #3
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	4a84      	ldr	r2, [pc, #528]	; (8003d34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003b24:	fa22 f303 	lsr.w	r3, r2, r3
 8003b28:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	ee07 3a90 	vmov	s15, r3
 8003b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	ee07 3a90 	vmov	s15, r3
 8003b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b42:	4b7b      	ldr	r3, [pc, #492]	; (8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003b72:	e087      	b.n	8003c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b86:	4b6a      	ldr	r3, [pc, #424]	; (8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bb6:	e065      	b.n	8003c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bca:	4b59      	ldr	r3, [pc, #356]	; (8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bde:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bfa:	e043      	b.n	8003c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c0e:	4b48      	ldr	r3, [pc, #288]	; (8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c3e:	e021      	b.n	8003c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c52:	4b37      	ldr	r3, [pc, #220]	; (8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003c84:	4b2a      	ldr	r3, [pc, #168]	; (8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	0a5b      	lsrs	r3, r3, #9
 8003c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003caa:	ee17 2a90 	vmov	r2, s15
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003cb2:	4b1f      	ldr	r3, [pc, #124]	; (8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	0c1b      	lsrs	r3, r3, #16
 8003cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cbc:	ee07 3a90 	vmov	s15, r3
 8003cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ccc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cd8:	ee17 2a90 	vmov	r2, s15
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003ce0:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	0e1b      	lsrs	r3, r3, #24
 8003ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d06:	ee17 2a90 	vmov	r2, s15
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003d0e:	e008      	b.n	8003d22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	609a      	str	r2, [r3, #8]
}
 8003d22:	bf00      	nop
 8003d24:	3724      	adds	r7, #36	; 0x24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	58024400 	.word	0x58024400
 8003d34:	03d09000 	.word	0x03d09000
 8003d38:	46000000 	.word	0x46000000
 8003d3c:	4c742400 	.word	0x4c742400
 8003d40:	4a742400 	.word	0x4a742400
 8003d44:	4af42400 	.word	0x4af42400

08003d48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b089      	sub	sp, #36	; 0x24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d50:	4ba1      	ldr	r3, [pc, #644]	; (8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003d5a:	4b9f      	ldr	r3, [pc, #636]	; (8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	0d1b      	lsrs	r3, r3, #20
 8003d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003d66:	4b9c      	ldr	r3, [pc, #624]	; (8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003d72:	4b99      	ldr	r3, [pc, #612]	; (8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	08db      	lsrs	r3, r3, #3
 8003d78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8111 	beq.w	8003fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	f000 8083 	beq.w	8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	f200 80a1 	bhi.w	8003ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d056      	beq.n	8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003db2:	e099      	b.n	8003ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003db4:	4b88      	ldr	r3, [pc, #544]	; (8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d02d      	beq.n	8003e1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003dc0:	4b85      	ldr	r3, [pc, #532]	; (8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	08db      	lsrs	r3, r3, #3
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	4a84      	ldr	r2, [pc, #528]	; (8003fdc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	ee07 3a90 	vmov	s15, r3
 8003dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	ee07 3a90 	vmov	s15, r3
 8003de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dea:	4b7b      	ldr	r3, [pc, #492]	; (8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dfe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003e1a:	e087      	b.n	8003f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	ee07 3a90 	vmov	s15, r3
 8003e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2e:	4b6a      	ldr	r3, [pc, #424]	; (8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e36:	ee07 3a90 	vmov	s15, r3
 8003e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e5e:	e065      	b.n	8003f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e72:	4b59      	ldr	r3, [pc, #356]	; (8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ea2:	e043      	b.n	8003f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003fec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eb6:	4b48      	ldr	r3, [pc, #288]	; (8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ee6:	e021      	b.n	8003f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003efa:	4b37      	ldr	r3, [pc, #220]	; (8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003f2c:	4b2a      	ldr	r3, [pc, #168]	; (8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	0a5b      	lsrs	r3, r3, #9
 8003f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f52:	ee17 2a90 	vmov	r2, s15
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003f5a:	4b1f      	ldr	r3, [pc, #124]	; (8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	0c1b      	lsrs	r3, r3, #16
 8003f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f74:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f80:	ee17 2a90 	vmov	r2, s15
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003f88:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	0e1b      	lsrs	r3, r3, #24
 8003f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fae:	ee17 2a90 	vmov	r2, s15
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003fb6:	e008      	b.n	8003fca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	609a      	str	r2, [r3, #8]
}
 8003fca:	bf00      	nop
 8003fcc:	3724      	adds	r7, #36	; 0x24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	58024400 	.word	0x58024400
 8003fdc:	03d09000 	.word	0x03d09000
 8003fe0:	46000000 	.word	0x46000000
 8003fe4:	4c742400 	.word	0x4c742400
 8003fe8:	4a742400 	.word	0x4a742400
 8003fec:	4af42400 	.word	0x4af42400

08003ff0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ffe:	4b53      	ldr	r3, [pc, #332]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 8004000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b03      	cmp	r3, #3
 8004008:	d101      	bne.n	800400e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e099      	b.n	8004142 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800400e:	4b4f      	ldr	r3, [pc, #316]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a4e      	ldr	r2, [pc, #312]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 8004014:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800401a:	f7fd f95d 	bl	80012d8 <HAL_GetTick>
 800401e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004020:	e008      	b.n	8004034 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004022:	f7fd f959 	bl	80012d8 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e086      	b.n	8004142 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004034:	4b45      	ldr	r3, [pc, #276]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f0      	bne.n	8004022 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004040:	4b42      	ldr	r3, [pc, #264]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	031b      	lsls	r3, r3, #12
 800404e:	493f      	ldr	r1, [pc, #252]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 8004050:	4313      	orrs	r3, r2
 8004052:	628b      	str	r3, [r1, #40]	; 0x28
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	3b01      	subs	r3, #1
 800405a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	3b01      	subs	r3, #1
 8004064:	025b      	lsls	r3, r3, #9
 8004066:	b29b      	uxth	r3, r3
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	3b01      	subs	r3, #1
 8004070:	041b      	lsls	r3, r3, #16
 8004072:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	3b01      	subs	r3, #1
 800407e:	061b      	lsls	r3, r3, #24
 8004080:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004084:	4931      	ldr	r1, [pc, #196]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 8004086:	4313      	orrs	r3, r2
 8004088:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800408a:	4b30      	ldr	r3, [pc, #192]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	492d      	ldr	r1, [pc, #180]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 8004098:	4313      	orrs	r3, r2
 800409a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800409c:	4b2b      	ldr	r3, [pc, #172]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	f023 0220 	bic.w	r2, r3, #32
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	4928      	ldr	r1, [pc, #160]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80040ae:	4b27      	ldr	r3, [pc, #156]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	4a26      	ldr	r2, [pc, #152]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 80040b4:	f023 0310 	bic.w	r3, r3, #16
 80040b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80040ba:	4b24      	ldr	r3, [pc, #144]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 80040bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040be:	4b24      	ldr	r3, [pc, #144]	; (8004150 <RCCEx_PLL2_Config+0x160>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	69d2      	ldr	r2, [r2, #28]
 80040c6:	00d2      	lsls	r2, r2, #3
 80040c8:	4920      	ldr	r1, [pc, #128]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80040ce:	4b1f      	ldr	r3, [pc, #124]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	4a1e      	ldr	r2, [pc, #120]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 80040d4:	f043 0310 	orr.w	r3, r3, #16
 80040d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d106      	bne.n	80040ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80040e0:	4b1a      	ldr	r3, [pc, #104]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	4a19      	ldr	r2, [pc, #100]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 80040e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040ec:	e00f      	b.n	800410e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d106      	bne.n	8004102 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80040f4:	4b15      	ldr	r3, [pc, #84]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	4a14      	ldr	r2, [pc, #80]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 80040fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004100:	e005      	b.n	800410e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	4a11      	ldr	r2, [pc, #68]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 8004108:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800410c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800410e:	4b0f      	ldr	r3, [pc, #60]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a0e      	ldr	r2, [pc, #56]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 8004114:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800411a:	f7fd f8dd 	bl	80012d8 <HAL_GetTick>
 800411e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004120:	e008      	b.n	8004134 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004122:	f7fd f8d9 	bl	80012d8 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e006      	b.n	8004142 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <RCCEx_PLL2_Config+0x15c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0f0      	beq.n	8004122 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004140:	7bfb      	ldrb	r3, [r7, #15]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	58024400 	.word	0x58024400
 8004150:	ffff0007 	.word	0xffff0007

08004154 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004162:	4b53      	ldr	r3, [pc, #332]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b03      	cmp	r3, #3
 800416c:	d101      	bne.n	8004172 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e099      	b.n	80042a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004172:	4b4f      	ldr	r3, [pc, #316]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a4e      	ldr	r2, [pc, #312]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 8004178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800417c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417e:	f7fd f8ab 	bl	80012d8 <HAL_GetTick>
 8004182:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004184:	e008      	b.n	8004198 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004186:	f7fd f8a7 	bl	80012d8 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e086      	b.n	80042a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004198:	4b45      	ldr	r3, [pc, #276]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f0      	bne.n	8004186 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80041a4:	4b42      	ldr	r3, [pc, #264]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	051b      	lsls	r3, r3, #20
 80041b2:	493f      	ldr	r1, [pc, #252]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	628b      	str	r3, [r1, #40]	; 0x28
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	3b01      	subs	r3, #1
 80041be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	025b      	lsls	r3, r3, #9
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	041b      	lsls	r3, r3, #16
 80041d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	061b      	lsls	r3, r3, #24
 80041e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041e8:	4931      	ldr	r1, [pc, #196]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80041ee:	4b30      	ldr	r3, [pc, #192]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	492d      	ldr	r1, [pc, #180]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004200:	4b2b      	ldr	r3, [pc, #172]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	4928      	ldr	r1, [pc, #160]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 800420e:	4313      	orrs	r3, r2
 8004210:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004212:	4b27      	ldr	r3, [pc, #156]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	4a26      	ldr	r2, [pc, #152]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 8004218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800421c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800421e:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 8004220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004222:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <RCCEx_PLL3_Config+0x160>)
 8004224:	4013      	ands	r3, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	69d2      	ldr	r2, [r2, #28]
 800422a:	00d2      	lsls	r2, r2, #3
 800422c:	4920      	ldr	r1, [pc, #128]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004232:	4b1f      	ldr	r3, [pc, #124]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	4a1e      	ldr	r2, [pc, #120]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 8004238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d106      	bne.n	8004252 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004244:	4b1a      	ldr	r3, [pc, #104]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	4a19      	ldr	r2, [pc, #100]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 800424a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800424e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004250:	e00f      	b.n	8004272 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d106      	bne.n	8004266 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004258:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	4a14      	ldr	r2, [pc, #80]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 800425e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004262:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004264:	e005      	b.n	8004272 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004266:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	4a11      	ldr	r2, [pc, #68]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 800426c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004270:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004272:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a0e      	ldr	r2, [pc, #56]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 8004278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800427c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800427e:	f7fd f82b 	bl	80012d8 <HAL_GetTick>
 8004282:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004284:	e008      	b.n	8004298 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004286:	f7fd f827 	bl	80012d8 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e006      	b.n	80042a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004298:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <RCCEx_PLL3_Config+0x15c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	58024400 	.word	0x58024400
 80042b4:	ffff0007 	.word	0xffff0007

080042b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e049      	b.n	800435e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fc fda6 	bl	8000e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	4619      	mov	r1, r3
 80042f6:	4610      	mov	r0, r2
 80042f8:	f000 fa66 	bl	80047c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d001      	beq.n	8004380 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e04c      	b.n	800441a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a26      	ldr	r2, [pc, #152]	; (8004428 <HAL_TIM_Base_Start+0xc0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d022      	beq.n	80043d8 <HAL_TIM_Base_Start+0x70>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439a:	d01d      	beq.n	80043d8 <HAL_TIM_Base_Start+0x70>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a22      	ldr	r2, [pc, #136]	; (800442c <HAL_TIM_Base_Start+0xc4>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d018      	beq.n	80043d8 <HAL_TIM_Base_Start+0x70>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a21      	ldr	r2, [pc, #132]	; (8004430 <HAL_TIM_Base_Start+0xc8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d013      	beq.n	80043d8 <HAL_TIM_Base_Start+0x70>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1f      	ldr	r2, [pc, #124]	; (8004434 <HAL_TIM_Base_Start+0xcc>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00e      	beq.n	80043d8 <HAL_TIM_Base_Start+0x70>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1e      	ldr	r2, [pc, #120]	; (8004438 <HAL_TIM_Base_Start+0xd0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d009      	beq.n	80043d8 <HAL_TIM_Base_Start+0x70>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1c      	ldr	r2, [pc, #112]	; (800443c <HAL_TIM_Base_Start+0xd4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d004      	beq.n	80043d8 <HAL_TIM_Base_Start+0x70>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1b      	ldr	r2, [pc, #108]	; (8004440 <HAL_TIM_Base_Start+0xd8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d115      	bne.n	8004404 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	4b19      	ldr	r3, [pc, #100]	; (8004444 <HAL_TIM_Base_Start+0xdc>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b06      	cmp	r3, #6
 80043e8:	d015      	beq.n	8004416 <HAL_TIM_Base_Start+0xae>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f0:	d011      	beq.n	8004416 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0201 	orr.w	r2, r2, #1
 8004400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004402:	e008      	b.n	8004416 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	e000      	b.n	8004418 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004416:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40010000 	.word	0x40010000
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800
 8004434:	40000c00 	.word	0x40000c00
 8004438:	40010400 	.word	0x40010400
 800443c:	40001800 	.word	0x40001800
 8004440:	40014000 	.word	0x40014000
 8004444:	00010007 	.word	0x00010007

08004448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b01      	cmp	r3, #1
 800445a:	d001      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e054      	b.n	800450a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a26      	ldr	r2, [pc, #152]	; (8004518 <HAL_TIM_Base_Start_IT+0xd0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d022      	beq.n	80044c8 <HAL_TIM_Base_Start_IT+0x80>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448a:	d01d      	beq.n	80044c8 <HAL_TIM_Base_Start_IT+0x80>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a22      	ldr	r2, [pc, #136]	; (800451c <HAL_TIM_Base_Start_IT+0xd4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d018      	beq.n	80044c8 <HAL_TIM_Base_Start_IT+0x80>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a21      	ldr	r2, [pc, #132]	; (8004520 <HAL_TIM_Base_Start_IT+0xd8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d013      	beq.n	80044c8 <HAL_TIM_Base_Start_IT+0x80>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1f      	ldr	r2, [pc, #124]	; (8004524 <HAL_TIM_Base_Start_IT+0xdc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00e      	beq.n	80044c8 <HAL_TIM_Base_Start_IT+0x80>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <HAL_TIM_Base_Start_IT+0xe0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d009      	beq.n	80044c8 <HAL_TIM_Base_Start_IT+0x80>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1c      	ldr	r2, [pc, #112]	; (800452c <HAL_TIM_Base_Start_IT+0xe4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <HAL_TIM_Base_Start_IT+0x80>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1b      	ldr	r2, [pc, #108]	; (8004530 <HAL_TIM_Base_Start_IT+0xe8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d115      	bne.n	80044f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	4b19      	ldr	r3, [pc, #100]	; (8004534 <HAL_TIM_Base_Start_IT+0xec>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b06      	cmp	r3, #6
 80044d8:	d015      	beq.n	8004506 <HAL_TIM_Base_Start_IT+0xbe>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e0:	d011      	beq.n	8004506 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0201 	orr.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f2:	e008      	b.n	8004506 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e000      	b.n	8004508 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004506:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40010000 	.word	0x40010000
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800
 8004524:	40000c00 	.word	0x40000c00
 8004528:	40010400 	.word	0x40010400
 800452c:	40001800 	.word	0x40001800
 8004530:	40014000 	.word	0x40014000
 8004534:	00010007 	.word	0x00010007

08004538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b02      	cmp	r3, #2
 800454c:	d122      	bne.n	8004594 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b02      	cmp	r3, #2
 800455a:	d11b      	bne.n	8004594 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0202 	mvn.w	r2, #2
 8004564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f905 	bl	800478a <HAL_TIM_IC_CaptureCallback>
 8004580:	e005      	b.n	800458e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f8f7 	bl	8004776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f908 	bl	800479e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d122      	bne.n	80045e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d11b      	bne.n	80045e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0204 	mvn.w	r2, #4
 80045b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f8db 	bl	800478a <HAL_TIM_IC_CaptureCallback>
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f8cd 	bl	8004776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f8de 	bl	800479e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d122      	bne.n	800463c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b08      	cmp	r3, #8
 8004602:	d11b      	bne.n	800463c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0208 	mvn.w	r2, #8
 800460c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2204      	movs	r2, #4
 8004612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f8b1 	bl	800478a <HAL_TIM_IC_CaptureCallback>
 8004628:	e005      	b.n	8004636 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f8a3 	bl	8004776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f8b4 	bl	800479e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2b10      	cmp	r3, #16
 8004648:	d122      	bne.n	8004690 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0310 	and.w	r3, r3, #16
 8004654:	2b10      	cmp	r3, #16
 8004656:	d11b      	bne.n	8004690 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0210 	mvn.w	r2, #16
 8004660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2208      	movs	r2, #8
 8004666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f887 	bl	800478a <HAL_TIM_IC_CaptureCallback>
 800467c:	e005      	b.n	800468a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f879 	bl	8004776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f88a 	bl	800479e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b01      	cmp	r3, #1
 800469c:	d10e      	bne.n	80046bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d107      	bne.n	80046bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0201 	mvn.w	r2, #1
 80046b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fc fb0e 	bl	8000cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c6:	2b80      	cmp	r3, #128	; 0x80
 80046c8:	d10e      	bne.n	80046e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d4:	2b80      	cmp	r3, #128	; 0x80
 80046d6:	d107      	bne.n	80046e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f914 	bl	8004910 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f6:	d10e      	bne.n	8004716 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004702:	2b80      	cmp	r3, #128	; 0x80
 8004704:	d107      	bne.n	8004716 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800470e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f907 	bl	8004924 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004720:	2b40      	cmp	r3, #64	; 0x40
 8004722:	d10e      	bne.n	8004742 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472e:	2b40      	cmp	r3, #64	; 0x40
 8004730:	d107      	bne.n	8004742 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800473a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f838 	bl	80047b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b20      	cmp	r3, #32
 800474e:	d10e      	bne.n	800476e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b20      	cmp	r3, #32
 800475c:	d107      	bne.n	800476e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f06f 0220 	mvn.w	r2, #32
 8004766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f8c7 	bl	80048fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
	...

080047c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a40      	ldr	r2, [pc, #256]	; (80048dc <TIM_Base_SetConfig+0x114>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d013      	beq.n	8004808 <TIM_Base_SetConfig+0x40>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e6:	d00f      	beq.n	8004808 <TIM_Base_SetConfig+0x40>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a3d      	ldr	r2, [pc, #244]	; (80048e0 <TIM_Base_SetConfig+0x118>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00b      	beq.n	8004808 <TIM_Base_SetConfig+0x40>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a3c      	ldr	r2, [pc, #240]	; (80048e4 <TIM_Base_SetConfig+0x11c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <TIM_Base_SetConfig+0x40>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a3b      	ldr	r2, [pc, #236]	; (80048e8 <TIM_Base_SetConfig+0x120>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a3a      	ldr	r2, [pc, #232]	; (80048ec <TIM_Base_SetConfig+0x124>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d108      	bne.n	800481a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a2f      	ldr	r2, [pc, #188]	; (80048dc <TIM_Base_SetConfig+0x114>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01f      	beq.n	8004862 <TIM_Base_SetConfig+0x9a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004828:	d01b      	beq.n	8004862 <TIM_Base_SetConfig+0x9a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a2c      	ldr	r2, [pc, #176]	; (80048e0 <TIM_Base_SetConfig+0x118>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d017      	beq.n	8004862 <TIM_Base_SetConfig+0x9a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a2b      	ldr	r2, [pc, #172]	; (80048e4 <TIM_Base_SetConfig+0x11c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d013      	beq.n	8004862 <TIM_Base_SetConfig+0x9a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a2a      	ldr	r2, [pc, #168]	; (80048e8 <TIM_Base_SetConfig+0x120>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00f      	beq.n	8004862 <TIM_Base_SetConfig+0x9a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a29      	ldr	r2, [pc, #164]	; (80048ec <TIM_Base_SetConfig+0x124>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00b      	beq.n	8004862 <TIM_Base_SetConfig+0x9a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a28      	ldr	r2, [pc, #160]	; (80048f0 <TIM_Base_SetConfig+0x128>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d007      	beq.n	8004862 <TIM_Base_SetConfig+0x9a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a27      	ldr	r2, [pc, #156]	; (80048f4 <TIM_Base_SetConfig+0x12c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d003      	beq.n	8004862 <TIM_Base_SetConfig+0x9a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a26      	ldr	r2, [pc, #152]	; (80048f8 <TIM_Base_SetConfig+0x130>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d108      	bne.n	8004874 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a10      	ldr	r2, [pc, #64]	; (80048dc <TIM_Base_SetConfig+0x114>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00f      	beq.n	80048c0 <TIM_Base_SetConfig+0xf8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a12      	ldr	r2, [pc, #72]	; (80048ec <TIM_Base_SetConfig+0x124>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <TIM_Base_SetConfig+0xf8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a11      	ldr	r2, [pc, #68]	; (80048f0 <TIM_Base_SetConfig+0x128>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d007      	beq.n	80048c0 <TIM_Base_SetConfig+0xf8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a10      	ldr	r2, [pc, #64]	; (80048f4 <TIM_Base_SetConfig+0x12c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_Base_SetConfig+0xf8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a0f      	ldr	r2, [pc, #60]	; (80048f8 <TIM_Base_SetConfig+0x130>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d103      	bne.n	80048c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	615a      	str	r2, [r3, #20]
}
 80048ce:	bf00      	nop
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40000400 	.word	0x40000400
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40000c00 	.word	0x40000c00
 80048ec:	40010400 	.word	0x40010400
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40014400 	.word	0x40014400
 80048f8:	40014800 	.word	0x40014800

080048fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e042      	b.n	80049d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004950:	2b00      	cmp	r3, #0
 8004952:	d106      	bne.n	8004962 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7fc fa89 	bl	8000e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2224      	movs	r2, #36	; 0x24
 8004966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0201 	bic.w	r2, r2, #1
 8004978:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8c2 	bl	8004b04 <UART_SetConfig>
 8004980:	4603      	mov	r3, r0
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e022      	b.n	80049d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fe1e 	bl	80055d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fea5 	bl	8005718 <UART_CheckIdleState>
 80049ce:	4603      	mov	r3, r0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08a      	sub	sp, #40	; 0x28
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	4613      	mov	r3, r2
 80049e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	f040 8083 	bne.w	8004afa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_UART_Transmit+0x28>
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e07b      	b.n	8004afc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_UART_Transmit+0x3a>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e074      	b.n	8004afc <HAL_UART_Transmit+0x124>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2221      	movs	r2, #33	; 0x21
 8004a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a2a:	f7fc fc55 	bl	80012d8 <HAL_GetTick>
 8004a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	88fa      	ldrh	r2, [r7, #6]
 8004a34:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	88fa      	ldrh	r2, [r7, #6]
 8004a3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a48:	d108      	bne.n	8004a5c <HAL_UART_Transmit+0x84>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d104      	bne.n	8004a5c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	e003      	b.n	8004a64 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004a6c:	e02c      	b.n	8004ac8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2200      	movs	r2, #0
 8004a76:	2180      	movs	r1, #128	; 0x80
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fe98 	bl	80057ae <UART_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e039      	b.n	8004afc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10b      	bne.n	8004aa6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	3302      	adds	r3, #2
 8004aa2:	61bb      	str	r3, [r7, #24]
 8004aa4:	e007      	b.n	8004ab6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1cc      	bne.n	8004a6e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2200      	movs	r2, #0
 8004adc:	2140      	movs	r1, #64	; 0x40
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 fe65 	bl	80057ae <UART_WaitOnFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e006      	b.n	8004afc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	e000      	b.n	8004afc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004afa:	2302      	movs	r3, #2
  }
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3720      	adds	r7, #32
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b08:	b092      	sub	sp, #72	; 0x48
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4bbe      	ldr	r3, [pc, #760]	; (8004e2c <UART_SetConfig+0x328>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4ab3      	ldr	r2, [pc, #716]	; (8004e30 <UART_SetConfig+0x32c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d004      	beq.n	8004b70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	4baf      	ldr	r3, [pc, #700]	; (8004e34 <UART_SetConfig+0x330>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b80:	430b      	orrs	r3, r1
 8004b82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	f023 010f 	bic.w	r1, r3, #15
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4aa6      	ldr	r2, [pc, #664]	; (8004e38 <UART_SetConfig+0x334>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d177      	bne.n	8004c94 <UART_SetConfig+0x190>
 8004ba4:	4ba5      	ldr	r3, [pc, #660]	; (8004e3c <UART_SetConfig+0x338>)
 8004ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bac:	2b28      	cmp	r3, #40	; 0x28
 8004bae:	d86d      	bhi.n	8004c8c <UART_SetConfig+0x188>
 8004bb0:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <UART_SetConfig+0xb4>)
 8004bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb6:	bf00      	nop
 8004bb8:	08004c5d 	.word	0x08004c5d
 8004bbc:	08004c8d 	.word	0x08004c8d
 8004bc0:	08004c8d 	.word	0x08004c8d
 8004bc4:	08004c8d 	.word	0x08004c8d
 8004bc8:	08004c8d 	.word	0x08004c8d
 8004bcc:	08004c8d 	.word	0x08004c8d
 8004bd0:	08004c8d 	.word	0x08004c8d
 8004bd4:	08004c8d 	.word	0x08004c8d
 8004bd8:	08004c65 	.word	0x08004c65
 8004bdc:	08004c8d 	.word	0x08004c8d
 8004be0:	08004c8d 	.word	0x08004c8d
 8004be4:	08004c8d 	.word	0x08004c8d
 8004be8:	08004c8d 	.word	0x08004c8d
 8004bec:	08004c8d 	.word	0x08004c8d
 8004bf0:	08004c8d 	.word	0x08004c8d
 8004bf4:	08004c8d 	.word	0x08004c8d
 8004bf8:	08004c6d 	.word	0x08004c6d
 8004bfc:	08004c8d 	.word	0x08004c8d
 8004c00:	08004c8d 	.word	0x08004c8d
 8004c04:	08004c8d 	.word	0x08004c8d
 8004c08:	08004c8d 	.word	0x08004c8d
 8004c0c:	08004c8d 	.word	0x08004c8d
 8004c10:	08004c8d 	.word	0x08004c8d
 8004c14:	08004c8d 	.word	0x08004c8d
 8004c18:	08004c75 	.word	0x08004c75
 8004c1c:	08004c8d 	.word	0x08004c8d
 8004c20:	08004c8d 	.word	0x08004c8d
 8004c24:	08004c8d 	.word	0x08004c8d
 8004c28:	08004c8d 	.word	0x08004c8d
 8004c2c:	08004c8d 	.word	0x08004c8d
 8004c30:	08004c8d 	.word	0x08004c8d
 8004c34:	08004c8d 	.word	0x08004c8d
 8004c38:	08004c7d 	.word	0x08004c7d
 8004c3c:	08004c8d 	.word	0x08004c8d
 8004c40:	08004c8d 	.word	0x08004c8d
 8004c44:	08004c8d 	.word	0x08004c8d
 8004c48:	08004c8d 	.word	0x08004c8d
 8004c4c:	08004c8d 	.word	0x08004c8d
 8004c50:	08004c8d 	.word	0x08004c8d
 8004c54:	08004c8d 	.word	0x08004c8d
 8004c58:	08004c85 	.word	0x08004c85
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c62:	e222      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004c64:	2304      	movs	r3, #4
 8004c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c6a:	e21e      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004c6c:	2308      	movs	r3, #8
 8004c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c72:	e21a      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004c74:	2310      	movs	r3, #16
 8004c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c7a:	e216      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c82:	e212      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004c84:	2340      	movs	r3, #64	; 0x40
 8004c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c8a:	e20e      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c92:	e20a      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a69      	ldr	r2, [pc, #420]	; (8004e40 <UART_SetConfig+0x33c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d130      	bne.n	8004d00 <UART_SetConfig+0x1fc>
 8004c9e:	4b67      	ldr	r3, [pc, #412]	; (8004e3c <UART_SetConfig+0x338>)
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	2b05      	cmp	r3, #5
 8004ca8:	d826      	bhi.n	8004cf8 <UART_SetConfig+0x1f4>
 8004caa:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <UART_SetConfig+0x1ac>)
 8004cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb0:	08004cc9 	.word	0x08004cc9
 8004cb4:	08004cd1 	.word	0x08004cd1
 8004cb8:	08004cd9 	.word	0x08004cd9
 8004cbc:	08004ce1 	.word	0x08004ce1
 8004cc0:	08004ce9 	.word	0x08004ce9
 8004cc4:	08004cf1 	.word	0x08004cf1
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cce:	e1ec      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cd6:	e1e8      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004cd8:	2308      	movs	r3, #8
 8004cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cde:	e1e4      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004ce0:	2310      	movs	r3, #16
 8004ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ce6:	e1e0      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004ce8:	2320      	movs	r3, #32
 8004cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cee:	e1dc      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004cf0:	2340      	movs	r3, #64	; 0x40
 8004cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf6:	e1d8      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfe:	e1d4      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a4f      	ldr	r2, [pc, #316]	; (8004e44 <UART_SetConfig+0x340>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d130      	bne.n	8004d6c <UART_SetConfig+0x268>
 8004d0a:	4b4c      	ldr	r3, [pc, #304]	; (8004e3c <UART_SetConfig+0x338>)
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	2b05      	cmp	r3, #5
 8004d14:	d826      	bhi.n	8004d64 <UART_SetConfig+0x260>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <UART_SetConfig+0x218>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d35 	.word	0x08004d35
 8004d20:	08004d3d 	.word	0x08004d3d
 8004d24:	08004d45 	.word	0x08004d45
 8004d28:	08004d4d 	.word	0x08004d4d
 8004d2c:	08004d55 	.word	0x08004d55
 8004d30:	08004d5d 	.word	0x08004d5d
 8004d34:	2300      	movs	r3, #0
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d3a:	e1b6      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d42:	e1b2      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004d44:	2308      	movs	r3, #8
 8004d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4a:	e1ae      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d52:	e1aa      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004d54:	2320      	movs	r3, #32
 8004d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5a:	e1a6      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004d5c:	2340      	movs	r3, #64	; 0x40
 8004d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d62:	e1a2      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004d64:	2380      	movs	r3, #128	; 0x80
 8004d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6a:	e19e      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a35      	ldr	r2, [pc, #212]	; (8004e48 <UART_SetConfig+0x344>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d130      	bne.n	8004dd8 <UART_SetConfig+0x2d4>
 8004d76:	4b31      	ldr	r3, [pc, #196]	; (8004e3c <UART_SetConfig+0x338>)
 8004d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	2b05      	cmp	r3, #5
 8004d80:	d826      	bhi.n	8004dd0 <UART_SetConfig+0x2cc>
 8004d82:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <UART_SetConfig+0x284>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004da1 	.word	0x08004da1
 8004d8c:	08004da9 	.word	0x08004da9
 8004d90:	08004db1 	.word	0x08004db1
 8004d94:	08004db9 	.word	0x08004db9
 8004d98:	08004dc1 	.word	0x08004dc1
 8004d9c:	08004dc9 	.word	0x08004dc9
 8004da0:	2300      	movs	r3, #0
 8004da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004da6:	e180      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004da8:	2304      	movs	r3, #4
 8004daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dae:	e17c      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004db0:	2308      	movs	r3, #8
 8004db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004db6:	e178      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004db8:	2310      	movs	r3, #16
 8004dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dbe:	e174      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004dc0:	2320      	movs	r3, #32
 8004dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dc6:	e170      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004dc8:	2340      	movs	r3, #64	; 0x40
 8004dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dce:	e16c      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004dd0:	2380      	movs	r3, #128	; 0x80
 8004dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd6:	e168      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1b      	ldr	r2, [pc, #108]	; (8004e4c <UART_SetConfig+0x348>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d142      	bne.n	8004e68 <UART_SetConfig+0x364>
 8004de2:	4b16      	ldr	r3, [pc, #88]	; (8004e3c <UART_SetConfig+0x338>)
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	2b05      	cmp	r3, #5
 8004dec:	d838      	bhi.n	8004e60 <UART_SetConfig+0x35c>
 8004dee:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <UART_SetConfig+0x2f0>)
 8004df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df4:	08004e0d 	.word	0x08004e0d
 8004df8:	08004e15 	.word	0x08004e15
 8004dfc:	08004e1d 	.word	0x08004e1d
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e51 	.word	0x08004e51
 8004e08:	08004e59 	.word	0x08004e59
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e12:	e14a      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004e14:	2304      	movs	r3, #4
 8004e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e1a:	e146      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e22:	e142      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004e24:	2310      	movs	r3, #16
 8004e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e2a:	e13e      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004e2c:	cfff69f3 	.word	0xcfff69f3
 8004e30:	58000c00 	.word	0x58000c00
 8004e34:	11fff4ff 	.word	0x11fff4ff
 8004e38:	40011000 	.word	0x40011000
 8004e3c:	58024400 	.word	0x58024400
 8004e40:	40004400 	.word	0x40004400
 8004e44:	40004800 	.word	0x40004800
 8004e48:	40004c00 	.word	0x40004c00
 8004e4c:	40005000 	.word	0x40005000
 8004e50:	2320      	movs	r3, #32
 8004e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e56:	e128      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004e58:	2340      	movs	r3, #64	; 0x40
 8004e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e5e:	e124      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004e60:	2380      	movs	r3, #128	; 0x80
 8004e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e66:	e120      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4acb      	ldr	r2, [pc, #812]	; (800519c <UART_SetConfig+0x698>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d176      	bne.n	8004f60 <UART_SetConfig+0x45c>
 8004e72:	4bcb      	ldr	r3, [pc, #812]	; (80051a0 <UART_SetConfig+0x69c>)
 8004e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e7a:	2b28      	cmp	r3, #40	; 0x28
 8004e7c:	d86c      	bhi.n	8004f58 <UART_SetConfig+0x454>
 8004e7e:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <UART_SetConfig+0x380>)
 8004e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e84:	08004f29 	.word	0x08004f29
 8004e88:	08004f59 	.word	0x08004f59
 8004e8c:	08004f59 	.word	0x08004f59
 8004e90:	08004f59 	.word	0x08004f59
 8004e94:	08004f59 	.word	0x08004f59
 8004e98:	08004f59 	.word	0x08004f59
 8004e9c:	08004f59 	.word	0x08004f59
 8004ea0:	08004f59 	.word	0x08004f59
 8004ea4:	08004f31 	.word	0x08004f31
 8004ea8:	08004f59 	.word	0x08004f59
 8004eac:	08004f59 	.word	0x08004f59
 8004eb0:	08004f59 	.word	0x08004f59
 8004eb4:	08004f59 	.word	0x08004f59
 8004eb8:	08004f59 	.word	0x08004f59
 8004ebc:	08004f59 	.word	0x08004f59
 8004ec0:	08004f59 	.word	0x08004f59
 8004ec4:	08004f39 	.word	0x08004f39
 8004ec8:	08004f59 	.word	0x08004f59
 8004ecc:	08004f59 	.word	0x08004f59
 8004ed0:	08004f59 	.word	0x08004f59
 8004ed4:	08004f59 	.word	0x08004f59
 8004ed8:	08004f59 	.word	0x08004f59
 8004edc:	08004f59 	.word	0x08004f59
 8004ee0:	08004f59 	.word	0x08004f59
 8004ee4:	08004f41 	.word	0x08004f41
 8004ee8:	08004f59 	.word	0x08004f59
 8004eec:	08004f59 	.word	0x08004f59
 8004ef0:	08004f59 	.word	0x08004f59
 8004ef4:	08004f59 	.word	0x08004f59
 8004ef8:	08004f59 	.word	0x08004f59
 8004efc:	08004f59 	.word	0x08004f59
 8004f00:	08004f59 	.word	0x08004f59
 8004f04:	08004f49 	.word	0x08004f49
 8004f08:	08004f59 	.word	0x08004f59
 8004f0c:	08004f59 	.word	0x08004f59
 8004f10:	08004f59 	.word	0x08004f59
 8004f14:	08004f59 	.word	0x08004f59
 8004f18:	08004f59 	.word	0x08004f59
 8004f1c:	08004f59 	.word	0x08004f59
 8004f20:	08004f59 	.word	0x08004f59
 8004f24:	08004f51 	.word	0x08004f51
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f2e:	e0bc      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004f30:	2304      	movs	r3, #4
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f36:	e0b8      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004f38:	2308      	movs	r3, #8
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f3e:	e0b4      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004f40:	2310      	movs	r3, #16
 8004f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f46:	e0b0      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004f48:	2320      	movs	r3, #32
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4e:	e0ac      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004f50:	2340      	movs	r3, #64	; 0x40
 8004f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f56:	e0a8      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004f58:	2380      	movs	r3, #128	; 0x80
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5e:	e0a4      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a8f      	ldr	r2, [pc, #572]	; (80051a4 <UART_SetConfig+0x6a0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d130      	bne.n	8004fcc <UART_SetConfig+0x4c8>
 8004f6a:	4b8d      	ldr	r3, [pc, #564]	; (80051a0 <UART_SetConfig+0x69c>)
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	2b05      	cmp	r3, #5
 8004f74:	d826      	bhi.n	8004fc4 <UART_SetConfig+0x4c0>
 8004f76:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <UART_SetConfig+0x478>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004f95 	.word	0x08004f95
 8004f80:	08004f9d 	.word	0x08004f9d
 8004f84:	08004fa5 	.word	0x08004fa5
 8004f88:	08004fad 	.word	0x08004fad
 8004f8c:	08004fb5 	.word	0x08004fb5
 8004f90:	08004fbd 	.word	0x08004fbd
 8004f94:	2300      	movs	r3, #0
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9a:	e086      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa2:	e082      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004faa:	e07e      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004fac:	2310      	movs	r3, #16
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb2:	e07a      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004fb4:	2320      	movs	r3, #32
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fba:	e076      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004fbc:	2340      	movs	r3, #64	; 0x40
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc2:	e072      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004fc4:	2380      	movs	r3, #128	; 0x80
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fca:	e06e      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a75      	ldr	r2, [pc, #468]	; (80051a8 <UART_SetConfig+0x6a4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d130      	bne.n	8005038 <UART_SetConfig+0x534>
 8004fd6:	4b72      	ldr	r3, [pc, #456]	; (80051a0 <UART_SetConfig+0x69c>)
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	2b05      	cmp	r3, #5
 8004fe0:	d826      	bhi.n	8005030 <UART_SetConfig+0x52c>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <UART_SetConfig+0x4e4>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	08005001 	.word	0x08005001
 8004fec:	08005009 	.word	0x08005009
 8004ff0:	08005011 	.word	0x08005011
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	08005029 	.word	0x08005029
 8005000:	2300      	movs	r3, #0
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005006:	e050      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005008:	2304      	movs	r3, #4
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500e:	e04c      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005010:	2308      	movs	r3, #8
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005016:	e048      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005018:	2310      	movs	r3, #16
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501e:	e044      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005020:	2320      	movs	r3, #32
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005026:	e040      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005028:	2340      	movs	r3, #64	; 0x40
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502e:	e03c      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005030:	2380      	movs	r3, #128	; 0x80
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005036:	e038      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a5b      	ldr	r2, [pc, #364]	; (80051ac <UART_SetConfig+0x6a8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d130      	bne.n	80050a4 <UART_SetConfig+0x5a0>
 8005042:	4b57      	ldr	r3, [pc, #348]	; (80051a0 <UART_SetConfig+0x69c>)
 8005044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	2b05      	cmp	r3, #5
 800504c:	d826      	bhi.n	800509c <UART_SetConfig+0x598>
 800504e:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <UART_SetConfig+0x550>)
 8005050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005054:	0800506d 	.word	0x0800506d
 8005058:	08005075 	.word	0x08005075
 800505c:	0800507d 	.word	0x0800507d
 8005060:	08005085 	.word	0x08005085
 8005064:	0800508d 	.word	0x0800508d
 8005068:	08005095 	.word	0x08005095
 800506c:	2302      	movs	r3, #2
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005072:	e01a      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005074:	2304      	movs	r3, #4
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507a:	e016      	b.n	80050aa <UART_SetConfig+0x5a6>
 800507c:	2308      	movs	r3, #8
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005082:	e012      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005084:	2310      	movs	r3, #16
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508a:	e00e      	b.n	80050aa <UART_SetConfig+0x5a6>
 800508c:	2320      	movs	r3, #32
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005092:	e00a      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005094:	2340      	movs	r3, #64	; 0x40
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509a:	e006      	b.n	80050aa <UART_SetConfig+0x5a6>
 800509c:	2380      	movs	r3, #128	; 0x80
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a2:	e002      	b.n	80050aa <UART_SetConfig+0x5a6>
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a3f      	ldr	r2, [pc, #252]	; (80051ac <UART_SetConfig+0x6a8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	f040 80f8 	bne.w	80052a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	dc46      	bgt.n	800514c <UART_SetConfig+0x648>
 80050be:	2b02      	cmp	r3, #2
 80050c0:	f2c0 8082 	blt.w	80051c8 <UART_SetConfig+0x6c4>
 80050c4:	3b02      	subs	r3, #2
 80050c6:	2b1e      	cmp	r3, #30
 80050c8:	d87e      	bhi.n	80051c8 <UART_SetConfig+0x6c4>
 80050ca:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <UART_SetConfig+0x5cc>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	08005153 	.word	0x08005153
 80050d4:	080051c9 	.word	0x080051c9
 80050d8:	0800515b 	.word	0x0800515b
 80050dc:	080051c9 	.word	0x080051c9
 80050e0:	080051c9 	.word	0x080051c9
 80050e4:	080051c9 	.word	0x080051c9
 80050e8:	0800516b 	.word	0x0800516b
 80050ec:	080051c9 	.word	0x080051c9
 80050f0:	080051c9 	.word	0x080051c9
 80050f4:	080051c9 	.word	0x080051c9
 80050f8:	080051c9 	.word	0x080051c9
 80050fc:	080051c9 	.word	0x080051c9
 8005100:	080051c9 	.word	0x080051c9
 8005104:	080051c9 	.word	0x080051c9
 8005108:	0800517b 	.word	0x0800517b
 800510c:	080051c9 	.word	0x080051c9
 8005110:	080051c9 	.word	0x080051c9
 8005114:	080051c9 	.word	0x080051c9
 8005118:	080051c9 	.word	0x080051c9
 800511c:	080051c9 	.word	0x080051c9
 8005120:	080051c9 	.word	0x080051c9
 8005124:	080051c9 	.word	0x080051c9
 8005128:	080051c9 	.word	0x080051c9
 800512c:	080051c9 	.word	0x080051c9
 8005130:	080051c9 	.word	0x080051c9
 8005134:	080051c9 	.word	0x080051c9
 8005138:	080051c9 	.word	0x080051c9
 800513c:	080051c9 	.word	0x080051c9
 8005140:	080051c9 	.word	0x080051c9
 8005144:	080051c9 	.word	0x080051c9
 8005148:	080051bb 	.word	0x080051bb
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d037      	beq.n	80051c0 <UART_SetConfig+0x6bc>
 8005150:	e03a      	b.n	80051c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005152:	f7fe fc8f 	bl	8003a74 <HAL_RCCEx_GetD3PCLK1Freq>
 8005156:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005158:	e03c      	b.n	80051d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800515a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800515e:	4618      	mov	r0, r3
 8005160:	f7fe fc9e 	bl	8003aa0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005168:	e034      	b.n	80051d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800516a:	f107 0318 	add.w	r3, r7, #24
 800516e:	4618      	mov	r0, r3
 8005170:	f7fe fdea 	bl	8003d48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005178:	e02c      	b.n	80051d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800517a:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <UART_SetConfig+0x69c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005186:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <UART_SetConfig+0x69c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	08db      	lsrs	r3, r3, #3
 800518c:	f003 0303 	and.w	r3, r3, #3
 8005190:	4a07      	ldr	r2, [pc, #28]	; (80051b0 <UART_SetConfig+0x6ac>)
 8005192:	fa22 f303 	lsr.w	r3, r2, r3
 8005196:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005198:	e01c      	b.n	80051d4 <UART_SetConfig+0x6d0>
 800519a:	bf00      	nop
 800519c:	40011400 	.word	0x40011400
 80051a0:	58024400 	.word	0x58024400
 80051a4:	40007800 	.word	0x40007800
 80051a8:	40007c00 	.word	0x40007c00
 80051ac:	58000c00 	.word	0x58000c00
 80051b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80051b4:	4b9d      	ldr	r3, [pc, #628]	; (800542c <UART_SetConfig+0x928>)
 80051b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051b8:	e00c      	b.n	80051d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80051ba:	4b9d      	ldr	r3, [pc, #628]	; (8005430 <UART_SetConfig+0x92c>)
 80051bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051be:	e009      	b.n	80051d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051c6:	e005      	b.n	80051d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80051d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 81de 	beq.w	8005598 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	4a94      	ldr	r2, [pc, #592]	; (8005434 <UART_SetConfig+0x930>)
 80051e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051e6:	461a      	mov	r2, r3
 80051e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80051ee:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	4613      	mov	r3, r2
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	4413      	add	r3, r2
 80051fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d305      	bcc.n	800520c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005208:	429a      	cmp	r2, r3
 800520a:	d903      	bls.n	8005214 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005212:	e1c1      	b.n	8005598 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005216:	2200      	movs	r2, #0
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	60fa      	str	r2, [r7, #12]
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	4a84      	ldr	r2, [pc, #528]	; (8005434 <UART_SetConfig+0x930>)
 8005222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005226:	b29b      	uxth	r3, r3
 8005228:	2200      	movs	r2, #0
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	607a      	str	r2, [r7, #4]
 800522e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005232:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005236:	f7fb f8ab 	bl	8000390 <__aeabi_uldivmod>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4610      	mov	r0, r2
 8005240:	4619      	mov	r1, r3
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	f04f 0300 	mov.w	r3, #0
 800524a:	020b      	lsls	r3, r1, #8
 800524c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005250:	0202      	lsls	r2, r0, #8
 8005252:	6979      	ldr	r1, [r7, #20]
 8005254:	6849      	ldr	r1, [r1, #4]
 8005256:	0849      	lsrs	r1, r1, #1
 8005258:	2000      	movs	r0, #0
 800525a:	460c      	mov	r4, r1
 800525c:	4605      	mov	r5, r0
 800525e:	eb12 0804 	adds.w	r8, r2, r4
 8005262:	eb43 0905 	adc.w	r9, r3, r5
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	469a      	mov	sl, r3
 800526e:	4693      	mov	fp, r2
 8005270:	4652      	mov	r2, sl
 8005272:	465b      	mov	r3, fp
 8005274:	4640      	mov	r0, r8
 8005276:	4649      	mov	r1, r9
 8005278:	f7fb f88a 	bl	8000390 <__aeabi_uldivmod>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4613      	mov	r3, r2
 8005282:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800528a:	d308      	bcc.n	800529e <UART_SetConfig+0x79a>
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005292:	d204      	bcs.n	800529e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800529a:	60da      	str	r2, [r3, #12]
 800529c:	e17c      	b.n	8005598 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80052a4:	e178      	b.n	8005598 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ae:	f040 80c5 	bne.w	800543c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80052b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	dc48      	bgt.n	800534c <UART_SetConfig+0x848>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	db7b      	blt.n	80053b6 <UART_SetConfig+0x8b2>
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d879      	bhi.n	80053b6 <UART_SetConfig+0x8b2>
 80052c2:	a201      	add	r2, pc, #4	; (adr r2, 80052c8 <UART_SetConfig+0x7c4>)
 80052c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c8:	08005353 	.word	0x08005353
 80052cc:	0800535b 	.word	0x0800535b
 80052d0:	080053b7 	.word	0x080053b7
 80052d4:	080053b7 	.word	0x080053b7
 80052d8:	08005363 	.word	0x08005363
 80052dc:	080053b7 	.word	0x080053b7
 80052e0:	080053b7 	.word	0x080053b7
 80052e4:	080053b7 	.word	0x080053b7
 80052e8:	08005373 	.word	0x08005373
 80052ec:	080053b7 	.word	0x080053b7
 80052f0:	080053b7 	.word	0x080053b7
 80052f4:	080053b7 	.word	0x080053b7
 80052f8:	080053b7 	.word	0x080053b7
 80052fc:	080053b7 	.word	0x080053b7
 8005300:	080053b7 	.word	0x080053b7
 8005304:	080053b7 	.word	0x080053b7
 8005308:	08005383 	.word	0x08005383
 800530c:	080053b7 	.word	0x080053b7
 8005310:	080053b7 	.word	0x080053b7
 8005314:	080053b7 	.word	0x080053b7
 8005318:	080053b7 	.word	0x080053b7
 800531c:	080053b7 	.word	0x080053b7
 8005320:	080053b7 	.word	0x080053b7
 8005324:	080053b7 	.word	0x080053b7
 8005328:	080053b7 	.word	0x080053b7
 800532c:	080053b7 	.word	0x080053b7
 8005330:	080053b7 	.word	0x080053b7
 8005334:	080053b7 	.word	0x080053b7
 8005338:	080053b7 	.word	0x080053b7
 800533c:	080053b7 	.word	0x080053b7
 8005340:	080053b7 	.word	0x080053b7
 8005344:	080053b7 	.word	0x080053b7
 8005348:	080053a9 	.word	0x080053a9
 800534c:	2b40      	cmp	r3, #64	; 0x40
 800534e:	d02e      	beq.n	80053ae <UART_SetConfig+0x8aa>
 8005350:	e031      	b.n	80053b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005352:	f7fd fbdb 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 8005356:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005358:	e033      	b.n	80053c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800535a:	f7fd fbed 	bl	8002b38 <HAL_RCC_GetPCLK2Freq>
 800535e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005360:	e02f      	b.n	80053c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe fb9a 	bl	8003aa0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005370:	e027      	b.n	80053c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005372:	f107 0318 	add.w	r3, r7, #24
 8005376:	4618      	mov	r0, r3
 8005378:	f7fe fce6 	bl	8003d48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005380:	e01f      	b.n	80053c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005382:	4b2d      	ldr	r3, [pc, #180]	; (8005438 <UART_SetConfig+0x934>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d009      	beq.n	80053a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800538e:	4b2a      	ldr	r3, [pc, #168]	; (8005438 <UART_SetConfig+0x934>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	08db      	lsrs	r3, r3, #3
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	4a24      	ldr	r2, [pc, #144]	; (800542c <UART_SetConfig+0x928>)
 800539a:	fa22 f303 	lsr.w	r3, r2, r3
 800539e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053a0:	e00f      	b.n	80053c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80053a2:	4b22      	ldr	r3, [pc, #136]	; (800542c <UART_SetConfig+0x928>)
 80053a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053a6:	e00c      	b.n	80053c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80053a8:	4b21      	ldr	r3, [pc, #132]	; (8005430 <UART_SetConfig+0x92c>)
 80053aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053ac:	e009      	b.n	80053c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053b4:	e005      	b.n	80053c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80053c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80e7 	beq.w	8005598 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	4a19      	ldr	r2, [pc, #100]	; (8005434 <UART_SetConfig+0x930>)
 80053d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053d4:	461a      	mov	r2, r3
 80053d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80053dc:	005a      	lsls	r2, r3, #1
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	085b      	lsrs	r3, r3, #1
 80053e4:	441a      	add	r2, r3
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f2:	2b0f      	cmp	r3, #15
 80053f4:	d916      	bls.n	8005424 <UART_SetConfig+0x920>
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d212      	bcs.n	8005424 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	b29b      	uxth	r3, r3
 8005402:	f023 030f 	bic.w	r3, r3, #15
 8005406:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540a:	085b      	lsrs	r3, r3, #1
 800540c:	b29b      	uxth	r3, r3
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	b29a      	uxth	r2, r3
 8005414:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005416:	4313      	orrs	r3, r2
 8005418:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005420:	60da      	str	r2, [r3, #12]
 8005422:	e0b9      	b.n	8005598 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800542a:	e0b5      	b.n	8005598 <UART_SetConfig+0xa94>
 800542c:	03d09000 	.word	0x03d09000
 8005430:	003d0900 	.word	0x003d0900
 8005434:	0800b194 	.word	0x0800b194
 8005438:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800543c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005440:	2b20      	cmp	r3, #32
 8005442:	dc49      	bgt.n	80054d8 <UART_SetConfig+0x9d4>
 8005444:	2b00      	cmp	r3, #0
 8005446:	db7c      	blt.n	8005542 <UART_SetConfig+0xa3e>
 8005448:	2b20      	cmp	r3, #32
 800544a:	d87a      	bhi.n	8005542 <UART_SetConfig+0xa3e>
 800544c:	a201      	add	r2, pc, #4	; (adr r2, 8005454 <UART_SetConfig+0x950>)
 800544e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005452:	bf00      	nop
 8005454:	080054df 	.word	0x080054df
 8005458:	080054e7 	.word	0x080054e7
 800545c:	08005543 	.word	0x08005543
 8005460:	08005543 	.word	0x08005543
 8005464:	080054ef 	.word	0x080054ef
 8005468:	08005543 	.word	0x08005543
 800546c:	08005543 	.word	0x08005543
 8005470:	08005543 	.word	0x08005543
 8005474:	080054ff 	.word	0x080054ff
 8005478:	08005543 	.word	0x08005543
 800547c:	08005543 	.word	0x08005543
 8005480:	08005543 	.word	0x08005543
 8005484:	08005543 	.word	0x08005543
 8005488:	08005543 	.word	0x08005543
 800548c:	08005543 	.word	0x08005543
 8005490:	08005543 	.word	0x08005543
 8005494:	0800550f 	.word	0x0800550f
 8005498:	08005543 	.word	0x08005543
 800549c:	08005543 	.word	0x08005543
 80054a0:	08005543 	.word	0x08005543
 80054a4:	08005543 	.word	0x08005543
 80054a8:	08005543 	.word	0x08005543
 80054ac:	08005543 	.word	0x08005543
 80054b0:	08005543 	.word	0x08005543
 80054b4:	08005543 	.word	0x08005543
 80054b8:	08005543 	.word	0x08005543
 80054bc:	08005543 	.word	0x08005543
 80054c0:	08005543 	.word	0x08005543
 80054c4:	08005543 	.word	0x08005543
 80054c8:	08005543 	.word	0x08005543
 80054cc:	08005543 	.word	0x08005543
 80054d0:	08005543 	.word	0x08005543
 80054d4:	08005535 	.word	0x08005535
 80054d8:	2b40      	cmp	r3, #64	; 0x40
 80054da:	d02e      	beq.n	800553a <UART_SetConfig+0xa36>
 80054dc:	e031      	b.n	8005542 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054de:	f7fd fb15 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 80054e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80054e4:	e033      	b.n	800554e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054e6:	f7fd fb27 	bl	8002b38 <HAL_RCC_GetPCLK2Freq>
 80054ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80054ec:	e02f      	b.n	800554e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fe fad4 	bl	8003aa0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054fc:	e027      	b.n	800554e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054fe:	f107 0318 	add.w	r3, r7, #24
 8005502:	4618      	mov	r0, r3
 8005504:	f7fe fc20 	bl	8003d48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800550c:	e01f      	b.n	800554e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800550e:	4b2d      	ldr	r3, [pc, #180]	; (80055c4 <UART_SetConfig+0xac0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800551a:	4b2a      	ldr	r3, [pc, #168]	; (80055c4 <UART_SetConfig+0xac0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	08db      	lsrs	r3, r3, #3
 8005520:	f003 0303 	and.w	r3, r3, #3
 8005524:	4a28      	ldr	r2, [pc, #160]	; (80055c8 <UART_SetConfig+0xac4>)
 8005526:	fa22 f303 	lsr.w	r3, r2, r3
 800552a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800552c:	e00f      	b.n	800554e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800552e:	4b26      	ldr	r3, [pc, #152]	; (80055c8 <UART_SetConfig+0xac4>)
 8005530:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005532:	e00c      	b.n	800554e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005534:	4b25      	ldr	r3, [pc, #148]	; (80055cc <UART_SetConfig+0xac8>)
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005538:	e009      	b.n	800554e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800553a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800553e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005540:	e005      	b.n	800554e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800554c:	bf00      	nop
    }

    if (pclk != 0U)
 800554e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005550:	2b00      	cmp	r3, #0
 8005552:	d021      	beq.n	8005598 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <UART_SetConfig+0xacc>)
 800555a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800555e:	461a      	mov	r2, r3
 8005560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005562:	fbb3 f2f2 	udiv	r2, r3, r2
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	085b      	lsrs	r3, r3, #1
 800556c:	441a      	add	r2, r3
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	fbb2 f3f3 	udiv	r3, r2, r3
 8005576:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	2b0f      	cmp	r3, #15
 800557c:	d909      	bls.n	8005592 <UART_SetConfig+0xa8e>
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005584:	d205      	bcs.n	8005592 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	b29a      	uxth	r2, r3
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60da      	str	r2, [r3, #12]
 8005590:	e002      	b.n	8005598 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2201      	movs	r2, #1
 800559c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	2200      	movs	r2, #0
 80055ac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2200      	movs	r2, #0
 80055b2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80055b4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3748      	adds	r7, #72	; 0x48
 80055bc:	46bd      	mov	sp, r7
 80055be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055c2:	bf00      	nop
 80055c4:	58024400 	.word	0x58024400
 80055c8:	03d09000 	.word	0x03d09000
 80055cc:	003d0900 	.word	0x003d0900
 80055d0:	0800b194 	.word	0x0800b194

080055d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01a      	beq.n	80056ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056d2:	d10a      	bne.n	80056ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	605a      	str	r2, [r3, #4]
  }
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af02      	add	r7, sp, #8
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005728:	f7fb fdd6 	bl	80012d8 <HAL_GetTick>
 800572c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b08      	cmp	r3, #8
 800573a:	d10e      	bne.n	800575a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800573c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f82f 	bl	80057ae <UART_WaitOnFlagUntilTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e025      	b.n	80057a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b04      	cmp	r3, #4
 8005766:	d10e      	bne.n	8005786 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f819 	bl	80057ae <UART_WaitOnFlagUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e00f      	b.n	80057a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2220      	movs	r2, #32
 8005792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b09c      	sub	sp, #112	; 0x70
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	603b      	str	r3, [r7, #0]
 80057ba:	4613      	mov	r3, r2
 80057bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057be:	e0a9      	b.n	8005914 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c6:	f000 80a5 	beq.w	8005914 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ca:	f7fb fd85 	bl	80012d8 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d302      	bcc.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80057da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d140      	bne.n	8005862 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057f4:	667b      	str	r3, [r7, #100]	; 0x64
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005800:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005804:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005806:	e841 2300 	strex	r3, r2, [r1]
 800580a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800580c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e6      	bne.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3308      	adds	r3, #8
 8005818:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005824:	f023 0301 	bic.w	r3, r3, #1
 8005828:	663b      	str	r3, [r7, #96]	; 0x60
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3308      	adds	r3, #8
 8005830:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005832:	64ba      	str	r2, [r7, #72]	; 0x48
 8005834:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e5      	bne.n	8005812 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2220      	movs	r2, #32
 800584a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2220      	movs	r2, #32
 8005852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e069      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d051      	beq.n	8005914 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800587a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800587e:	d149      	bne.n	8005914 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005888:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800589e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a8:	637b      	str	r3, [r7, #52]	; 0x34
 80058aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e6      	bne.n	800588a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3308      	adds	r3, #8
 80058c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	613b      	str	r3, [r7, #16]
   return(result);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f023 0301 	bic.w	r3, r3, #1
 80058d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3308      	adds	r3, #8
 80058da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058dc:	623a      	str	r2, [r7, #32]
 80058de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	69f9      	ldr	r1, [r7, #28]
 80058e2:	6a3a      	ldr	r2, [r7, #32]
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e5      	bne.n	80058bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2220      	movs	r2, #32
 8005904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e010      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69da      	ldr	r2, [r3, #28]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	4013      	ands	r3, r2
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	429a      	cmp	r2, r3
 8005922:	bf0c      	ite	eq
 8005924:	2301      	moveq	r3, #1
 8005926:	2300      	movne	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	461a      	mov	r2, r3
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	429a      	cmp	r2, r3
 8005930:	f43f af46 	beq.w	80057c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3770      	adds	r7, #112	; 0x70
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800593e:	b480      	push	{r7}
 8005940:	b085      	sub	sp, #20
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_UARTEx_DisableFifoMode+0x16>
 8005950:	2302      	movs	r3, #2
 8005952:	e027      	b.n	80059a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2224      	movs	r2, #36	; 0x24
 8005960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0201 	bic.w	r2, r2, #1
 800597a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005982:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e02d      	b.n	8005a24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2224      	movs	r2, #36	; 0x24
 80059d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0201 	bic.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f84f 	bl	8005aa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a40:	2302      	movs	r3, #2
 8005a42:	e02d      	b.n	8005aa0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2224      	movs	r2, #36	; 0x24
 8005a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0201 	bic.w	r2, r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f811 	bl	8005aa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d108      	bne.n	8005aca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ac8:	e031      	b.n	8005b2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005aca:	2310      	movs	r3, #16
 8005acc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ace:	2310      	movs	r3, #16
 8005ad0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	0e5b      	lsrs	r3, r3, #25
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	0f5b      	lsrs	r3, r3, #29
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005af2:	7bbb      	ldrb	r3, [r7, #14]
 8005af4:	7b3a      	ldrb	r2, [r7, #12]
 8005af6:	4911      	ldr	r1, [pc, #68]	; (8005b3c <UARTEx_SetNbDataToProcess+0x94>)
 8005af8:	5c8a      	ldrb	r2, [r1, r2]
 8005afa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005afe:	7b3a      	ldrb	r2, [r7, #12]
 8005b00:	490f      	ldr	r1, [pc, #60]	; (8005b40 <UARTEx_SetNbDataToProcess+0x98>)
 8005b02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b04:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	7b7a      	ldrb	r2, [r7, #13]
 8005b14:	4909      	ldr	r1, [pc, #36]	; (8005b3c <UARTEx_SetNbDataToProcess+0x94>)
 8005b16:	5c8a      	ldrb	r2, [r1, r2]
 8005b18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b1c:	7b7a      	ldrb	r2, [r7, #13]
 8005b1e:	4908      	ldr	r1, [pc, #32]	; (8005b40 <UARTEx_SetNbDataToProcess+0x98>)
 8005b20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b22:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005b2e:	bf00      	nop
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	0800b1ac 	.word	0x0800b1ac
 8005b40:	0800b1b4 	.word	0x0800b1b4

08005b44 <__NVIC_SetPriority>:
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	6039      	str	r1, [r7, #0]
 8005b4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	db0a      	blt.n	8005b6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	490c      	ldr	r1, [pc, #48]	; (8005b90 <__NVIC_SetPriority+0x4c>)
 8005b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b62:	0112      	lsls	r2, r2, #4
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	440b      	add	r3, r1
 8005b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005b6c:	e00a      	b.n	8005b84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	4908      	ldr	r1, [pc, #32]	; (8005b94 <__NVIC_SetPriority+0x50>)
 8005b74:	88fb      	ldrh	r3, [r7, #6]
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	3b04      	subs	r3, #4
 8005b7c:	0112      	lsls	r2, r2, #4
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	440b      	add	r3, r1
 8005b82:	761a      	strb	r2, [r3, #24]
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	e000e100 	.word	0xe000e100
 8005b94:	e000ed00 	.word	0xe000ed00

08005b98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005b9c:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <SysTick_Handler+0x1c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005ba0:	f002 f95e 	bl	8007e60 <xTaskGetSchedulerState>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d001      	beq.n	8005bae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005baa:	f000 fd95 	bl	80066d8 <xPortSysTickHandler>
  }
}
 8005bae:	bf00      	nop
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	e000e010 	.word	0xe000e010

08005bb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	f06f 0004 	mvn.w	r0, #4
 8005bc2:	f7ff ffbf 	bl	8005b44 <__NVIC_SetPriority>
#endif
}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
	...

08005bcc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bd2:	f3ef 8305 	mrs	r3, IPSR
 8005bd6:	603b      	str	r3, [r7, #0]
  return(result);
 8005bd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005bde:	f06f 0305 	mvn.w	r3, #5
 8005be2:	607b      	str	r3, [r7, #4]
 8005be4:	e00c      	b.n	8005c00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005be6:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <osKernelInitialize+0x44>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d105      	bne.n	8005bfa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005bee:	4b08      	ldr	r3, [pc, #32]	; (8005c10 <osKernelInitialize+0x44>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	607b      	str	r3, [r7, #4]
 8005bf8:	e002      	b.n	8005c00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8005bfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c00:	687b      	ldr	r3, [r7, #4]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	24000380 	.word	0x24000380

08005c14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c1a:	f3ef 8305 	mrs	r3, IPSR
 8005c1e:	603b      	str	r3, [r7, #0]
  return(result);
 8005c20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005c26:	f06f 0305 	mvn.w	r3, #5
 8005c2a:	607b      	str	r3, [r7, #4]
 8005c2c:	e010      	b.n	8005c50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c2e:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <osKernelStart+0x48>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d109      	bne.n	8005c4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c36:	f7ff ffbf 	bl	8005bb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c3a:	4b08      	ldr	r3, [pc, #32]	; (8005c5c <osKernelStart+0x48>)
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c40:	f001 fcb2 	bl	80075a8 <vTaskStartScheduler>
      stat = osOK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	607b      	str	r3, [r7, #4]
 8005c48:	e002      	b.n	8005c50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c50:	687b      	ldr	r3, [r7, #4]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	24000380 	.word	0x24000380

08005c60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08e      	sub	sp, #56	; 0x38
 8005c64:	af04      	add	r7, sp, #16
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c70:	f3ef 8305 	mrs	r3, IPSR
 8005c74:	617b      	str	r3, [r7, #20]
  return(result);
 8005c76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d17e      	bne.n	8005d7a <osThreadNew+0x11a>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d07b      	beq.n	8005d7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c82:	2380      	movs	r3, #128	; 0x80
 8005c84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c86:	2318      	movs	r3, #24
 8005c88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d045      	beq.n	8005d26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <osThreadNew+0x48>
        name = attr->name;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d008      	beq.n	8005cce <osThreadNew+0x6e>
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	2b38      	cmp	r3, #56	; 0x38
 8005cc0:	d805      	bhi.n	8005cce <osThreadNew+0x6e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <osThreadNew+0x72>
        return (NULL);
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e054      	b.n	8005d7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	089b      	lsrs	r3, r3, #2
 8005ce0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00e      	beq.n	8005d08 <osThreadNew+0xa8>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	2bbb      	cmp	r3, #187	; 0xbb
 8005cf0:	d90a      	bls.n	8005d08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d006      	beq.n	8005d08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <osThreadNew+0xa8>
        mem = 1;
 8005d02:	2301      	movs	r3, #1
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	e010      	b.n	8005d2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10c      	bne.n	8005d2a <osThreadNew+0xca>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d108      	bne.n	8005d2a <osThreadNew+0xca>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d104      	bne.n	8005d2a <osThreadNew+0xca>
          mem = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	e001      	b.n	8005d2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d110      	bne.n	8005d52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d38:	9202      	str	r2, [sp, #8]
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	6a3a      	ldr	r2, [r7, #32]
 8005d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f001 fa42 	bl	80071d0 <xTaskCreateStatic>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	613b      	str	r3, [r7, #16]
 8005d50:	e013      	b.n	8005d7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d110      	bne.n	8005d7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	f107 0310 	add.w	r3, r7, #16
 8005d60:	9301      	str	r3, [sp, #4]
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f001 fa8d 	bl	800728a <xTaskCreate>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d001      	beq.n	8005d7a <osThreadNew+0x11a>
            hTask = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d7a:	693b      	ldr	r3, [r7, #16]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3728      	adds	r7, #40	; 0x28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d8c:	f3ef 8305 	mrs	r3, IPSR
 8005d90:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d92:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <osDelay+0x1c>
    stat = osErrorISR;
 8005d98:	f06f 0305 	mvn.w	r3, #5
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	e007      	b.n	8005db0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f001 fbc8 	bl	8007540 <vTaskDelay>
    }
  }

  return (stat);
 8005db0:	68fb      	ldr	r3, [r7, #12]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4a07      	ldr	r2, [pc, #28]	; (8005de8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005dcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	4a06      	ldr	r2, [pc, #24]	; (8005dec <vApplicationGetIdleTaskMemory+0x30>)
 8005dd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2280      	movs	r2, #128	; 0x80
 8005dd8:	601a      	str	r2, [r3, #0]
}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	24000384 	.word	0x24000384
 8005dec:	24000440 	.word	0x24000440

08005df0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4a07      	ldr	r2, [pc, #28]	; (8005e1c <vApplicationGetTimerTaskMemory+0x2c>)
 8005e00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	4a06      	ldr	r2, [pc, #24]	; (8005e20 <vApplicationGetTimerTaskMemory+0x30>)
 8005e06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e0e:	601a      	str	r2, [r3, #0]
}
 8005e10:	bf00      	nop
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	24000640 	.word	0x24000640
 8005e20:	240006fc 	.word	0x240006fc

08005e24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08a      	sub	sp, #40	; 0x28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e30:	f001 fc2a 	bl	8007688 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e34:	4b5b      	ldr	r3, [pc, #364]	; (8005fa4 <pvPortMalloc+0x180>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e3c:	f000 f920 	bl	8006080 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e40:	4b59      	ldr	r3, [pc, #356]	; (8005fa8 <pvPortMalloc+0x184>)
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4013      	ands	r3, r2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f040 8093 	bne.w	8005f74 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01d      	beq.n	8005e90 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005e54:	2208      	movs	r2, #8
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4413      	add	r3, r2
 8005e5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d014      	beq.n	8005e90 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f023 0307 	bic.w	r3, r3, #7
 8005e6c:	3308      	adds	r3, #8
 8005e6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e8c:	bf00      	nop
 8005e8e:	e7fe      	b.n	8005e8e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d06e      	beq.n	8005f74 <pvPortMalloc+0x150>
 8005e96:	4b45      	ldr	r3, [pc, #276]	; (8005fac <pvPortMalloc+0x188>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d869      	bhi.n	8005f74 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ea0:	4b43      	ldr	r3, [pc, #268]	; (8005fb0 <pvPortMalloc+0x18c>)
 8005ea2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ea4:	4b42      	ldr	r3, [pc, #264]	; (8005fb0 <pvPortMalloc+0x18c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eaa:	e004      	b.n	8005eb6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d903      	bls.n	8005ec8 <pvPortMalloc+0xa4>
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1f1      	bne.n	8005eac <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ec8:	4b36      	ldr	r3, [pc, #216]	; (8005fa4 <pvPortMalloc+0x180>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d050      	beq.n	8005f74 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2208      	movs	r2, #8
 8005ed8:	4413      	add	r3, r2
 8005eda:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	1ad2      	subs	r2, r2, r3
 8005eec:	2308      	movs	r3, #8
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d91f      	bls.n	8005f34 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4413      	add	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <pvPortMalloc+0xf8>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	613b      	str	r3, [r7, #16]
}
 8005f18:	bf00      	nop
 8005f1a:	e7fe      	b.n	8005f1a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	1ad2      	subs	r2, r2, r3
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f2e:	69b8      	ldr	r0, [r7, #24]
 8005f30:	f000 f908 	bl	8006144 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f34:	4b1d      	ldr	r3, [pc, #116]	; (8005fac <pvPortMalloc+0x188>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	4a1b      	ldr	r2, [pc, #108]	; (8005fac <pvPortMalloc+0x188>)
 8005f40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f42:	4b1a      	ldr	r3, [pc, #104]	; (8005fac <pvPortMalloc+0x188>)
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	4b1b      	ldr	r3, [pc, #108]	; (8005fb4 <pvPortMalloc+0x190>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d203      	bcs.n	8005f56 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f4e:	4b17      	ldr	r3, [pc, #92]	; (8005fac <pvPortMalloc+0x188>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a18      	ldr	r2, [pc, #96]	; (8005fb4 <pvPortMalloc+0x190>)
 8005f54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	4b13      	ldr	r3, [pc, #76]	; (8005fa8 <pvPortMalloc+0x184>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005f6a:	4b13      	ldr	r3, [pc, #76]	; (8005fb8 <pvPortMalloc+0x194>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	4a11      	ldr	r2, [pc, #68]	; (8005fb8 <pvPortMalloc+0x194>)
 8005f72:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f74:	f001 fb96 	bl	80076a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	f003 0307 	and.w	r3, r3, #7
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <pvPortMalloc+0x174>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	60fb      	str	r3, [r7, #12]
}
 8005f94:	bf00      	nop
 8005f96:	e7fe      	b.n	8005f96 <pvPortMalloc+0x172>
	return pvReturn;
 8005f98:	69fb      	ldr	r3, [r7, #28]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3728      	adds	r7, #40	; 0x28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	24004704 	.word	0x24004704
 8005fa8:	24004718 	.word	0x24004718
 8005fac:	24004708 	.word	0x24004708
 8005fb0:	240046fc 	.word	0x240046fc
 8005fb4:	2400470c 	.word	0x2400470c
 8005fb8:	24004710 	.word	0x24004710

08005fbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d04d      	beq.n	800606a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005fce:	2308      	movs	r3, #8
 8005fd0:	425b      	negs	r3, r3
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	4b24      	ldr	r3, [pc, #144]	; (8006074 <vPortFree+0xb8>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10a      	bne.n	8006000 <vPortFree+0x44>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	60fb      	str	r3, [r7, #12]
}
 8005ffc:	bf00      	nop
 8005ffe:	e7fe      	b.n	8005ffe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <vPortFree+0x62>
	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	60bb      	str	r3, [r7, #8]
}
 800601a:	bf00      	nop
 800601c:	e7fe      	b.n	800601c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	4b14      	ldr	r3, [pc, #80]	; (8006074 <vPortFree+0xb8>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4013      	ands	r3, r2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01e      	beq.n	800606a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d11a      	bne.n	800606a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	4b0e      	ldr	r3, [pc, #56]	; (8006074 <vPortFree+0xb8>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	43db      	mvns	r3, r3
 800603e:	401a      	ands	r2, r3
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006044:	f001 fb20 	bl	8007688 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <vPortFree+0xbc>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4413      	add	r3, r2
 8006052:	4a09      	ldr	r2, [pc, #36]	; (8006078 <vPortFree+0xbc>)
 8006054:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006056:	6938      	ldr	r0, [r7, #16]
 8006058:	f000 f874 	bl	8006144 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800605c:	4b07      	ldr	r3, [pc, #28]	; (800607c <vPortFree+0xc0>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3301      	adds	r3, #1
 8006062:	4a06      	ldr	r2, [pc, #24]	; (800607c <vPortFree+0xc0>)
 8006064:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006066:	f001 fb1d 	bl	80076a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800606a:	bf00      	nop
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	24004718 	.word	0x24004718
 8006078:	24004708 	.word	0x24004708
 800607c:	24004714 	.word	0x24004714

08006080 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006086:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800608a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800608c:	4b27      	ldr	r3, [pc, #156]	; (800612c <prvHeapInit+0xac>)
 800608e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00c      	beq.n	80060b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3307      	adds	r3, #7
 800609e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0307 	bic.w	r3, r3, #7
 80060a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	4a1f      	ldr	r2, [pc, #124]	; (800612c <prvHeapInit+0xac>)
 80060b0:	4413      	add	r3, r2
 80060b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060b8:	4a1d      	ldr	r2, [pc, #116]	; (8006130 <prvHeapInit+0xb0>)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060be:	4b1c      	ldr	r3, [pc, #112]	; (8006130 <prvHeapInit+0xb0>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	4413      	add	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060cc:	2208      	movs	r2, #8
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	1a9b      	subs	r3, r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0307 	bic.w	r3, r3, #7
 80060da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4a15      	ldr	r2, [pc, #84]	; (8006134 <prvHeapInit+0xb4>)
 80060e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060e2:	4b14      	ldr	r3, [pc, #80]	; (8006134 <prvHeapInit+0xb4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2200      	movs	r2, #0
 80060e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060ea:	4b12      	ldr	r3, [pc, #72]	; (8006134 <prvHeapInit+0xb4>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2200      	movs	r2, #0
 80060f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	1ad2      	subs	r2, r2, r3
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006100:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <prvHeapInit+0xb4>)
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	4a0a      	ldr	r2, [pc, #40]	; (8006138 <prvHeapInit+0xb8>)
 800610e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	4a09      	ldr	r2, [pc, #36]	; (800613c <prvHeapInit+0xbc>)
 8006116:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006118:	4b09      	ldr	r3, [pc, #36]	; (8006140 <prvHeapInit+0xc0>)
 800611a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800611e:	601a      	str	r2, [r3, #0]
}
 8006120:	bf00      	nop
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	24000afc 	.word	0x24000afc
 8006130:	240046fc 	.word	0x240046fc
 8006134:	24004704 	.word	0x24004704
 8006138:	2400470c 	.word	0x2400470c
 800613c:	24004708 	.word	0x24004708
 8006140:	24004718 	.word	0x24004718

08006144 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800614c:	4b28      	ldr	r3, [pc, #160]	; (80061f0 <prvInsertBlockIntoFreeList+0xac>)
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	e002      	b.n	8006158 <prvInsertBlockIntoFreeList+0x14>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	429a      	cmp	r2, r3
 8006160:	d8f7      	bhi.n	8006152 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	4413      	add	r3, r2
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	429a      	cmp	r2, r3
 8006172:	d108      	bne.n	8006186 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	441a      	add	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	441a      	add	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d118      	bne.n	80061cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	4b15      	ldr	r3, [pc, #84]	; (80061f4 <prvInsertBlockIntoFreeList+0xb0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d00d      	beq.n	80061c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	441a      	add	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	e008      	b.n	80061d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061c2:	4b0c      	ldr	r3, [pc, #48]	; (80061f4 <prvInsertBlockIntoFreeList+0xb0>)
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e003      	b.n	80061d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d002      	beq.n	80061e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061e2:	bf00      	nop
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	240046fc 	.word	0x240046fc
 80061f4:	24004704 	.word	0x24004704

080061f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f103 0208 	add.w	r2, r3, #8
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f04f 32ff 	mov.w	r2, #4294967295
 8006210:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f103 0208 	add.w	r2, r3, #8
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f103 0208 	add.w	r2, r3, #8
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006252:	b480      	push	{r7}
 8006254:	b085      	sub	sp, #20
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689a      	ldr	r2, [r3, #8]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	1c5a      	adds	r2, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	601a      	str	r2, [r3, #0]
}
 800628e:	bf00      	nop
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800629a:	b480      	push	{r7}
 800629c:	b085      	sub	sp, #20
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b0:	d103      	bne.n	80062ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	e00c      	b.n	80062d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3308      	adds	r3, #8
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	e002      	b.n	80062c8 <vListInsert+0x2e>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d2f6      	bcs.n	80062c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	1c5a      	adds	r2, r3, #1
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	601a      	str	r2, [r3, #0]
}
 8006300:	bf00      	nop
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6892      	ldr	r2, [r2, #8]
 8006322:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6852      	ldr	r2, [r2, #4]
 800632c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	429a      	cmp	r2, r3
 8006336:	d103      	bne.n	8006340 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689a      	ldr	r2, [r3, #8]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	1e5a      	subs	r2, r3, #1
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3b04      	subs	r3, #4
 8006370:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3b04      	subs	r3, #4
 800637e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f023 0201 	bic.w	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3b04      	subs	r3, #4
 800638e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006390:	4a0c      	ldr	r2, [pc, #48]	; (80063c4 <pxPortInitialiseStack+0x64>)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3b14      	subs	r3, #20
 800639a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3b04      	subs	r3, #4
 80063a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f06f 0202 	mvn.w	r2, #2
 80063ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3b20      	subs	r3, #32
 80063b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063b6:	68fb      	ldr	r3, [r7, #12]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	080063c9 	.word	0x080063c9

080063c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063d2:	4b12      	ldr	r3, [pc, #72]	; (800641c <prvTaskExitError+0x54>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d00a      	beq.n	80063f2 <prvTaskExitError+0x2a>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	60fb      	str	r3, [r7, #12]
}
 80063ee:	bf00      	nop
 80063f0:	e7fe      	b.n	80063f0 <prvTaskExitError+0x28>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	60bb      	str	r3, [r7, #8]
}
 8006404:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006406:	bf00      	nop
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0fc      	beq.n	8006408 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800640e:	bf00      	nop
 8006410:	bf00      	nop
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	24000010 	.word	0x24000010

08006420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006420:	4b07      	ldr	r3, [pc, #28]	; (8006440 <pxCurrentTCBConst2>)
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	6808      	ldr	r0, [r1, #0]
 8006426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f380 8809 	msr	PSP, r0
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	4770      	bx	lr
 800643c:	f3af 8000 	nop.w

08006440 <pxCurrentTCBConst2>:
 8006440:	24004764 	.word	0x24004764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006448:	4808      	ldr	r0, [pc, #32]	; (800646c <prvPortStartFirstTask+0x24>)
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	6800      	ldr	r0, [r0, #0]
 800644e:	f380 8808 	msr	MSP, r0
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	f380 8814 	msr	CONTROL, r0
 800645a:	b662      	cpsie	i
 800645c:	b661      	cpsie	f
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	df00      	svc	0
 8006468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800646a:	bf00      	nop
 800646c:	e000ed08 	.word	0xe000ed08

08006470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006476:	4b46      	ldr	r3, [pc, #280]	; (8006590 <xPortStartScheduler+0x120>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a46      	ldr	r2, [pc, #280]	; (8006594 <xPortStartScheduler+0x124>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d10a      	bne.n	8006496 <xPortStartScheduler+0x26>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	613b      	str	r3, [r7, #16]
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006496:	4b3e      	ldr	r3, [pc, #248]	; (8006590 <xPortStartScheduler+0x120>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a3f      	ldr	r2, [pc, #252]	; (8006598 <xPortStartScheduler+0x128>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d10a      	bne.n	80064b6 <xPortStartScheduler+0x46>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	60fb      	str	r3, [r7, #12]
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064b6:	4b39      	ldr	r3, [pc, #228]	; (800659c <xPortStartScheduler+0x12c>)
 80064b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	22ff      	movs	r2, #255	; 0xff
 80064c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	4b31      	ldr	r3, [pc, #196]	; (80065a0 <xPortStartScheduler+0x130>)
 80064dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064de:	4b31      	ldr	r3, [pc, #196]	; (80065a4 <xPortStartScheduler+0x134>)
 80064e0:	2207      	movs	r2, #7
 80064e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064e4:	e009      	b.n	80064fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80064e6:	4b2f      	ldr	r3, [pc, #188]	; (80065a4 <xPortStartScheduler+0x134>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	4a2d      	ldr	r2, [pc, #180]	; (80065a4 <xPortStartScheduler+0x134>)
 80064ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	2b80      	cmp	r3, #128	; 0x80
 8006504:	d0ef      	beq.n	80064e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006506:	4b27      	ldr	r3, [pc, #156]	; (80065a4 <xPortStartScheduler+0x134>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f1c3 0307 	rsb	r3, r3, #7
 800650e:	2b04      	cmp	r3, #4
 8006510:	d00a      	beq.n	8006528 <xPortStartScheduler+0xb8>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	60bb      	str	r3, [r7, #8]
}
 8006524:	bf00      	nop
 8006526:	e7fe      	b.n	8006526 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006528:	4b1e      	ldr	r3, [pc, #120]	; (80065a4 <xPortStartScheduler+0x134>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	4a1d      	ldr	r2, [pc, #116]	; (80065a4 <xPortStartScheduler+0x134>)
 8006530:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006532:	4b1c      	ldr	r3, [pc, #112]	; (80065a4 <xPortStartScheduler+0x134>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800653a:	4a1a      	ldr	r2, [pc, #104]	; (80065a4 <xPortStartScheduler+0x134>)
 800653c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	b2da      	uxtb	r2, r3
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006546:	4b18      	ldr	r3, [pc, #96]	; (80065a8 <xPortStartScheduler+0x138>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a17      	ldr	r2, [pc, #92]	; (80065a8 <xPortStartScheduler+0x138>)
 800654c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <xPortStartScheduler+0x138>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a14      	ldr	r2, [pc, #80]	; (80065a8 <xPortStartScheduler+0x138>)
 8006558:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800655c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800655e:	f000 f8dd 	bl	800671c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006562:	4b12      	ldr	r3, [pc, #72]	; (80065ac <xPortStartScheduler+0x13c>)
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006568:	f000 f8fc 	bl	8006764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800656c:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <xPortStartScheduler+0x140>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a0f      	ldr	r2, [pc, #60]	; (80065b0 <xPortStartScheduler+0x140>)
 8006572:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006576:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006578:	f7ff ff66 	bl	8006448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800657c:	f001 f9fa 	bl	8007974 <vTaskSwitchContext>
	prvTaskExitError();
 8006580:	f7ff ff22 	bl	80063c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	e000ed00 	.word	0xe000ed00
 8006594:	410fc271 	.word	0x410fc271
 8006598:	410fc270 	.word	0x410fc270
 800659c:	e000e400 	.word	0xe000e400
 80065a0:	2400471c 	.word	0x2400471c
 80065a4:	24004720 	.word	0x24004720
 80065a8:	e000ed20 	.word	0xe000ed20
 80065ac:	24000010 	.word	0x24000010
 80065b0:	e000ef34 	.word	0xe000ef34

080065b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	607b      	str	r3, [r7, #4]
}
 80065cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065ce:	4b0f      	ldr	r3, [pc, #60]	; (800660c <vPortEnterCritical+0x58>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3301      	adds	r3, #1
 80065d4:	4a0d      	ldr	r2, [pc, #52]	; (800660c <vPortEnterCritical+0x58>)
 80065d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065d8:	4b0c      	ldr	r3, [pc, #48]	; (800660c <vPortEnterCritical+0x58>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d10f      	bne.n	8006600 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065e0:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <vPortEnterCritical+0x5c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <vPortEnterCritical+0x4c>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	603b      	str	r3, [r7, #0]
}
 80065fc:	bf00      	nop
 80065fe:	e7fe      	b.n	80065fe <vPortEnterCritical+0x4a>
	}
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	24000010 	.word	0x24000010
 8006610:	e000ed04 	.word	0xe000ed04

08006614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800661a:	4b12      	ldr	r3, [pc, #72]	; (8006664 <vPortExitCritical+0x50>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <vPortExitCritical+0x24>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	607b      	str	r3, [r7, #4]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006638:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <vPortExitCritical+0x50>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3b01      	subs	r3, #1
 800663e:	4a09      	ldr	r2, [pc, #36]	; (8006664 <vPortExitCritical+0x50>)
 8006640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006642:	4b08      	ldr	r3, [pc, #32]	; (8006664 <vPortExitCritical+0x50>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d105      	bne.n	8006656 <vPortExitCritical+0x42>
 800664a:	2300      	movs	r3, #0
 800664c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006654:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	24000010 	.word	0x24000010
	...

08006670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006670:	f3ef 8009 	mrs	r0, PSP
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <pxCurrentTCBConst>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	f01e 0f10 	tst.w	lr, #16
 8006680:	bf08      	it	eq
 8006682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	6010      	str	r0, [r2, #0]
 800668c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006694:	f380 8811 	msr	BASEPRI, r0
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f001 f968 	bl	8007974 <vTaskSwitchContext>
 80066a4:	f04f 0000 	mov.w	r0, #0
 80066a8:	f380 8811 	msr	BASEPRI, r0
 80066ac:	bc09      	pop	{r0, r3}
 80066ae:	6819      	ldr	r1, [r3, #0]
 80066b0:	6808      	ldr	r0, [r1, #0]
 80066b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b6:	f01e 0f10 	tst.w	lr, #16
 80066ba:	bf08      	it	eq
 80066bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066c0:	f380 8809 	msr	PSP, r0
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	f3af 8000 	nop.w

080066d0 <pxCurrentTCBConst>:
 80066d0:	24004764 	.word	0x24004764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
}
 80066f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066f2:	f001 f885 	bl	8007800 <xTaskIncrementTick>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <xPortSysTickHandler+0x40>)
 80066fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	2300      	movs	r3, #0
 8006706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f383 8811 	msr	BASEPRI, r3
}
 800670e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006720:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006726:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <vPortSetupTimerInterrupt+0x38>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800672c:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <vPortSetupTimerInterrupt+0x3c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <vPortSetupTimerInterrupt+0x40>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	099b      	lsrs	r3, r3, #6
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <vPortSetupTimerInterrupt+0x44>)
 800673a:	3b01      	subs	r3, #1
 800673c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800673e:	4b04      	ldr	r3, [pc, #16]	; (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006740:	2207      	movs	r2, #7
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	e000e010 	.word	0xe000e010
 8006754:	e000e018 	.word	0xe000e018
 8006758:	24000000 	.word	0x24000000
 800675c:	10624dd3 	.word	0x10624dd3
 8006760:	e000e014 	.word	0xe000e014

08006764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006774 <vPortEnableVFP+0x10>
 8006768:	6801      	ldr	r1, [r0, #0]
 800676a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800676e:	6001      	str	r1, [r0, #0]
 8006770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006772:	bf00      	nop
 8006774:	e000ed88 	.word	0xe000ed88

08006778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800677e:	f3ef 8305 	mrs	r3, IPSR
 8006782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b0f      	cmp	r3, #15
 8006788:	d914      	bls.n	80067b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800678a:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <vPortValidateInterruptPriority+0x70>)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006794:	4b15      	ldr	r3, [pc, #84]	; (80067ec <vPortValidateInterruptPriority+0x74>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	7afa      	ldrb	r2, [r7, #11]
 800679a:	429a      	cmp	r2, r3
 800679c:	d20a      	bcs.n	80067b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	607b      	str	r3, [r7, #4]
}
 80067b0:	bf00      	nop
 80067b2:	e7fe      	b.n	80067b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067b4:	4b0e      	ldr	r3, [pc, #56]	; (80067f0 <vPortValidateInterruptPriority+0x78>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067bc:	4b0d      	ldr	r3, [pc, #52]	; (80067f4 <vPortValidateInterruptPriority+0x7c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d90a      	bls.n	80067da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	603b      	str	r3, [r7, #0]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <vPortValidateInterruptPriority+0x60>
	}
 80067da:	bf00      	nop
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	e000e3f0 	.word	0xe000e3f0
 80067ec:	2400471c 	.word	0x2400471c
 80067f0:	e000ed0c 	.word	0xe000ed0c
 80067f4:	24004720 	.word	0x24004720

080067f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <xQueueGenericReset+0x2a>
	__asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	60bb      	str	r3, [r7, #8]
}
 800681e:	bf00      	nop
 8006820:	e7fe      	b.n	8006820 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006822:	f7ff fec7 	bl	80065b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682e:	68f9      	ldr	r1, [r7, #12]
 8006830:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006832:	fb01 f303 	mul.w	r3, r1, r3
 8006836:	441a      	add	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006852:	3b01      	subs	r3, #1
 8006854:	68f9      	ldr	r1, [r7, #12]
 8006856:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006858:	fb01 f303 	mul.w	r3, r1, r3
 800685c:	441a      	add	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	22ff      	movs	r2, #255	; 0xff
 8006866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	22ff      	movs	r2, #255	; 0xff
 800686e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d114      	bne.n	80068a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01a      	beq.n	80068b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3310      	adds	r3, #16
 8006884:	4618      	mov	r0, r3
 8006886:	f001 f929 	bl	8007adc <xTaskRemoveFromEventList>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d012      	beq.n	80068b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006890:	4b0c      	ldr	r3, [pc, #48]	; (80068c4 <xQueueGenericReset+0xcc>)
 8006892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	e009      	b.n	80068b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	3310      	adds	r3, #16
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff fca6 	bl	80061f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3324      	adds	r3, #36	; 0x24
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff fca1 	bl	80061f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068b6:	f7ff fead 	bl	8006614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068ba:	2301      	movs	r3, #1
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	e000ed04 	.word	0xe000ed04

080068c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08e      	sub	sp, #56	; 0x38
 80068cc:	af02      	add	r7, sp, #8
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10a      	bne.n	80068f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068ee:	bf00      	nop
 80068f0:	e7fe      	b.n	80068f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10a      	bne.n	800690e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80068f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fc:	f383 8811 	msr	BASEPRI, r3
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
}
 800690a:	bf00      	nop
 800690c:	e7fe      	b.n	800690c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <xQueueGenericCreateStatic+0x52>
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <xQueueGenericCreateStatic+0x56>
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <xQueueGenericCreateStatic+0x58>
 800691e:	2300      	movs	r3, #0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10a      	bne.n	800693a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	623b      	str	r3, [r7, #32]
}
 8006936:	bf00      	nop
 8006938:	e7fe      	b.n	8006938 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d102      	bne.n	8006946 <xQueueGenericCreateStatic+0x7e>
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <xQueueGenericCreateStatic+0x82>
 8006946:	2301      	movs	r3, #1
 8006948:	e000      	b.n	800694c <xQueueGenericCreateStatic+0x84>
 800694a:	2300      	movs	r3, #0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	61fb      	str	r3, [r7, #28]
}
 8006962:	bf00      	nop
 8006964:	e7fe      	b.n	8006964 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006966:	2350      	movs	r3, #80	; 0x50
 8006968:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2b50      	cmp	r3, #80	; 0x50
 800696e:	d00a      	beq.n	8006986 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	61bb      	str	r3, [r7, #24]
}
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006986:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800698c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00d      	beq.n	80069ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800699a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800699e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	4613      	mov	r3, r2
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	68b9      	ldr	r1, [r7, #8]
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 f805 	bl	80069b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3730      	adds	r7, #48	; 0x30
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d103      	bne.n	80069d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	e002      	b.n	80069da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069e6:	2101      	movs	r1, #1
 80069e8:	69b8      	ldr	r0, [r7, #24]
 80069ea:	f7ff ff05 	bl	80067f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	78fa      	ldrb	r2, [r7, #3]
 80069f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069f6:	bf00      	nop
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08e      	sub	sp, #56	; 0x38
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10a      	bne.n	8006a32 <xQueueGenericSend+0x32>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d103      	bne.n	8006a40 <xQueueGenericSend+0x40>
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <xQueueGenericSend+0x44>
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <xQueueGenericSend+0x46>
 8006a44:	2300      	movs	r3, #0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10a      	bne.n	8006a60 <xQueueGenericSend+0x60>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a5c:	bf00      	nop
 8006a5e:	e7fe      	b.n	8006a5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d103      	bne.n	8006a6e <xQueueGenericSend+0x6e>
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <xQueueGenericSend+0x72>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e000      	b.n	8006a74 <xQueueGenericSend+0x74>
 8006a72:	2300      	movs	r3, #0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10a      	bne.n	8006a8e <xQueueGenericSend+0x8e>
	__asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	623b      	str	r3, [r7, #32]
}
 8006a8a:	bf00      	nop
 8006a8c:	e7fe      	b.n	8006a8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a8e:	f001 f9e7 	bl	8007e60 <xTaskGetSchedulerState>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d102      	bne.n	8006a9e <xQueueGenericSend+0x9e>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <xQueueGenericSend+0xa2>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e000      	b.n	8006aa4 <xQueueGenericSend+0xa4>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10a      	bne.n	8006abe <xQueueGenericSend+0xbe>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	61fb      	str	r3, [r7, #28]
}
 8006aba:	bf00      	nop
 8006abc:	e7fe      	b.n	8006abc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006abe:	f7ff fd79 	bl	80065b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d302      	bcc.n	8006ad4 <xQueueGenericSend+0xd4>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d129      	bne.n	8006b28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	68b9      	ldr	r1, [r7, #8]
 8006ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ada:	f000 fa0b 	bl	8006ef4 <prvCopyDataToQueue>
 8006ade:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d010      	beq.n	8006b0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	3324      	adds	r3, #36	; 0x24
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 fff5 	bl	8007adc <xTaskRemoveFromEventList>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d013      	beq.n	8006b20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006af8:	4b3f      	ldr	r3, [pc, #252]	; (8006bf8 <xQueueGenericSend+0x1f8>)
 8006afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	e00a      	b.n	8006b20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d007      	beq.n	8006b20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b10:	4b39      	ldr	r3, [pc, #228]	; (8006bf8 <xQueueGenericSend+0x1f8>)
 8006b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b20:	f7ff fd78 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e063      	b.n	8006bf0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d103      	bne.n	8006b36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b2e:	f7ff fd71 	bl	8006614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e05c      	b.n	8006bf0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d106      	bne.n	8006b4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b3c:	f107 0314 	add.w	r3, r7, #20
 8006b40:	4618      	mov	r0, r3
 8006b42:	f001 f82f 	bl	8007ba4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b46:	2301      	movs	r3, #1
 8006b48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b4a:	f7ff fd63 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b4e:	f000 fd9b 	bl	8007688 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b52:	f7ff fd2f 	bl	80065b4 <vPortEnterCritical>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b5c:	b25b      	sxtb	r3, r3
 8006b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b62:	d103      	bne.n	8006b6c <xQueueGenericSend+0x16c>
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b72:	b25b      	sxtb	r3, r3
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b78:	d103      	bne.n	8006b82 <xQueueGenericSend+0x182>
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b82:	f7ff fd47 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b86:	1d3a      	adds	r2, r7, #4
 8006b88:	f107 0314 	add.w	r3, r7, #20
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f001 f81e 	bl	8007bd0 <xTaskCheckForTimeOut>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d124      	bne.n	8006be4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b9c:	f000 faa2 	bl	80070e4 <prvIsQueueFull>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d018      	beq.n	8006bd8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	3310      	adds	r3, #16
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	4611      	mov	r1, r2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 ff44 	bl	8007a3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bb6:	f000 fa2d 	bl	8007014 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006bba:	f000 fd73 	bl	80076a4 <xTaskResumeAll>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f47f af7c 	bne.w	8006abe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <xQueueGenericSend+0x1f8>)
 8006bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	e772      	b.n	8006abe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bda:	f000 fa1b 	bl	8007014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bde:	f000 fd61 	bl	80076a4 <xTaskResumeAll>
 8006be2:	e76c      	b.n	8006abe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006be6:	f000 fa15 	bl	8007014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bea:	f000 fd5b 	bl	80076a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006bee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3738      	adds	r7, #56	; 0x38
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b090      	sub	sp, #64	; 0x40
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10a      	bne.n	8006c2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c26:	bf00      	nop
 8006c28:	e7fe      	b.n	8006c28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d103      	bne.n	8006c38 <xQueueGenericSendFromISR+0x3c>
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <xQueueGenericSendFromISR+0x40>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e000      	b.n	8006c3e <xQueueGenericSendFromISR+0x42>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c54:	bf00      	nop
 8006c56:	e7fe      	b.n	8006c56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d103      	bne.n	8006c66 <xQueueGenericSendFromISR+0x6a>
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d101      	bne.n	8006c6a <xQueueGenericSendFromISR+0x6e>
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <xQueueGenericSendFromISR+0x70>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10a      	bne.n	8006c86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	623b      	str	r3, [r7, #32]
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c86:	f7ff fd77 	bl	8006778 <vPortValidateInterruptPriority>
	__asm volatile
 8006c8a:	f3ef 8211 	mrs	r2, BASEPRI
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	61fa      	str	r2, [r7, #28]
 8006ca0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ca4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d302      	bcc.n	8006cb8 <xQueueGenericSendFromISR+0xbc>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d12f      	bne.n	8006d18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006cce:	f000 f911 	bl	8006ef4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cda:	d112      	bne.n	8006d02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d016      	beq.n	8006d12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce6:	3324      	adds	r3, #36	; 0x24
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 fef7 	bl	8007adc <xTaskRemoveFromEventList>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00e      	beq.n	8006d12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00b      	beq.n	8006d12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	e007      	b.n	8006d12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d06:	3301      	adds	r3, #1
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	b25a      	sxtb	r2, r3
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d12:	2301      	movs	r3, #1
 8006d14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006d16:	e001      	b.n	8006d1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f383 8811 	msr	BASEPRI, r3
}
 8006d26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3740      	adds	r7, #64	; 0x40
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08c      	sub	sp, #48	; 0x30
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d40:	2300      	movs	r3, #0
 8006d42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10a      	bne.n	8006d64 <xQueueReceive+0x30>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	623b      	str	r3, [r7, #32]
}
 8006d60:	bf00      	nop
 8006d62:	e7fe      	b.n	8006d62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d103      	bne.n	8006d72 <xQueueReceive+0x3e>
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <xQueueReceive+0x42>
 8006d72:	2301      	movs	r3, #1
 8006d74:	e000      	b.n	8006d78 <xQueueReceive+0x44>
 8006d76:	2300      	movs	r3, #0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <xQueueReceive+0x5e>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	61fb      	str	r3, [r7, #28]
}
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d92:	f001 f865 	bl	8007e60 <xTaskGetSchedulerState>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d102      	bne.n	8006da2 <xQueueReceive+0x6e>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <xQueueReceive+0x72>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <xQueueReceive+0x74>
 8006da6:	2300      	movs	r3, #0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10a      	bne.n	8006dc2 <xQueueReceive+0x8e>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	61bb      	str	r3, [r7, #24]
}
 8006dbe:	bf00      	nop
 8006dc0:	e7fe      	b.n	8006dc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dc2:	f7ff fbf7 	bl	80065b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d01f      	beq.n	8006e12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dd2:	68b9      	ldr	r1, [r7, #8]
 8006dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dd6:	f000 f8f7 	bl	8006fc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	1e5a      	subs	r2, r3, #1
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00f      	beq.n	8006e0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	3310      	adds	r3, #16
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fe74 	bl	8007adc <xTaskRemoveFromEventList>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d007      	beq.n	8006e0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dfa:	4b3d      	ldr	r3, [pc, #244]	; (8006ef0 <xQueueReceive+0x1bc>)
 8006dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e0a:	f7ff fc03 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e069      	b.n	8006ee6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d103      	bne.n	8006e20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e18:	f7ff fbfc 	bl	8006614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e062      	b.n	8006ee6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d106      	bne.n	8006e34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e26:	f107 0310 	add.w	r3, r7, #16
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 feba 	bl	8007ba4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e30:	2301      	movs	r3, #1
 8006e32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e34:	f7ff fbee 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e38:	f000 fc26 	bl	8007688 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e3c:	f7ff fbba 	bl	80065b4 <vPortEnterCritical>
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e46:	b25b      	sxtb	r3, r3
 8006e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4c:	d103      	bne.n	8006e56 <xQueueReceive+0x122>
 8006e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e5c:	b25b      	sxtb	r3, r3
 8006e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e62:	d103      	bne.n	8006e6c <xQueueReceive+0x138>
 8006e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e6c:	f7ff fbd2 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e70:	1d3a      	adds	r2, r7, #4
 8006e72:	f107 0310 	add.w	r3, r7, #16
 8006e76:	4611      	mov	r1, r2
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fea9 	bl	8007bd0 <xTaskCheckForTimeOut>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d123      	bne.n	8006ecc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e86:	f000 f917 	bl	80070b8 <prvIsQueueEmpty>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d017      	beq.n	8006ec0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e92:	3324      	adds	r3, #36	; 0x24
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	4611      	mov	r1, r2
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 fdcf 	bl	8007a3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ea0:	f000 f8b8 	bl	8007014 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ea4:	f000 fbfe 	bl	80076a4 <xTaskResumeAll>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d189      	bne.n	8006dc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006eae:	4b10      	ldr	r3, [pc, #64]	; (8006ef0 <xQueueReceive+0x1bc>)
 8006eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	e780      	b.n	8006dc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ec2:	f000 f8a7 	bl	8007014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ec6:	f000 fbed 	bl	80076a4 <xTaskResumeAll>
 8006eca:	e77a      	b.n	8006dc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ece:	f000 f8a1 	bl	8007014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ed2:	f000 fbe7 	bl	80076a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ed8:	f000 f8ee 	bl	80070b8 <prvIsQueueEmpty>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f43f af6f 	beq.w	8006dc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ee4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3730      	adds	r7, #48	; 0x30
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	e000ed04 	.word	0xe000ed04

08006ef4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f00:	2300      	movs	r3, #0
 8006f02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10d      	bne.n	8006f2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d14d      	bne.n	8006fb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 ffbc 	bl	8007e9c <xTaskPriorityDisinherit>
 8006f24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	609a      	str	r2, [r3, #8]
 8006f2c:	e043      	b.n	8006fb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d119      	bne.n	8006f68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6858      	ldr	r0, [r3, #4]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	f001 fcdf 	bl	8008902 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	441a      	add	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d32b      	bcc.n	8006fb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	605a      	str	r2, [r3, #4]
 8006f66:	e026      	b.n	8006fb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	68d8      	ldr	r0, [r3, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f70:	461a      	mov	r2, r3
 8006f72:	68b9      	ldr	r1, [r7, #8]
 8006f74:	f001 fcc5 	bl	8008902 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f80:	425b      	negs	r3, r3
 8006f82:	441a      	add	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d207      	bcs.n	8006fa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9c:	425b      	negs	r3, r3
 8006f9e:	441a      	add	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d105      	bne.n	8006fb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006fbe:	697b      	ldr	r3, [r7, #20]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d018      	beq.n	800700c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	441a      	add	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68da      	ldr	r2, [r3, #12]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d303      	bcc.n	8006ffc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68d9      	ldr	r1, [r3, #12]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007004:	461a      	mov	r2, r3
 8007006:	6838      	ldr	r0, [r7, #0]
 8007008:	f001 fc7b 	bl	8008902 <memcpy>
	}
}
 800700c:	bf00      	nop
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800701c:	f7ff faca 	bl	80065b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007026:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007028:	e011      	b.n	800704e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	2b00      	cmp	r3, #0
 8007030:	d012      	beq.n	8007058 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3324      	adds	r3, #36	; 0x24
 8007036:	4618      	mov	r0, r3
 8007038:	f000 fd50 	bl	8007adc <xTaskRemoveFromEventList>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007042:	f000 fe27 	bl	8007c94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007046:	7bfb      	ldrb	r3, [r7, #15]
 8007048:	3b01      	subs	r3, #1
 800704a:	b2db      	uxtb	r3, r3
 800704c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800704e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007052:	2b00      	cmp	r3, #0
 8007054:	dce9      	bgt.n	800702a <prvUnlockQueue+0x16>
 8007056:	e000      	b.n	800705a <prvUnlockQueue+0x46>
					break;
 8007058:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	22ff      	movs	r2, #255	; 0xff
 800705e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007062:	f7ff fad7 	bl	8006614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007066:	f7ff faa5 	bl	80065b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007070:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007072:	e011      	b.n	8007098 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d012      	beq.n	80070a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3310      	adds	r3, #16
 8007080:	4618      	mov	r0, r3
 8007082:	f000 fd2b 	bl	8007adc <xTaskRemoveFromEventList>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800708c:	f000 fe02 	bl	8007c94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	3b01      	subs	r3, #1
 8007094:	b2db      	uxtb	r3, r3
 8007096:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800709c:	2b00      	cmp	r3, #0
 800709e:	dce9      	bgt.n	8007074 <prvUnlockQueue+0x60>
 80070a0:	e000      	b.n	80070a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80070a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	22ff      	movs	r2, #255	; 0xff
 80070a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80070ac:	f7ff fab2 	bl	8006614 <vPortExitCritical>
}
 80070b0:	bf00      	nop
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070c0:	f7ff fa78 	bl	80065b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d102      	bne.n	80070d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070cc:	2301      	movs	r3, #1
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	e001      	b.n	80070d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070d2:	2300      	movs	r3, #0
 80070d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070d6:	f7ff fa9d 	bl	8006614 <vPortExitCritical>

	return xReturn;
 80070da:	68fb      	ldr	r3, [r7, #12]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070ec:	f7ff fa62 	bl	80065b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d102      	bne.n	8007102 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070fc:	2301      	movs	r3, #1
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	e001      	b.n	8007106 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007106:	f7ff fa85 	bl	8006614 <vPortExitCritical>

	return xReturn;
 800710a:	68fb      	ldr	r3, [r7, #12]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800711e:	2300      	movs	r3, #0
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	e014      	b.n	800714e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007124:	4a0f      	ldr	r2, [pc, #60]	; (8007164 <vQueueAddToRegistry+0x50>)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10b      	bne.n	8007148 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007130:	490c      	ldr	r1, [pc, #48]	; (8007164 <vQueueAddToRegistry+0x50>)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800713a:	4a0a      	ldr	r2, [pc, #40]	; (8007164 <vQueueAddToRegistry+0x50>)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	4413      	add	r3, r2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007146:	e006      	b.n	8007156 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3301      	adds	r3, #1
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b07      	cmp	r3, #7
 8007152:	d9e7      	bls.n	8007124 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007154:	bf00      	nop
 8007156:	bf00      	nop
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	24004724 	.word	0x24004724

08007168 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007178:	f7ff fa1c 	bl	80065b4 <vPortEnterCritical>
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007182:	b25b      	sxtb	r3, r3
 8007184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007188:	d103      	bne.n	8007192 <vQueueWaitForMessageRestricted+0x2a>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007198:	b25b      	sxtb	r3, r3
 800719a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719e:	d103      	bne.n	80071a8 <vQueueWaitForMessageRestricted+0x40>
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071a8:	f7ff fa34 	bl	8006614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d106      	bne.n	80071c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	3324      	adds	r3, #36	; 0x24
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	68b9      	ldr	r1, [r7, #8]
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fc61 	bl	8007a84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071c2:	6978      	ldr	r0, [r7, #20]
 80071c4:	f7ff ff26 	bl	8007014 <prvUnlockQueue>
	}
 80071c8:	bf00      	nop
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08e      	sub	sp, #56	; 0x38
 80071d4:	af04      	add	r7, sp, #16
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10a      	bne.n	80071fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	623b      	str	r3, [r7, #32]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10a      	bne.n	8007216 <xTaskCreateStatic+0x46>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	61fb      	str	r3, [r7, #28]
}
 8007212:	bf00      	nop
 8007214:	e7fe      	b.n	8007214 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007216:	23bc      	movs	r3, #188	; 0xbc
 8007218:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2bbc      	cmp	r3, #188	; 0xbc
 800721e:	d00a      	beq.n	8007236 <xTaskCreateStatic+0x66>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	61bb      	str	r3, [r7, #24]
}
 8007232:	bf00      	nop
 8007234:	e7fe      	b.n	8007234 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007236:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723a:	2b00      	cmp	r3, #0
 800723c:	d01e      	beq.n	800727c <xTaskCreateStatic+0xac>
 800723e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007240:	2b00      	cmp	r3, #0
 8007242:	d01b      	beq.n	800727c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800724c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	2202      	movs	r2, #2
 8007252:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007256:	2300      	movs	r3, #0
 8007258:	9303      	str	r3, [sp, #12]
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	9302      	str	r3, [sp, #8]
 800725e:	f107 0314 	add.w	r3, r7, #20
 8007262:	9301      	str	r3, [sp, #4]
 8007264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	68b9      	ldr	r1, [r7, #8]
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 f850 	bl	8007314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007276:	f000 f8f3 	bl	8007460 <prvAddNewTaskToReadyList>
 800727a:	e001      	b.n	8007280 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800727c:	2300      	movs	r3, #0
 800727e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007280:	697b      	ldr	r3, [r7, #20]
	}
 8007282:	4618      	mov	r0, r3
 8007284:	3728      	adds	r7, #40	; 0x28
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800728a:	b580      	push	{r7, lr}
 800728c:	b08c      	sub	sp, #48	; 0x30
 800728e:	af04      	add	r7, sp, #16
 8007290:	60f8      	str	r0, [r7, #12]
 8007292:	60b9      	str	r1, [r7, #8]
 8007294:	603b      	str	r3, [r7, #0]
 8007296:	4613      	mov	r3, r2
 8007298:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800729a:	88fb      	ldrh	r3, [r7, #6]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fe fdc0 	bl	8005e24 <pvPortMalloc>
 80072a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00e      	beq.n	80072ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072ac:	20bc      	movs	r0, #188	; 0xbc
 80072ae:	f7fe fdb9 	bl	8005e24 <pvPortMalloc>
 80072b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	631a      	str	r2, [r3, #48]	; 0x30
 80072c0:	e005      	b.n	80072ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072c2:	6978      	ldr	r0, [r7, #20]
 80072c4:	f7fe fe7a 	bl	8005fbc <vPortFree>
 80072c8:	e001      	b.n	80072ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072ca:	2300      	movs	r3, #0
 80072cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d017      	beq.n	8007304 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072dc:	88fa      	ldrh	r2, [r7, #6]
 80072de:	2300      	movs	r3, #0
 80072e0:	9303      	str	r3, [sp, #12]
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	9302      	str	r3, [sp, #8]
 80072e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68b9      	ldr	r1, [r7, #8]
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 f80e 	bl	8007314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072f8:	69f8      	ldr	r0, [r7, #28]
 80072fa:	f000 f8b1 	bl	8007460 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072fe:	2301      	movs	r3, #1
 8007300:	61bb      	str	r3, [r7, #24]
 8007302:	e002      	b.n	800730a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007304:	f04f 33ff 	mov.w	r3, #4294967295
 8007308:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800730a:	69bb      	ldr	r3, [r7, #24]
	}
 800730c:	4618      	mov	r0, r3
 800730e:	3720      	adds	r7, #32
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
 8007320:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	461a      	mov	r2, r3
 800732c:	21a5      	movs	r1, #165	; 0xa5
 800732e:	f001 faf6 	bl	800891e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007336:	6879      	ldr	r1, [r7, #4]
 8007338:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800733c:	440b      	add	r3, r1
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	f023 0307 	bic.w	r3, r3, #7
 800734a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	617b      	str	r3, [r7, #20]
}
 8007368:	bf00      	nop
 800736a:	e7fe      	b.n	800736a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d01f      	beq.n	80073b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007372:	2300      	movs	r3, #0
 8007374:	61fb      	str	r3, [r7, #28]
 8007376:	e012      	b.n	800739e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	4413      	add	r3, r2
 800737e:	7819      	ldrb	r1, [r3, #0]
 8007380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	4413      	add	r3, r2
 8007386:	3334      	adds	r3, #52	; 0x34
 8007388:	460a      	mov	r2, r1
 800738a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	4413      	add	r3, r2
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d006      	beq.n	80073a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	3301      	adds	r3, #1
 800739c:	61fb      	str	r3, [r7, #28]
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	2b0f      	cmp	r3, #15
 80073a2:	d9e9      	bls.n	8007378 <prvInitialiseNewTask+0x64>
 80073a4:	e000      	b.n	80073a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80073a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073b0:	e003      	b.n	80073ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073bc:	2b37      	cmp	r3, #55	; 0x37
 80073be:	d901      	bls.n	80073c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073c0:	2337      	movs	r3, #55	; 0x37
 80073c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	2200      	movs	r2, #0
 80073d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	3304      	adds	r3, #4
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fe ff2c 	bl	8006238 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e2:	3318      	adds	r3, #24
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fe ff27 	bl	8006238 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	2200      	movs	r2, #0
 8007404:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	2200      	movs	r2, #0
 800740c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007412:	3354      	adds	r3, #84	; 0x54
 8007414:	2260      	movs	r2, #96	; 0x60
 8007416:	2100      	movs	r1, #0
 8007418:	4618      	mov	r0, r3
 800741a:	f001 fa80 	bl	800891e <memset>
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	4a0c      	ldr	r2, [pc, #48]	; (8007454 <prvInitialiseNewTask+0x140>)
 8007422:	659a      	str	r2, [r3, #88]	; 0x58
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	4a0c      	ldr	r2, [pc, #48]	; (8007458 <prvInitialiseNewTask+0x144>)
 8007428:	65da      	str	r2, [r3, #92]	; 0x5c
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	4a0b      	ldr	r2, [pc, #44]	; (800745c <prvInitialiseNewTask+0x148>)
 800742e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007430:	683a      	ldr	r2, [r7, #0]
 8007432:	68f9      	ldr	r1, [r7, #12]
 8007434:	69b8      	ldr	r0, [r7, #24]
 8007436:	f7fe ff93 	bl	8006360 <pxPortInitialiseStack>
 800743a:	4602      	mov	r2, r0
 800743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800744a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800744c:	bf00      	nop
 800744e:	3720      	adds	r7, #32
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	0800b1dc 	.word	0x0800b1dc
 8007458:	0800b1fc 	.word	0x0800b1fc
 800745c:	0800b1bc 	.word	0x0800b1bc

08007460 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007468:	f7ff f8a4 	bl	80065b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800746c:	4b2d      	ldr	r3, [pc, #180]	; (8007524 <prvAddNewTaskToReadyList+0xc4>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3301      	adds	r3, #1
 8007472:	4a2c      	ldr	r2, [pc, #176]	; (8007524 <prvAddNewTaskToReadyList+0xc4>)
 8007474:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007476:	4b2c      	ldr	r3, [pc, #176]	; (8007528 <prvAddNewTaskToReadyList+0xc8>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800747e:	4a2a      	ldr	r2, [pc, #168]	; (8007528 <prvAddNewTaskToReadyList+0xc8>)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007484:	4b27      	ldr	r3, [pc, #156]	; (8007524 <prvAddNewTaskToReadyList+0xc4>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d110      	bne.n	80074ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800748c:	f000 fc26 	bl	8007cdc <prvInitialiseTaskLists>
 8007490:	e00d      	b.n	80074ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007492:	4b26      	ldr	r3, [pc, #152]	; (800752c <prvAddNewTaskToReadyList+0xcc>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d109      	bne.n	80074ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800749a:	4b23      	ldr	r3, [pc, #140]	; (8007528 <prvAddNewTaskToReadyList+0xc8>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d802      	bhi.n	80074ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074a8:	4a1f      	ldr	r2, [pc, #124]	; (8007528 <prvAddNewTaskToReadyList+0xc8>)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074ae:	4b20      	ldr	r3, [pc, #128]	; (8007530 <prvAddNewTaskToReadyList+0xd0>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3301      	adds	r3, #1
 80074b4:	4a1e      	ldr	r2, [pc, #120]	; (8007530 <prvAddNewTaskToReadyList+0xd0>)
 80074b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074b8:	4b1d      	ldr	r3, [pc, #116]	; (8007530 <prvAddNewTaskToReadyList+0xd0>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c4:	4b1b      	ldr	r3, [pc, #108]	; (8007534 <prvAddNewTaskToReadyList+0xd4>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d903      	bls.n	80074d4 <prvAddNewTaskToReadyList+0x74>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d0:	4a18      	ldr	r2, [pc, #96]	; (8007534 <prvAddNewTaskToReadyList+0xd4>)
 80074d2:	6013      	str	r3, [r2, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d8:	4613      	mov	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4a15      	ldr	r2, [pc, #84]	; (8007538 <prvAddNewTaskToReadyList+0xd8>)
 80074e2:	441a      	add	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	3304      	adds	r3, #4
 80074e8:	4619      	mov	r1, r3
 80074ea:	4610      	mov	r0, r2
 80074ec:	f7fe feb1 	bl	8006252 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074f0:	f7ff f890 	bl	8006614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074f4:	4b0d      	ldr	r3, [pc, #52]	; (800752c <prvAddNewTaskToReadyList+0xcc>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00e      	beq.n	800751a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074fc:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <prvAddNewTaskToReadyList+0xc8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007506:	429a      	cmp	r2, r3
 8007508:	d207      	bcs.n	800751a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800750a:	4b0c      	ldr	r3, [pc, #48]	; (800753c <prvAddNewTaskToReadyList+0xdc>)
 800750c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800751a:	bf00      	nop
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	24004c38 	.word	0x24004c38
 8007528:	24004764 	.word	0x24004764
 800752c:	24004c44 	.word	0x24004c44
 8007530:	24004c54 	.word	0x24004c54
 8007534:	24004c40 	.word	0x24004c40
 8007538:	24004768 	.word	0x24004768
 800753c:	e000ed04 	.word	0xe000ed04

08007540 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007548:	2300      	movs	r3, #0
 800754a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d017      	beq.n	8007582 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007552:	4b13      	ldr	r3, [pc, #76]	; (80075a0 <vTaskDelay+0x60>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <vTaskDelay+0x30>
	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	60bb      	str	r3, [r7, #8]
}
 800756c:	bf00      	nop
 800756e:	e7fe      	b.n	800756e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007570:	f000 f88a 	bl	8007688 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007574:	2100      	movs	r1, #0
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fcfe 	bl	8007f78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800757c:	f000 f892 	bl	80076a4 <xTaskResumeAll>
 8007580:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d107      	bne.n	8007598 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007588:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <vTaskDelay+0x64>)
 800758a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007598:	bf00      	nop
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	24004c60 	.word	0x24004c60
 80075a4:	e000ed04 	.word	0xe000ed04

080075a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08a      	sub	sp, #40	; 0x28
 80075ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075b2:	2300      	movs	r3, #0
 80075b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075b6:	463a      	mov	r2, r7
 80075b8:	1d39      	adds	r1, r7, #4
 80075ba:	f107 0308 	add.w	r3, r7, #8
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe fbfc 	bl	8005dbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	9202      	str	r2, [sp, #8]
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	2300      	movs	r3, #0
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	2300      	movs	r3, #0
 80075d4:	460a      	mov	r2, r1
 80075d6:	4924      	ldr	r1, [pc, #144]	; (8007668 <vTaskStartScheduler+0xc0>)
 80075d8:	4824      	ldr	r0, [pc, #144]	; (800766c <vTaskStartScheduler+0xc4>)
 80075da:	f7ff fdf9 	bl	80071d0 <xTaskCreateStatic>
 80075de:	4603      	mov	r3, r0
 80075e0:	4a23      	ldr	r2, [pc, #140]	; (8007670 <vTaskStartScheduler+0xc8>)
 80075e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075e4:	4b22      	ldr	r3, [pc, #136]	; (8007670 <vTaskStartScheduler+0xc8>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075ec:	2301      	movs	r3, #1
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	e001      	b.n	80075f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d102      	bne.n	8007602 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075fc:	f000 fd10 	bl	8008020 <xTimerCreateTimerTask>
 8007600:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d11b      	bne.n	8007640 <vTaskStartScheduler+0x98>
	__asm volatile
 8007608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	613b      	str	r3, [r7, #16]
}
 800761a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800761c:	4b15      	ldr	r3, [pc, #84]	; (8007674 <vTaskStartScheduler+0xcc>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3354      	adds	r3, #84	; 0x54
 8007622:	4a15      	ldr	r2, [pc, #84]	; (8007678 <vTaskStartScheduler+0xd0>)
 8007624:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007626:	4b15      	ldr	r3, [pc, #84]	; (800767c <vTaskStartScheduler+0xd4>)
 8007628:	f04f 32ff 	mov.w	r2, #4294967295
 800762c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800762e:	4b14      	ldr	r3, [pc, #80]	; (8007680 <vTaskStartScheduler+0xd8>)
 8007630:	2201      	movs	r2, #1
 8007632:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007634:	4b13      	ldr	r3, [pc, #76]	; (8007684 <vTaskStartScheduler+0xdc>)
 8007636:	2200      	movs	r2, #0
 8007638:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800763a:	f7fe ff19 	bl	8006470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800763e:	e00e      	b.n	800765e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007646:	d10a      	bne.n	800765e <vTaskStartScheduler+0xb6>
	__asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	60fb      	str	r3, [r7, #12]
}
 800765a:	bf00      	nop
 800765c:	e7fe      	b.n	800765c <vTaskStartScheduler+0xb4>
}
 800765e:	bf00      	nop
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	0800b148 	.word	0x0800b148
 800766c:	08007cad 	.word	0x08007cad
 8007670:	24004c5c 	.word	0x24004c5c
 8007674:	24004764 	.word	0x24004764
 8007678:	24000014 	.word	0x24000014
 800767c:	24004c58 	.word	0x24004c58
 8007680:	24004c44 	.word	0x24004c44
 8007684:	24004c3c 	.word	0x24004c3c

08007688 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800768c:	4b04      	ldr	r3, [pc, #16]	; (80076a0 <vTaskSuspendAll+0x18>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3301      	adds	r3, #1
 8007692:	4a03      	ldr	r2, [pc, #12]	; (80076a0 <vTaskSuspendAll+0x18>)
 8007694:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007696:	bf00      	nop
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	24004c60 	.word	0x24004c60

080076a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80076aa:	2300      	movs	r3, #0
 80076ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80076b2:	4b42      	ldr	r3, [pc, #264]	; (80077bc <xTaskResumeAll+0x118>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10a      	bne.n	80076d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	603b      	str	r3, [r7, #0]
}
 80076cc:	bf00      	nop
 80076ce:	e7fe      	b.n	80076ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076d0:	f7fe ff70 	bl	80065b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076d4:	4b39      	ldr	r3, [pc, #228]	; (80077bc <xTaskResumeAll+0x118>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3b01      	subs	r3, #1
 80076da:	4a38      	ldr	r2, [pc, #224]	; (80077bc <xTaskResumeAll+0x118>)
 80076dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076de:	4b37      	ldr	r3, [pc, #220]	; (80077bc <xTaskResumeAll+0x118>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d162      	bne.n	80077ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076e6:	4b36      	ldr	r3, [pc, #216]	; (80077c0 <xTaskResumeAll+0x11c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d05e      	beq.n	80077ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076ee:	e02f      	b.n	8007750 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076f0:	4b34      	ldr	r3, [pc, #208]	; (80077c4 <xTaskResumeAll+0x120>)
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3318      	adds	r3, #24
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fe fe05 	bl	800630c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3304      	adds	r3, #4
 8007706:	4618      	mov	r0, r3
 8007708:	f7fe fe00 	bl	800630c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007710:	4b2d      	ldr	r3, [pc, #180]	; (80077c8 <xTaskResumeAll+0x124>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d903      	bls.n	8007720 <xTaskResumeAll+0x7c>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	4a2a      	ldr	r2, [pc, #168]	; (80077c8 <xTaskResumeAll+0x124>)
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4a27      	ldr	r2, [pc, #156]	; (80077cc <xTaskResumeAll+0x128>)
 800772e:	441a      	add	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3304      	adds	r3, #4
 8007734:	4619      	mov	r1, r3
 8007736:	4610      	mov	r0, r2
 8007738:	f7fe fd8b 	bl	8006252 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007740:	4b23      	ldr	r3, [pc, #140]	; (80077d0 <xTaskResumeAll+0x12c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007746:	429a      	cmp	r2, r3
 8007748:	d302      	bcc.n	8007750 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800774a:	4b22      	ldr	r3, [pc, #136]	; (80077d4 <xTaskResumeAll+0x130>)
 800774c:	2201      	movs	r2, #1
 800774e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007750:	4b1c      	ldr	r3, [pc, #112]	; (80077c4 <xTaskResumeAll+0x120>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1cb      	bne.n	80076f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800775e:	f000 fb5f 	bl	8007e20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007762:	4b1d      	ldr	r3, [pc, #116]	; (80077d8 <xTaskResumeAll+0x134>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d010      	beq.n	8007790 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800776e:	f000 f847 	bl	8007800 <xTaskIncrementTick>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007778:	4b16      	ldr	r3, [pc, #88]	; (80077d4 <xTaskResumeAll+0x130>)
 800777a:	2201      	movs	r2, #1
 800777c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3b01      	subs	r3, #1
 8007782:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1f1      	bne.n	800776e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800778a:	4b13      	ldr	r3, [pc, #76]	; (80077d8 <xTaskResumeAll+0x134>)
 800778c:	2200      	movs	r2, #0
 800778e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007790:	4b10      	ldr	r3, [pc, #64]	; (80077d4 <xTaskResumeAll+0x130>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d009      	beq.n	80077ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007798:	2301      	movs	r3, #1
 800779a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800779c:	4b0f      	ldr	r3, [pc, #60]	; (80077dc <xTaskResumeAll+0x138>)
 800779e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077ac:	f7fe ff32 	bl	8006614 <vPortExitCritical>

	return xAlreadyYielded;
 80077b0:	68bb      	ldr	r3, [r7, #8]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	24004c60 	.word	0x24004c60
 80077c0:	24004c38 	.word	0x24004c38
 80077c4:	24004bf8 	.word	0x24004bf8
 80077c8:	24004c40 	.word	0x24004c40
 80077cc:	24004768 	.word	0x24004768
 80077d0:	24004764 	.word	0x24004764
 80077d4:	24004c4c 	.word	0x24004c4c
 80077d8:	24004c48 	.word	0x24004c48
 80077dc:	e000ed04 	.word	0xe000ed04

080077e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80077e6:	4b05      	ldr	r3, [pc, #20]	; (80077fc <xTaskGetTickCount+0x1c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80077ec:	687b      	ldr	r3, [r7, #4]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	24004c3c 	.word	0x24004c3c

08007800 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007806:	2300      	movs	r3, #0
 8007808:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800780a:	4b4f      	ldr	r3, [pc, #316]	; (8007948 <xTaskIncrementTick+0x148>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	f040 808f 	bne.w	8007932 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007814:	4b4d      	ldr	r3, [pc, #308]	; (800794c <xTaskIncrementTick+0x14c>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3301      	adds	r3, #1
 800781a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800781c:	4a4b      	ldr	r2, [pc, #300]	; (800794c <xTaskIncrementTick+0x14c>)
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d120      	bne.n	800786a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007828:	4b49      	ldr	r3, [pc, #292]	; (8007950 <xTaskIncrementTick+0x150>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00a      	beq.n	8007848 <xTaskIncrementTick+0x48>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	603b      	str	r3, [r7, #0]
}
 8007844:	bf00      	nop
 8007846:	e7fe      	b.n	8007846 <xTaskIncrementTick+0x46>
 8007848:	4b41      	ldr	r3, [pc, #260]	; (8007950 <xTaskIncrementTick+0x150>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	4b41      	ldr	r3, [pc, #260]	; (8007954 <xTaskIncrementTick+0x154>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a3f      	ldr	r2, [pc, #252]	; (8007950 <xTaskIncrementTick+0x150>)
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	4a3f      	ldr	r2, [pc, #252]	; (8007954 <xTaskIncrementTick+0x154>)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	4b3e      	ldr	r3, [pc, #248]	; (8007958 <xTaskIncrementTick+0x158>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3301      	adds	r3, #1
 8007862:	4a3d      	ldr	r2, [pc, #244]	; (8007958 <xTaskIncrementTick+0x158>)
 8007864:	6013      	str	r3, [r2, #0]
 8007866:	f000 fadb 	bl	8007e20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800786a:	4b3c      	ldr	r3, [pc, #240]	; (800795c <xTaskIncrementTick+0x15c>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	429a      	cmp	r2, r3
 8007872:	d349      	bcc.n	8007908 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007874:	4b36      	ldr	r3, [pc, #216]	; (8007950 <xTaskIncrementTick+0x150>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d104      	bne.n	8007888 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800787e:	4b37      	ldr	r3, [pc, #220]	; (800795c <xTaskIncrementTick+0x15c>)
 8007880:	f04f 32ff 	mov.w	r2, #4294967295
 8007884:	601a      	str	r2, [r3, #0]
					break;
 8007886:	e03f      	b.n	8007908 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007888:	4b31      	ldr	r3, [pc, #196]	; (8007950 <xTaskIncrementTick+0x150>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	429a      	cmp	r2, r3
 800789e:	d203      	bcs.n	80078a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078a0:	4a2e      	ldr	r2, [pc, #184]	; (800795c <xTaskIncrementTick+0x15c>)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078a6:	e02f      	b.n	8007908 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	3304      	adds	r3, #4
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fe fd2d 	bl	800630c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d004      	beq.n	80078c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	3318      	adds	r3, #24
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fe fd24 	bl	800630c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c8:	4b25      	ldr	r3, [pc, #148]	; (8007960 <xTaskIncrementTick+0x160>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d903      	bls.n	80078d8 <xTaskIncrementTick+0xd8>
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d4:	4a22      	ldr	r2, [pc, #136]	; (8007960 <xTaskIncrementTick+0x160>)
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4a1f      	ldr	r2, [pc, #124]	; (8007964 <xTaskIncrementTick+0x164>)
 80078e6:	441a      	add	r2, r3
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	3304      	adds	r3, #4
 80078ec:	4619      	mov	r1, r3
 80078ee:	4610      	mov	r0, r2
 80078f0:	f7fe fcaf 	bl	8006252 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f8:	4b1b      	ldr	r3, [pc, #108]	; (8007968 <xTaskIncrementTick+0x168>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fe:	429a      	cmp	r2, r3
 8007900:	d3b8      	bcc.n	8007874 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007902:	2301      	movs	r3, #1
 8007904:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007906:	e7b5      	b.n	8007874 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007908:	4b17      	ldr	r3, [pc, #92]	; (8007968 <xTaskIncrementTick+0x168>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790e:	4915      	ldr	r1, [pc, #84]	; (8007964 <xTaskIncrementTick+0x164>)
 8007910:	4613      	mov	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	440b      	add	r3, r1
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d901      	bls.n	8007924 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007920:	2301      	movs	r3, #1
 8007922:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007924:	4b11      	ldr	r3, [pc, #68]	; (800796c <xTaskIncrementTick+0x16c>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d007      	beq.n	800793c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800792c:	2301      	movs	r3, #1
 800792e:	617b      	str	r3, [r7, #20]
 8007930:	e004      	b.n	800793c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007932:	4b0f      	ldr	r3, [pc, #60]	; (8007970 <xTaskIncrementTick+0x170>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3301      	adds	r3, #1
 8007938:	4a0d      	ldr	r2, [pc, #52]	; (8007970 <xTaskIncrementTick+0x170>)
 800793a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800793c:	697b      	ldr	r3, [r7, #20]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	24004c60 	.word	0x24004c60
 800794c:	24004c3c 	.word	0x24004c3c
 8007950:	24004bf0 	.word	0x24004bf0
 8007954:	24004bf4 	.word	0x24004bf4
 8007958:	24004c50 	.word	0x24004c50
 800795c:	24004c58 	.word	0x24004c58
 8007960:	24004c40 	.word	0x24004c40
 8007964:	24004768 	.word	0x24004768
 8007968:	24004764 	.word	0x24004764
 800796c:	24004c4c 	.word	0x24004c4c
 8007970:	24004c48 	.word	0x24004c48

08007974 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800797a:	4b2a      	ldr	r3, [pc, #168]	; (8007a24 <vTaskSwitchContext+0xb0>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007982:	4b29      	ldr	r3, [pc, #164]	; (8007a28 <vTaskSwitchContext+0xb4>)
 8007984:	2201      	movs	r2, #1
 8007986:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007988:	e046      	b.n	8007a18 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800798a:	4b27      	ldr	r3, [pc, #156]	; (8007a28 <vTaskSwitchContext+0xb4>)
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007990:	4b26      	ldr	r3, [pc, #152]	; (8007a2c <vTaskSwitchContext+0xb8>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	e010      	b.n	80079ba <vTaskSwitchContext+0x46>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	607b      	str	r3, [r7, #4]
}
 80079b0:	bf00      	nop
 80079b2:	e7fe      	b.n	80079b2 <vTaskSwitchContext+0x3e>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	491d      	ldr	r1, [pc, #116]	; (8007a30 <vTaskSwitchContext+0xbc>)
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	4613      	mov	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	440b      	add	r3, r1
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0e4      	beq.n	8007998 <vTaskSwitchContext+0x24>
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4a15      	ldr	r2, [pc, #84]	; (8007a30 <vTaskSwitchContext+0xbc>)
 80079da:	4413      	add	r3, r2
 80079dc:	60bb      	str	r3, [r7, #8]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	605a      	str	r2, [r3, #4]
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	3308      	adds	r3, #8
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d104      	bne.n	80079fe <vTaskSwitchContext+0x8a>
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	605a      	str	r2, [r3, #4]
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	4a0b      	ldr	r2, [pc, #44]	; (8007a34 <vTaskSwitchContext+0xc0>)
 8007a06:	6013      	str	r3, [r2, #0]
 8007a08:	4a08      	ldr	r2, [pc, #32]	; (8007a2c <vTaskSwitchContext+0xb8>)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a0e:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <vTaskSwitchContext+0xc0>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3354      	adds	r3, #84	; 0x54
 8007a14:	4a08      	ldr	r2, [pc, #32]	; (8007a38 <vTaskSwitchContext+0xc4>)
 8007a16:	6013      	str	r3, [r2, #0]
}
 8007a18:	bf00      	nop
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	24004c60 	.word	0x24004c60
 8007a28:	24004c4c 	.word	0x24004c4c
 8007a2c:	24004c40 	.word	0x24004c40
 8007a30:	24004768 	.word	0x24004768
 8007a34:	24004764 	.word	0x24004764
 8007a38:	24000014 	.word	0x24000014

08007a3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10a      	bne.n	8007a62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	60fb      	str	r3, [r7, #12]
}
 8007a5e:	bf00      	nop
 8007a60:	e7fe      	b.n	8007a60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a62:	4b07      	ldr	r3, [pc, #28]	; (8007a80 <vTaskPlaceOnEventList+0x44>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3318      	adds	r3, #24
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7fe fc15 	bl	800629a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a70:	2101      	movs	r1, #1
 8007a72:	6838      	ldr	r0, [r7, #0]
 8007a74:	f000 fa80 	bl	8007f78 <prvAddCurrentTaskToDelayedList>
}
 8007a78:	bf00      	nop
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	24004764 	.word	0x24004764

08007a84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10a      	bne.n	8007aac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	617b      	str	r3, [r7, #20]
}
 8007aa8:	bf00      	nop
 8007aaa:	e7fe      	b.n	8007aaa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007aac:	4b0a      	ldr	r3, [pc, #40]	; (8007ad8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3318      	adds	r3, #24
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f7fe fbcc 	bl	8006252 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	68b8      	ldr	r0, [r7, #8]
 8007aca:	f000 fa55 	bl	8007f78 <prvAddCurrentTaskToDelayedList>
	}
 8007ace:	bf00      	nop
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	24004764 	.word	0x24004764

08007adc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10a      	bne.n	8007b08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	60fb      	str	r3, [r7, #12]
}
 8007b04:	bf00      	nop
 8007b06:	e7fe      	b.n	8007b06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	3318      	adds	r3, #24
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fe fbfd 	bl	800630c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b12:	4b1e      	ldr	r3, [pc, #120]	; (8007b8c <xTaskRemoveFromEventList+0xb0>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d11d      	bne.n	8007b56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe fbf4 	bl	800630c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b28:	4b19      	ldr	r3, [pc, #100]	; (8007b90 <xTaskRemoveFromEventList+0xb4>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d903      	bls.n	8007b38 <xTaskRemoveFromEventList+0x5c>
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b34:	4a16      	ldr	r2, [pc, #88]	; (8007b90 <xTaskRemoveFromEventList+0xb4>)
 8007b36:	6013      	str	r3, [r2, #0]
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4a13      	ldr	r2, [pc, #76]	; (8007b94 <xTaskRemoveFromEventList+0xb8>)
 8007b46:	441a      	add	r2, r3
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4610      	mov	r0, r2
 8007b50:	f7fe fb7f 	bl	8006252 <vListInsertEnd>
 8007b54:	e005      	b.n	8007b62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	3318      	adds	r3, #24
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	480e      	ldr	r0, [pc, #56]	; (8007b98 <xTaskRemoveFromEventList+0xbc>)
 8007b5e:	f7fe fb78 	bl	8006252 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b66:	4b0d      	ldr	r3, [pc, #52]	; (8007b9c <xTaskRemoveFromEventList+0xc0>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d905      	bls.n	8007b7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b70:	2301      	movs	r3, #1
 8007b72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b74:	4b0a      	ldr	r3, [pc, #40]	; (8007ba0 <xTaskRemoveFromEventList+0xc4>)
 8007b76:	2201      	movs	r2, #1
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	e001      	b.n	8007b80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b80:	697b      	ldr	r3, [r7, #20]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3718      	adds	r7, #24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	24004c60 	.word	0x24004c60
 8007b90:	24004c40 	.word	0x24004c40
 8007b94:	24004768 	.word	0x24004768
 8007b98:	24004bf8 	.word	0x24004bf8
 8007b9c:	24004764 	.word	0x24004764
 8007ba0:	24004c4c 	.word	0x24004c4c

08007ba4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007bac:	4b06      	ldr	r3, [pc, #24]	; (8007bc8 <vTaskInternalSetTimeOutState+0x24>)
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bb4:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <vTaskInternalSetTimeOutState+0x28>)
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	605a      	str	r2, [r3, #4]
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	24004c50 	.word	0x24004c50
 8007bcc:	24004c3c 	.word	0x24004c3c

08007bd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b088      	sub	sp, #32
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10a      	bne.n	8007bf6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	613b      	str	r3, [r7, #16]
}
 8007bf2:	bf00      	nop
 8007bf4:	e7fe      	b.n	8007bf4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10a      	bne.n	8007c12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	60fb      	str	r3, [r7, #12]
}
 8007c0e:	bf00      	nop
 8007c10:	e7fe      	b.n	8007c10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007c12:	f7fe fccf 	bl	80065b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c16:	4b1d      	ldr	r3, [pc, #116]	; (8007c8c <xTaskCheckForTimeOut+0xbc>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2e:	d102      	bne.n	8007c36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c30:	2300      	movs	r3, #0
 8007c32:	61fb      	str	r3, [r7, #28]
 8007c34:	e023      	b.n	8007c7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	4b15      	ldr	r3, [pc, #84]	; (8007c90 <xTaskCheckForTimeOut+0xc0>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d007      	beq.n	8007c52 <xTaskCheckForTimeOut+0x82>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d302      	bcc.n	8007c52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	61fb      	str	r3, [r7, #28]
 8007c50:	e015      	b.n	8007c7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d20b      	bcs.n	8007c74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	1ad2      	subs	r2, r2, r3
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff ff9b 	bl	8007ba4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	61fb      	str	r3, [r7, #28]
 8007c72:	e004      	b.n	8007c7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2200      	movs	r2, #0
 8007c78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c7e:	f7fe fcc9 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8007c82:	69fb      	ldr	r3, [r7, #28]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3720      	adds	r7, #32
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	24004c3c 	.word	0x24004c3c
 8007c90:	24004c50 	.word	0x24004c50

08007c94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c94:	b480      	push	{r7}
 8007c96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c98:	4b03      	ldr	r3, [pc, #12]	; (8007ca8 <vTaskMissedYield+0x14>)
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]
}
 8007c9e:	bf00      	nop
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	24004c4c 	.word	0x24004c4c

08007cac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007cb4:	f000 f852 	bl	8007d5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cb8:	4b06      	ldr	r3, [pc, #24]	; (8007cd4 <prvIdleTask+0x28>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d9f9      	bls.n	8007cb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007cc0:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <prvIdleTask+0x2c>)
 8007cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007cd0:	e7f0      	b.n	8007cb4 <prvIdleTask+0x8>
 8007cd2:	bf00      	nop
 8007cd4:	24004768 	.word	0x24004768
 8007cd8:	e000ed04 	.word	0xe000ed04

08007cdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	607b      	str	r3, [r7, #4]
 8007ce6:	e00c      	b.n	8007d02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	4613      	mov	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4a12      	ldr	r2, [pc, #72]	; (8007d3c <prvInitialiseTaskLists+0x60>)
 8007cf4:	4413      	add	r3, r2
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe fa7e 	bl	80061f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	607b      	str	r3, [r7, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b37      	cmp	r3, #55	; 0x37
 8007d06:	d9ef      	bls.n	8007ce8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d08:	480d      	ldr	r0, [pc, #52]	; (8007d40 <prvInitialiseTaskLists+0x64>)
 8007d0a:	f7fe fa75 	bl	80061f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d0e:	480d      	ldr	r0, [pc, #52]	; (8007d44 <prvInitialiseTaskLists+0x68>)
 8007d10:	f7fe fa72 	bl	80061f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d14:	480c      	ldr	r0, [pc, #48]	; (8007d48 <prvInitialiseTaskLists+0x6c>)
 8007d16:	f7fe fa6f 	bl	80061f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d1a:	480c      	ldr	r0, [pc, #48]	; (8007d4c <prvInitialiseTaskLists+0x70>)
 8007d1c:	f7fe fa6c 	bl	80061f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d20:	480b      	ldr	r0, [pc, #44]	; (8007d50 <prvInitialiseTaskLists+0x74>)
 8007d22:	f7fe fa69 	bl	80061f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d26:	4b0b      	ldr	r3, [pc, #44]	; (8007d54 <prvInitialiseTaskLists+0x78>)
 8007d28:	4a05      	ldr	r2, [pc, #20]	; (8007d40 <prvInitialiseTaskLists+0x64>)
 8007d2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d2c:	4b0a      	ldr	r3, [pc, #40]	; (8007d58 <prvInitialiseTaskLists+0x7c>)
 8007d2e:	4a05      	ldr	r2, [pc, #20]	; (8007d44 <prvInitialiseTaskLists+0x68>)
 8007d30:	601a      	str	r2, [r3, #0]
}
 8007d32:	bf00      	nop
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	24004768 	.word	0x24004768
 8007d40:	24004bc8 	.word	0x24004bc8
 8007d44:	24004bdc 	.word	0x24004bdc
 8007d48:	24004bf8 	.word	0x24004bf8
 8007d4c:	24004c0c 	.word	0x24004c0c
 8007d50:	24004c24 	.word	0x24004c24
 8007d54:	24004bf0 	.word	0x24004bf0
 8007d58:	24004bf4 	.word	0x24004bf4

08007d5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d62:	e019      	b.n	8007d98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d64:	f7fe fc26 	bl	80065b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d68:	4b10      	ldr	r3, [pc, #64]	; (8007dac <prvCheckTasksWaitingTermination+0x50>)
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fe fac9 	bl	800630c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d7a:	4b0d      	ldr	r3, [pc, #52]	; (8007db0 <prvCheckTasksWaitingTermination+0x54>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	4a0b      	ldr	r2, [pc, #44]	; (8007db0 <prvCheckTasksWaitingTermination+0x54>)
 8007d82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d84:	4b0b      	ldr	r3, [pc, #44]	; (8007db4 <prvCheckTasksWaitingTermination+0x58>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	4a0a      	ldr	r2, [pc, #40]	; (8007db4 <prvCheckTasksWaitingTermination+0x58>)
 8007d8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d8e:	f7fe fc41 	bl	8006614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f810 	bl	8007db8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d98:	4b06      	ldr	r3, [pc, #24]	; (8007db4 <prvCheckTasksWaitingTermination+0x58>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1e1      	bne.n	8007d64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007da0:	bf00      	nop
 8007da2:	bf00      	nop
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	24004c0c 	.word	0x24004c0c
 8007db0:	24004c38 	.word	0x24004c38
 8007db4:	24004c20 	.word	0x24004c20

08007db8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3354      	adds	r3, #84	; 0x54
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f001 faaf 	bl	8009328 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d108      	bne.n	8007de6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fe f8ef 	bl	8005fbc <vPortFree>
				vPortFree( pxTCB );
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7fe f8ec 	bl	8005fbc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007de4:	e018      	b.n	8007e18 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d103      	bne.n	8007df8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7fe f8e3 	bl	8005fbc <vPortFree>
	}
 8007df6:	e00f      	b.n	8007e18 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d00a      	beq.n	8007e18 <prvDeleteTCB+0x60>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	60fb      	str	r3, [r7, #12]
}
 8007e14:	bf00      	nop
 8007e16:	e7fe      	b.n	8007e16 <prvDeleteTCB+0x5e>
	}
 8007e18:	bf00      	nop
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e26:	4b0c      	ldr	r3, [pc, #48]	; (8007e58 <prvResetNextTaskUnblockTime+0x38>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d104      	bne.n	8007e3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e30:	4b0a      	ldr	r3, [pc, #40]	; (8007e5c <prvResetNextTaskUnblockTime+0x3c>)
 8007e32:	f04f 32ff 	mov.w	r2, #4294967295
 8007e36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e38:	e008      	b.n	8007e4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e3a:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <prvResetNextTaskUnblockTime+0x38>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	4a04      	ldr	r2, [pc, #16]	; (8007e5c <prvResetNextTaskUnblockTime+0x3c>)
 8007e4a:	6013      	str	r3, [r2, #0]
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr
 8007e58:	24004bf0 	.word	0x24004bf0
 8007e5c:	24004c58 	.word	0x24004c58

08007e60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e66:	4b0b      	ldr	r3, [pc, #44]	; (8007e94 <xTaskGetSchedulerState+0x34>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d102      	bne.n	8007e74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	607b      	str	r3, [r7, #4]
 8007e72:	e008      	b.n	8007e86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e74:	4b08      	ldr	r3, [pc, #32]	; (8007e98 <xTaskGetSchedulerState+0x38>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d102      	bne.n	8007e82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	607b      	str	r3, [r7, #4]
 8007e80:	e001      	b.n	8007e86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e82:	2300      	movs	r3, #0
 8007e84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e86:	687b      	ldr	r3, [r7, #4]
	}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	24004c44 	.word	0x24004c44
 8007e98:	24004c60 	.word	0x24004c60

08007e9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d056      	beq.n	8007f60 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007eb2:	4b2e      	ldr	r3, [pc, #184]	; (8007f6c <xTaskPriorityDisinherit+0xd0>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d00a      	beq.n	8007ed2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	60fb      	str	r3, [r7, #12]
}
 8007ece:	bf00      	nop
 8007ed0:	e7fe      	b.n	8007ed0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10a      	bne.n	8007ef0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	60bb      	str	r3, [r7, #8]
}
 8007eec:	bf00      	nop
 8007eee:	e7fe      	b.n	8007eee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef4:	1e5a      	subs	r2, r3, #1
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d02c      	beq.n	8007f60 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d128      	bne.n	8007f60 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	3304      	adds	r3, #4
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fe f9fa 	bl	800630c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f30:	4b0f      	ldr	r3, [pc, #60]	; (8007f70 <xTaskPriorityDisinherit+0xd4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d903      	bls.n	8007f40 <xTaskPriorityDisinherit+0xa4>
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3c:	4a0c      	ldr	r2, [pc, #48]	; (8007f70 <xTaskPriorityDisinherit+0xd4>)
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f44:	4613      	mov	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4a09      	ldr	r2, [pc, #36]	; (8007f74 <xTaskPriorityDisinherit+0xd8>)
 8007f4e:	441a      	add	r2, r3
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	3304      	adds	r3, #4
 8007f54:	4619      	mov	r1, r3
 8007f56:	4610      	mov	r0, r2
 8007f58:	f7fe f97b 	bl	8006252 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f60:	697b      	ldr	r3, [r7, #20]
	}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	24004764 	.word	0x24004764
 8007f70:	24004c40 	.word	0x24004c40
 8007f74:	24004768 	.word	0x24004768

08007f78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f82:	4b21      	ldr	r3, [pc, #132]	; (8008008 <prvAddCurrentTaskToDelayedList+0x90>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f88:	4b20      	ldr	r3, [pc, #128]	; (800800c <prvAddCurrentTaskToDelayedList+0x94>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fe f9bc 	bl	800630c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9a:	d10a      	bne.n	8007fb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d007      	beq.n	8007fb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fa2:	4b1a      	ldr	r3, [pc, #104]	; (800800c <prvAddCurrentTaskToDelayedList+0x94>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	4619      	mov	r1, r3
 8007faa:	4819      	ldr	r0, [pc, #100]	; (8008010 <prvAddCurrentTaskToDelayedList+0x98>)
 8007fac:	f7fe f951 	bl	8006252 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007fb0:	e026      	b.n	8008000 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007fba:	4b14      	ldr	r3, [pc, #80]	; (800800c <prvAddCurrentTaskToDelayedList+0x94>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d209      	bcs.n	8007fde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fca:	4b12      	ldr	r3, [pc, #72]	; (8008014 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	4b0f      	ldr	r3, [pc, #60]	; (800800c <prvAddCurrentTaskToDelayedList+0x94>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	f7fe f95f 	bl	800629a <vListInsert>
}
 8007fdc:	e010      	b.n	8008000 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fde:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	4b0a      	ldr	r3, [pc, #40]	; (800800c <prvAddCurrentTaskToDelayedList+0x94>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	4619      	mov	r1, r3
 8007fea:	4610      	mov	r0, r2
 8007fec:	f7fe f955 	bl	800629a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ff0:	4b0a      	ldr	r3, [pc, #40]	; (800801c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d202      	bcs.n	8008000 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ffa:	4a08      	ldr	r2, [pc, #32]	; (800801c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	6013      	str	r3, [r2, #0]
}
 8008000:	bf00      	nop
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	24004c3c 	.word	0x24004c3c
 800800c:	24004764 	.word	0x24004764
 8008010:	24004c24 	.word	0x24004c24
 8008014:	24004bf4 	.word	0x24004bf4
 8008018:	24004bf0 	.word	0x24004bf0
 800801c:	24004c58 	.word	0x24004c58

08008020 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b08a      	sub	sp, #40	; 0x28
 8008024:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008026:	2300      	movs	r3, #0
 8008028:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800802a:	f000 fb07 	bl	800863c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800802e:	4b1c      	ldr	r3, [pc, #112]	; (80080a0 <xTimerCreateTimerTask+0x80>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d021      	beq.n	800807a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008036:	2300      	movs	r3, #0
 8008038:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800803a:	2300      	movs	r3, #0
 800803c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800803e:	1d3a      	adds	r2, r7, #4
 8008040:	f107 0108 	add.w	r1, r7, #8
 8008044:	f107 030c 	add.w	r3, r7, #12
 8008048:	4618      	mov	r0, r3
 800804a:	f7fd fed1 	bl	8005df0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	9202      	str	r2, [sp, #8]
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	2302      	movs	r3, #2
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	2300      	movs	r3, #0
 800805e:	460a      	mov	r2, r1
 8008060:	4910      	ldr	r1, [pc, #64]	; (80080a4 <xTimerCreateTimerTask+0x84>)
 8008062:	4811      	ldr	r0, [pc, #68]	; (80080a8 <xTimerCreateTimerTask+0x88>)
 8008064:	f7ff f8b4 	bl	80071d0 <xTaskCreateStatic>
 8008068:	4603      	mov	r3, r0
 800806a:	4a10      	ldr	r2, [pc, #64]	; (80080ac <xTimerCreateTimerTask+0x8c>)
 800806c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800806e:	4b0f      	ldr	r3, [pc, #60]	; (80080ac <xTimerCreateTimerTask+0x8c>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008076:	2301      	movs	r3, #1
 8008078:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10a      	bne.n	8008096 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	613b      	str	r3, [r7, #16]
}
 8008092:	bf00      	nop
 8008094:	e7fe      	b.n	8008094 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008096:	697b      	ldr	r3, [r7, #20]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3718      	adds	r7, #24
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	24004c94 	.word	0x24004c94
 80080a4:	0800b150 	.word	0x0800b150
 80080a8:	080081e5 	.word	0x080081e5
 80080ac:	24004c98 	.word	0x24004c98

080080b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08a      	sub	sp, #40	; 0x28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
 80080bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80080be:	2300      	movs	r3, #0
 80080c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10a      	bne.n	80080de <xTimerGenericCommand+0x2e>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	623b      	str	r3, [r7, #32]
}
 80080da:	bf00      	nop
 80080dc:	e7fe      	b.n	80080dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80080de:	4b1a      	ldr	r3, [pc, #104]	; (8008148 <xTimerGenericCommand+0x98>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d02a      	beq.n	800813c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2b05      	cmp	r3, #5
 80080f6:	dc18      	bgt.n	800812a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80080f8:	f7ff feb2 	bl	8007e60 <xTaskGetSchedulerState>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d109      	bne.n	8008116 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008102:	4b11      	ldr	r3, [pc, #68]	; (8008148 <xTimerGenericCommand+0x98>)
 8008104:	6818      	ldr	r0, [r3, #0]
 8008106:	f107 0110 	add.w	r1, r7, #16
 800810a:	2300      	movs	r3, #0
 800810c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800810e:	f7fe fc77 	bl	8006a00 <xQueueGenericSend>
 8008112:	6278      	str	r0, [r7, #36]	; 0x24
 8008114:	e012      	b.n	800813c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008116:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <xTimerGenericCommand+0x98>)
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	f107 0110 	add.w	r1, r7, #16
 800811e:	2300      	movs	r3, #0
 8008120:	2200      	movs	r2, #0
 8008122:	f7fe fc6d 	bl	8006a00 <xQueueGenericSend>
 8008126:	6278      	str	r0, [r7, #36]	; 0x24
 8008128:	e008      	b.n	800813c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800812a:	4b07      	ldr	r3, [pc, #28]	; (8008148 <xTimerGenericCommand+0x98>)
 800812c:	6818      	ldr	r0, [r3, #0]
 800812e:	f107 0110 	add.w	r1, r7, #16
 8008132:	2300      	movs	r3, #0
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	f7fe fd61 	bl	8006bfc <xQueueGenericSendFromISR>
 800813a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800813e:	4618      	mov	r0, r3
 8008140:	3728      	adds	r7, #40	; 0x28
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	24004c94 	.word	0x24004c94

0800814c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af02      	add	r7, sp, #8
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008156:	4b22      	ldr	r3, [pc, #136]	; (80081e0 <prvProcessExpiredTimer+0x94>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	3304      	adds	r3, #4
 8008164:	4618      	mov	r0, r3
 8008166:	f7fe f8d1 	bl	800630c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b00      	cmp	r3, #0
 8008176:	d022      	beq.n	80081be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	699a      	ldr	r2, [r3, #24]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	18d1      	adds	r1, r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	6978      	ldr	r0, [r7, #20]
 8008186:	f000 f8d1 	bl	800832c <prvInsertTimerInActiveList>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d01f      	beq.n	80081d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008190:	2300      	movs	r3, #0
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	2300      	movs	r3, #0
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	2100      	movs	r1, #0
 800819a:	6978      	ldr	r0, [r7, #20]
 800819c:	f7ff ff88 	bl	80080b0 <xTimerGenericCommand>
 80081a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d113      	bne.n	80081d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80081a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	60fb      	str	r3, [r7, #12]
}
 80081ba:	bf00      	nop
 80081bc:	e7fe      	b.n	80081bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081c4:	f023 0301 	bic.w	r3, r3, #1
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	6978      	ldr	r0, [r7, #20]
 80081d6:	4798      	blx	r3
}
 80081d8:	bf00      	nop
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	24004c8c 	.word	0x24004c8c

080081e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081ec:	f107 0308 	add.w	r3, r7, #8
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 f857 	bl	80082a4 <prvGetNextExpireTime>
 80081f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	4619      	mov	r1, r3
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 f803 	bl	8008208 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008202:	f000 f8d5 	bl	80083b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008206:	e7f1      	b.n	80081ec <prvTimerTask+0x8>

08008208 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008212:	f7ff fa39 	bl	8007688 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008216:	f107 0308 	add.w	r3, r7, #8
 800821a:	4618      	mov	r0, r3
 800821c:	f000 f866 	bl	80082ec <prvSampleTimeNow>
 8008220:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d130      	bne.n	800828a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10a      	bne.n	8008244 <prvProcessTimerOrBlockTask+0x3c>
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	429a      	cmp	r2, r3
 8008234:	d806      	bhi.n	8008244 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008236:	f7ff fa35 	bl	80076a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800823a:	68f9      	ldr	r1, [r7, #12]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7ff ff85 	bl	800814c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008242:	e024      	b.n	800828e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d008      	beq.n	800825c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800824a:	4b13      	ldr	r3, [pc, #76]	; (8008298 <prvProcessTimerOrBlockTask+0x90>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d101      	bne.n	8008258 <prvProcessTimerOrBlockTask+0x50>
 8008254:	2301      	movs	r3, #1
 8008256:	e000      	b.n	800825a <prvProcessTimerOrBlockTask+0x52>
 8008258:	2300      	movs	r3, #0
 800825a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800825c:	4b0f      	ldr	r3, [pc, #60]	; (800829c <prvProcessTimerOrBlockTask+0x94>)
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	4619      	mov	r1, r3
 800826a:	f7fe ff7d 	bl	8007168 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800826e:	f7ff fa19 	bl	80076a4 <xTaskResumeAll>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10a      	bne.n	800828e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008278:	4b09      	ldr	r3, [pc, #36]	; (80082a0 <prvProcessTimerOrBlockTask+0x98>)
 800827a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800827e:	601a      	str	r2, [r3, #0]
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	f3bf 8f6f 	isb	sy
}
 8008288:	e001      	b.n	800828e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800828a:	f7ff fa0b 	bl	80076a4 <xTaskResumeAll>
}
 800828e:	bf00      	nop
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	24004c90 	.word	0x24004c90
 800829c:	24004c94 	.word	0x24004c94
 80082a0:	e000ed04 	.word	0xe000ed04

080082a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80082ac:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <prvGetNextExpireTime+0x44>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <prvGetNextExpireTime+0x16>
 80082b6:	2201      	movs	r2, #1
 80082b8:	e000      	b.n	80082bc <prvGetNextExpireTime+0x18>
 80082ba:	2200      	movs	r2, #0
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d105      	bne.n	80082d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082c8:	4b07      	ldr	r3, [pc, #28]	; (80082e8 <prvGetNextExpireTime+0x44>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	e001      	b.n	80082d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80082d8:	68fb      	ldr	r3, [r7, #12]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	24004c8c 	.word	0x24004c8c

080082ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80082f4:	f7ff fa74 	bl	80077e0 <xTaskGetTickCount>
 80082f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80082fa:	4b0b      	ldr	r3, [pc, #44]	; (8008328 <prvSampleTimeNow+0x3c>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	429a      	cmp	r2, r3
 8008302:	d205      	bcs.n	8008310 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008304:	f000 f936 	bl	8008574 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	e002      	b.n	8008316 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008316:	4a04      	ldr	r2, [pc, #16]	; (8008328 <prvSampleTimeNow+0x3c>)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800831c:	68fb      	ldr	r3, [r7, #12]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	24004c9c 	.word	0x24004c9c

0800832c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800833a:	2300      	movs	r3, #0
 800833c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	429a      	cmp	r2, r3
 8008350:	d812      	bhi.n	8008378 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	1ad2      	subs	r2, r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	429a      	cmp	r2, r3
 800835e:	d302      	bcc.n	8008366 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008360:	2301      	movs	r3, #1
 8008362:	617b      	str	r3, [r7, #20]
 8008364:	e01b      	b.n	800839e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008366:	4b10      	ldr	r3, [pc, #64]	; (80083a8 <prvInsertTimerInActiveList+0x7c>)
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3304      	adds	r3, #4
 800836e:	4619      	mov	r1, r3
 8008370:	4610      	mov	r0, r2
 8008372:	f7fd ff92 	bl	800629a <vListInsert>
 8008376:	e012      	b.n	800839e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	429a      	cmp	r2, r3
 800837e:	d206      	bcs.n	800838e <prvInsertTimerInActiveList+0x62>
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	429a      	cmp	r2, r3
 8008386:	d302      	bcc.n	800838e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008388:	2301      	movs	r3, #1
 800838a:	617b      	str	r3, [r7, #20]
 800838c:	e007      	b.n	800839e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800838e:	4b07      	ldr	r3, [pc, #28]	; (80083ac <prvInsertTimerInActiveList+0x80>)
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	3304      	adds	r3, #4
 8008396:	4619      	mov	r1, r3
 8008398:	4610      	mov	r0, r2
 800839a:	f7fd ff7e 	bl	800629a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800839e:	697b      	ldr	r3, [r7, #20]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3718      	adds	r7, #24
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	24004c90 	.word	0x24004c90
 80083ac:	24004c8c 	.word	0x24004c8c

080083b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08e      	sub	sp, #56	; 0x38
 80083b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083b6:	e0ca      	b.n	800854e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	da18      	bge.n	80083f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80083be:	1d3b      	adds	r3, r7, #4
 80083c0:	3304      	adds	r3, #4
 80083c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80083c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10a      	bne.n	80083e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80083ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	61fb      	str	r3, [r7, #28]
}
 80083dc:	bf00      	nop
 80083de:	e7fe      	b.n	80083de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80083e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083e6:	6850      	ldr	r0, [r2, #4]
 80083e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083ea:	6892      	ldr	r2, [r2, #8]
 80083ec:	4611      	mov	r1, r2
 80083ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f2c0 80aa 	blt.w	800854c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80083fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d004      	beq.n	800840e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	3304      	adds	r3, #4
 8008408:	4618      	mov	r0, r3
 800840a:	f7fd ff7f 	bl	800630c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800840e:	463b      	mov	r3, r7
 8008410:	4618      	mov	r0, r3
 8008412:	f7ff ff6b 	bl	80082ec <prvSampleTimeNow>
 8008416:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b09      	cmp	r3, #9
 800841c:	f200 8097 	bhi.w	800854e <prvProcessReceivedCommands+0x19e>
 8008420:	a201      	add	r2, pc, #4	; (adr r2, 8008428 <prvProcessReceivedCommands+0x78>)
 8008422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008426:	bf00      	nop
 8008428:	08008451 	.word	0x08008451
 800842c:	08008451 	.word	0x08008451
 8008430:	08008451 	.word	0x08008451
 8008434:	080084c5 	.word	0x080084c5
 8008438:	080084d9 	.word	0x080084d9
 800843c:	08008523 	.word	0x08008523
 8008440:	08008451 	.word	0x08008451
 8008444:	08008451 	.word	0x08008451
 8008448:	080084c5 	.word	0x080084c5
 800844c:	080084d9 	.word	0x080084d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008456:	f043 0301 	orr.w	r3, r3, #1
 800845a:	b2da      	uxtb	r2, r3
 800845c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	18d1      	adds	r1, r2, r3
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800846e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008470:	f7ff ff5c 	bl	800832c <prvInsertTimerInActiveList>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d069      	beq.n	800854e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008480:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	2b00      	cmp	r3, #0
 800848e:	d05e      	beq.n	800854e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	441a      	add	r2, r3
 8008498:	2300      	movs	r3, #0
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	2300      	movs	r3, #0
 800849e:	2100      	movs	r1, #0
 80084a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084a2:	f7ff fe05 	bl	80080b0 <xTimerGenericCommand>
 80084a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80084a8:	6a3b      	ldr	r3, [r7, #32]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d14f      	bne.n	800854e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	61bb      	str	r3, [r7, #24]
}
 80084c0:	bf00      	nop
 80084c2:	e7fe      	b.n	80084c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084ca:	f023 0301 	bic.w	r3, r3, #1
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80084d6:	e03a      	b.n	800854e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80084d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084de:	f043 0301 	orr.w	r3, r3, #1
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10a      	bne.n	800850e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fc:	f383 8811 	msr	BASEPRI, r3
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	617b      	str	r3, [r7, #20]
}
 800850a:	bf00      	nop
 800850c:	e7fe      	b.n	800850c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800850e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008510:	699a      	ldr	r2, [r3, #24]
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	18d1      	adds	r1, r2, r3
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800851a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800851c:	f7ff ff06 	bl	800832c <prvInsertTimerInActiveList>
					break;
 8008520:	e015      	b.n	800854e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008528:	f003 0302 	and.w	r3, r3, #2
 800852c:	2b00      	cmp	r3, #0
 800852e:	d103      	bne.n	8008538 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008532:	f7fd fd43 	bl	8005fbc <vPortFree>
 8008536:	e00a      	b.n	800854e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800853e:	f023 0301 	bic.w	r3, r3, #1
 8008542:	b2da      	uxtb	r2, r3
 8008544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800854a:	e000      	b.n	800854e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800854c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800854e:	4b08      	ldr	r3, [pc, #32]	; (8008570 <prvProcessReceivedCommands+0x1c0>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	1d39      	adds	r1, r7, #4
 8008554:	2200      	movs	r2, #0
 8008556:	4618      	mov	r0, r3
 8008558:	f7fe fbec 	bl	8006d34 <xQueueReceive>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	f47f af2a 	bne.w	80083b8 <prvProcessReceivedCommands+0x8>
	}
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop
 8008568:	3730      	adds	r7, #48	; 0x30
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	24004c94 	.word	0x24004c94

08008574 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b088      	sub	sp, #32
 8008578:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800857a:	e048      	b.n	800860e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800857c:	4b2d      	ldr	r3, [pc, #180]	; (8008634 <prvSwitchTimerLists+0xc0>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008586:	4b2b      	ldr	r3, [pc, #172]	; (8008634 <prvSwitchTimerLists+0xc0>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3304      	adds	r3, #4
 8008594:	4618      	mov	r0, r3
 8008596:	f7fd feb9 	bl	800630c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085a8:	f003 0304 	and.w	r3, r3, #4
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d02e      	beq.n	800860e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	4413      	add	r3, r2
 80085b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d90e      	bls.n	80085e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085ce:	4b19      	ldr	r3, [pc, #100]	; (8008634 <prvSwitchTimerLists+0xc0>)
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3304      	adds	r3, #4
 80085d6:	4619      	mov	r1, r3
 80085d8:	4610      	mov	r0, r2
 80085da:	f7fd fe5e 	bl	800629a <vListInsert>
 80085de:	e016      	b.n	800860e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085e0:	2300      	movs	r3, #0
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	2300      	movs	r3, #0
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	2100      	movs	r1, #0
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f7ff fd60 	bl	80080b0 <xTimerGenericCommand>
 80085f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10a      	bne.n	800860e <prvSwitchTimerLists+0x9a>
	__asm volatile
 80085f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	603b      	str	r3, [r7, #0]
}
 800860a:	bf00      	nop
 800860c:	e7fe      	b.n	800860c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800860e:	4b09      	ldr	r3, [pc, #36]	; (8008634 <prvSwitchTimerLists+0xc0>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1b1      	bne.n	800857c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008618:	4b06      	ldr	r3, [pc, #24]	; (8008634 <prvSwitchTimerLists+0xc0>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800861e:	4b06      	ldr	r3, [pc, #24]	; (8008638 <prvSwitchTimerLists+0xc4>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a04      	ldr	r2, [pc, #16]	; (8008634 <prvSwitchTimerLists+0xc0>)
 8008624:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008626:	4a04      	ldr	r2, [pc, #16]	; (8008638 <prvSwitchTimerLists+0xc4>)
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	6013      	str	r3, [r2, #0]
}
 800862c:	bf00      	nop
 800862e:	3718      	adds	r7, #24
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	24004c8c 	.word	0x24004c8c
 8008638:	24004c90 	.word	0x24004c90

0800863c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008642:	f7fd ffb7 	bl	80065b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008646:	4b15      	ldr	r3, [pc, #84]	; (800869c <prvCheckForValidListAndQueue+0x60>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d120      	bne.n	8008690 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800864e:	4814      	ldr	r0, [pc, #80]	; (80086a0 <prvCheckForValidListAndQueue+0x64>)
 8008650:	f7fd fdd2 	bl	80061f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008654:	4813      	ldr	r0, [pc, #76]	; (80086a4 <prvCheckForValidListAndQueue+0x68>)
 8008656:	f7fd fdcf 	bl	80061f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800865a:	4b13      	ldr	r3, [pc, #76]	; (80086a8 <prvCheckForValidListAndQueue+0x6c>)
 800865c:	4a10      	ldr	r2, [pc, #64]	; (80086a0 <prvCheckForValidListAndQueue+0x64>)
 800865e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008660:	4b12      	ldr	r3, [pc, #72]	; (80086ac <prvCheckForValidListAndQueue+0x70>)
 8008662:	4a10      	ldr	r2, [pc, #64]	; (80086a4 <prvCheckForValidListAndQueue+0x68>)
 8008664:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008666:	2300      	movs	r3, #0
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	4b11      	ldr	r3, [pc, #68]	; (80086b0 <prvCheckForValidListAndQueue+0x74>)
 800866c:	4a11      	ldr	r2, [pc, #68]	; (80086b4 <prvCheckForValidListAndQueue+0x78>)
 800866e:	2110      	movs	r1, #16
 8008670:	200a      	movs	r0, #10
 8008672:	f7fe f929 	bl	80068c8 <xQueueGenericCreateStatic>
 8008676:	4603      	mov	r3, r0
 8008678:	4a08      	ldr	r2, [pc, #32]	; (800869c <prvCheckForValidListAndQueue+0x60>)
 800867a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800867c:	4b07      	ldr	r3, [pc, #28]	; (800869c <prvCheckForValidListAndQueue+0x60>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d005      	beq.n	8008690 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008684:	4b05      	ldr	r3, [pc, #20]	; (800869c <prvCheckForValidListAndQueue+0x60>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	490b      	ldr	r1, [pc, #44]	; (80086b8 <prvCheckForValidListAndQueue+0x7c>)
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe fd42 	bl	8007114 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008690:	f7fd ffc0 	bl	8006614 <vPortExitCritical>
}
 8008694:	bf00      	nop
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	24004c94 	.word	0x24004c94
 80086a0:	24004c64 	.word	0x24004c64
 80086a4:	24004c78 	.word	0x24004c78
 80086a8:	24004c8c 	.word	0x24004c8c
 80086ac:	24004c90 	.word	0x24004c90
 80086b0:	24004d40 	.word	0x24004d40
 80086b4:	24004ca0 	.word	0x24004ca0
 80086b8:	0800b158 	.word	0x0800b158

080086bc <__errno>:
 80086bc:	4b01      	ldr	r3, [pc, #4]	; (80086c4 <__errno+0x8>)
 80086be:	6818      	ldr	r0, [r3, #0]
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	24000014 	.word	0x24000014

080086c8 <std>:
 80086c8:	2300      	movs	r3, #0
 80086ca:	b510      	push	{r4, lr}
 80086cc:	4604      	mov	r4, r0
 80086ce:	e9c0 3300 	strd	r3, r3, [r0]
 80086d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086d6:	6083      	str	r3, [r0, #8]
 80086d8:	8181      	strh	r1, [r0, #12]
 80086da:	6643      	str	r3, [r0, #100]	; 0x64
 80086dc:	81c2      	strh	r2, [r0, #14]
 80086de:	6183      	str	r3, [r0, #24]
 80086e0:	4619      	mov	r1, r3
 80086e2:	2208      	movs	r2, #8
 80086e4:	305c      	adds	r0, #92	; 0x5c
 80086e6:	f000 f91a 	bl	800891e <memset>
 80086ea:	4b05      	ldr	r3, [pc, #20]	; (8008700 <std+0x38>)
 80086ec:	6263      	str	r3, [r4, #36]	; 0x24
 80086ee:	4b05      	ldr	r3, [pc, #20]	; (8008704 <std+0x3c>)
 80086f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80086f2:	4b05      	ldr	r3, [pc, #20]	; (8008708 <std+0x40>)
 80086f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086f6:	4b05      	ldr	r3, [pc, #20]	; (800870c <std+0x44>)
 80086f8:	6224      	str	r4, [r4, #32]
 80086fa:	6323      	str	r3, [r4, #48]	; 0x30
 80086fc:	bd10      	pop	{r4, pc}
 80086fe:	bf00      	nop
 8008700:	08009401 	.word	0x08009401
 8008704:	08009423 	.word	0x08009423
 8008708:	0800945b 	.word	0x0800945b
 800870c:	0800947f 	.word	0x0800947f

08008710 <_cleanup_r>:
 8008710:	4901      	ldr	r1, [pc, #4]	; (8008718 <_cleanup_r+0x8>)
 8008712:	f000 b8af 	b.w	8008874 <_fwalk_reent>
 8008716:	bf00      	nop
 8008718:	0800a1d1 	.word	0x0800a1d1

0800871c <__sfmoreglue>:
 800871c:	b570      	push	{r4, r5, r6, lr}
 800871e:	2268      	movs	r2, #104	; 0x68
 8008720:	1e4d      	subs	r5, r1, #1
 8008722:	4355      	muls	r5, r2
 8008724:	460e      	mov	r6, r1
 8008726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800872a:	f000 f921 	bl	8008970 <_malloc_r>
 800872e:	4604      	mov	r4, r0
 8008730:	b140      	cbz	r0, 8008744 <__sfmoreglue+0x28>
 8008732:	2100      	movs	r1, #0
 8008734:	e9c0 1600 	strd	r1, r6, [r0]
 8008738:	300c      	adds	r0, #12
 800873a:	60a0      	str	r0, [r4, #8]
 800873c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008740:	f000 f8ed 	bl	800891e <memset>
 8008744:	4620      	mov	r0, r4
 8008746:	bd70      	pop	{r4, r5, r6, pc}

08008748 <__sfp_lock_acquire>:
 8008748:	4801      	ldr	r0, [pc, #4]	; (8008750 <__sfp_lock_acquire+0x8>)
 800874a:	f000 b8d8 	b.w	80088fe <__retarget_lock_acquire_recursive>
 800874e:	bf00      	nop
 8008750:	24004d91 	.word	0x24004d91

08008754 <__sfp_lock_release>:
 8008754:	4801      	ldr	r0, [pc, #4]	; (800875c <__sfp_lock_release+0x8>)
 8008756:	f000 b8d3 	b.w	8008900 <__retarget_lock_release_recursive>
 800875a:	bf00      	nop
 800875c:	24004d91 	.word	0x24004d91

08008760 <__sinit_lock_acquire>:
 8008760:	4801      	ldr	r0, [pc, #4]	; (8008768 <__sinit_lock_acquire+0x8>)
 8008762:	f000 b8cc 	b.w	80088fe <__retarget_lock_acquire_recursive>
 8008766:	bf00      	nop
 8008768:	24004d92 	.word	0x24004d92

0800876c <__sinit_lock_release>:
 800876c:	4801      	ldr	r0, [pc, #4]	; (8008774 <__sinit_lock_release+0x8>)
 800876e:	f000 b8c7 	b.w	8008900 <__retarget_lock_release_recursive>
 8008772:	bf00      	nop
 8008774:	24004d92 	.word	0x24004d92

08008778 <__sinit>:
 8008778:	b510      	push	{r4, lr}
 800877a:	4604      	mov	r4, r0
 800877c:	f7ff fff0 	bl	8008760 <__sinit_lock_acquire>
 8008780:	69a3      	ldr	r3, [r4, #24]
 8008782:	b11b      	cbz	r3, 800878c <__sinit+0x14>
 8008784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008788:	f7ff bff0 	b.w	800876c <__sinit_lock_release>
 800878c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008790:	6523      	str	r3, [r4, #80]	; 0x50
 8008792:	4b13      	ldr	r3, [pc, #76]	; (80087e0 <__sinit+0x68>)
 8008794:	4a13      	ldr	r2, [pc, #76]	; (80087e4 <__sinit+0x6c>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	62a2      	str	r2, [r4, #40]	; 0x28
 800879a:	42a3      	cmp	r3, r4
 800879c:	bf04      	itt	eq
 800879e:	2301      	moveq	r3, #1
 80087a0:	61a3      	streq	r3, [r4, #24]
 80087a2:	4620      	mov	r0, r4
 80087a4:	f000 f820 	bl	80087e8 <__sfp>
 80087a8:	6060      	str	r0, [r4, #4]
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 f81c 	bl	80087e8 <__sfp>
 80087b0:	60a0      	str	r0, [r4, #8]
 80087b2:	4620      	mov	r0, r4
 80087b4:	f000 f818 	bl	80087e8 <__sfp>
 80087b8:	2200      	movs	r2, #0
 80087ba:	60e0      	str	r0, [r4, #12]
 80087bc:	2104      	movs	r1, #4
 80087be:	6860      	ldr	r0, [r4, #4]
 80087c0:	f7ff ff82 	bl	80086c8 <std>
 80087c4:	68a0      	ldr	r0, [r4, #8]
 80087c6:	2201      	movs	r2, #1
 80087c8:	2109      	movs	r1, #9
 80087ca:	f7ff ff7d 	bl	80086c8 <std>
 80087ce:	68e0      	ldr	r0, [r4, #12]
 80087d0:	2202      	movs	r2, #2
 80087d2:	2112      	movs	r1, #18
 80087d4:	f7ff ff78 	bl	80086c8 <std>
 80087d8:	2301      	movs	r3, #1
 80087da:	61a3      	str	r3, [r4, #24]
 80087dc:	e7d2      	b.n	8008784 <__sinit+0xc>
 80087de:	bf00      	nop
 80087e0:	0800b21c 	.word	0x0800b21c
 80087e4:	08008711 	.word	0x08008711

080087e8 <__sfp>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	4607      	mov	r7, r0
 80087ec:	f7ff ffac 	bl	8008748 <__sfp_lock_acquire>
 80087f0:	4b1e      	ldr	r3, [pc, #120]	; (800886c <__sfp+0x84>)
 80087f2:	681e      	ldr	r6, [r3, #0]
 80087f4:	69b3      	ldr	r3, [r6, #24]
 80087f6:	b913      	cbnz	r3, 80087fe <__sfp+0x16>
 80087f8:	4630      	mov	r0, r6
 80087fa:	f7ff ffbd 	bl	8008778 <__sinit>
 80087fe:	3648      	adds	r6, #72	; 0x48
 8008800:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008804:	3b01      	subs	r3, #1
 8008806:	d503      	bpl.n	8008810 <__sfp+0x28>
 8008808:	6833      	ldr	r3, [r6, #0]
 800880a:	b30b      	cbz	r3, 8008850 <__sfp+0x68>
 800880c:	6836      	ldr	r6, [r6, #0]
 800880e:	e7f7      	b.n	8008800 <__sfp+0x18>
 8008810:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008814:	b9d5      	cbnz	r5, 800884c <__sfp+0x64>
 8008816:	4b16      	ldr	r3, [pc, #88]	; (8008870 <__sfp+0x88>)
 8008818:	60e3      	str	r3, [r4, #12]
 800881a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800881e:	6665      	str	r5, [r4, #100]	; 0x64
 8008820:	f000 f86c 	bl	80088fc <__retarget_lock_init_recursive>
 8008824:	f7ff ff96 	bl	8008754 <__sfp_lock_release>
 8008828:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800882c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008830:	6025      	str	r5, [r4, #0]
 8008832:	61a5      	str	r5, [r4, #24]
 8008834:	2208      	movs	r2, #8
 8008836:	4629      	mov	r1, r5
 8008838:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800883c:	f000 f86f 	bl	800891e <memset>
 8008840:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008844:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008848:	4620      	mov	r0, r4
 800884a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800884c:	3468      	adds	r4, #104	; 0x68
 800884e:	e7d9      	b.n	8008804 <__sfp+0x1c>
 8008850:	2104      	movs	r1, #4
 8008852:	4638      	mov	r0, r7
 8008854:	f7ff ff62 	bl	800871c <__sfmoreglue>
 8008858:	4604      	mov	r4, r0
 800885a:	6030      	str	r0, [r6, #0]
 800885c:	2800      	cmp	r0, #0
 800885e:	d1d5      	bne.n	800880c <__sfp+0x24>
 8008860:	f7ff ff78 	bl	8008754 <__sfp_lock_release>
 8008864:	230c      	movs	r3, #12
 8008866:	603b      	str	r3, [r7, #0]
 8008868:	e7ee      	b.n	8008848 <__sfp+0x60>
 800886a:	bf00      	nop
 800886c:	0800b21c 	.word	0x0800b21c
 8008870:	ffff0001 	.word	0xffff0001

08008874 <_fwalk_reent>:
 8008874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008878:	4606      	mov	r6, r0
 800887a:	4688      	mov	r8, r1
 800887c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008880:	2700      	movs	r7, #0
 8008882:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008886:	f1b9 0901 	subs.w	r9, r9, #1
 800888a:	d505      	bpl.n	8008898 <_fwalk_reent+0x24>
 800888c:	6824      	ldr	r4, [r4, #0]
 800888e:	2c00      	cmp	r4, #0
 8008890:	d1f7      	bne.n	8008882 <_fwalk_reent+0xe>
 8008892:	4638      	mov	r0, r7
 8008894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008898:	89ab      	ldrh	r3, [r5, #12]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d907      	bls.n	80088ae <_fwalk_reent+0x3a>
 800889e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088a2:	3301      	adds	r3, #1
 80088a4:	d003      	beq.n	80088ae <_fwalk_reent+0x3a>
 80088a6:	4629      	mov	r1, r5
 80088a8:	4630      	mov	r0, r6
 80088aa:	47c0      	blx	r8
 80088ac:	4307      	orrs	r7, r0
 80088ae:	3568      	adds	r5, #104	; 0x68
 80088b0:	e7e9      	b.n	8008886 <_fwalk_reent+0x12>
	...

080088b4 <__libc_init_array>:
 80088b4:	b570      	push	{r4, r5, r6, lr}
 80088b6:	4d0d      	ldr	r5, [pc, #52]	; (80088ec <__libc_init_array+0x38>)
 80088b8:	4c0d      	ldr	r4, [pc, #52]	; (80088f0 <__libc_init_array+0x3c>)
 80088ba:	1b64      	subs	r4, r4, r5
 80088bc:	10a4      	asrs	r4, r4, #2
 80088be:	2600      	movs	r6, #0
 80088c0:	42a6      	cmp	r6, r4
 80088c2:	d109      	bne.n	80088d8 <__libc_init_array+0x24>
 80088c4:	4d0b      	ldr	r5, [pc, #44]	; (80088f4 <__libc_init_array+0x40>)
 80088c6:	4c0c      	ldr	r4, [pc, #48]	; (80088f8 <__libc_init_array+0x44>)
 80088c8:	f002 fc1c 	bl	800b104 <_init>
 80088cc:	1b64      	subs	r4, r4, r5
 80088ce:	10a4      	asrs	r4, r4, #2
 80088d0:	2600      	movs	r6, #0
 80088d2:	42a6      	cmp	r6, r4
 80088d4:	d105      	bne.n	80088e2 <__libc_init_array+0x2e>
 80088d6:	bd70      	pop	{r4, r5, r6, pc}
 80088d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088dc:	4798      	blx	r3
 80088de:	3601      	adds	r6, #1
 80088e0:	e7ee      	b.n	80088c0 <__libc_init_array+0xc>
 80088e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80088e6:	4798      	blx	r3
 80088e8:	3601      	adds	r6, #1
 80088ea:	e7f2      	b.n	80088d2 <__libc_init_array+0x1e>
 80088ec:	0800b59c 	.word	0x0800b59c
 80088f0:	0800b59c 	.word	0x0800b59c
 80088f4:	0800b59c 	.word	0x0800b59c
 80088f8:	0800b5a0 	.word	0x0800b5a0

080088fc <__retarget_lock_init_recursive>:
 80088fc:	4770      	bx	lr

080088fe <__retarget_lock_acquire_recursive>:
 80088fe:	4770      	bx	lr

08008900 <__retarget_lock_release_recursive>:
 8008900:	4770      	bx	lr

08008902 <memcpy>:
 8008902:	440a      	add	r2, r1
 8008904:	4291      	cmp	r1, r2
 8008906:	f100 33ff 	add.w	r3, r0, #4294967295
 800890a:	d100      	bne.n	800890e <memcpy+0xc>
 800890c:	4770      	bx	lr
 800890e:	b510      	push	{r4, lr}
 8008910:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008914:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008918:	4291      	cmp	r1, r2
 800891a:	d1f9      	bne.n	8008910 <memcpy+0xe>
 800891c:	bd10      	pop	{r4, pc}

0800891e <memset>:
 800891e:	4402      	add	r2, r0
 8008920:	4603      	mov	r3, r0
 8008922:	4293      	cmp	r3, r2
 8008924:	d100      	bne.n	8008928 <memset+0xa>
 8008926:	4770      	bx	lr
 8008928:	f803 1b01 	strb.w	r1, [r3], #1
 800892c:	e7f9      	b.n	8008922 <memset+0x4>
	...

08008930 <sbrk_aligned>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	4e0e      	ldr	r6, [pc, #56]	; (800896c <sbrk_aligned+0x3c>)
 8008934:	460c      	mov	r4, r1
 8008936:	6831      	ldr	r1, [r6, #0]
 8008938:	4605      	mov	r5, r0
 800893a:	b911      	cbnz	r1, 8008942 <sbrk_aligned+0x12>
 800893c:	f000 fd50 	bl	80093e0 <_sbrk_r>
 8008940:	6030      	str	r0, [r6, #0]
 8008942:	4621      	mov	r1, r4
 8008944:	4628      	mov	r0, r5
 8008946:	f000 fd4b 	bl	80093e0 <_sbrk_r>
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	d00a      	beq.n	8008964 <sbrk_aligned+0x34>
 800894e:	1cc4      	adds	r4, r0, #3
 8008950:	f024 0403 	bic.w	r4, r4, #3
 8008954:	42a0      	cmp	r0, r4
 8008956:	d007      	beq.n	8008968 <sbrk_aligned+0x38>
 8008958:	1a21      	subs	r1, r4, r0
 800895a:	4628      	mov	r0, r5
 800895c:	f000 fd40 	bl	80093e0 <_sbrk_r>
 8008960:	3001      	adds	r0, #1
 8008962:	d101      	bne.n	8008968 <sbrk_aligned+0x38>
 8008964:	f04f 34ff 	mov.w	r4, #4294967295
 8008968:	4620      	mov	r0, r4
 800896a:	bd70      	pop	{r4, r5, r6, pc}
 800896c:	24004d98 	.word	0x24004d98

08008970 <_malloc_r>:
 8008970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008974:	1ccd      	adds	r5, r1, #3
 8008976:	f025 0503 	bic.w	r5, r5, #3
 800897a:	3508      	adds	r5, #8
 800897c:	2d0c      	cmp	r5, #12
 800897e:	bf38      	it	cc
 8008980:	250c      	movcc	r5, #12
 8008982:	2d00      	cmp	r5, #0
 8008984:	4607      	mov	r7, r0
 8008986:	db01      	blt.n	800898c <_malloc_r+0x1c>
 8008988:	42a9      	cmp	r1, r5
 800898a:	d905      	bls.n	8008998 <_malloc_r+0x28>
 800898c:	230c      	movs	r3, #12
 800898e:	603b      	str	r3, [r7, #0]
 8008990:	2600      	movs	r6, #0
 8008992:	4630      	mov	r0, r6
 8008994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008998:	4e2e      	ldr	r6, [pc, #184]	; (8008a54 <_malloc_r+0xe4>)
 800899a:	f001 fc73 	bl	800a284 <__malloc_lock>
 800899e:	6833      	ldr	r3, [r6, #0]
 80089a0:	461c      	mov	r4, r3
 80089a2:	bb34      	cbnz	r4, 80089f2 <_malloc_r+0x82>
 80089a4:	4629      	mov	r1, r5
 80089a6:	4638      	mov	r0, r7
 80089a8:	f7ff ffc2 	bl	8008930 <sbrk_aligned>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	4604      	mov	r4, r0
 80089b0:	d14d      	bne.n	8008a4e <_malloc_r+0xde>
 80089b2:	6834      	ldr	r4, [r6, #0]
 80089b4:	4626      	mov	r6, r4
 80089b6:	2e00      	cmp	r6, #0
 80089b8:	d140      	bne.n	8008a3c <_malloc_r+0xcc>
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	4631      	mov	r1, r6
 80089be:	4638      	mov	r0, r7
 80089c0:	eb04 0803 	add.w	r8, r4, r3
 80089c4:	f000 fd0c 	bl	80093e0 <_sbrk_r>
 80089c8:	4580      	cmp	r8, r0
 80089ca:	d13a      	bne.n	8008a42 <_malloc_r+0xd2>
 80089cc:	6821      	ldr	r1, [r4, #0]
 80089ce:	3503      	adds	r5, #3
 80089d0:	1a6d      	subs	r5, r5, r1
 80089d2:	f025 0503 	bic.w	r5, r5, #3
 80089d6:	3508      	adds	r5, #8
 80089d8:	2d0c      	cmp	r5, #12
 80089da:	bf38      	it	cc
 80089dc:	250c      	movcc	r5, #12
 80089de:	4629      	mov	r1, r5
 80089e0:	4638      	mov	r0, r7
 80089e2:	f7ff ffa5 	bl	8008930 <sbrk_aligned>
 80089e6:	3001      	adds	r0, #1
 80089e8:	d02b      	beq.n	8008a42 <_malloc_r+0xd2>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	442b      	add	r3, r5
 80089ee:	6023      	str	r3, [r4, #0]
 80089f0:	e00e      	b.n	8008a10 <_malloc_r+0xa0>
 80089f2:	6822      	ldr	r2, [r4, #0]
 80089f4:	1b52      	subs	r2, r2, r5
 80089f6:	d41e      	bmi.n	8008a36 <_malloc_r+0xc6>
 80089f8:	2a0b      	cmp	r2, #11
 80089fa:	d916      	bls.n	8008a2a <_malloc_r+0xba>
 80089fc:	1961      	adds	r1, r4, r5
 80089fe:	42a3      	cmp	r3, r4
 8008a00:	6025      	str	r5, [r4, #0]
 8008a02:	bf18      	it	ne
 8008a04:	6059      	strne	r1, [r3, #4]
 8008a06:	6863      	ldr	r3, [r4, #4]
 8008a08:	bf08      	it	eq
 8008a0a:	6031      	streq	r1, [r6, #0]
 8008a0c:	5162      	str	r2, [r4, r5]
 8008a0e:	604b      	str	r3, [r1, #4]
 8008a10:	4638      	mov	r0, r7
 8008a12:	f104 060b 	add.w	r6, r4, #11
 8008a16:	f001 fc3b 	bl	800a290 <__malloc_unlock>
 8008a1a:	f026 0607 	bic.w	r6, r6, #7
 8008a1e:	1d23      	adds	r3, r4, #4
 8008a20:	1af2      	subs	r2, r6, r3
 8008a22:	d0b6      	beq.n	8008992 <_malloc_r+0x22>
 8008a24:	1b9b      	subs	r3, r3, r6
 8008a26:	50a3      	str	r3, [r4, r2]
 8008a28:	e7b3      	b.n	8008992 <_malloc_r+0x22>
 8008a2a:	6862      	ldr	r2, [r4, #4]
 8008a2c:	42a3      	cmp	r3, r4
 8008a2e:	bf0c      	ite	eq
 8008a30:	6032      	streq	r2, [r6, #0]
 8008a32:	605a      	strne	r2, [r3, #4]
 8008a34:	e7ec      	b.n	8008a10 <_malloc_r+0xa0>
 8008a36:	4623      	mov	r3, r4
 8008a38:	6864      	ldr	r4, [r4, #4]
 8008a3a:	e7b2      	b.n	80089a2 <_malloc_r+0x32>
 8008a3c:	4634      	mov	r4, r6
 8008a3e:	6876      	ldr	r6, [r6, #4]
 8008a40:	e7b9      	b.n	80089b6 <_malloc_r+0x46>
 8008a42:	230c      	movs	r3, #12
 8008a44:	603b      	str	r3, [r7, #0]
 8008a46:	4638      	mov	r0, r7
 8008a48:	f001 fc22 	bl	800a290 <__malloc_unlock>
 8008a4c:	e7a1      	b.n	8008992 <_malloc_r+0x22>
 8008a4e:	6025      	str	r5, [r4, #0]
 8008a50:	e7de      	b.n	8008a10 <_malloc_r+0xa0>
 8008a52:	bf00      	nop
 8008a54:	24004d94 	.word	0x24004d94

08008a58 <__cvt>:
 8008a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a5a:	ed2d 8b02 	vpush	{d8}
 8008a5e:	eeb0 8b40 	vmov.f64	d8, d0
 8008a62:	b085      	sub	sp, #20
 8008a64:	4617      	mov	r7, r2
 8008a66:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008a68:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008a6a:	ee18 2a90 	vmov	r2, s17
 8008a6e:	f025 0520 	bic.w	r5, r5, #32
 8008a72:	2a00      	cmp	r2, #0
 8008a74:	bfb6      	itet	lt
 8008a76:	222d      	movlt	r2, #45	; 0x2d
 8008a78:	2200      	movge	r2, #0
 8008a7a:	eeb1 8b40 	vneglt.f64	d8, d0
 8008a7e:	2d46      	cmp	r5, #70	; 0x46
 8008a80:	460c      	mov	r4, r1
 8008a82:	701a      	strb	r2, [r3, #0]
 8008a84:	d004      	beq.n	8008a90 <__cvt+0x38>
 8008a86:	2d45      	cmp	r5, #69	; 0x45
 8008a88:	d100      	bne.n	8008a8c <__cvt+0x34>
 8008a8a:	3401      	adds	r4, #1
 8008a8c:	2102      	movs	r1, #2
 8008a8e:	e000      	b.n	8008a92 <__cvt+0x3a>
 8008a90:	2103      	movs	r1, #3
 8008a92:	ab03      	add	r3, sp, #12
 8008a94:	9301      	str	r3, [sp, #4]
 8008a96:	ab02      	add	r3, sp, #8
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	4622      	mov	r2, r4
 8008a9c:	4633      	mov	r3, r6
 8008a9e:	eeb0 0b48 	vmov.f64	d0, d8
 8008aa2:	f000 fda1 	bl	80095e8 <_dtoa_r>
 8008aa6:	2d47      	cmp	r5, #71	; 0x47
 8008aa8:	d101      	bne.n	8008aae <__cvt+0x56>
 8008aaa:	07fb      	lsls	r3, r7, #31
 8008aac:	d51a      	bpl.n	8008ae4 <__cvt+0x8c>
 8008aae:	2d46      	cmp	r5, #70	; 0x46
 8008ab0:	eb00 0204 	add.w	r2, r0, r4
 8008ab4:	d10c      	bne.n	8008ad0 <__cvt+0x78>
 8008ab6:	7803      	ldrb	r3, [r0, #0]
 8008ab8:	2b30      	cmp	r3, #48	; 0x30
 8008aba:	d107      	bne.n	8008acc <__cvt+0x74>
 8008abc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ac4:	bf1c      	itt	ne
 8008ac6:	f1c4 0401 	rsbne	r4, r4, #1
 8008aca:	6034      	strne	r4, [r6, #0]
 8008acc:	6833      	ldr	r3, [r6, #0]
 8008ace:	441a      	add	r2, r3
 8008ad0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad8:	bf08      	it	eq
 8008ada:	9203      	streq	r2, [sp, #12]
 8008adc:	2130      	movs	r1, #48	; 0x30
 8008ade:	9b03      	ldr	r3, [sp, #12]
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d307      	bcc.n	8008af4 <__cvt+0x9c>
 8008ae4:	9b03      	ldr	r3, [sp, #12]
 8008ae6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ae8:	1a1b      	subs	r3, r3, r0
 8008aea:	6013      	str	r3, [r2, #0]
 8008aec:	b005      	add	sp, #20
 8008aee:	ecbd 8b02 	vpop	{d8}
 8008af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008af4:	1c5c      	adds	r4, r3, #1
 8008af6:	9403      	str	r4, [sp, #12]
 8008af8:	7019      	strb	r1, [r3, #0]
 8008afa:	e7f0      	b.n	8008ade <__cvt+0x86>

08008afc <__exponent>:
 8008afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008afe:	4603      	mov	r3, r0
 8008b00:	2900      	cmp	r1, #0
 8008b02:	bfb8      	it	lt
 8008b04:	4249      	neglt	r1, r1
 8008b06:	f803 2b02 	strb.w	r2, [r3], #2
 8008b0a:	bfb4      	ite	lt
 8008b0c:	222d      	movlt	r2, #45	; 0x2d
 8008b0e:	222b      	movge	r2, #43	; 0x2b
 8008b10:	2909      	cmp	r1, #9
 8008b12:	7042      	strb	r2, [r0, #1]
 8008b14:	dd2a      	ble.n	8008b6c <__exponent+0x70>
 8008b16:	f10d 0407 	add.w	r4, sp, #7
 8008b1a:	46a4      	mov	ip, r4
 8008b1c:	270a      	movs	r7, #10
 8008b1e:	46a6      	mov	lr, r4
 8008b20:	460a      	mov	r2, r1
 8008b22:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b26:	fb07 1516 	mls	r5, r7, r6, r1
 8008b2a:	3530      	adds	r5, #48	; 0x30
 8008b2c:	2a63      	cmp	r2, #99	; 0x63
 8008b2e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008b32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b36:	4631      	mov	r1, r6
 8008b38:	dcf1      	bgt.n	8008b1e <__exponent+0x22>
 8008b3a:	3130      	adds	r1, #48	; 0x30
 8008b3c:	f1ae 0502 	sub.w	r5, lr, #2
 8008b40:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b44:	1c44      	adds	r4, r0, #1
 8008b46:	4629      	mov	r1, r5
 8008b48:	4561      	cmp	r1, ip
 8008b4a:	d30a      	bcc.n	8008b62 <__exponent+0x66>
 8008b4c:	f10d 0209 	add.w	r2, sp, #9
 8008b50:	eba2 020e 	sub.w	r2, r2, lr
 8008b54:	4565      	cmp	r5, ip
 8008b56:	bf88      	it	hi
 8008b58:	2200      	movhi	r2, #0
 8008b5a:	4413      	add	r3, r2
 8008b5c:	1a18      	subs	r0, r3, r0
 8008b5e:	b003      	add	sp, #12
 8008b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b66:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008b6a:	e7ed      	b.n	8008b48 <__exponent+0x4c>
 8008b6c:	2330      	movs	r3, #48	; 0x30
 8008b6e:	3130      	adds	r1, #48	; 0x30
 8008b70:	7083      	strb	r3, [r0, #2]
 8008b72:	70c1      	strb	r1, [r0, #3]
 8008b74:	1d03      	adds	r3, r0, #4
 8008b76:	e7f1      	b.n	8008b5c <__exponent+0x60>

08008b78 <_printf_float>:
 8008b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b7c:	b08b      	sub	sp, #44	; 0x2c
 8008b7e:	460c      	mov	r4, r1
 8008b80:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008b84:	4616      	mov	r6, r2
 8008b86:	461f      	mov	r7, r3
 8008b88:	4605      	mov	r5, r0
 8008b8a:	f001 fb5d 	bl	800a248 <_localeconv_r>
 8008b8e:	f8d0 b000 	ldr.w	fp, [r0]
 8008b92:	4658      	mov	r0, fp
 8008b94:	f7f7 fba4 	bl	80002e0 <strlen>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	9308      	str	r3, [sp, #32]
 8008b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8008ba0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008ba4:	6822      	ldr	r2, [r4, #0]
 8008ba6:	3307      	adds	r3, #7
 8008ba8:	f023 0307 	bic.w	r3, r3, #7
 8008bac:	f103 0108 	add.w	r1, r3, #8
 8008bb0:	f8c8 1000 	str.w	r1, [r8]
 8008bb4:	4682      	mov	sl, r0
 8008bb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008bba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008bbe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008e20 <_printf_float+0x2a8>
 8008bc2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008bc6:	eeb0 6bc0 	vabs.f64	d6, d0
 8008bca:	eeb4 6b47 	vcmp.f64	d6, d7
 8008bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd2:	dd24      	ble.n	8008c1e <_printf_float+0xa6>
 8008bd4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bdc:	d502      	bpl.n	8008be4 <_printf_float+0x6c>
 8008bde:	232d      	movs	r3, #45	; 0x2d
 8008be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008be4:	4b90      	ldr	r3, [pc, #576]	; (8008e28 <_printf_float+0x2b0>)
 8008be6:	4891      	ldr	r0, [pc, #580]	; (8008e2c <_printf_float+0x2b4>)
 8008be8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008bec:	bf94      	ite	ls
 8008bee:	4698      	movls	r8, r3
 8008bf0:	4680      	movhi	r8, r0
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	6123      	str	r3, [r4, #16]
 8008bf6:	f022 0204 	bic.w	r2, r2, #4
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	6022      	str	r2, [r4, #0]
 8008bfe:	9304      	str	r3, [sp, #16]
 8008c00:	9700      	str	r7, [sp, #0]
 8008c02:	4633      	mov	r3, r6
 8008c04:	aa09      	add	r2, sp, #36	; 0x24
 8008c06:	4621      	mov	r1, r4
 8008c08:	4628      	mov	r0, r5
 8008c0a:	f000 f9d3 	bl	8008fb4 <_printf_common>
 8008c0e:	3001      	adds	r0, #1
 8008c10:	f040 808a 	bne.w	8008d28 <_printf_float+0x1b0>
 8008c14:	f04f 30ff 	mov.w	r0, #4294967295
 8008c18:	b00b      	add	sp, #44	; 0x2c
 8008c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1e:	eeb4 0b40 	vcmp.f64	d0, d0
 8008c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c26:	d709      	bvc.n	8008c3c <_printf_float+0xc4>
 8008c28:	ee10 3a90 	vmov	r3, s1
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	bfbc      	itt	lt
 8008c30:	232d      	movlt	r3, #45	; 0x2d
 8008c32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c36:	487e      	ldr	r0, [pc, #504]	; (8008e30 <_printf_float+0x2b8>)
 8008c38:	4b7e      	ldr	r3, [pc, #504]	; (8008e34 <_printf_float+0x2bc>)
 8008c3a:	e7d5      	b.n	8008be8 <_printf_float+0x70>
 8008c3c:	6863      	ldr	r3, [r4, #4]
 8008c3e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008c42:	9104      	str	r1, [sp, #16]
 8008c44:	1c59      	adds	r1, r3, #1
 8008c46:	d13c      	bne.n	8008cc2 <_printf_float+0x14a>
 8008c48:	2306      	movs	r3, #6
 8008c4a:	6063      	str	r3, [r4, #4]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	9303      	str	r3, [sp, #12]
 8008c50:	ab08      	add	r3, sp, #32
 8008c52:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008c56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c5a:	ab07      	add	r3, sp, #28
 8008c5c:	6861      	ldr	r1, [r4, #4]
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	6022      	str	r2, [r4, #0]
 8008c62:	f10d 031b 	add.w	r3, sp, #27
 8008c66:	4628      	mov	r0, r5
 8008c68:	f7ff fef6 	bl	8008a58 <__cvt>
 8008c6c:	9b04      	ldr	r3, [sp, #16]
 8008c6e:	9907      	ldr	r1, [sp, #28]
 8008c70:	2b47      	cmp	r3, #71	; 0x47
 8008c72:	4680      	mov	r8, r0
 8008c74:	d108      	bne.n	8008c88 <_printf_float+0x110>
 8008c76:	1cc8      	adds	r0, r1, #3
 8008c78:	db02      	blt.n	8008c80 <_printf_float+0x108>
 8008c7a:	6863      	ldr	r3, [r4, #4]
 8008c7c:	4299      	cmp	r1, r3
 8008c7e:	dd41      	ble.n	8008d04 <_printf_float+0x18c>
 8008c80:	f1a9 0902 	sub.w	r9, r9, #2
 8008c84:	fa5f f989 	uxtb.w	r9, r9
 8008c88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008c8c:	d820      	bhi.n	8008cd0 <_printf_float+0x158>
 8008c8e:	3901      	subs	r1, #1
 8008c90:	464a      	mov	r2, r9
 8008c92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c96:	9107      	str	r1, [sp, #28]
 8008c98:	f7ff ff30 	bl	8008afc <__exponent>
 8008c9c:	9a08      	ldr	r2, [sp, #32]
 8008c9e:	9004      	str	r0, [sp, #16]
 8008ca0:	1813      	adds	r3, r2, r0
 8008ca2:	2a01      	cmp	r2, #1
 8008ca4:	6123      	str	r3, [r4, #16]
 8008ca6:	dc02      	bgt.n	8008cae <_printf_float+0x136>
 8008ca8:	6822      	ldr	r2, [r4, #0]
 8008caa:	07d2      	lsls	r2, r2, #31
 8008cac:	d501      	bpl.n	8008cb2 <_printf_float+0x13a>
 8008cae:	3301      	adds	r3, #1
 8008cb0:	6123      	str	r3, [r4, #16]
 8008cb2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d0a2      	beq.n	8008c00 <_printf_float+0x88>
 8008cba:	232d      	movs	r3, #45	; 0x2d
 8008cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cc0:	e79e      	b.n	8008c00 <_printf_float+0x88>
 8008cc2:	9904      	ldr	r1, [sp, #16]
 8008cc4:	2947      	cmp	r1, #71	; 0x47
 8008cc6:	d1c1      	bne.n	8008c4c <_printf_float+0xd4>
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1bf      	bne.n	8008c4c <_printf_float+0xd4>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e7bc      	b.n	8008c4a <_printf_float+0xd2>
 8008cd0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008cd4:	d118      	bne.n	8008d08 <_printf_float+0x190>
 8008cd6:	2900      	cmp	r1, #0
 8008cd8:	6863      	ldr	r3, [r4, #4]
 8008cda:	dd0b      	ble.n	8008cf4 <_printf_float+0x17c>
 8008cdc:	6121      	str	r1, [r4, #16]
 8008cde:	b913      	cbnz	r3, 8008ce6 <_printf_float+0x16e>
 8008ce0:	6822      	ldr	r2, [r4, #0]
 8008ce2:	07d0      	lsls	r0, r2, #31
 8008ce4:	d502      	bpl.n	8008cec <_printf_float+0x174>
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	440b      	add	r3, r1
 8008cea:	6123      	str	r3, [r4, #16]
 8008cec:	2300      	movs	r3, #0
 8008cee:	65a1      	str	r1, [r4, #88]	; 0x58
 8008cf0:	9304      	str	r3, [sp, #16]
 8008cf2:	e7de      	b.n	8008cb2 <_printf_float+0x13a>
 8008cf4:	b913      	cbnz	r3, 8008cfc <_printf_float+0x184>
 8008cf6:	6822      	ldr	r2, [r4, #0]
 8008cf8:	07d2      	lsls	r2, r2, #31
 8008cfa:	d501      	bpl.n	8008d00 <_printf_float+0x188>
 8008cfc:	3302      	adds	r3, #2
 8008cfe:	e7f4      	b.n	8008cea <_printf_float+0x172>
 8008d00:	2301      	movs	r3, #1
 8008d02:	e7f2      	b.n	8008cea <_printf_float+0x172>
 8008d04:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008d08:	9b08      	ldr	r3, [sp, #32]
 8008d0a:	4299      	cmp	r1, r3
 8008d0c:	db05      	blt.n	8008d1a <_printf_float+0x1a2>
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	6121      	str	r1, [r4, #16]
 8008d12:	07d8      	lsls	r0, r3, #31
 8008d14:	d5ea      	bpl.n	8008cec <_printf_float+0x174>
 8008d16:	1c4b      	adds	r3, r1, #1
 8008d18:	e7e7      	b.n	8008cea <_printf_float+0x172>
 8008d1a:	2900      	cmp	r1, #0
 8008d1c:	bfd4      	ite	le
 8008d1e:	f1c1 0202 	rsble	r2, r1, #2
 8008d22:	2201      	movgt	r2, #1
 8008d24:	4413      	add	r3, r2
 8008d26:	e7e0      	b.n	8008cea <_printf_float+0x172>
 8008d28:	6823      	ldr	r3, [r4, #0]
 8008d2a:	055a      	lsls	r2, r3, #21
 8008d2c:	d407      	bmi.n	8008d3e <_printf_float+0x1c6>
 8008d2e:	6923      	ldr	r3, [r4, #16]
 8008d30:	4642      	mov	r2, r8
 8008d32:	4631      	mov	r1, r6
 8008d34:	4628      	mov	r0, r5
 8008d36:	47b8      	blx	r7
 8008d38:	3001      	adds	r0, #1
 8008d3a:	d12a      	bne.n	8008d92 <_printf_float+0x21a>
 8008d3c:	e76a      	b.n	8008c14 <_printf_float+0x9c>
 8008d3e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008d42:	f240 80e2 	bls.w	8008f0a <_printf_float+0x392>
 8008d46:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008d4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d52:	d133      	bne.n	8008dbc <_printf_float+0x244>
 8008d54:	4a38      	ldr	r2, [pc, #224]	; (8008e38 <_printf_float+0x2c0>)
 8008d56:	2301      	movs	r3, #1
 8008d58:	4631      	mov	r1, r6
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	47b8      	blx	r7
 8008d5e:	3001      	adds	r0, #1
 8008d60:	f43f af58 	beq.w	8008c14 <_printf_float+0x9c>
 8008d64:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	db02      	blt.n	8008d72 <_printf_float+0x1fa>
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	07d8      	lsls	r0, r3, #31
 8008d70:	d50f      	bpl.n	8008d92 <_printf_float+0x21a>
 8008d72:	4653      	mov	r3, sl
 8008d74:	465a      	mov	r2, fp
 8008d76:	4631      	mov	r1, r6
 8008d78:	4628      	mov	r0, r5
 8008d7a:	47b8      	blx	r7
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	f43f af49 	beq.w	8008c14 <_printf_float+0x9c>
 8008d82:	f04f 0800 	mov.w	r8, #0
 8008d86:	f104 091a 	add.w	r9, r4, #26
 8008d8a:	9b08      	ldr	r3, [sp, #32]
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	4543      	cmp	r3, r8
 8008d90:	dc09      	bgt.n	8008da6 <_printf_float+0x22e>
 8008d92:	6823      	ldr	r3, [r4, #0]
 8008d94:	079b      	lsls	r3, r3, #30
 8008d96:	f100 8108 	bmi.w	8008faa <_printf_float+0x432>
 8008d9a:	68e0      	ldr	r0, [r4, #12]
 8008d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d9e:	4298      	cmp	r0, r3
 8008da0:	bfb8      	it	lt
 8008da2:	4618      	movlt	r0, r3
 8008da4:	e738      	b.n	8008c18 <_printf_float+0xa0>
 8008da6:	2301      	movs	r3, #1
 8008da8:	464a      	mov	r2, r9
 8008daa:	4631      	mov	r1, r6
 8008dac:	4628      	mov	r0, r5
 8008dae:	47b8      	blx	r7
 8008db0:	3001      	adds	r0, #1
 8008db2:	f43f af2f 	beq.w	8008c14 <_printf_float+0x9c>
 8008db6:	f108 0801 	add.w	r8, r8, #1
 8008dba:	e7e6      	b.n	8008d8a <_printf_float+0x212>
 8008dbc:	9b07      	ldr	r3, [sp, #28]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	dc3c      	bgt.n	8008e3c <_printf_float+0x2c4>
 8008dc2:	4a1d      	ldr	r2, [pc, #116]	; (8008e38 <_printf_float+0x2c0>)
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	4628      	mov	r0, r5
 8008dca:	47b8      	blx	r7
 8008dcc:	3001      	adds	r0, #1
 8008dce:	f43f af21 	beq.w	8008c14 <_printf_float+0x9c>
 8008dd2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	d102      	bne.n	8008de0 <_printf_float+0x268>
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	07d9      	lsls	r1, r3, #31
 8008dde:	d5d8      	bpl.n	8008d92 <_printf_float+0x21a>
 8008de0:	4653      	mov	r3, sl
 8008de2:	465a      	mov	r2, fp
 8008de4:	4631      	mov	r1, r6
 8008de6:	4628      	mov	r0, r5
 8008de8:	47b8      	blx	r7
 8008dea:	3001      	adds	r0, #1
 8008dec:	f43f af12 	beq.w	8008c14 <_printf_float+0x9c>
 8008df0:	f04f 0900 	mov.w	r9, #0
 8008df4:	f104 0a1a 	add.w	sl, r4, #26
 8008df8:	9b07      	ldr	r3, [sp, #28]
 8008dfa:	425b      	negs	r3, r3
 8008dfc:	454b      	cmp	r3, r9
 8008dfe:	dc01      	bgt.n	8008e04 <_printf_float+0x28c>
 8008e00:	9b08      	ldr	r3, [sp, #32]
 8008e02:	e795      	b.n	8008d30 <_printf_float+0x1b8>
 8008e04:	2301      	movs	r3, #1
 8008e06:	4652      	mov	r2, sl
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	47b8      	blx	r7
 8008e0e:	3001      	adds	r0, #1
 8008e10:	f43f af00 	beq.w	8008c14 <_printf_float+0x9c>
 8008e14:	f109 0901 	add.w	r9, r9, #1
 8008e18:	e7ee      	b.n	8008df8 <_printf_float+0x280>
 8008e1a:	bf00      	nop
 8008e1c:	f3af 8000 	nop.w
 8008e20:	ffffffff 	.word	0xffffffff
 8008e24:	7fefffff 	.word	0x7fefffff
 8008e28:	0800b220 	.word	0x0800b220
 8008e2c:	0800b224 	.word	0x0800b224
 8008e30:	0800b22c 	.word	0x0800b22c
 8008e34:	0800b228 	.word	0x0800b228
 8008e38:	0800b230 	.word	0x0800b230
 8008e3c:	9a08      	ldr	r2, [sp, #32]
 8008e3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e40:	429a      	cmp	r2, r3
 8008e42:	bfa8      	it	ge
 8008e44:	461a      	movge	r2, r3
 8008e46:	2a00      	cmp	r2, #0
 8008e48:	4691      	mov	r9, r2
 8008e4a:	dc38      	bgt.n	8008ebe <_printf_float+0x346>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	9305      	str	r3, [sp, #20]
 8008e50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e54:	f104 021a 	add.w	r2, r4, #26
 8008e58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e5a:	9905      	ldr	r1, [sp, #20]
 8008e5c:	9304      	str	r3, [sp, #16]
 8008e5e:	eba3 0309 	sub.w	r3, r3, r9
 8008e62:	428b      	cmp	r3, r1
 8008e64:	dc33      	bgt.n	8008ece <_printf_float+0x356>
 8008e66:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	db3c      	blt.n	8008ee8 <_printf_float+0x370>
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	07da      	lsls	r2, r3, #31
 8008e72:	d439      	bmi.n	8008ee8 <_printf_float+0x370>
 8008e74:	9b08      	ldr	r3, [sp, #32]
 8008e76:	9a04      	ldr	r2, [sp, #16]
 8008e78:	9907      	ldr	r1, [sp, #28]
 8008e7a:	1a9a      	subs	r2, r3, r2
 8008e7c:	eba3 0901 	sub.w	r9, r3, r1
 8008e80:	4591      	cmp	r9, r2
 8008e82:	bfa8      	it	ge
 8008e84:	4691      	movge	r9, r2
 8008e86:	f1b9 0f00 	cmp.w	r9, #0
 8008e8a:	dc35      	bgt.n	8008ef8 <_printf_float+0x380>
 8008e8c:	f04f 0800 	mov.w	r8, #0
 8008e90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e94:	f104 0a1a 	add.w	sl, r4, #26
 8008e98:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008e9c:	1a9b      	subs	r3, r3, r2
 8008e9e:	eba3 0309 	sub.w	r3, r3, r9
 8008ea2:	4543      	cmp	r3, r8
 8008ea4:	f77f af75 	ble.w	8008d92 <_printf_float+0x21a>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	4652      	mov	r2, sl
 8008eac:	4631      	mov	r1, r6
 8008eae:	4628      	mov	r0, r5
 8008eb0:	47b8      	blx	r7
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	f43f aeae 	beq.w	8008c14 <_printf_float+0x9c>
 8008eb8:	f108 0801 	add.w	r8, r8, #1
 8008ebc:	e7ec      	b.n	8008e98 <_printf_float+0x320>
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	4631      	mov	r1, r6
 8008ec2:	4642      	mov	r2, r8
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	47b8      	blx	r7
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d1bf      	bne.n	8008e4c <_printf_float+0x2d4>
 8008ecc:	e6a2      	b.n	8008c14 <_printf_float+0x9c>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	4631      	mov	r1, r6
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	9204      	str	r2, [sp, #16]
 8008ed6:	47b8      	blx	r7
 8008ed8:	3001      	adds	r0, #1
 8008eda:	f43f ae9b 	beq.w	8008c14 <_printf_float+0x9c>
 8008ede:	9b05      	ldr	r3, [sp, #20]
 8008ee0:	9a04      	ldr	r2, [sp, #16]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	9305      	str	r3, [sp, #20]
 8008ee6:	e7b7      	b.n	8008e58 <_printf_float+0x2e0>
 8008ee8:	4653      	mov	r3, sl
 8008eea:	465a      	mov	r2, fp
 8008eec:	4631      	mov	r1, r6
 8008eee:	4628      	mov	r0, r5
 8008ef0:	47b8      	blx	r7
 8008ef2:	3001      	adds	r0, #1
 8008ef4:	d1be      	bne.n	8008e74 <_printf_float+0x2fc>
 8008ef6:	e68d      	b.n	8008c14 <_printf_float+0x9c>
 8008ef8:	9a04      	ldr	r2, [sp, #16]
 8008efa:	464b      	mov	r3, r9
 8008efc:	4442      	add	r2, r8
 8008efe:	4631      	mov	r1, r6
 8008f00:	4628      	mov	r0, r5
 8008f02:	47b8      	blx	r7
 8008f04:	3001      	adds	r0, #1
 8008f06:	d1c1      	bne.n	8008e8c <_printf_float+0x314>
 8008f08:	e684      	b.n	8008c14 <_printf_float+0x9c>
 8008f0a:	9a08      	ldr	r2, [sp, #32]
 8008f0c:	2a01      	cmp	r2, #1
 8008f0e:	dc01      	bgt.n	8008f14 <_printf_float+0x39c>
 8008f10:	07db      	lsls	r3, r3, #31
 8008f12:	d537      	bpl.n	8008f84 <_printf_float+0x40c>
 8008f14:	2301      	movs	r3, #1
 8008f16:	4642      	mov	r2, r8
 8008f18:	4631      	mov	r1, r6
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	47b8      	blx	r7
 8008f1e:	3001      	adds	r0, #1
 8008f20:	f43f ae78 	beq.w	8008c14 <_printf_float+0x9c>
 8008f24:	4653      	mov	r3, sl
 8008f26:	465a      	mov	r2, fp
 8008f28:	4631      	mov	r1, r6
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	47b8      	blx	r7
 8008f2e:	3001      	adds	r0, #1
 8008f30:	f43f ae70 	beq.w	8008c14 <_printf_float+0x9c>
 8008f34:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008f38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f40:	d01b      	beq.n	8008f7a <_printf_float+0x402>
 8008f42:	9b08      	ldr	r3, [sp, #32]
 8008f44:	f108 0201 	add.w	r2, r8, #1
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	4631      	mov	r1, r6
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	47b8      	blx	r7
 8008f50:	3001      	adds	r0, #1
 8008f52:	d10e      	bne.n	8008f72 <_printf_float+0x3fa>
 8008f54:	e65e      	b.n	8008c14 <_printf_float+0x9c>
 8008f56:	2301      	movs	r3, #1
 8008f58:	464a      	mov	r2, r9
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	47b8      	blx	r7
 8008f60:	3001      	adds	r0, #1
 8008f62:	f43f ae57 	beq.w	8008c14 <_printf_float+0x9c>
 8008f66:	f108 0801 	add.w	r8, r8, #1
 8008f6a:	9b08      	ldr	r3, [sp, #32]
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	4543      	cmp	r3, r8
 8008f70:	dcf1      	bgt.n	8008f56 <_printf_float+0x3de>
 8008f72:	9b04      	ldr	r3, [sp, #16]
 8008f74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f78:	e6db      	b.n	8008d32 <_printf_float+0x1ba>
 8008f7a:	f04f 0800 	mov.w	r8, #0
 8008f7e:	f104 091a 	add.w	r9, r4, #26
 8008f82:	e7f2      	b.n	8008f6a <_printf_float+0x3f2>
 8008f84:	2301      	movs	r3, #1
 8008f86:	4642      	mov	r2, r8
 8008f88:	e7df      	b.n	8008f4a <_printf_float+0x3d2>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	464a      	mov	r2, r9
 8008f8e:	4631      	mov	r1, r6
 8008f90:	4628      	mov	r0, r5
 8008f92:	47b8      	blx	r7
 8008f94:	3001      	adds	r0, #1
 8008f96:	f43f ae3d 	beq.w	8008c14 <_printf_float+0x9c>
 8008f9a:	f108 0801 	add.w	r8, r8, #1
 8008f9e:	68e3      	ldr	r3, [r4, #12]
 8008fa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fa2:	1a5b      	subs	r3, r3, r1
 8008fa4:	4543      	cmp	r3, r8
 8008fa6:	dcf0      	bgt.n	8008f8a <_printf_float+0x412>
 8008fa8:	e6f7      	b.n	8008d9a <_printf_float+0x222>
 8008faa:	f04f 0800 	mov.w	r8, #0
 8008fae:	f104 0919 	add.w	r9, r4, #25
 8008fb2:	e7f4      	b.n	8008f9e <_printf_float+0x426>

08008fb4 <_printf_common>:
 8008fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb8:	4616      	mov	r6, r2
 8008fba:	4699      	mov	r9, r3
 8008fbc:	688a      	ldr	r2, [r1, #8]
 8008fbe:	690b      	ldr	r3, [r1, #16]
 8008fc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	bfb8      	it	lt
 8008fc8:	4613      	movlt	r3, r2
 8008fca:	6033      	str	r3, [r6, #0]
 8008fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fd0:	4607      	mov	r7, r0
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	b10a      	cbz	r2, 8008fda <_printf_common+0x26>
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	6033      	str	r3, [r6, #0]
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	0699      	lsls	r1, r3, #26
 8008fde:	bf42      	ittt	mi
 8008fe0:	6833      	ldrmi	r3, [r6, #0]
 8008fe2:	3302      	addmi	r3, #2
 8008fe4:	6033      	strmi	r3, [r6, #0]
 8008fe6:	6825      	ldr	r5, [r4, #0]
 8008fe8:	f015 0506 	ands.w	r5, r5, #6
 8008fec:	d106      	bne.n	8008ffc <_printf_common+0x48>
 8008fee:	f104 0a19 	add.w	sl, r4, #25
 8008ff2:	68e3      	ldr	r3, [r4, #12]
 8008ff4:	6832      	ldr	r2, [r6, #0]
 8008ff6:	1a9b      	subs	r3, r3, r2
 8008ff8:	42ab      	cmp	r3, r5
 8008ffa:	dc26      	bgt.n	800904a <_printf_common+0x96>
 8008ffc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009000:	1e13      	subs	r3, r2, #0
 8009002:	6822      	ldr	r2, [r4, #0]
 8009004:	bf18      	it	ne
 8009006:	2301      	movne	r3, #1
 8009008:	0692      	lsls	r2, r2, #26
 800900a:	d42b      	bmi.n	8009064 <_printf_common+0xb0>
 800900c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009010:	4649      	mov	r1, r9
 8009012:	4638      	mov	r0, r7
 8009014:	47c0      	blx	r8
 8009016:	3001      	adds	r0, #1
 8009018:	d01e      	beq.n	8009058 <_printf_common+0xa4>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	68e5      	ldr	r5, [r4, #12]
 800901e:	6832      	ldr	r2, [r6, #0]
 8009020:	f003 0306 	and.w	r3, r3, #6
 8009024:	2b04      	cmp	r3, #4
 8009026:	bf08      	it	eq
 8009028:	1aad      	subeq	r5, r5, r2
 800902a:	68a3      	ldr	r3, [r4, #8]
 800902c:	6922      	ldr	r2, [r4, #16]
 800902e:	bf0c      	ite	eq
 8009030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009034:	2500      	movne	r5, #0
 8009036:	4293      	cmp	r3, r2
 8009038:	bfc4      	itt	gt
 800903a:	1a9b      	subgt	r3, r3, r2
 800903c:	18ed      	addgt	r5, r5, r3
 800903e:	2600      	movs	r6, #0
 8009040:	341a      	adds	r4, #26
 8009042:	42b5      	cmp	r5, r6
 8009044:	d11a      	bne.n	800907c <_printf_common+0xc8>
 8009046:	2000      	movs	r0, #0
 8009048:	e008      	b.n	800905c <_printf_common+0xa8>
 800904a:	2301      	movs	r3, #1
 800904c:	4652      	mov	r2, sl
 800904e:	4649      	mov	r1, r9
 8009050:	4638      	mov	r0, r7
 8009052:	47c0      	blx	r8
 8009054:	3001      	adds	r0, #1
 8009056:	d103      	bne.n	8009060 <_printf_common+0xac>
 8009058:	f04f 30ff 	mov.w	r0, #4294967295
 800905c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009060:	3501      	adds	r5, #1
 8009062:	e7c6      	b.n	8008ff2 <_printf_common+0x3e>
 8009064:	18e1      	adds	r1, r4, r3
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	2030      	movs	r0, #48	; 0x30
 800906a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800906e:	4422      	add	r2, r4
 8009070:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009074:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009078:	3302      	adds	r3, #2
 800907a:	e7c7      	b.n	800900c <_printf_common+0x58>
 800907c:	2301      	movs	r3, #1
 800907e:	4622      	mov	r2, r4
 8009080:	4649      	mov	r1, r9
 8009082:	4638      	mov	r0, r7
 8009084:	47c0      	blx	r8
 8009086:	3001      	adds	r0, #1
 8009088:	d0e6      	beq.n	8009058 <_printf_common+0xa4>
 800908a:	3601      	adds	r6, #1
 800908c:	e7d9      	b.n	8009042 <_printf_common+0x8e>
	...

08009090 <_printf_i>:
 8009090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009094:	7e0f      	ldrb	r7, [r1, #24]
 8009096:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009098:	2f78      	cmp	r7, #120	; 0x78
 800909a:	4691      	mov	r9, r2
 800909c:	4680      	mov	r8, r0
 800909e:	460c      	mov	r4, r1
 80090a0:	469a      	mov	sl, r3
 80090a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090a6:	d807      	bhi.n	80090b8 <_printf_i+0x28>
 80090a8:	2f62      	cmp	r7, #98	; 0x62
 80090aa:	d80a      	bhi.n	80090c2 <_printf_i+0x32>
 80090ac:	2f00      	cmp	r7, #0
 80090ae:	f000 80d8 	beq.w	8009262 <_printf_i+0x1d2>
 80090b2:	2f58      	cmp	r7, #88	; 0x58
 80090b4:	f000 80a3 	beq.w	80091fe <_printf_i+0x16e>
 80090b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090c0:	e03a      	b.n	8009138 <_printf_i+0xa8>
 80090c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090c6:	2b15      	cmp	r3, #21
 80090c8:	d8f6      	bhi.n	80090b8 <_printf_i+0x28>
 80090ca:	a101      	add	r1, pc, #4	; (adr r1, 80090d0 <_printf_i+0x40>)
 80090cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090d0:	08009129 	.word	0x08009129
 80090d4:	0800913d 	.word	0x0800913d
 80090d8:	080090b9 	.word	0x080090b9
 80090dc:	080090b9 	.word	0x080090b9
 80090e0:	080090b9 	.word	0x080090b9
 80090e4:	080090b9 	.word	0x080090b9
 80090e8:	0800913d 	.word	0x0800913d
 80090ec:	080090b9 	.word	0x080090b9
 80090f0:	080090b9 	.word	0x080090b9
 80090f4:	080090b9 	.word	0x080090b9
 80090f8:	080090b9 	.word	0x080090b9
 80090fc:	08009249 	.word	0x08009249
 8009100:	0800916d 	.word	0x0800916d
 8009104:	0800922b 	.word	0x0800922b
 8009108:	080090b9 	.word	0x080090b9
 800910c:	080090b9 	.word	0x080090b9
 8009110:	0800926b 	.word	0x0800926b
 8009114:	080090b9 	.word	0x080090b9
 8009118:	0800916d 	.word	0x0800916d
 800911c:	080090b9 	.word	0x080090b9
 8009120:	080090b9 	.word	0x080090b9
 8009124:	08009233 	.word	0x08009233
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	1d1a      	adds	r2, r3, #4
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	602a      	str	r2, [r5, #0]
 8009130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009138:	2301      	movs	r3, #1
 800913a:	e0a3      	b.n	8009284 <_printf_i+0x1f4>
 800913c:	6820      	ldr	r0, [r4, #0]
 800913e:	6829      	ldr	r1, [r5, #0]
 8009140:	0606      	lsls	r6, r0, #24
 8009142:	f101 0304 	add.w	r3, r1, #4
 8009146:	d50a      	bpl.n	800915e <_printf_i+0xce>
 8009148:	680e      	ldr	r6, [r1, #0]
 800914a:	602b      	str	r3, [r5, #0]
 800914c:	2e00      	cmp	r6, #0
 800914e:	da03      	bge.n	8009158 <_printf_i+0xc8>
 8009150:	232d      	movs	r3, #45	; 0x2d
 8009152:	4276      	negs	r6, r6
 8009154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009158:	485e      	ldr	r0, [pc, #376]	; (80092d4 <_printf_i+0x244>)
 800915a:	230a      	movs	r3, #10
 800915c:	e019      	b.n	8009192 <_printf_i+0x102>
 800915e:	680e      	ldr	r6, [r1, #0]
 8009160:	602b      	str	r3, [r5, #0]
 8009162:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009166:	bf18      	it	ne
 8009168:	b236      	sxthne	r6, r6
 800916a:	e7ef      	b.n	800914c <_printf_i+0xbc>
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	6820      	ldr	r0, [r4, #0]
 8009170:	1d19      	adds	r1, r3, #4
 8009172:	6029      	str	r1, [r5, #0]
 8009174:	0601      	lsls	r1, r0, #24
 8009176:	d501      	bpl.n	800917c <_printf_i+0xec>
 8009178:	681e      	ldr	r6, [r3, #0]
 800917a:	e002      	b.n	8009182 <_printf_i+0xf2>
 800917c:	0646      	lsls	r6, r0, #25
 800917e:	d5fb      	bpl.n	8009178 <_printf_i+0xe8>
 8009180:	881e      	ldrh	r6, [r3, #0]
 8009182:	4854      	ldr	r0, [pc, #336]	; (80092d4 <_printf_i+0x244>)
 8009184:	2f6f      	cmp	r7, #111	; 0x6f
 8009186:	bf0c      	ite	eq
 8009188:	2308      	moveq	r3, #8
 800918a:	230a      	movne	r3, #10
 800918c:	2100      	movs	r1, #0
 800918e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009192:	6865      	ldr	r5, [r4, #4]
 8009194:	60a5      	str	r5, [r4, #8]
 8009196:	2d00      	cmp	r5, #0
 8009198:	bfa2      	ittt	ge
 800919a:	6821      	ldrge	r1, [r4, #0]
 800919c:	f021 0104 	bicge.w	r1, r1, #4
 80091a0:	6021      	strge	r1, [r4, #0]
 80091a2:	b90e      	cbnz	r6, 80091a8 <_printf_i+0x118>
 80091a4:	2d00      	cmp	r5, #0
 80091a6:	d04d      	beq.n	8009244 <_printf_i+0x1b4>
 80091a8:	4615      	mov	r5, r2
 80091aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80091ae:	fb03 6711 	mls	r7, r3, r1, r6
 80091b2:	5dc7      	ldrb	r7, [r0, r7]
 80091b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091b8:	4637      	mov	r7, r6
 80091ba:	42bb      	cmp	r3, r7
 80091bc:	460e      	mov	r6, r1
 80091be:	d9f4      	bls.n	80091aa <_printf_i+0x11a>
 80091c0:	2b08      	cmp	r3, #8
 80091c2:	d10b      	bne.n	80091dc <_printf_i+0x14c>
 80091c4:	6823      	ldr	r3, [r4, #0]
 80091c6:	07de      	lsls	r6, r3, #31
 80091c8:	d508      	bpl.n	80091dc <_printf_i+0x14c>
 80091ca:	6923      	ldr	r3, [r4, #16]
 80091cc:	6861      	ldr	r1, [r4, #4]
 80091ce:	4299      	cmp	r1, r3
 80091d0:	bfde      	ittt	le
 80091d2:	2330      	movle	r3, #48	; 0x30
 80091d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091dc:	1b52      	subs	r2, r2, r5
 80091de:	6122      	str	r2, [r4, #16]
 80091e0:	f8cd a000 	str.w	sl, [sp]
 80091e4:	464b      	mov	r3, r9
 80091e6:	aa03      	add	r2, sp, #12
 80091e8:	4621      	mov	r1, r4
 80091ea:	4640      	mov	r0, r8
 80091ec:	f7ff fee2 	bl	8008fb4 <_printf_common>
 80091f0:	3001      	adds	r0, #1
 80091f2:	d14c      	bne.n	800928e <_printf_i+0x1fe>
 80091f4:	f04f 30ff 	mov.w	r0, #4294967295
 80091f8:	b004      	add	sp, #16
 80091fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fe:	4835      	ldr	r0, [pc, #212]	; (80092d4 <_printf_i+0x244>)
 8009200:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009204:	6829      	ldr	r1, [r5, #0]
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	f851 6b04 	ldr.w	r6, [r1], #4
 800920c:	6029      	str	r1, [r5, #0]
 800920e:	061d      	lsls	r5, r3, #24
 8009210:	d514      	bpl.n	800923c <_printf_i+0x1ac>
 8009212:	07df      	lsls	r7, r3, #31
 8009214:	bf44      	itt	mi
 8009216:	f043 0320 	orrmi.w	r3, r3, #32
 800921a:	6023      	strmi	r3, [r4, #0]
 800921c:	b91e      	cbnz	r6, 8009226 <_printf_i+0x196>
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	f023 0320 	bic.w	r3, r3, #32
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	2310      	movs	r3, #16
 8009228:	e7b0      	b.n	800918c <_printf_i+0xfc>
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	f043 0320 	orr.w	r3, r3, #32
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	2378      	movs	r3, #120	; 0x78
 8009234:	4828      	ldr	r0, [pc, #160]	; (80092d8 <_printf_i+0x248>)
 8009236:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800923a:	e7e3      	b.n	8009204 <_printf_i+0x174>
 800923c:	0659      	lsls	r1, r3, #25
 800923e:	bf48      	it	mi
 8009240:	b2b6      	uxthmi	r6, r6
 8009242:	e7e6      	b.n	8009212 <_printf_i+0x182>
 8009244:	4615      	mov	r5, r2
 8009246:	e7bb      	b.n	80091c0 <_printf_i+0x130>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	6826      	ldr	r6, [r4, #0]
 800924c:	6961      	ldr	r1, [r4, #20]
 800924e:	1d18      	adds	r0, r3, #4
 8009250:	6028      	str	r0, [r5, #0]
 8009252:	0635      	lsls	r5, r6, #24
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	d501      	bpl.n	800925c <_printf_i+0x1cc>
 8009258:	6019      	str	r1, [r3, #0]
 800925a:	e002      	b.n	8009262 <_printf_i+0x1d2>
 800925c:	0670      	lsls	r0, r6, #25
 800925e:	d5fb      	bpl.n	8009258 <_printf_i+0x1c8>
 8009260:	8019      	strh	r1, [r3, #0]
 8009262:	2300      	movs	r3, #0
 8009264:	6123      	str	r3, [r4, #16]
 8009266:	4615      	mov	r5, r2
 8009268:	e7ba      	b.n	80091e0 <_printf_i+0x150>
 800926a:	682b      	ldr	r3, [r5, #0]
 800926c:	1d1a      	adds	r2, r3, #4
 800926e:	602a      	str	r2, [r5, #0]
 8009270:	681d      	ldr	r5, [r3, #0]
 8009272:	6862      	ldr	r2, [r4, #4]
 8009274:	2100      	movs	r1, #0
 8009276:	4628      	mov	r0, r5
 8009278:	f7f7 f83a 	bl	80002f0 <memchr>
 800927c:	b108      	cbz	r0, 8009282 <_printf_i+0x1f2>
 800927e:	1b40      	subs	r0, r0, r5
 8009280:	6060      	str	r0, [r4, #4]
 8009282:	6863      	ldr	r3, [r4, #4]
 8009284:	6123      	str	r3, [r4, #16]
 8009286:	2300      	movs	r3, #0
 8009288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800928c:	e7a8      	b.n	80091e0 <_printf_i+0x150>
 800928e:	6923      	ldr	r3, [r4, #16]
 8009290:	462a      	mov	r2, r5
 8009292:	4649      	mov	r1, r9
 8009294:	4640      	mov	r0, r8
 8009296:	47d0      	blx	sl
 8009298:	3001      	adds	r0, #1
 800929a:	d0ab      	beq.n	80091f4 <_printf_i+0x164>
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	079b      	lsls	r3, r3, #30
 80092a0:	d413      	bmi.n	80092ca <_printf_i+0x23a>
 80092a2:	68e0      	ldr	r0, [r4, #12]
 80092a4:	9b03      	ldr	r3, [sp, #12]
 80092a6:	4298      	cmp	r0, r3
 80092a8:	bfb8      	it	lt
 80092aa:	4618      	movlt	r0, r3
 80092ac:	e7a4      	b.n	80091f8 <_printf_i+0x168>
 80092ae:	2301      	movs	r3, #1
 80092b0:	4632      	mov	r2, r6
 80092b2:	4649      	mov	r1, r9
 80092b4:	4640      	mov	r0, r8
 80092b6:	47d0      	blx	sl
 80092b8:	3001      	adds	r0, #1
 80092ba:	d09b      	beq.n	80091f4 <_printf_i+0x164>
 80092bc:	3501      	adds	r5, #1
 80092be:	68e3      	ldr	r3, [r4, #12]
 80092c0:	9903      	ldr	r1, [sp, #12]
 80092c2:	1a5b      	subs	r3, r3, r1
 80092c4:	42ab      	cmp	r3, r5
 80092c6:	dcf2      	bgt.n	80092ae <_printf_i+0x21e>
 80092c8:	e7eb      	b.n	80092a2 <_printf_i+0x212>
 80092ca:	2500      	movs	r5, #0
 80092cc:	f104 0619 	add.w	r6, r4, #25
 80092d0:	e7f5      	b.n	80092be <_printf_i+0x22e>
 80092d2:	bf00      	nop
 80092d4:	0800b232 	.word	0x0800b232
 80092d8:	0800b243 	.word	0x0800b243

080092dc <iprintf>:
 80092dc:	b40f      	push	{r0, r1, r2, r3}
 80092de:	4b0a      	ldr	r3, [pc, #40]	; (8009308 <iprintf+0x2c>)
 80092e0:	b513      	push	{r0, r1, r4, lr}
 80092e2:	681c      	ldr	r4, [r3, #0]
 80092e4:	b124      	cbz	r4, 80092f0 <iprintf+0x14>
 80092e6:	69a3      	ldr	r3, [r4, #24]
 80092e8:	b913      	cbnz	r3, 80092f0 <iprintf+0x14>
 80092ea:	4620      	mov	r0, r4
 80092ec:	f7ff fa44 	bl	8008778 <__sinit>
 80092f0:	ab05      	add	r3, sp, #20
 80092f2:	9a04      	ldr	r2, [sp, #16]
 80092f4:	68a1      	ldr	r1, [r4, #8]
 80092f6:	9301      	str	r3, [sp, #4]
 80092f8:	4620      	mov	r0, r4
 80092fa:	f001 fbdf 	bl	800aabc <_vfiprintf_r>
 80092fe:	b002      	add	sp, #8
 8009300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009304:	b004      	add	sp, #16
 8009306:	4770      	bx	lr
 8009308:	24000014 	.word	0x24000014

0800930c <cleanup_glue>:
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	460c      	mov	r4, r1
 8009310:	6809      	ldr	r1, [r1, #0]
 8009312:	4605      	mov	r5, r0
 8009314:	b109      	cbz	r1, 800931a <cleanup_glue+0xe>
 8009316:	f7ff fff9 	bl	800930c <cleanup_glue>
 800931a:	4621      	mov	r1, r4
 800931c:	4628      	mov	r0, r5
 800931e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009322:	f001 bb55 	b.w	800a9d0 <_free_r>
	...

08009328 <_reclaim_reent>:
 8009328:	4b2c      	ldr	r3, [pc, #176]	; (80093dc <_reclaim_reent+0xb4>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4283      	cmp	r3, r0
 800932e:	b570      	push	{r4, r5, r6, lr}
 8009330:	4604      	mov	r4, r0
 8009332:	d051      	beq.n	80093d8 <_reclaim_reent+0xb0>
 8009334:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009336:	b143      	cbz	r3, 800934a <_reclaim_reent+0x22>
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d14a      	bne.n	80093d4 <_reclaim_reent+0xac>
 800933e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009340:	6819      	ldr	r1, [r3, #0]
 8009342:	b111      	cbz	r1, 800934a <_reclaim_reent+0x22>
 8009344:	4620      	mov	r0, r4
 8009346:	f001 fb43 	bl	800a9d0 <_free_r>
 800934a:	6961      	ldr	r1, [r4, #20]
 800934c:	b111      	cbz	r1, 8009354 <_reclaim_reent+0x2c>
 800934e:	4620      	mov	r0, r4
 8009350:	f001 fb3e 	bl	800a9d0 <_free_r>
 8009354:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009356:	b111      	cbz	r1, 800935e <_reclaim_reent+0x36>
 8009358:	4620      	mov	r0, r4
 800935a:	f001 fb39 	bl	800a9d0 <_free_r>
 800935e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009360:	b111      	cbz	r1, 8009368 <_reclaim_reent+0x40>
 8009362:	4620      	mov	r0, r4
 8009364:	f001 fb34 	bl	800a9d0 <_free_r>
 8009368:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800936a:	b111      	cbz	r1, 8009372 <_reclaim_reent+0x4a>
 800936c:	4620      	mov	r0, r4
 800936e:	f001 fb2f 	bl	800a9d0 <_free_r>
 8009372:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009374:	b111      	cbz	r1, 800937c <_reclaim_reent+0x54>
 8009376:	4620      	mov	r0, r4
 8009378:	f001 fb2a 	bl	800a9d0 <_free_r>
 800937c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800937e:	b111      	cbz	r1, 8009386 <_reclaim_reent+0x5e>
 8009380:	4620      	mov	r0, r4
 8009382:	f001 fb25 	bl	800a9d0 <_free_r>
 8009386:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009388:	b111      	cbz	r1, 8009390 <_reclaim_reent+0x68>
 800938a:	4620      	mov	r0, r4
 800938c:	f001 fb20 	bl	800a9d0 <_free_r>
 8009390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009392:	b111      	cbz	r1, 800939a <_reclaim_reent+0x72>
 8009394:	4620      	mov	r0, r4
 8009396:	f001 fb1b 	bl	800a9d0 <_free_r>
 800939a:	69a3      	ldr	r3, [r4, #24]
 800939c:	b1e3      	cbz	r3, 80093d8 <_reclaim_reent+0xb0>
 800939e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80093a0:	4620      	mov	r0, r4
 80093a2:	4798      	blx	r3
 80093a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80093a6:	b1b9      	cbz	r1, 80093d8 <_reclaim_reent+0xb0>
 80093a8:	4620      	mov	r0, r4
 80093aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80093ae:	f7ff bfad 	b.w	800930c <cleanup_glue>
 80093b2:	5949      	ldr	r1, [r1, r5]
 80093b4:	b941      	cbnz	r1, 80093c8 <_reclaim_reent+0xa0>
 80093b6:	3504      	adds	r5, #4
 80093b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093ba:	2d80      	cmp	r5, #128	; 0x80
 80093bc:	68d9      	ldr	r1, [r3, #12]
 80093be:	d1f8      	bne.n	80093b2 <_reclaim_reent+0x8a>
 80093c0:	4620      	mov	r0, r4
 80093c2:	f001 fb05 	bl	800a9d0 <_free_r>
 80093c6:	e7ba      	b.n	800933e <_reclaim_reent+0x16>
 80093c8:	680e      	ldr	r6, [r1, #0]
 80093ca:	4620      	mov	r0, r4
 80093cc:	f001 fb00 	bl	800a9d0 <_free_r>
 80093d0:	4631      	mov	r1, r6
 80093d2:	e7ef      	b.n	80093b4 <_reclaim_reent+0x8c>
 80093d4:	2500      	movs	r5, #0
 80093d6:	e7ef      	b.n	80093b8 <_reclaim_reent+0x90>
 80093d8:	bd70      	pop	{r4, r5, r6, pc}
 80093da:	bf00      	nop
 80093dc:	24000014 	.word	0x24000014

080093e0 <_sbrk_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4d06      	ldr	r5, [pc, #24]	; (80093fc <_sbrk_r+0x1c>)
 80093e4:	2300      	movs	r3, #0
 80093e6:	4604      	mov	r4, r0
 80093e8:	4608      	mov	r0, r1
 80093ea:	602b      	str	r3, [r5, #0]
 80093ec:	f7f7 fec4 	bl	8001178 <_sbrk>
 80093f0:	1c43      	adds	r3, r0, #1
 80093f2:	d102      	bne.n	80093fa <_sbrk_r+0x1a>
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	b103      	cbz	r3, 80093fa <_sbrk_r+0x1a>
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
 80093fc:	24004d9c 	.word	0x24004d9c

08009400 <__sread>:
 8009400:	b510      	push	{r4, lr}
 8009402:	460c      	mov	r4, r1
 8009404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009408:	f001 fc88 	bl	800ad1c <_read_r>
 800940c:	2800      	cmp	r0, #0
 800940e:	bfab      	itete	ge
 8009410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009412:	89a3      	ldrhlt	r3, [r4, #12]
 8009414:	181b      	addge	r3, r3, r0
 8009416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800941a:	bfac      	ite	ge
 800941c:	6563      	strge	r3, [r4, #84]	; 0x54
 800941e:	81a3      	strhlt	r3, [r4, #12]
 8009420:	bd10      	pop	{r4, pc}

08009422 <__swrite>:
 8009422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009426:	461f      	mov	r7, r3
 8009428:	898b      	ldrh	r3, [r1, #12]
 800942a:	05db      	lsls	r3, r3, #23
 800942c:	4605      	mov	r5, r0
 800942e:	460c      	mov	r4, r1
 8009430:	4616      	mov	r6, r2
 8009432:	d505      	bpl.n	8009440 <__swrite+0x1e>
 8009434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009438:	2302      	movs	r3, #2
 800943a:	2200      	movs	r2, #0
 800943c:	f000 ff08 	bl	800a250 <_lseek_r>
 8009440:	89a3      	ldrh	r3, [r4, #12]
 8009442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800944a:	81a3      	strh	r3, [r4, #12]
 800944c:	4632      	mov	r2, r6
 800944e:	463b      	mov	r3, r7
 8009450:	4628      	mov	r0, r5
 8009452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009456:	f000 b817 	b.w	8009488 <_write_r>

0800945a <__sseek>:
 800945a:	b510      	push	{r4, lr}
 800945c:	460c      	mov	r4, r1
 800945e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009462:	f000 fef5 	bl	800a250 <_lseek_r>
 8009466:	1c43      	adds	r3, r0, #1
 8009468:	89a3      	ldrh	r3, [r4, #12]
 800946a:	bf15      	itete	ne
 800946c:	6560      	strne	r0, [r4, #84]	; 0x54
 800946e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009476:	81a3      	strheq	r3, [r4, #12]
 8009478:	bf18      	it	ne
 800947a:	81a3      	strhne	r3, [r4, #12]
 800947c:	bd10      	pop	{r4, pc}

0800947e <__sclose>:
 800947e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009482:	f000 b813 	b.w	80094ac <_close_r>
	...

08009488 <_write_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	4d07      	ldr	r5, [pc, #28]	; (80094a8 <_write_r+0x20>)
 800948c:	4604      	mov	r4, r0
 800948e:	4608      	mov	r0, r1
 8009490:	4611      	mov	r1, r2
 8009492:	2200      	movs	r2, #0
 8009494:	602a      	str	r2, [r5, #0]
 8009496:	461a      	mov	r2, r3
 8009498:	f7f7 fe1d 	bl	80010d6 <_write>
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	d102      	bne.n	80094a6 <_write_r+0x1e>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	b103      	cbz	r3, 80094a6 <_write_r+0x1e>
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	24004d9c 	.word	0x24004d9c

080094ac <_close_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4d06      	ldr	r5, [pc, #24]	; (80094c8 <_close_r+0x1c>)
 80094b0:	2300      	movs	r3, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	602b      	str	r3, [r5, #0]
 80094b8:	f7f7 fe29 	bl	800110e <_close>
 80094bc:	1c43      	adds	r3, r0, #1
 80094be:	d102      	bne.n	80094c6 <_close_r+0x1a>
 80094c0:	682b      	ldr	r3, [r5, #0]
 80094c2:	b103      	cbz	r3, 80094c6 <_close_r+0x1a>
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	bd38      	pop	{r3, r4, r5, pc}
 80094c8:	24004d9c 	.word	0x24004d9c

080094cc <quorem>:
 80094cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d0:	6903      	ldr	r3, [r0, #16]
 80094d2:	690c      	ldr	r4, [r1, #16]
 80094d4:	42a3      	cmp	r3, r4
 80094d6:	4607      	mov	r7, r0
 80094d8:	f2c0 8081 	blt.w	80095de <quorem+0x112>
 80094dc:	3c01      	subs	r4, #1
 80094de:	f101 0814 	add.w	r8, r1, #20
 80094e2:	f100 0514 	add.w	r5, r0, #20
 80094e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094ea:	9301      	str	r3, [sp, #4]
 80094ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094f4:	3301      	adds	r3, #1
 80094f6:	429a      	cmp	r2, r3
 80094f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009500:	fbb2 f6f3 	udiv	r6, r2, r3
 8009504:	d331      	bcc.n	800956a <quorem+0x9e>
 8009506:	f04f 0e00 	mov.w	lr, #0
 800950a:	4640      	mov	r0, r8
 800950c:	46ac      	mov	ip, r5
 800950e:	46f2      	mov	sl, lr
 8009510:	f850 2b04 	ldr.w	r2, [r0], #4
 8009514:	b293      	uxth	r3, r2
 8009516:	fb06 e303 	mla	r3, r6, r3, lr
 800951a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800951e:	b29b      	uxth	r3, r3
 8009520:	ebaa 0303 	sub.w	r3, sl, r3
 8009524:	f8dc a000 	ldr.w	sl, [ip]
 8009528:	0c12      	lsrs	r2, r2, #16
 800952a:	fa13 f38a 	uxtah	r3, r3, sl
 800952e:	fb06 e202 	mla	r2, r6, r2, lr
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	9b00      	ldr	r3, [sp, #0]
 8009536:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800953a:	b292      	uxth	r2, r2
 800953c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009540:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009544:	f8bd 3000 	ldrh.w	r3, [sp]
 8009548:	4581      	cmp	r9, r0
 800954a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800954e:	f84c 3b04 	str.w	r3, [ip], #4
 8009552:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009556:	d2db      	bcs.n	8009510 <quorem+0x44>
 8009558:	f855 300b 	ldr.w	r3, [r5, fp]
 800955c:	b92b      	cbnz	r3, 800956a <quorem+0x9e>
 800955e:	9b01      	ldr	r3, [sp, #4]
 8009560:	3b04      	subs	r3, #4
 8009562:	429d      	cmp	r5, r3
 8009564:	461a      	mov	r2, r3
 8009566:	d32e      	bcc.n	80095c6 <quorem+0xfa>
 8009568:	613c      	str	r4, [r7, #16]
 800956a:	4638      	mov	r0, r7
 800956c:	f001 f918 	bl	800a7a0 <__mcmp>
 8009570:	2800      	cmp	r0, #0
 8009572:	db24      	blt.n	80095be <quorem+0xf2>
 8009574:	3601      	adds	r6, #1
 8009576:	4628      	mov	r0, r5
 8009578:	f04f 0c00 	mov.w	ip, #0
 800957c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009580:	f8d0 e000 	ldr.w	lr, [r0]
 8009584:	b293      	uxth	r3, r2
 8009586:	ebac 0303 	sub.w	r3, ip, r3
 800958a:	0c12      	lsrs	r2, r2, #16
 800958c:	fa13 f38e 	uxtah	r3, r3, lr
 8009590:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009594:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009598:	b29b      	uxth	r3, r3
 800959a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800959e:	45c1      	cmp	r9, r8
 80095a0:	f840 3b04 	str.w	r3, [r0], #4
 80095a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80095a8:	d2e8      	bcs.n	800957c <quorem+0xb0>
 80095aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095b2:	b922      	cbnz	r2, 80095be <quorem+0xf2>
 80095b4:	3b04      	subs	r3, #4
 80095b6:	429d      	cmp	r5, r3
 80095b8:	461a      	mov	r2, r3
 80095ba:	d30a      	bcc.n	80095d2 <quorem+0x106>
 80095bc:	613c      	str	r4, [r7, #16]
 80095be:	4630      	mov	r0, r6
 80095c0:	b003      	add	sp, #12
 80095c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c6:	6812      	ldr	r2, [r2, #0]
 80095c8:	3b04      	subs	r3, #4
 80095ca:	2a00      	cmp	r2, #0
 80095cc:	d1cc      	bne.n	8009568 <quorem+0x9c>
 80095ce:	3c01      	subs	r4, #1
 80095d0:	e7c7      	b.n	8009562 <quorem+0x96>
 80095d2:	6812      	ldr	r2, [r2, #0]
 80095d4:	3b04      	subs	r3, #4
 80095d6:	2a00      	cmp	r2, #0
 80095d8:	d1f0      	bne.n	80095bc <quorem+0xf0>
 80095da:	3c01      	subs	r4, #1
 80095dc:	e7eb      	b.n	80095b6 <quorem+0xea>
 80095de:	2000      	movs	r0, #0
 80095e0:	e7ee      	b.n	80095c0 <quorem+0xf4>
 80095e2:	0000      	movs	r0, r0
 80095e4:	0000      	movs	r0, r0
	...

080095e8 <_dtoa_r>:
 80095e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ec:	ed2d 8b02 	vpush	{d8}
 80095f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095f2:	b091      	sub	sp, #68	; 0x44
 80095f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80095f8:	ec59 8b10 	vmov	r8, r9, d0
 80095fc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80095fe:	9106      	str	r1, [sp, #24]
 8009600:	4606      	mov	r6, r0
 8009602:	9208      	str	r2, [sp, #32]
 8009604:	930c      	str	r3, [sp, #48]	; 0x30
 8009606:	b975      	cbnz	r5, 8009626 <_dtoa_r+0x3e>
 8009608:	2010      	movs	r0, #16
 800960a:	f000 fe33 	bl	800a274 <malloc>
 800960e:	4602      	mov	r2, r0
 8009610:	6270      	str	r0, [r6, #36]	; 0x24
 8009612:	b920      	cbnz	r0, 800961e <_dtoa_r+0x36>
 8009614:	4baa      	ldr	r3, [pc, #680]	; (80098c0 <_dtoa_r+0x2d8>)
 8009616:	21ea      	movs	r1, #234	; 0xea
 8009618:	48aa      	ldr	r0, [pc, #680]	; (80098c4 <_dtoa_r+0x2dc>)
 800961a:	f001 fc51 	bl	800aec0 <__assert_func>
 800961e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009622:	6005      	str	r5, [r0, #0]
 8009624:	60c5      	str	r5, [r0, #12]
 8009626:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009628:	6819      	ldr	r1, [r3, #0]
 800962a:	b151      	cbz	r1, 8009642 <_dtoa_r+0x5a>
 800962c:	685a      	ldr	r2, [r3, #4]
 800962e:	604a      	str	r2, [r1, #4]
 8009630:	2301      	movs	r3, #1
 8009632:	4093      	lsls	r3, r2
 8009634:	608b      	str	r3, [r1, #8]
 8009636:	4630      	mov	r0, r6
 8009638:	f000 fe70 	bl	800a31c <_Bfree>
 800963c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800963e:	2200      	movs	r2, #0
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	f1b9 0300 	subs.w	r3, r9, #0
 8009646:	bfbb      	ittet	lt
 8009648:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800964c:	9303      	strlt	r3, [sp, #12]
 800964e:	2300      	movge	r3, #0
 8009650:	2201      	movlt	r2, #1
 8009652:	bfac      	ite	ge
 8009654:	6023      	strge	r3, [r4, #0]
 8009656:	6022      	strlt	r2, [r4, #0]
 8009658:	4b9b      	ldr	r3, [pc, #620]	; (80098c8 <_dtoa_r+0x2e0>)
 800965a:	9c03      	ldr	r4, [sp, #12]
 800965c:	43a3      	bics	r3, r4
 800965e:	d11c      	bne.n	800969a <_dtoa_r+0xb2>
 8009660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009662:	f242 730f 	movw	r3, #9999	; 0x270f
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800966c:	ea53 0308 	orrs.w	r3, r3, r8
 8009670:	f000 84fd 	beq.w	800a06e <_dtoa_r+0xa86>
 8009674:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009676:	b963      	cbnz	r3, 8009692 <_dtoa_r+0xaa>
 8009678:	4b94      	ldr	r3, [pc, #592]	; (80098cc <_dtoa_r+0x2e4>)
 800967a:	e01f      	b.n	80096bc <_dtoa_r+0xd4>
 800967c:	4b94      	ldr	r3, [pc, #592]	; (80098d0 <_dtoa_r+0x2e8>)
 800967e:	9301      	str	r3, [sp, #4]
 8009680:	3308      	adds	r3, #8
 8009682:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009684:	6013      	str	r3, [r2, #0]
 8009686:	9801      	ldr	r0, [sp, #4]
 8009688:	b011      	add	sp, #68	; 0x44
 800968a:	ecbd 8b02 	vpop	{d8}
 800968e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009692:	4b8e      	ldr	r3, [pc, #568]	; (80098cc <_dtoa_r+0x2e4>)
 8009694:	9301      	str	r3, [sp, #4]
 8009696:	3303      	adds	r3, #3
 8009698:	e7f3      	b.n	8009682 <_dtoa_r+0x9a>
 800969a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800969e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80096a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a6:	d10b      	bne.n	80096c0 <_dtoa_r+0xd8>
 80096a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096aa:	2301      	movs	r3, #1
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f000 84d9 	beq.w	800a068 <_dtoa_r+0xa80>
 80096b6:	4887      	ldr	r0, [pc, #540]	; (80098d4 <_dtoa_r+0x2ec>)
 80096b8:	6018      	str	r0, [r3, #0]
 80096ba:	1e43      	subs	r3, r0, #1
 80096bc:	9301      	str	r3, [sp, #4]
 80096be:	e7e2      	b.n	8009686 <_dtoa_r+0x9e>
 80096c0:	a90f      	add	r1, sp, #60	; 0x3c
 80096c2:	aa0e      	add	r2, sp, #56	; 0x38
 80096c4:	4630      	mov	r0, r6
 80096c6:	eeb0 0b48 	vmov.f64	d0, d8
 80096ca:	f001 f90f 	bl	800a8ec <__d2b>
 80096ce:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80096d2:	4605      	mov	r5, r0
 80096d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80096d6:	2900      	cmp	r1, #0
 80096d8:	d046      	beq.n	8009768 <_dtoa_r+0x180>
 80096da:	ee18 4a90 	vmov	r4, s17
 80096de:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80096e2:	ec53 2b18 	vmov	r2, r3, d8
 80096e6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80096ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80096ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80096f2:	2400      	movs	r4, #0
 80096f4:	ec43 2b16 	vmov	d6, r2, r3
 80096f8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80096fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80098a8 <_dtoa_r+0x2c0>
 8009700:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009704:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80098b0 <_dtoa_r+0x2c8>
 8009708:	eea7 6b05 	vfma.f64	d6, d7, d5
 800970c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80098b8 <_dtoa_r+0x2d0>
 8009710:	ee07 1a90 	vmov	s15, r1
 8009714:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009718:	eeb0 7b46 	vmov.f64	d7, d6
 800971c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009720:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009724:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800972c:	ee16 ba90 	vmov	fp, s13
 8009730:	940a      	str	r4, [sp, #40]	; 0x28
 8009732:	d508      	bpl.n	8009746 <_dtoa_r+0x15e>
 8009734:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009738:	eeb4 6b47 	vcmp.f64	d6, d7
 800973c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009740:	bf18      	it	ne
 8009742:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009746:	f1bb 0f16 	cmp.w	fp, #22
 800974a:	d82f      	bhi.n	80097ac <_dtoa_r+0x1c4>
 800974c:	4b62      	ldr	r3, [pc, #392]	; (80098d8 <_dtoa_r+0x2f0>)
 800974e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009752:	ed93 7b00 	vldr	d7, [r3]
 8009756:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800975a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800975e:	d501      	bpl.n	8009764 <_dtoa_r+0x17c>
 8009760:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009764:	2300      	movs	r3, #0
 8009766:	e022      	b.n	80097ae <_dtoa_r+0x1c6>
 8009768:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800976a:	4401      	add	r1, r0
 800976c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009770:	2b20      	cmp	r3, #32
 8009772:	bfc1      	itttt	gt
 8009774:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009778:	fa04 f303 	lslgt.w	r3, r4, r3
 800977c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009780:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009784:	bfd6      	itet	le
 8009786:	f1c3 0320 	rsble	r3, r3, #32
 800978a:	ea43 0808 	orrgt.w	r8, r3, r8
 800978e:	fa08 f803 	lslle.w	r8, r8, r3
 8009792:	ee07 8a90 	vmov	s15, r8
 8009796:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800979a:	3901      	subs	r1, #1
 800979c:	ee17 4a90 	vmov	r4, s15
 80097a0:	ec53 2b17 	vmov	r2, r3, d7
 80097a4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80097a8:	2401      	movs	r4, #1
 80097aa:	e7a3      	b.n	80096f4 <_dtoa_r+0x10c>
 80097ac:	2301      	movs	r3, #1
 80097ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80097b0:	1a43      	subs	r3, r0, r1
 80097b2:	1e5a      	subs	r2, r3, #1
 80097b4:	bf45      	ittet	mi
 80097b6:	f1c3 0301 	rsbmi	r3, r3, #1
 80097ba:	9304      	strmi	r3, [sp, #16]
 80097bc:	2300      	movpl	r3, #0
 80097be:	2300      	movmi	r3, #0
 80097c0:	9205      	str	r2, [sp, #20]
 80097c2:	bf54      	ite	pl
 80097c4:	9304      	strpl	r3, [sp, #16]
 80097c6:	9305      	strmi	r3, [sp, #20]
 80097c8:	f1bb 0f00 	cmp.w	fp, #0
 80097cc:	db18      	blt.n	8009800 <_dtoa_r+0x218>
 80097ce:	9b05      	ldr	r3, [sp, #20]
 80097d0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80097d4:	445b      	add	r3, fp
 80097d6:	9305      	str	r3, [sp, #20]
 80097d8:	2300      	movs	r3, #0
 80097da:	9a06      	ldr	r2, [sp, #24]
 80097dc:	2a09      	cmp	r2, #9
 80097de:	d849      	bhi.n	8009874 <_dtoa_r+0x28c>
 80097e0:	2a05      	cmp	r2, #5
 80097e2:	bfc4      	itt	gt
 80097e4:	3a04      	subgt	r2, #4
 80097e6:	9206      	strgt	r2, [sp, #24]
 80097e8:	9a06      	ldr	r2, [sp, #24]
 80097ea:	f1a2 0202 	sub.w	r2, r2, #2
 80097ee:	bfcc      	ite	gt
 80097f0:	2400      	movgt	r4, #0
 80097f2:	2401      	movle	r4, #1
 80097f4:	2a03      	cmp	r2, #3
 80097f6:	d848      	bhi.n	800988a <_dtoa_r+0x2a2>
 80097f8:	e8df f002 	tbb	[pc, r2]
 80097fc:	3a2c2e0b 	.word	0x3a2c2e0b
 8009800:	9b04      	ldr	r3, [sp, #16]
 8009802:	2200      	movs	r2, #0
 8009804:	eba3 030b 	sub.w	r3, r3, fp
 8009808:	9304      	str	r3, [sp, #16]
 800980a:	9209      	str	r2, [sp, #36]	; 0x24
 800980c:	f1cb 0300 	rsb	r3, fp, #0
 8009810:	e7e3      	b.n	80097da <_dtoa_r+0x1f2>
 8009812:	2200      	movs	r2, #0
 8009814:	9207      	str	r2, [sp, #28]
 8009816:	9a08      	ldr	r2, [sp, #32]
 8009818:	2a00      	cmp	r2, #0
 800981a:	dc39      	bgt.n	8009890 <_dtoa_r+0x2a8>
 800981c:	f04f 0a01 	mov.w	sl, #1
 8009820:	46d1      	mov	r9, sl
 8009822:	4652      	mov	r2, sl
 8009824:	f8cd a020 	str.w	sl, [sp, #32]
 8009828:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800982a:	2100      	movs	r1, #0
 800982c:	6079      	str	r1, [r7, #4]
 800982e:	2004      	movs	r0, #4
 8009830:	f100 0c14 	add.w	ip, r0, #20
 8009834:	4594      	cmp	ip, r2
 8009836:	6879      	ldr	r1, [r7, #4]
 8009838:	d92f      	bls.n	800989a <_dtoa_r+0x2b2>
 800983a:	4630      	mov	r0, r6
 800983c:	930d      	str	r3, [sp, #52]	; 0x34
 800983e:	f000 fd2d 	bl	800a29c <_Balloc>
 8009842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009844:	9001      	str	r0, [sp, #4]
 8009846:	4602      	mov	r2, r0
 8009848:	2800      	cmp	r0, #0
 800984a:	d149      	bne.n	80098e0 <_dtoa_r+0x2f8>
 800984c:	4b23      	ldr	r3, [pc, #140]	; (80098dc <_dtoa_r+0x2f4>)
 800984e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009852:	e6e1      	b.n	8009618 <_dtoa_r+0x30>
 8009854:	2201      	movs	r2, #1
 8009856:	e7dd      	b.n	8009814 <_dtoa_r+0x22c>
 8009858:	2200      	movs	r2, #0
 800985a:	9207      	str	r2, [sp, #28]
 800985c:	9a08      	ldr	r2, [sp, #32]
 800985e:	eb0b 0a02 	add.w	sl, fp, r2
 8009862:	f10a 0901 	add.w	r9, sl, #1
 8009866:	464a      	mov	r2, r9
 8009868:	2a01      	cmp	r2, #1
 800986a:	bfb8      	it	lt
 800986c:	2201      	movlt	r2, #1
 800986e:	e7db      	b.n	8009828 <_dtoa_r+0x240>
 8009870:	2201      	movs	r2, #1
 8009872:	e7f2      	b.n	800985a <_dtoa_r+0x272>
 8009874:	2401      	movs	r4, #1
 8009876:	2200      	movs	r2, #0
 8009878:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800987c:	f04f 3aff 	mov.w	sl, #4294967295
 8009880:	2100      	movs	r1, #0
 8009882:	46d1      	mov	r9, sl
 8009884:	2212      	movs	r2, #18
 8009886:	9108      	str	r1, [sp, #32]
 8009888:	e7ce      	b.n	8009828 <_dtoa_r+0x240>
 800988a:	2201      	movs	r2, #1
 800988c:	9207      	str	r2, [sp, #28]
 800988e:	e7f5      	b.n	800987c <_dtoa_r+0x294>
 8009890:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009894:	46d1      	mov	r9, sl
 8009896:	4652      	mov	r2, sl
 8009898:	e7c6      	b.n	8009828 <_dtoa_r+0x240>
 800989a:	3101      	adds	r1, #1
 800989c:	6079      	str	r1, [r7, #4]
 800989e:	0040      	lsls	r0, r0, #1
 80098a0:	e7c6      	b.n	8009830 <_dtoa_r+0x248>
 80098a2:	bf00      	nop
 80098a4:	f3af 8000 	nop.w
 80098a8:	636f4361 	.word	0x636f4361
 80098ac:	3fd287a7 	.word	0x3fd287a7
 80098b0:	8b60c8b3 	.word	0x8b60c8b3
 80098b4:	3fc68a28 	.word	0x3fc68a28
 80098b8:	509f79fb 	.word	0x509f79fb
 80098bc:	3fd34413 	.word	0x3fd34413
 80098c0:	0800b261 	.word	0x0800b261
 80098c4:	0800b278 	.word	0x0800b278
 80098c8:	7ff00000 	.word	0x7ff00000
 80098cc:	0800b25d 	.word	0x0800b25d
 80098d0:	0800b254 	.word	0x0800b254
 80098d4:	0800b231 	.word	0x0800b231
 80098d8:	0800b368 	.word	0x0800b368
 80098dc:	0800b2d3 	.word	0x0800b2d3
 80098e0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80098e2:	9901      	ldr	r1, [sp, #4]
 80098e4:	6011      	str	r1, [r2, #0]
 80098e6:	f1b9 0f0e 	cmp.w	r9, #14
 80098ea:	d86c      	bhi.n	80099c6 <_dtoa_r+0x3de>
 80098ec:	2c00      	cmp	r4, #0
 80098ee:	d06a      	beq.n	80099c6 <_dtoa_r+0x3de>
 80098f0:	f1bb 0f00 	cmp.w	fp, #0
 80098f4:	f340 80a0 	ble.w	8009a38 <_dtoa_r+0x450>
 80098f8:	49c1      	ldr	r1, [pc, #772]	; (8009c00 <_dtoa_r+0x618>)
 80098fa:	f00b 020f 	and.w	r2, fp, #15
 80098fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009902:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009906:	ed92 7b00 	vldr	d7, [r2]
 800990a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800990e:	f000 8087 	beq.w	8009a20 <_dtoa_r+0x438>
 8009912:	4abc      	ldr	r2, [pc, #752]	; (8009c04 <_dtoa_r+0x61c>)
 8009914:	ed92 6b08 	vldr	d6, [r2, #32]
 8009918:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800991c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009920:	f001 010f 	and.w	r1, r1, #15
 8009924:	2203      	movs	r2, #3
 8009926:	48b7      	ldr	r0, [pc, #732]	; (8009c04 <_dtoa_r+0x61c>)
 8009928:	2900      	cmp	r1, #0
 800992a:	d17b      	bne.n	8009a24 <_dtoa_r+0x43c>
 800992c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009930:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009934:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009938:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800993a:	2900      	cmp	r1, #0
 800993c:	f000 80a2 	beq.w	8009a84 <_dtoa_r+0x49c>
 8009940:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009944:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009948:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800994c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009950:	f140 8098 	bpl.w	8009a84 <_dtoa_r+0x49c>
 8009954:	f1b9 0f00 	cmp.w	r9, #0
 8009958:	f000 8094 	beq.w	8009a84 <_dtoa_r+0x49c>
 800995c:	f1ba 0f00 	cmp.w	sl, #0
 8009960:	dd2f      	ble.n	80099c2 <_dtoa_r+0x3da>
 8009962:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009966:	ee27 7b06 	vmul.f64	d7, d7, d6
 800996a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800996e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009972:	3201      	adds	r2, #1
 8009974:	4650      	mov	r0, sl
 8009976:	ed9d 6b02 	vldr	d6, [sp, #8]
 800997a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800997e:	ee07 2a90 	vmov	s15, r2
 8009982:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009986:	eea7 5b06 	vfma.f64	d5, d7, d6
 800998a:	ee15 4a90 	vmov	r4, s11
 800998e:	ec52 1b15 	vmov	r1, r2, d5
 8009992:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009996:	2800      	cmp	r0, #0
 8009998:	d177      	bne.n	8009a8a <_dtoa_r+0x4a2>
 800999a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800999e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80099a2:	ec42 1b17 	vmov	d7, r1, r2
 80099a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80099aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ae:	f300 8263 	bgt.w	8009e78 <_dtoa_r+0x890>
 80099b2:	eeb1 7b47 	vneg.f64	d7, d7
 80099b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80099ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099be:	f100 8258 	bmi.w	8009e72 <_dtoa_r+0x88a>
 80099c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80099c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099c8:	2a00      	cmp	r2, #0
 80099ca:	f2c0 811d 	blt.w	8009c08 <_dtoa_r+0x620>
 80099ce:	f1bb 0f0e 	cmp.w	fp, #14
 80099d2:	f300 8119 	bgt.w	8009c08 <_dtoa_r+0x620>
 80099d6:	4b8a      	ldr	r3, [pc, #552]	; (8009c00 <_dtoa_r+0x618>)
 80099d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099dc:	ed93 6b00 	vldr	d6, [r3]
 80099e0:	9b08      	ldr	r3, [sp, #32]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	f280 80b7 	bge.w	8009b56 <_dtoa_r+0x56e>
 80099e8:	f1b9 0f00 	cmp.w	r9, #0
 80099ec:	f300 80b3 	bgt.w	8009b56 <_dtoa_r+0x56e>
 80099f0:	f040 823f 	bne.w	8009e72 <_dtoa_r+0x88a>
 80099f4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80099f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80099fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a08:	464c      	mov	r4, r9
 8009a0a:	464f      	mov	r7, r9
 8009a0c:	f280 8215 	bge.w	8009e3a <_dtoa_r+0x852>
 8009a10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009a14:	2331      	movs	r3, #49	; 0x31
 8009a16:	f808 3b01 	strb.w	r3, [r8], #1
 8009a1a:	f10b 0b01 	add.w	fp, fp, #1
 8009a1e:	e211      	b.n	8009e44 <_dtoa_r+0x85c>
 8009a20:	2202      	movs	r2, #2
 8009a22:	e780      	b.n	8009926 <_dtoa_r+0x33e>
 8009a24:	07cc      	lsls	r4, r1, #31
 8009a26:	d504      	bpl.n	8009a32 <_dtoa_r+0x44a>
 8009a28:	ed90 6b00 	vldr	d6, [r0]
 8009a2c:	3201      	adds	r2, #1
 8009a2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a32:	1049      	asrs	r1, r1, #1
 8009a34:	3008      	adds	r0, #8
 8009a36:	e777      	b.n	8009928 <_dtoa_r+0x340>
 8009a38:	d022      	beq.n	8009a80 <_dtoa_r+0x498>
 8009a3a:	f1cb 0100 	rsb	r1, fp, #0
 8009a3e:	4a70      	ldr	r2, [pc, #448]	; (8009c00 <_dtoa_r+0x618>)
 8009a40:	f001 000f 	and.w	r0, r1, #15
 8009a44:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009a48:	ed92 7b00 	vldr	d7, [r2]
 8009a4c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009a50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a54:	486b      	ldr	r0, [pc, #428]	; (8009c04 <_dtoa_r+0x61c>)
 8009a56:	1109      	asrs	r1, r1, #4
 8009a58:	2400      	movs	r4, #0
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	b929      	cbnz	r1, 8009a6a <_dtoa_r+0x482>
 8009a5e:	2c00      	cmp	r4, #0
 8009a60:	f43f af6a 	beq.w	8009938 <_dtoa_r+0x350>
 8009a64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a68:	e766      	b.n	8009938 <_dtoa_r+0x350>
 8009a6a:	07cf      	lsls	r7, r1, #31
 8009a6c:	d505      	bpl.n	8009a7a <_dtoa_r+0x492>
 8009a6e:	ed90 6b00 	vldr	d6, [r0]
 8009a72:	3201      	adds	r2, #1
 8009a74:	2401      	movs	r4, #1
 8009a76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a7a:	1049      	asrs	r1, r1, #1
 8009a7c:	3008      	adds	r0, #8
 8009a7e:	e7ed      	b.n	8009a5c <_dtoa_r+0x474>
 8009a80:	2202      	movs	r2, #2
 8009a82:	e759      	b.n	8009938 <_dtoa_r+0x350>
 8009a84:	465f      	mov	r7, fp
 8009a86:	4648      	mov	r0, r9
 8009a88:	e775      	b.n	8009976 <_dtoa_r+0x38e>
 8009a8a:	ec42 1b17 	vmov	d7, r1, r2
 8009a8e:	4a5c      	ldr	r2, [pc, #368]	; (8009c00 <_dtoa_r+0x618>)
 8009a90:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009a94:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009a98:	9a01      	ldr	r2, [sp, #4]
 8009a9a:	1814      	adds	r4, r2, r0
 8009a9c:	9a07      	ldr	r2, [sp, #28]
 8009a9e:	b352      	cbz	r2, 8009af6 <_dtoa_r+0x50e>
 8009aa0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009aa4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009aa8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009aac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009ab0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009ab4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009ab8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009abc:	ee14 2a90 	vmov	r2, s9
 8009ac0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009ac4:	3230      	adds	r2, #48	; 0x30
 8009ac6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009aca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad2:	f808 2b01 	strb.w	r2, [r8], #1
 8009ad6:	d439      	bmi.n	8009b4c <_dtoa_r+0x564>
 8009ad8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009adc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae4:	d472      	bmi.n	8009bcc <_dtoa_r+0x5e4>
 8009ae6:	45a0      	cmp	r8, r4
 8009ae8:	f43f af6b 	beq.w	80099c2 <_dtoa_r+0x3da>
 8009aec:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009af0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009af4:	e7e0      	b.n	8009ab8 <_dtoa_r+0x4d0>
 8009af6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009afa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009afe:	4621      	mov	r1, r4
 8009b00:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009b04:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009b08:	ee14 2a90 	vmov	r2, s9
 8009b0c:	3230      	adds	r2, #48	; 0x30
 8009b0e:	f808 2b01 	strb.w	r2, [r8], #1
 8009b12:	45a0      	cmp	r8, r4
 8009b14:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009b18:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009b1c:	d118      	bne.n	8009b50 <_dtoa_r+0x568>
 8009b1e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009b22:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009b26:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b2e:	dc4d      	bgt.n	8009bcc <_dtoa_r+0x5e4>
 8009b30:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009b34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b3c:	f57f af41 	bpl.w	80099c2 <_dtoa_r+0x3da>
 8009b40:	4688      	mov	r8, r1
 8009b42:	3901      	subs	r1, #1
 8009b44:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009b48:	2b30      	cmp	r3, #48	; 0x30
 8009b4a:	d0f9      	beq.n	8009b40 <_dtoa_r+0x558>
 8009b4c:	46bb      	mov	fp, r7
 8009b4e:	e02a      	b.n	8009ba6 <_dtoa_r+0x5be>
 8009b50:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009b54:	e7d6      	b.n	8009b04 <_dtoa_r+0x51c>
 8009b56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b5a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009b5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b62:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009b66:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009b6a:	ee15 3a10 	vmov	r3, s10
 8009b6e:	3330      	adds	r3, #48	; 0x30
 8009b70:	f808 3b01 	strb.w	r3, [r8], #1
 8009b74:	9b01      	ldr	r3, [sp, #4]
 8009b76:	eba8 0303 	sub.w	r3, r8, r3
 8009b7a:	4599      	cmp	r9, r3
 8009b7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009b80:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009b84:	d133      	bne.n	8009bee <_dtoa_r+0x606>
 8009b86:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009b8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b92:	dc1a      	bgt.n	8009bca <_dtoa_r+0x5e2>
 8009b94:	eeb4 7b46 	vcmp.f64	d7, d6
 8009b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b9c:	d103      	bne.n	8009ba6 <_dtoa_r+0x5be>
 8009b9e:	ee15 3a10 	vmov	r3, s10
 8009ba2:	07d9      	lsls	r1, r3, #31
 8009ba4:	d411      	bmi.n	8009bca <_dtoa_r+0x5e2>
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	4630      	mov	r0, r6
 8009baa:	f000 fbb7 	bl	800a31c <_Bfree>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bb2:	f888 3000 	strb.w	r3, [r8]
 8009bb6:	f10b 0301 	add.w	r3, fp, #1
 8009bba:	6013      	str	r3, [r2, #0]
 8009bbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f43f ad61 	beq.w	8009686 <_dtoa_r+0x9e>
 8009bc4:	f8c3 8000 	str.w	r8, [r3]
 8009bc8:	e55d      	b.n	8009686 <_dtoa_r+0x9e>
 8009bca:	465f      	mov	r7, fp
 8009bcc:	4643      	mov	r3, r8
 8009bce:	4698      	mov	r8, r3
 8009bd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bd4:	2a39      	cmp	r2, #57	; 0x39
 8009bd6:	d106      	bne.n	8009be6 <_dtoa_r+0x5fe>
 8009bd8:	9a01      	ldr	r2, [sp, #4]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d1f7      	bne.n	8009bce <_dtoa_r+0x5e6>
 8009bde:	9901      	ldr	r1, [sp, #4]
 8009be0:	2230      	movs	r2, #48	; 0x30
 8009be2:	3701      	adds	r7, #1
 8009be4:	700a      	strb	r2, [r1, #0]
 8009be6:	781a      	ldrb	r2, [r3, #0]
 8009be8:	3201      	adds	r2, #1
 8009bea:	701a      	strb	r2, [r3, #0]
 8009bec:	e7ae      	b.n	8009b4c <_dtoa_r+0x564>
 8009bee:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009bf2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bfa:	d1b2      	bne.n	8009b62 <_dtoa_r+0x57a>
 8009bfc:	e7d3      	b.n	8009ba6 <_dtoa_r+0x5be>
 8009bfe:	bf00      	nop
 8009c00:	0800b368 	.word	0x0800b368
 8009c04:	0800b340 	.word	0x0800b340
 8009c08:	9907      	ldr	r1, [sp, #28]
 8009c0a:	2900      	cmp	r1, #0
 8009c0c:	f000 80d0 	beq.w	8009db0 <_dtoa_r+0x7c8>
 8009c10:	9906      	ldr	r1, [sp, #24]
 8009c12:	2901      	cmp	r1, #1
 8009c14:	f300 80b4 	bgt.w	8009d80 <_dtoa_r+0x798>
 8009c18:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009c1a:	2900      	cmp	r1, #0
 8009c1c:	f000 80ac 	beq.w	8009d78 <_dtoa_r+0x790>
 8009c20:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009c24:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009c28:	461c      	mov	r4, r3
 8009c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8009c2c:	9b04      	ldr	r3, [sp, #16]
 8009c2e:	4413      	add	r3, r2
 8009c30:	9304      	str	r3, [sp, #16]
 8009c32:	9b05      	ldr	r3, [sp, #20]
 8009c34:	2101      	movs	r1, #1
 8009c36:	4413      	add	r3, r2
 8009c38:	4630      	mov	r0, r6
 8009c3a:	9305      	str	r3, [sp, #20]
 8009c3c:	f000 fc26 	bl	800a48c <__i2b>
 8009c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c42:	4607      	mov	r7, r0
 8009c44:	f1b8 0f00 	cmp.w	r8, #0
 8009c48:	dd0d      	ble.n	8009c66 <_dtoa_r+0x67e>
 8009c4a:	9a05      	ldr	r2, [sp, #20]
 8009c4c:	2a00      	cmp	r2, #0
 8009c4e:	dd0a      	ble.n	8009c66 <_dtoa_r+0x67e>
 8009c50:	4542      	cmp	r2, r8
 8009c52:	9904      	ldr	r1, [sp, #16]
 8009c54:	bfa8      	it	ge
 8009c56:	4642      	movge	r2, r8
 8009c58:	1a89      	subs	r1, r1, r2
 8009c5a:	9104      	str	r1, [sp, #16]
 8009c5c:	9905      	ldr	r1, [sp, #20]
 8009c5e:	eba8 0802 	sub.w	r8, r8, r2
 8009c62:	1a8a      	subs	r2, r1, r2
 8009c64:	9205      	str	r2, [sp, #20]
 8009c66:	b303      	cbz	r3, 8009caa <_dtoa_r+0x6c2>
 8009c68:	9a07      	ldr	r2, [sp, #28]
 8009c6a:	2a00      	cmp	r2, #0
 8009c6c:	f000 80a5 	beq.w	8009dba <_dtoa_r+0x7d2>
 8009c70:	2c00      	cmp	r4, #0
 8009c72:	dd13      	ble.n	8009c9c <_dtoa_r+0x6b4>
 8009c74:	4639      	mov	r1, r7
 8009c76:	4622      	mov	r2, r4
 8009c78:	4630      	mov	r0, r6
 8009c7a:	930d      	str	r3, [sp, #52]	; 0x34
 8009c7c:	f000 fcc6 	bl	800a60c <__pow5mult>
 8009c80:	462a      	mov	r2, r5
 8009c82:	4601      	mov	r1, r0
 8009c84:	4607      	mov	r7, r0
 8009c86:	4630      	mov	r0, r6
 8009c88:	f000 fc16 	bl	800a4b8 <__multiply>
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	900a      	str	r0, [sp, #40]	; 0x28
 8009c90:	4630      	mov	r0, r6
 8009c92:	f000 fb43 	bl	800a31c <_Bfree>
 8009c96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c9a:	4615      	mov	r5, r2
 8009c9c:	1b1a      	subs	r2, r3, r4
 8009c9e:	d004      	beq.n	8009caa <_dtoa_r+0x6c2>
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f000 fcb2 	bl	800a60c <__pow5mult>
 8009ca8:	4605      	mov	r5, r0
 8009caa:	2101      	movs	r1, #1
 8009cac:	4630      	mov	r0, r6
 8009cae:	f000 fbed 	bl	800a48c <__i2b>
 8009cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	f340 8081 	ble.w	8009dbe <_dtoa_r+0x7d6>
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	4601      	mov	r1, r0
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f000 fca3 	bl	800a60c <__pow5mult>
 8009cc6:	9b06      	ldr	r3, [sp, #24]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	4604      	mov	r4, r0
 8009ccc:	dd7a      	ble.n	8009dc4 <_dtoa_r+0x7dc>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	930a      	str	r3, [sp, #40]	; 0x28
 8009cd2:	6922      	ldr	r2, [r4, #16]
 8009cd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009cd8:	6910      	ldr	r0, [r2, #16]
 8009cda:	f000 fb87 	bl	800a3ec <__hi0bits>
 8009cde:	f1c0 0020 	rsb	r0, r0, #32
 8009ce2:	9b05      	ldr	r3, [sp, #20]
 8009ce4:	4418      	add	r0, r3
 8009ce6:	f010 001f 	ands.w	r0, r0, #31
 8009cea:	f000 808c 	beq.w	8009e06 <_dtoa_r+0x81e>
 8009cee:	f1c0 0220 	rsb	r2, r0, #32
 8009cf2:	2a04      	cmp	r2, #4
 8009cf4:	f340 8085 	ble.w	8009e02 <_dtoa_r+0x81a>
 8009cf8:	f1c0 001c 	rsb	r0, r0, #28
 8009cfc:	9b04      	ldr	r3, [sp, #16]
 8009cfe:	4403      	add	r3, r0
 8009d00:	9304      	str	r3, [sp, #16]
 8009d02:	9b05      	ldr	r3, [sp, #20]
 8009d04:	4403      	add	r3, r0
 8009d06:	4480      	add	r8, r0
 8009d08:	9305      	str	r3, [sp, #20]
 8009d0a:	9b04      	ldr	r3, [sp, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	dd05      	ble.n	8009d1c <_dtoa_r+0x734>
 8009d10:	4629      	mov	r1, r5
 8009d12:	461a      	mov	r2, r3
 8009d14:	4630      	mov	r0, r6
 8009d16:	f000 fcd3 	bl	800a6c0 <__lshift>
 8009d1a:	4605      	mov	r5, r0
 8009d1c:	9b05      	ldr	r3, [sp, #20]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	dd05      	ble.n	8009d2e <_dtoa_r+0x746>
 8009d22:	4621      	mov	r1, r4
 8009d24:	461a      	mov	r2, r3
 8009d26:	4630      	mov	r0, r6
 8009d28:	f000 fcca 	bl	800a6c0 <__lshift>
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d06a      	beq.n	8009e0a <_dtoa_r+0x822>
 8009d34:	4621      	mov	r1, r4
 8009d36:	4628      	mov	r0, r5
 8009d38:	f000 fd32 	bl	800a7a0 <__mcmp>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	da64      	bge.n	8009e0a <_dtoa_r+0x822>
 8009d40:	2300      	movs	r3, #0
 8009d42:	4629      	mov	r1, r5
 8009d44:	220a      	movs	r2, #10
 8009d46:	4630      	mov	r0, r6
 8009d48:	f000 fb0a 	bl	800a360 <__multadd>
 8009d4c:	9b07      	ldr	r3, [sp, #28]
 8009d4e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d52:	4605      	mov	r5, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f000 8191 	beq.w	800a07c <_dtoa_r+0xa94>
 8009d5a:	4639      	mov	r1, r7
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	220a      	movs	r2, #10
 8009d60:	4630      	mov	r0, r6
 8009d62:	f000 fafd 	bl	800a360 <__multadd>
 8009d66:	f1ba 0f00 	cmp.w	sl, #0
 8009d6a:	4607      	mov	r7, r0
 8009d6c:	f300 808d 	bgt.w	8009e8a <_dtoa_r+0x8a2>
 8009d70:	9b06      	ldr	r3, [sp, #24]
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	dc50      	bgt.n	8009e18 <_dtoa_r+0x830>
 8009d76:	e088      	b.n	8009e8a <_dtoa_r+0x8a2>
 8009d78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009d7e:	e751      	b.n	8009c24 <_dtoa_r+0x63c>
 8009d80:	f109 34ff 	add.w	r4, r9, #4294967295
 8009d84:	42a3      	cmp	r3, r4
 8009d86:	bfbf      	itttt	lt
 8009d88:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009d8a:	1ae3      	sublt	r3, r4, r3
 8009d8c:	18d2      	addlt	r2, r2, r3
 8009d8e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009d90:	bfb6      	itet	lt
 8009d92:	4623      	movlt	r3, r4
 8009d94:	1b1c      	subge	r4, r3, r4
 8009d96:	2400      	movlt	r4, #0
 8009d98:	f1b9 0f00 	cmp.w	r9, #0
 8009d9c:	bfb5      	itete	lt
 8009d9e:	9a04      	ldrlt	r2, [sp, #16]
 8009da0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009da4:	eba2 0809 	sublt.w	r8, r2, r9
 8009da8:	464a      	movge	r2, r9
 8009daa:	bfb8      	it	lt
 8009dac:	2200      	movlt	r2, #0
 8009dae:	e73c      	b.n	8009c2a <_dtoa_r+0x642>
 8009db0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009db4:	9f07      	ldr	r7, [sp, #28]
 8009db6:	461c      	mov	r4, r3
 8009db8:	e744      	b.n	8009c44 <_dtoa_r+0x65c>
 8009dba:	461a      	mov	r2, r3
 8009dbc:	e770      	b.n	8009ca0 <_dtoa_r+0x6b8>
 8009dbe:	9b06      	ldr	r3, [sp, #24]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	dc18      	bgt.n	8009df6 <_dtoa_r+0x80e>
 8009dc4:	9b02      	ldr	r3, [sp, #8]
 8009dc6:	b9b3      	cbnz	r3, 8009df6 <_dtoa_r+0x80e>
 8009dc8:	9b03      	ldr	r3, [sp, #12]
 8009dca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009dce:	b9a2      	cbnz	r2, 8009dfa <_dtoa_r+0x812>
 8009dd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009dd4:	0d12      	lsrs	r2, r2, #20
 8009dd6:	0512      	lsls	r2, r2, #20
 8009dd8:	b18a      	cbz	r2, 8009dfe <_dtoa_r+0x816>
 8009dda:	9b04      	ldr	r3, [sp, #16]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	9304      	str	r3, [sp, #16]
 8009de0:	9b05      	ldr	r3, [sp, #20]
 8009de2:	3301      	adds	r3, #1
 8009de4:	9305      	str	r3, [sp, #20]
 8009de6:	2301      	movs	r3, #1
 8009de8:	930a      	str	r3, [sp, #40]	; 0x28
 8009dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f47f af70 	bne.w	8009cd2 <_dtoa_r+0x6ea>
 8009df2:	2001      	movs	r0, #1
 8009df4:	e775      	b.n	8009ce2 <_dtoa_r+0x6fa>
 8009df6:	2300      	movs	r3, #0
 8009df8:	e7f6      	b.n	8009de8 <_dtoa_r+0x800>
 8009dfa:	9b02      	ldr	r3, [sp, #8]
 8009dfc:	e7f4      	b.n	8009de8 <_dtoa_r+0x800>
 8009dfe:	920a      	str	r2, [sp, #40]	; 0x28
 8009e00:	e7f3      	b.n	8009dea <_dtoa_r+0x802>
 8009e02:	d082      	beq.n	8009d0a <_dtoa_r+0x722>
 8009e04:	4610      	mov	r0, r2
 8009e06:	301c      	adds	r0, #28
 8009e08:	e778      	b.n	8009cfc <_dtoa_r+0x714>
 8009e0a:	f1b9 0f00 	cmp.w	r9, #0
 8009e0e:	dc37      	bgt.n	8009e80 <_dtoa_r+0x898>
 8009e10:	9b06      	ldr	r3, [sp, #24]
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	dd34      	ble.n	8009e80 <_dtoa_r+0x898>
 8009e16:	46ca      	mov	sl, r9
 8009e18:	f1ba 0f00 	cmp.w	sl, #0
 8009e1c:	d10d      	bne.n	8009e3a <_dtoa_r+0x852>
 8009e1e:	4621      	mov	r1, r4
 8009e20:	4653      	mov	r3, sl
 8009e22:	2205      	movs	r2, #5
 8009e24:	4630      	mov	r0, r6
 8009e26:	f000 fa9b 	bl	800a360 <__multadd>
 8009e2a:	4601      	mov	r1, r0
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	4628      	mov	r0, r5
 8009e30:	f000 fcb6 	bl	800a7a0 <__mcmp>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	f73f adeb 	bgt.w	8009a10 <_dtoa_r+0x428>
 8009e3a:	9b08      	ldr	r3, [sp, #32]
 8009e3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e40:	ea6f 0b03 	mvn.w	fp, r3
 8009e44:	f04f 0900 	mov.w	r9, #0
 8009e48:	4621      	mov	r1, r4
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	f000 fa66 	bl	800a31c <_Bfree>
 8009e50:	2f00      	cmp	r7, #0
 8009e52:	f43f aea8 	beq.w	8009ba6 <_dtoa_r+0x5be>
 8009e56:	f1b9 0f00 	cmp.w	r9, #0
 8009e5a:	d005      	beq.n	8009e68 <_dtoa_r+0x880>
 8009e5c:	45b9      	cmp	r9, r7
 8009e5e:	d003      	beq.n	8009e68 <_dtoa_r+0x880>
 8009e60:	4649      	mov	r1, r9
 8009e62:	4630      	mov	r0, r6
 8009e64:	f000 fa5a 	bl	800a31c <_Bfree>
 8009e68:	4639      	mov	r1, r7
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	f000 fa56 	bl	800a31c <_Bfree>
 8009e70:	e699      	b.n	8009ba6 <_dtoa_r+0x5be>
 8009e72:	2400      	movs	r4, #0
 8009e74:	4627      	mov	r7, r4
 8009e76:	e7e0      	b.n	8009e3a <_dtoa_r+0x852>
 8009e78:	46bb      	mov	fp, r7
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	4607      	mov	r7, r0
 8009e7e:	e5c7      	b.n	8009a10 <_dtoa_r+0x428>
 8009e80:	9b07      	ldr	r3, [sp, #28]
 8009e82:	46ca      	mov	sl, r9
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 8100 	beq.w	800a08a <_dtoa_r+0xaa2>
 8009e8a:	f1b8 0f00 	cmp.w	r8, #0
 8009e8e:	dd05      	ble.n	8009e9c <_dtoa_r+0x8b4>
 8009e90:	4639      	mov	r1, r7
 8009e92:	4642      	mov	r2, r8
 8009e94:	4630      	mov	r0, r6
 8009e96:	f000 fc13 	bl	800a6c0 <__lshift>
 8009e9a:	4607      	mov	r7, r0
 8009e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d05d      	beq.n	8009f5e <_dtoa_r+0x976>
 8009ea2:	6879      	ldr	r1, [r7, #4]
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	f000 f9f9 	bl	800a29c <_Balloc>
 8009eaa:	4680      	mov	r8, r0
 8009eac:	b928      	cbnz	r0, 8009eba <_dtoa_r+0x8d2>
 8009eae:	4b82      	ldr	r3, [pc, #520]	; (800a0b8 <_dtoa_r+0xad0>)
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009eb6:	f7ff bbaf 	b.w	8009618 <_dtoa_r+0x30>
 8009eba:	693a      	ldr	r2, [r7, #16]
 8009ebc:	3202      	adds	r2, #2
 8009ebe:	0092      	lsls	r2, r2, #2
 8009ec0:	f107 010c 	add.w	r1, r7, #12
 8009ec4:	300c      	adds	r0, #12
 8009ec6:	f7fe fd1c 	bl	8008902 <memcpy>
 8009eca:	2201      	movs	r2, #1
 8009ecc:	4641      	mov	r1, r8
 8009ece:	4630      	mov	r0, r6
 8009ed0:	f000 fbf6 	bl	800a6c0 <__lshift>
 8009ed4:	9b01      	ldr	r3, [sp, #4]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	9304      	str	r3, [sp, #16]
 8009eda:	9b01      	ldr	r3, [sp, #4]
 8009edc:	4453      	add	r3, sl
 8009ede:	9308      	str	r3, [sp, #32]
 8009ee0:	9b02      	ldr	r3, [sp, #8]
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	46b9      	mov	r9, r7
 8009ee8:	9307      	str	r3, [sp, #28]
 8009eea:	4607      	mov	r7, r0
 8009eec:	9b04      	ldr	r3, [sp, #16]
 8009eee:	4621      	mov	r1, r4
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	9302      	str	r3, [sp, #8]
 8009ef6:	f7ff fae9 	bl	80094cc <quorem>
 8009efa:	4603      	mov	r3, r0
 8009efc:	3330      	adds	r3, #48	; 0x30
 8009efe:	9005      	str	r0, [sp, #20]
 8009f00:	4649      	mov	r1, r9
 8009f02:	4628      	mov	r0, r5
 8009f04:	9309      	str	r3, [sp, #36]	; 0x24
 8009f06:	f000 fc4b 	bl	800a7a0 <__mcmp>
 8009f0a:	463a      	mov	r2, r7
 8009f0c:	4682      	mov	sl, r0
 8009f0e:	4621      	mov	r1, r4
 8009f10:	4630      	mov	r0, r6
 8009f12:	f000 fc61 	bl	800a7d8 <__mdiff>
 8009f16:	68c2      	ldr	r2, [r0, #12]
 8009f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f1a:	4680      	mov	r8, r0
 8009f1c:	bb0a      	cbnz	r2, 8009f62 <_dtoa_r+0x97a>
 8009f1e:	4601      	mov	r1, r0
 8009f20:	4628      	mov	r0, r5
 8009f22:	f000 fc3d 	bl	800a7a0 <__mcmp>
 8009f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f28:	4602      	mov	r2, r0
 8009f2a:	4641      	mov	r1, r8
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009f32:	f000 f9f3 	bl	800a31c <_Bfree>
 8009f36:	9b06      	ldr	r3, [sp, #24]
 8009f38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f3a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009f3e:	ea43 0102 	orr.w	r1, r3, r2
 8009f42:	9b07      	ldr	r3, [sp, #28]
 8009f44:	430b      	orrs	r3, r1
 8009f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f48:	d10d      	bne.n	8009f66 <_dtoa_r+0x97e>
 8009f4a:	2b39      	cmp	r3, #57	; 0x39
 8009f4c:	d029      	beq.n	8009fa2 <_dtoa_r+0x9ba>
 8009f4e:	f1ba 0f00 	cmp.w	sl, #0
 8009f52:	dd01      	ble.n	8009f58 <_dtoa_r+0x970>
 8009f54:	9b05      	ldr	r3, [sp, #20]
 8009f56:	3331      	adds	r3, #49	; 0x31
 8009f58:	9a02      	ldr	r2, [sp, #8]
 8009f5a:	7013      	strb	r3, [r2, #0]
 8009f5c:	e774      	b.n	8009e48 <_dtoa_r+0x860>
 8009f5e:	4638      	mov	r0, r7
 8009f60:	e7b8      	b.n	8009ed4 <_dtoa_r+0x8ec>
 8009f62:	2201      	movs	r2, #1
 8009f64:	e7e1      	b.n	8009f2a <_dtoa_r+0x942>
 8009f66:	f1ba 0f00 	cmp.w	sl, #0
 8009f6a:	db06      	blt.n	8009f7a <_dtoa_r+0x992>
 8009f6c:	9906      	ldr	r1, [sp, #24]
 8009f6e:	ea41 0a0a 	orr.w	sl, r1, sl
 8009f72:	9907      	ldr	r1, [sp, #28]
 8009f74:	ea5a 0101 	orrs.w	r1, sl, r1
 8009f78:	d120      	bne.n	8009fbc <_dtoa_r+0x9d4>
 8009f7a:	2a00      	cmp	r2, #0
 8009f7c:	ddec      	ble.n	8009f58 <_dtoa_r+0x970>
 8009f7e:	4629      	mov	r1, r5
 8009f80:	2201      	movs	r2, #1
 8009f82:	4630      	mov	r0, r6
 8009f84:	9304      	str	r3, [sp, #16]
 8009f86:	f000 fb9b 	bl	800a6c0 <__lshift>
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	4605      	mov	r5, r0
 8009f8e:	f000 fc07 	bl	800a7a0 <__mcmp>
 8009f92:	2800      	cmp	r0, #0
 8009f94:	9b04      	ldr	r3, [sp, #16]
 8009f96:	dc02      	bgt.n	8009f9e <_dtoa_r+0x9b6>
 8009f98:	d1de      	bne.n	8009f58 <_dtoa_r+0x970>
 8009f9a:	07da      	lsls	r2, r3, #31
 8009f9c:	d5dc      	bpl.n	8009f58 <_dtoa_r+0x970>
 8009f9e:	2b39      	cmp	r3, #57	; 0x39
 8009fa0:	d1d8      	bne.n	8009f54 <_dtoa_r+0x96c>
 8009fa2:	9a02      	ldr	r2, [sp, #8]
 8009fa4:	2339      	movs	r3, #57	; 0x39
 8009fa6:	7013      	strb	r3, [r2, #0]
 8009fa8:	4643      	mov	r3, r8
 8009faa:	4698      	mov	r8, r3
 8009fac:	3b01      	subs	r3, #1
 8009fae:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009fb2:	2a39      	cmp	r2, #57	; 0x39
 8009fb4:	d051      	beq.n	800a05a <_dtoa_r+0xa72>
 8009fb6:	3201      	adds	r2, #1
 8009fb8:	701a      	strb	r2, [r3, #0]
 8009fba:	e745      	b.n	8009e48 <_dtoa_r+0x860>
 8009fbc:	2a00      	cmp	r2, #0
 8009fbe:	dd03      	ble.n	8009fc8 <_dtoa_r+0x9e0>
 8009fc0:	2b39      	cmp	r3, #57	; 0x39
 8009fc2:	d0ee      	beq.n	8009fa2 <_dtoa_r+0x9ba>
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	e7c7      	b.n	8009f58 <_dtoa_r+0x970>
 8009fc8:	9a04      	ldr	r2, [sp, #16]
 8009fca:	9908      	ldr	r1, [sp, #32]
 8009fcc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009fd0:	428a      	cmp	r2, r1
 8009fd2:	d02b      	beq.n	800a02c <_dtoa_r+0xa44>
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	220a      	movs	r2, #10
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f000 f9c0 	bl	800a360 <__multadd>
 8009fe0:	45b9      	cmp	r9, r7
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	f04f 0300 	mov.w	r3, #0
 8009fe8:	f04f 020a 	mov.w	r2, #10
 8009fec:	4649      	mov	r1, r9
 8009fee:	4630      	mov	r0, r6
 8009ff0:	d107      	bne.n	800a002 <_dtoa_r+0xa1a>
 8009ff2:	f000 f9b5 	bl	800a360 <__multadd>
 8009ff6:	4681      	mov	r9, r0
 8009ff8:	4607      	mov	r7, r0
 8009ffa:	9b04      	ldr	r3, [sp, #16]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	9304      	str	r3, [sp, #16]
 800a000:	e774      	b.n	8009eec <_dtoa_r+0x904>
 800a002:	f000 f9ad 	bl	800a360 <__multadd>
 800a006:	4639      	mov	r1, r7
 800a008:	4681      	mov	r9, r0
 800a00a:	2300      	movs	r3, #0
 800a00c:	220a      	movs	r2, #10
 800a00e:	4630      	mov	r0, r6
 800a010:	f000 f9a6 	bl	800a360 <__multadd>
 800a014:	4607      	mov	r7, r0
 800a016:	e7f0      	b.n	8009ffa <_dtoa_r+0xa12>
 800a018:	f1ba 0f00 	cmp.w	sl, #0
 800a01c:	9a01      	ldr	r2, [sp, #4]
 800a01e:	bfcc      	ite	gt
 800a020:	46d0      	movgt	r8, sl
 800a022:	f04f 0801 	movle.w	r8, #1
 800a026:	4490      	add	r8, r2
 800a028:	f04f 0900 	mov.w	r9, #0
 800a02c:	4629      	mov	r1, r5
 800a02e:	2201      	movs	r2, #1
 800a030:	4630      	mov	r0, r6
 800a032:	9302      	str	r3, [sp, #8]
 800a034:	f000 fb44 	bl	800a6c0 <__lshift>
 800a038:	4621      	mov	r1, r4
 800a03a:	4605      	mov	r5, r0
 800a03c:	f000 fbb0 	bl	800a7a0 <__mcmp>
 800a040:	2800      	cmp	r0, #0
 800a042:	dcb1      	bgt.n	8009fa8 <_dtoa_r+0x9c0>
 800a044:	d102      	bne.n	800a04c <_dtoa_r+0xa64>
 800a046:	9b02      	ldr	r3, [sp, #8]
 800a048:	07db      	lsls	r3, r3, #31
 800a04a:	d4ad      	bmi.n	8009fa8 <_dtoa_r+0x9c0>
 800a04c:	4643      	mov	r3, r8
 800a04e:	4698      	mov	r8, r3
 800a050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a054:	2a30      	cmp	r2, #48	; 0x30
 800a056:	d0fa      	beq.n	800a04e <_dtoa_r+0xa66>
 800a058:	e6f6      	b.n	8009e48 <_dtoa_r+0x860>
 800a05a:	9a01      	ldr	r2, [sp, #4]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d1a4      	bne.n	8009faa <_dtoa_r+0x9c2>
 800a060:	f10b 0b01 	add.w	fp, fp, #1
 800a064:	2331      	movs	r3, #49	; 0x31
 800a066:	e778      	b.n	8009f5a <_dtoa_r+0x972>
 800a068:	4b14      	ldr	r3, [pc, #80]	; (800a0bc <_dtoa_r+0xad4>)
 800a06a:	f7ff bb27 	b.w	80096bc <_dtoa_r+0xd4>
 800a06e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a070:	2b00      	cmp	r3, #0
 800a072:	f47f ab03 	bne.w	800967c <_dtoa_r+0x94>
 800a076:	4b12      	ldr	r3, [pc, #72]	; (800a0c0 <_dtoa_r+0xad8>)
 800a078:	f7ff bb20 	b.w	80096bc <_dtoa_r+0xd4>
 800a07c:	f1ba 0f00 	cmp.w	sl, #0
 800a080:	dc03      	bgt.n	800a08a <_dtoa_r+0xaa2>
 800a082:	9b06      	ldr	r3, [sp, #24]
 800a084:	2b02      	cmp	r3, #2
 800a086:	f73f aec7 	bgt.w	8009e18 <_dtoa_r+0x830>
 800a08a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a08e:	4621      	mov	r1, r4
 800a090:	4628      	mov	r0, r5
 800a092:	f7ff fa1b 	bl	80094cc <quorem>
 800a096:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a09a:	f808 3b01 	strb.w	r3, [r8], #1
 800a09e:	9a01      	ldr	r2, [sp, #4]
 800a0a0:	eba8 0202 	sub.w	r2, r8, r2
 800a0a4:	4592      	cmp	sl, r2
 800a0a6:	ddb7      	ble.n	800a018 <_dtoa_r+0xa30>
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	220a      	movs	r2, #10
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	f000 f956 	bl	800a360 <__multadd>
 800a0b4:	4605      	mov	r5, r0
 800a0b6:	e7ea      	b.n	800a08e <_dtoa_r+0xaa6>
 800a0b8:	0800b2d3 	.word	0x0800b2d3
 800a0bc:	0800b230 	.word	0x0800b230
 800a0c0:	0800b254 	.word	0x0800b254

0800a0c4 <__sflush_r>:
 800a0c4:	898a      	ldrh	r2, [r1, #12]
 800a0c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ca:	4605      	mov	r5, r0
 800a0cc:	0710      	lsls	r0, r2, #28
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	d458      	bmi.n	800a184 <__sflush_r+0xc0>
 800a0d2:	684b      	ldr	r3, [r1, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	dc05      	bgt.n	800a0e4 <__sflush_r+0x20>
 800a0d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	dc02      	bgt.n	800a0e4 <__sflush_r+0x20>
 800a0de:	2000      	movs	r0, #0
 800a0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0e6:	2e00      	cmp	r6, #0
 800a0e8:	d0f9      	beq.n	800a0de <__sflush_r+0x1a>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0f0:	682f      	ldr	r7, [r5, #0]
 800a0f2:	602b      	str	r3, [r5, #0]
 800a0f4:	d032      	beq.n	800a15c <__sflush_r+0x98>
 800a0f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0f8:	89a3      	ldrh	r3, [r4, #12]
 800a0fa:	075a      	lsls	r2, r3, #29
 800a0fc:	d505      	bpl.n	800a10a <__sflush_r+0x46>
 800a0fe:	6863      	ldr	r3, [r4, #4]
 800a100:	1ac0      	subs	r0, r0, r3
 800a102:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a104:	b10b      	cbz	r3, 800a10a <__sflush_r+0x46>
 800a106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a108:	1ac0      	subs	r0, r0, r3
 800a10a:	2300      	movs	r3, #0
 800a10c:	4602      	mov	r2, r0
 800a10e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a110:	6a21      	ldr	r1, [r4, #32]
 800a112:	4628      	mov	r0, r5
 800a114:	47b0      	blx	r6
 800a116:	1c43      	adds	r3, r0, #1
 800a118:	89a3      	ldrh	r3, [r4, #12]
 800a11a:	d106      	bne.n	800a12a <__sflush_r+0x66>
 800a11c:	6829      	ldr	r1, [r5, #0]
 800a11e:	291d      	cmp	r1, #29
 800a120:	d82c      	bhi.n	800a17c <__sflush_r+0xb8>
 800a122:	4a2a      	ldr	r2, [pc, #168]	; (800a1cc <__sflush_r+0x108>)
 800a124:	40ca      	lsrs	r2, r1
 800a126:	07d6      	lsls	r6, r2, #31
 800a128:	d528      	bpl.n	800a17c <__sflush_r+0xb8>
 800a12a:	2200      	movs	r2, #0
 800a12c:	6062      	str	r2, [r4, #4]
 800a12e:	04d9      	lsls	r1, r3, #19
 800a130:	6922      	ldr	r2, [r4, #16]
 800a132:	6022      	str	r2, [r4, #0]
 800a134:	d504      	bpl.n	800a140 <__sflush_r+0x7c>
 800a136:	1c42      	adds	r2, r0, #1
 800a138:	d101      	bne.n	800a13e <__sflush_r+0x7a>
 800a13a:	682b      	ldr	r3, [r5, #0]
 800a13c:	b903      	cbnz	r3, 800a140 <__sflush_r+0x7c>
 800a13e:	6560      	str	r0, [r4, #84]	; 0x54
 800a140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a142:	602f      	str	r7, [r5, #0]
 800a144:	2900      	cmp	r1, #0
 800a146:	d0ca      	beq.n	800a0de <__sflush_r+0x1a>
 800a148:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a14c:	4299      	cmp	r1, r3
 800a14e:	d002      	beq.n	800a156 <__sflush_r+0x92>
 800a150:	4628      	mov	r0, r5
 800a152:	f000 fc3d 	bl	800a9d0 <_free_r>
 800a156:	2000      	movs	r0, #0
 800a158:	6360      	str	r0, [r4, #52]	; 0x34
 800a15a:	e7c1      	b.n	800a0e0 <__sflush_r+0x1c>
 800a15c:	6a21      	ldr	r1, [r4, #32]
 800a15e:	2301      	movs	r3, #1
 800a160:	4628      	mov	r0, r5
 800a162:	47b0      	blx	r6
 800a164:	1c41      	adds	r1, r0, #1
 800a166:	d1c7      	bne.n	800a0f8 <__sflush_r+0x34>
 800a168:	682b      	ldr	r3, [r5, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d0c4      	beq.n	800a0f8 <__sflush_r+0x34>
 800a16e:	2b1d      	cmp	r3, #29
 800a170:	d001      	beq.n	800a176 <__sflush_r+0xb2>
 800a172:	2b16      	cmp	r3, #22
 800a174:	d101      	bne.n	800a17a <__sflush_r+0xb6>
 800a176:	602f      	str	r7, [r5, #0]
 800a178:	e7b1      	b.n	800a0de <__sflush_r+0x1a>
 800a17a:	89a3      	ldrh	r3, [r4, #12]
 800a17c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a180:	81a3      	strh	r3, [r4, #12]
 800a182:	e7ad      	b.n	800a0e0 <__sflush_r+0x1c>
 800a184:	690f      	ldr	r7, [r1, #16]
 800a186:	2f00      	cmp	r7, #0
 800a188:	d0a9      	beq.n	800a0de <__sflush_r+0x1a>
 800a18a:	0793      	lsls	r3, r2, #30
 800a18c:	680e      	ldr	r6, [r1, #0]
 800a18e:	bf08      	it	eq
 800a190:	694b      	ldreq	r3, [r1, #20]
 800a192:	600f      	str	r7, [r1, #0]
 800a194:	bf18      	it	ne
 800a196:	2300      	movne	r3, #0
 800a198:	eba6 0807 	sub.w	r8, r6, r7
 800a19c:	608b      	str	r3, [r1, #8]
 800a19e:	f1b8 0f00 	cmp.w	r8, #0
 800a1a2:	dd9c      	ble.n	800a0de <__sflush_r+0x1a>
 800a1a4:	6a21      	ldr	r1, [r4, #32]
 800a1a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a1a8:	4643      	mov	r3, r8
 800a1aa:	463a      	mov	r2, r7
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	47b0      	blx	r6
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	dc06      	bgt.n	800a1c2 <__sflush_r+0xfe>
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1ba:	81a3      	strh	r3, [r4, #12]
 800a1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c0:	e78e      	b.n	800a0e0 <__sflush_r+0x1c>
 800a1c2:	4407      	add	r7, r0
 800a1c4:	eba8 0800 	sub.w	r8, r8, r0
 800a1c8:	e7e9      	b.n	800a19e <__sflush_r+0xda>
 800a1ca:	bf00      	nop
 800a1cc:	20400001 	.word	0x20400001

0800a1d0 <_fflush_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	690b      	ldr	r3, [r1, #16]
 800a1d4:	4605      	mov	r5, r0
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	b913      	cbnz	r3, 800a1e0 <_fflush_r+0x10>
 800a1da:	2500      	movs	r5, #0
 800a1dc:	4628      	mov	r0, r5
 800a1de:	bd38      	pop	{r3, r4, r5, pc}
 800a1e0:	b118      	cbz	r0, 800a1ea <_fflush_r+0x1a>
 800a1e2:	6983      	ldr	r3, [r0, #24]
 800a1e4:	b90b      	cbnz	r3, 800a1ea <_fflush_r+0x1a>
 800a1e6:	f7fe fac7 	bl	8008778 <__sinit>
 800a1ea:	4b14      	ldr	r3, [pc, #80]	; (800a23c <_fflush_r+0x6c>)
 800a1ec:	429c      	cmp	r4, r3
 800a1ee:	d11b      	bne.n	800a228 <_fflush_r+0x58>
 800a1f0:	686c      	ldr	r4, [r5, #4]
 800a1f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d0ef      	beq.n	800a1da <_fflush_r+0xa>
 800a1fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1fc:	07d0      	lsls	r0, r2, #31
 800a1fe:	d404      	bmi.n	800a20a <_fflush_r+0x3a>
 800a200:	0599      	lsls	r1, r3, #22
 800a202:	d402      	bmi.n	800a20a <_fflush_r+0x3a>
 800a204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a206:	f7fe fb7a 	bl	80088fe <__retarget_lock_acquire_recursive>
 800a20a:	4628      	mov	r0, r5
 800a20c:	4621      	mov	r1, r4
 800a20e:	f7ff ff59 	bl	800a0c4 <__sflush_r>
 800a212:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a214:	07da      	lsls	r2, r3, #31
 800a216:	4605      	mov	r5, r0
 800a218:	d4e0      	bmi.n	800a1dc <_fflush_r+0xc>
 800a21a:	89a3      	ldrh	r3, [r4, #12]
 800a21c:	059b      	lsls	r3, r3, #22
 800a21e:	d4dd      	bmi.n	800a1dc <_fflush_r+0xc>
 800a220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a222:	f7fe fb6d 	bl	8008900 <__retarget_lock_release_recursive>
 800a226:	e7d9      	b.n	800a1dc <_fflush_r+0xc>
 800a228:	4b05      	ldr	r3, [pc, #20]	; (800a240 <_fflush_r+0x70>)
 800a22a:	429c      	cmp	r4, r3
 800a22c:	d101      	bne.n	800a232 <_fflush_r+0x62>
 800a22e:	68ac      	ldr	r4, [r5, #8]
 800a230:	e7df      	b.n	800a1f2 <_fflush_r+0x22>
 800a232:	4b04      	ldr	r3, [pc, #16]	; (800a244 <_fflush_r+0x74>)
 800a234:	429c      	cmp	r4, r3
 800a236:	bf08      	it	eq
 800a238:	68ec      	ldreq	r4, [r5, #12]
 800a23a:	e7da      	b.n	800a1f2 <_fflush_r+0x22>
 800a23c:	0800b1dc 	.word	0x0800b1dc
 800a240:	0800b1fc 	.word	0x0800b1fc
 800a244:	0800b1bc 	.word	0x0800b1bc

0800a248 <_localeconv_r>:
 800a248:	4800      	ldr	r0, [pc, #0]	; (800a24c <_localeconv_r+0x4>)
 800a24a:	4770      	bx	lr
 800a24c:	24000168 	.word	0x24000168

0800a250 <_lseek_r>:
 800a250:	b538      	push	{r3, r4, r5, lr}
 800a252:	4d07      	ldr	r5, [pc, #28]	; (800a270 <_lseek_r+0x20>)
 800a254:	4604      	mov	r4, r0
 800a256:	4608      	mov	r0, r1
 800a258:	4611      	mov	r1, r2
 800a25a:	2200      	movs	r2, #0
 800a25c:	602a      	str	r2, [r5, #0]
 800a25e:	461a      	mov	r2, r3
 800a260:	f7f6 ff7c 	bl	800115c <_lseek>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	d102      	bne.n	800a26e <_lseek_r+0x1e>
 800a268:	682b      	ldr	r3, [r5, #0]
 800a26a:	b103      	cbz	r3, 800a26e <_lseek_r+0x1e>
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	bd38      	pop	{r3, r4, r5, pc}
 800a270:	24004d9c 	.word	0x24004d9c

0800a274 <malloc>:
 800a274:	4b02      	ldr	r3, [pc, #8]	; (800a280 <malloc+0xc>)
 800a276:	4601      	mov	r1, r0
 800a278:	6818      	ldr	r0, [r3, #0]
 800a27a:	f7fe bb79 	b.w	8008970 <_malloc_r>
 800a27e:	bf00      	nop
 800a280:	24000014 	.word	0x24000014

0800a284 <__malloc_lock>:
 800a284:	4801      	ldr	r0, [pc, #4]	; (800a28c <__malloc_lock+0x8>)
 800a286:	f7fe bb3a 	b.w	80088fe <__retarget_lock_acquire_recursive>
 800a28a:	bf00      	nop
 800a28c:	24004d90 	.word	0x24004d90

0800a290 <__malloc_unlock>:
 800a290:	4801      	ldr	r0, [pc, #4]	; (800a298 <__malloc_unlock+0x8>)
 800a292:	f7fe bb35 	b.w	8008900 <__retarget_lock_release_recursive>
 800a296:	bf00      	nop
 800a298:	24004d90 	.word	0x24004d90

0800a29c <_Balloc>:
 800a29c:	b570      	push	{r4, r5, r6, lr}
 800a29e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	460d      	mov	r5, r1
 800a2a4:	b976      	cbnz	r6, 800a2c4 <_Balloc+0x28>
 800a2a6:	2010      	movs	r0, #16
 800a2a8:	f7ff ffe4 	bl	800a274 <malloc>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	6260      	str	r0, [r4, #36]	; 0x24
 800a2b0:	b920      	cbnz	r0, 800a2bc <_Balloc+0x20>
 800a2b2:	4b18      	ldr	r3, [pc, #96]	; (800a314 <_Balloc+0x78>)
 800a2b4:	4818      	ldr	r0, [pc, #96]	; (800a318 <_Balloc+0x7c>)
 800a2b6:	2166      	movs	r1, #102	; 0x66
 800a2b8:	f000 fe02 	bl	800aec0 <__assert_func>
 800a2bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2c0:	6006      	str	r6, [r0, #0]
 800a2c2:	60c6      	str	r6, [r0, #12]
 800a2c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a2c6:	68f3      	ldr	r3, [r6, #12]
 800a2c8:	b183      	cbz	r3, 800a2ec <_Balloc+0x50>
 800a2ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2d2:	b9b8      	cbnz	r0, 800a304 <_Balloc+0x68>
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	fa01 f605 	lsl.w	r6, r1, r5
 800a2da:	1d72      	adds	r2, r6, #5
 800a2dc:	0092      	lsls	r2, r2, #2
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f000 fb60 	bl	800a9a4 <_calloc_r>
 800a2e4:	b160      	cbz	r0, 800a300 <_Balloc+0x64>
 800a2e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2ea:	e00e      	b.n	800a30a <_Balloc+0x6e>
 800a2ec:	2221      	movs	r2, #33	; 0x21
 800a2ee:	2104      	movs	r1, #4
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f000 fb57 	bl	800a9a4 <_calloc_r>
 800a2f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2f8:	60f0      	str	r0, [r6, #12]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1e4      	bne.n	800a2ca <_Balloc+0x2e>
 800a300:	2000      	movs	r0, #0
 800a302:	bd70      	pop	{r4, r5, r6, pc}
 800a304:	6802      	ldr	r2, [r0, #0]
 800a306:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a30a:	2300      	movs	r3, #0
 800a30c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a310:	e7f7      	b.n	800a302 <_Balloc+0x66>
 800a312:	bf00      	nop
 800a314:	0800b261 	.word	0x0800b261
 800a318:	0800b2e4 	.word	0x0800b2e4

0800a31c <_Bfree>:
 800a31c:	b570      	push	{r4, r5, r6, lr}
 800a31e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a320:	4605      	mov	r5, r0
 800a322:	460c      	mov	r4, r1
 800a324:	b976      	cbnz	r6, 800a344 <_Bfree+0x28>
 800a326:	2010      	movs	r0, #16
 800a328:	f7ff ffa4 	bl	800a274 <malloc>
 800a32c:	4602      	mov	r2, r0
 800a32e:	6268      	str	r0, [r5, #36]	; 0x24
 800a330:	b920      	cbnz	r0, 800a33c <_Bfree+0x20>
 800a332:	4b09      	ldr	r3, [pc, #36]	; (800a358 <_Bfree+0x3c>)
 800a334:	4809      	ldr	r0, [pc, #36]	; (800a35c <_Bfree+0x40>)
 800a336:	218a      	movs	r1, #138	; 0x8a
 800a338:	f000 fdc2 	bl	800aec0 <__assert_func>
 800a33c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a340:	6006      	str	r6, [r0, #0]
 800a342:	60c6      	str	r6, [r0, #12]
 800a344:	b13c      	cbz	r4, 800a356 <_Bfree+0x3a>
 800a346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a348:	6862      	ldr	r2, [r4, #4]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a350:	6021      	str	r1, [r4, #0]
 800a352:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a356:	bd70      	pop	{r4, r5, r6, pc}
 800a358:	0800b261 	.word	0x0800b261
 800a35c:	0800b2e4 	.word	0x0800b2e4

0800a360 <__multadd>:
 800a360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a364:	690d      	ldr	r5, [r1, #16]
 800a366:	4607      	mov	r7, r0
 800a368:	460c      	mov	r4, r1
 800a36a:	461e      	mov	r6, r3
 800a36c:	f101 0c14 	add.w	ip, r1, #20
 800a370:	2000      	movs	r0, #0
 800a372:	f8dc 3000 	ldr.w	r3, [ip]
 800a376:	b299      	uxth	r1, r3
 800a378:	fb02 6101 	mla	r1, r2, r1, r6
 800a37c:	0c1e      	lsrs	r6, r3, #16
 800a37e:	0c0b      	lsrs	r3, r1, #16
 800a380:	fb02 3306 	mla	r3, r2, r6, r3
 800a384:	b289      	uxth	r1, r1
 800a386:	3001      	adds	r0, #1
 800a388:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a38c:	4285      	cmp	r5, r0
 800a38e:	f84c 1b04 	str.w	r1, [ip], #4
 800a392:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a396:	dcec      	bgt.n	800a372 <__multadd+0x12>
 800a398:	b30e      	cbz	r6, 800a3de <__multadd+0x7e>
 800a39a:	68a3      	ldr	r3, [r4, #8]
 800a39c:	42ab      	cmp	r3, r5
 800a39e:	dc19      	bgt.n	800a3d4 <__multadd+0x74>
 800a3a0:	6861      	ldr	r1, [r4, #4]
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	3101      	adds	r1, #1
 800a3a6:	f7ff ff79 	bl	800a29c <_Balloc>
 800a3aa:	4680      	mov	r8, r0
 800a3ac:	b928      	cbnz	r0, 800a3ba <__multadd+0x5a>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	4b0c      	ldr	r3, [pc, #48]	; (800a3e4 <__multadd+0x84>)
 800a3b2:	480d      	ldr	r0, [pc, #52]	; (800a3e8 <__multadd+0x88>)
 800a3b4:	21b5      	movs	r1, #181	; 0xb5
 800a3b6:	f000 fd83 	bl	800aec0 <__assert_func>
 800a3ba:	6922      	ldr	r2, [r4, #16]
 800a3bc:	3202      	adds	r2, #2
 800a3be:	f104 010c 	add.w	r1, r4, #12
 800a3c2:	0092      	lsls	r2, r2, #2
 800a3c4:	300c      	adds	r0, #12
 800a3c6:	f7fe fa9c 	bl	8008902 <memcpy>
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	4638      	mov	r0, r7
 800a3ce:	f7ff ffa5 	bl	800a31c <_Bfree>
 800a3d2:	4644      	mov	r4, r8
 800a3d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3d8:	3501      	adds	r5, #1
 800a3da:	615e      	str	r6, [r3, #20]
 800a3dc:	6125      	str	r5, [r4, #16]
 800a3de:	4620      	mov	r0, r4
 800a3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e4:	0800b2d3 	.word	0x0800b2d3
 800a3e8:	0800b2e4 	.word	0x0800b2e4

0800a3ec <__hi0bits>:
 800a3ec:	0c03      	lsrs	r3, r0, #16
 800a3ee:	041b      	lsls	r3, r3, #16
 800a3f0:	b9d3      	cbnz	r3, 800a428 <__hi0bits+0x3c>
 800a3f2:	0400      	lsls	r0, r0, #16
 800a3f4:	2310      	movs	r3, #16
 800a3f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a3fa:	bf04      	itt	eq
 800a3fc:	0200      	lsleq	r0, r0, #8
 800a3fe:	3308      	addeq	r3, #8
 800a400:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a404:	bf04      	itt	eq
 800a406:	0100      	lsleq	r0, r0, #4
 800a408:	3304      	addeq	r3, #4
 800a40a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a40e:	bf04      	itt	eq
 800a410:	0080      	lsleq	r0, r0, #2
 800a412:	3302      	addeq	r3, #2
 800a414:	2800      	cmp	r0, #0
 800a416:	db05      	blt.n	800a424 <__hi0bits+0x38>
 800a418:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a41c:	f103 0301 	add.w	r3, r3, #1
 800a420:	bf08      	it	eq
 800a422:	2320      	moveq	r3, #32
 800a424:	4618      	mov	r0, r3
 800a426:	4770      	bx	lr
 800a428:	2300      	movs	r3, #0
 800a42a:	e7e4      	b.n	800a3f6 <__hi0bits+0xa>

0800a42c <__lo0bits>:
 800a42c:	6803      	ldr	r3, [r0, #0]
 800a42e:	f013 0207 	ands.w	r2, r3, #7
 800a432:	4601      	mov	r1, r0
 800a434:	d00b      	beq.n	800a44e <__lo0bits+0x22>
 800a436:	07da      	lsls	r2, r3, #31
 800a438:	d423      	bmi.n	800a482 <__lo0bits+0x56>
 800a43a:	0798      	lsls	r0, r3, #30
 800a43c:	bf49      	itett	mi
 800a43e:	085b      	lsrmi	r3, r3, #1
 800a440:	089b      	lsrpl	r3, r3, #2
 800a442:	2001      	movmi	r0, #1
 800a444:	600b      	strmi	r3, [r1, #0]
 800a446:	bf5c      	itt	pl
 800a448:	600b      	strpl	r3, [r1, #0]
 800a44a:	2002      	movpl	r0, #2
 800a44c:	4770      	bx	lr
 800a44e:	b298      	uxth	r0, r3
 800a450:	b9a8      	cbnz	r0, 800a47e <__lo0bits+0x52>
 800a452:	0c1b      	lsrs	r3, r3, #16
 800a454:	2010      	movs	r0, #16
 800a456:	b2da      	uxtb	r2, r3
 800a458:	b90a      	cbnz	r2, 800a45e <__lo0bits+0x32>
 800a45a:	3008      	adds	r0, #8
 800a45c:	0a1b      	lsrs	r3, r3, #8
 800a45e:	071a      	lsls	r2, r3, #28
 800a460:	bf04      	itt	eq
 800a462:	091b      	lsreq	r3, r3, #4
 800a464:	3004      	addeq	r0, #4
 800a466:	079a      	lsls	r2, r3, #30
 800a468:	bf04      	itt	eq
 800a46a:	089b      	lsreq	r3, r3, #2
 800a46c:	3002      	addeq	r0, #2
 800a46e:	07da      	lsls	r2, r3, #31
 800a470:	d403      	bmi.n	800a47a <__lo0bits+0x4e>
 800a472:	085b      	lsrs	r3, r3, #1
 800a474:	f100 0001 	add.w	r0, r0, #1
 800a478:	d005      	beq.n	800a486 <__lo0bits+0x5a>
 800a47a:	600b      	str	r3, [r1, #0]
 800a47c:	4770      	bx	lr
 800a47e:	4610      	mov	r0, r2
 800a480:	e7e9      	b.n	800a456 <__lo0bits+0x2a>
 800a482:	2000      	movs	r0, #0
 800a484:	4770      	bx	lr
 800a486:	2020      	movs	r0, #32
 800a488:	4770      	bx	lr
	...

0800a48c <__i2b>:
 800a48c:	b510      	push	{r4, lr}
 800a48e:	460c      	mov	r4, r1
 800a490:	2101      	movs	r1, #1
 800a492:	f7ff ff03 	bl	800a29c <_Balloc>
 800a496:	4602      	mov	r2, r0
 800a498:	b928      	cbnz	r0, 800a4a6 <__i2b+0x1a>
 800a49a:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <__i2b+0x24>)
 800a49c:	4805      	ldr	r0, [pc, #20]	; (800a4b4 <__i2b+0x28>)
 800a49e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a4a2:	f000 fd0d 	bl	800aec0 <__assert_func>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	6144      	str	r4, [r0, #20]
 800a4aa:	6103      	str	r3, [r0, #16]
 800a4ac:	bd10      	pop	{r4, pc}
 800a4ae:	bf00      	nop
 800a4b0:	0800b2d3 	.word	0x0800b2d3
 800a4b4:	0800b2e4 	.word	0x0800b2e4

0800a4b8 <__multiply>:
 800a4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4bc:	4691      	mov	r9, r2
 800a4be:	690a      	ldr	r2, [r1, #16]
 800a4c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	bfb8      	it	lt
 800a4c8:	460b      	movlt	r3, r1
 800a4ca:	460c      	mov	r4, r1
 800a4cc:	bfbc      	itt	lt
 800a4ce:	464c      	movlt	r4, r9
 800a4d0:	4699      	movlt	r9, r3
 800a4d2:	6927      	ldr	r7, [r4, #16]
 800a4d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a4d8:	68a3      	ldr	r3, [r4, #8]
 800a4da:	6861      	ldr	r1, [r4, #4]
 800a4dc:	eb07 060a 	add.w	r6, r7, sl
 800a4e0:	42b3      	cmp	r3, r6
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	bfb8      	it	lt
 800a4e6:	3101      	addlt	r1, #1
 800a4e8:	f7ff fed8 	bl	800a29c <_Balloc>
 800a4ec:	b930      	cbnz	r0, 800a4fc <__multiply+0x44>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	4b44      	ldr	r3, [pc, #272]	; (800a604 <__multiply+0x14c>)
 800a4f2:	4845      	ldr	r0, [pc, #276]	; (800a608 <__multiply+0x150>)
 800a4f4:	f240 115d 	movw	r1, #349	; 0x15d
 800a4f8:	f000 fce2 	bl	800aec0 <__assert_func>
 800a4fc:	f100 0514 	add.w	r5, r0, #20
 800a500:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a504:	462b      	mov	r3, r5
 800a506:	2200      	movs	r2, #0
 800a508:	4543      	cmp	r3, r8
 800a50a:	d321      	bcc.n	800a550 <__multiply+0x98>
 800a50c:	f104 0314 	add.w	r3, r4, #20
 800a510:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a514:	f109 0314 	add.w	r3, r9, #20
 800a518:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a51c:	9202      	str	r2, [sp, #8]
 800a51e:	1b3a      	subs	r2, r7, r4
 800a520:	3a15      	subs	r2, #21
 800a522:	f022 0203 	bic.w	r2, r2, #3
 800a526:	3204      	adds	r2, #4
 800a528:	f104 0115 	add.w	r1, r4, #21
 800a52c:	428f      	cmp	r7, r1
 800a52e:	bf38      	it	cc
 800a530:	2204      	movcc	r2, #4
 800a532:	9201      	str	r2, [sp, #4]
 800a534:	9a02      	ldr	r2, [sp, #8]
 800a536:	9303      	str	r3, [sp, #12]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d80c      	bhi.n	800a556 <__multiply+0x9e>
 800a53c:	2e00      	cmp	r6, #0
 800a53e:	dd03      	ble.n	800a548 <__multiply+0x90>
 800a540:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a544:	2b00      	cmp	r3, #0
 800a546:	d05a      	beq.n	800a5fe <__multiply+0x146>
 800a548:	6106      	str	r6, [r0, #16]
 800a54a:	b005      	add	sp, #20
 800a54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a550:	f843 2b04 	str.w	r2, [r3], #4
 800a554:	e7d8      	b.n	800a508 <__multiply+0x50>
 800a556:	f8b3 a000 	ldrh.w	sl, [r3]
 800a55a:	f1ba 0f00 	cmp.w	sl, #0
 800a55e:	d024      	beq.n	800a5aa <__multiply+0xf2>
 800a560:	f104 0e14 	add.w	lr, r4, #20
 800a564:	46a9      	mov	r9, r5
 800a566:	f04f 0c00 	mov.w	ip, #0
 800a56a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a56e:	f8d9 1000 	ldr.w	r1, [r9]
 800a572:	fa1f fb82 	uxth.w	fp, r2
 800a576:	b289      	uxth	r1, r1
 800a578:	fb0a 110b 	mla	r1, sl, fp, r1
 800a57c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a580:	f8d9 2000 	ldr.w	r2, [r9]
 800a584:	4461      	add	r1, ip
 800a586:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a58a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a58e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a592:	b289      	uxth	r1, r1
 800a594:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a598:	4577      	cmp	r7, lr
 800a59a:	f849 1b04 	str.w	r1, [r9], #4
 800a59e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5a2:	d8e2      	bhi.n	800a56a <__multiply+0xb2>
 800a5a4:	9a01      	ldr	r2, [sp, #4]
 800a5a6:	f845 c002 	str.w	ip, [r5, r2]
 800a5aa:	9a03      	ldr	r2, [sp, #12]
 800a5ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	f1b9 0f00 	cmp.w	r9, #0
 800a5b6:	d020      	beq.n	800a5fa <__multiply+0x142>
 800a5b8:	6829      	ldr	r1, [r5, #0]
 800a5ba:	f104 0c14 	add.w	ip, r4, #20
 800a5be:	46ae      	mov	lr, r5
 800a5c0:	f04f 0a00 	mov.w	sl, #0
 800a5c4:	f8bc b000 	ldrh.w	fp, [ip]
 800a5c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a5cc:	fb09 220b 	mla	r2, r9, fp, r2
 800a5d0:	4492      	add	sl, r2
 800a5d2:	b289      	uxth	r1, r1
 800a5d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a5d8:	f84e 1b04 	str.w	r1, [lr], #4
 800a5dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a5e0:	f8be 1000 	ldrh.w	r1, [lr]
 800a5e4:	0c12      	lsrs	r2, r2, #16
 800a5e6:	fb09 1102 	mla	r1, r9, r2, r1
 800a5ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a5ee:	4567      	cmp	r7, ip
 800a5f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5f4:	d8e6      	bhi.n	800a5c4 <__multiply+0x10c>
 800a5f6:	9a01      	ldr	r2, [sp, #4]
 800a5f8:	50a9      	str	r1, [r5, r2]
 800a5fa:	3504      	adds	r5, #4
 800a5fc:	e79a      	b.n	800a534 <__multiply+0x7c>
 800a5fe:	3e01      	subs	r6, #1
 800a600:	e79c      	b.n	800a53c <__multiply+0x84>
 800a602:	bf00      	nop
 800a604:	0800b2d3 	.word	0x0800b2d3
 800a608:	0800b2e4 	.word	0x0800b2e4

0800a60c <__pow5mult>:
 800a60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a610:	4615      	mov	r5, r2
 800a612:	f012 0203 	ands.w	r2, r2, #3
 800a616:	4606      	mov	r6, r0
 800a618:	460f      	mov	r7, r1
 800a61a:	d007      	beq.n	800a62c <__pow5mult+0x20>
 800a61c:	4c25      	ldr	r4, [pc, #148]	; (800a6b4 <__pow5mult+0xa8>)
 800a61e:	3a01      	subs	r2, #1
 800a620:	2300      	movs	r3, #0
 800a622:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a626:	f7ff fe9b 	bl	800a360 <__multadd>
 800a62a:	4607      	mov	r7, r0
 800a62c:	10ad      	asrs	r5, r5, #2
 800a62e:	d03d      	beq.n	800a6ac <__pow5mult+0xa0>
 800a630:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a632:	b97c      	cbnz	r4, 800a654 <__pow5mult+0x48>
 800a634:	2010      	movs	r0, #16
 800a636:	f7ff fe1d 	bl	800a274 <malloc>
 800a63a:	4602      	mov	r2, r0
 800a63c:	6270      	str	r0, [r6, #36]	; 0x24
 800a63e:	b928      	cbnz	r0, 800a64c <__pow5mult+0x40>
 800a640:	4b1d      	ldr	r3, [pc, #116]	; (800a6b8 <__pow5mult+0xac>)
 800a642:	481e      	ldr	r0, [pc, #120]	; (800a6bc <__pow5mult+0xb0>)
 800a644:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a648:	f000 fc3a 	bl	800aec0 <__assert_func>
 800a64c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a650:	6004      	str	r4, [r0, #0]
 800a652:	60c4      	str	r4, [r0, #12]
 800a654:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a658:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a65c:	b94c      	cbnz	r4, 800a672 <__pow5mult+0x66>
 800a65e:	f240 2171 	movw	r1, #625	; 0x271
 800a662:	4630      	mov	r0, r6
 800a664:	f7ff ff12 	bl	800a48c <__i2b>
 800a668:	2300      	movs	r3, #0
 800a66a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a66e:	4604      	mov	r4, r0
 800a670:	6003      	str	r3, [r0, #0]
 800a672:	f04f 0900 	mov.w	r9, #0
 800a676:	07eb      	lsls	r3, r5, #31
 800a678:	d50a      	bpl.n	800a690 <__pow5mult+0x84>
 800a67a:	4639      	mov	r1, r7
 800a67c:	4622      	mov	r2, r4
 800a67e:	4630      	mov	r0, r6
 800a680:	f7ff ff1a 	bl	800a4b8 <__multiply>
 800a684:	4639      	mov	r1, r7
 800a686:	4680      	mov	r8, r0
 800a688:	4630      	mov	r0, r6
 800a68a:	f7ff fe47 	bl	800a31c <_Bfree>
 800a68e:	4647      	mov	r7, r8
 800a690:	106d      	asrs	r5, r5, #1
 800a692:	d00b      	beq.n	800a6ac <__pow5mult+0xa0>
 800a694:	6820      	ldr	r0, [r4, #0]
 800a696:	b938      	cbnz	r0, 800a6a8 <__pow5mult+0x9c>
 800a698:	4622      	mov	r2, r4
 800a69a:	4621      	mov	r1, r4
 800a69c:	4630      	mov	r0, r6
 800a69e:	f7ff ff0b 	bl	800a4b8 <__multiply>
 800a6a2:	6020      	str	r0, [r4, #0]
 800a6a4:	f8c0 9000 	str.w	r9, [r0]
 800a6a8:	4604      	mov	r4, r0
 800a6aa:	e7e4      	b.n	800a676 <__pow5mult+0x6a>
 800a6ac:	4638      	mov	r0, r7
 800a6ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6b2:	bf00      	nop
 800a6b4:	0800b430 	.word	0x0800b430
 800a6b8:	0800b261 	.word	0x0800b261
 800a6bc:	0800b2e4 	.word	0x0800b2e4

0800a6c0 <__lshift>:
 800a6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c4:	460c      	mov	r4, r1
 800a6c6:	6849      	ldr	r1, [r1, #4]
 800a6c8:	6923      	ldr	r3, [r4, #16]
 800a6ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6ce:	68a3      	ldr	r3, [r4, #8]
 800a6d0:	4607      	mov	r7, r0
 800a6d2:	4691      	mov	r9, r2
 800a6d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6d8:	f108 0601 	add.w	r6, r8, #1
 800a6dc:	42b3      	cmp	r3, r6
 800a6de:	db0b      	blt.n	800a6f8 <__lshift+0x38>
 800a6e0:	4638      	mov	r0, r7
 800a6e2:	f7ff fddb 	bl	800a29c <_Balloc>
 800a6e6:	4605      	mov	r5, r0
 800a6e8:	b948      	cbnz	r0, 800a6fe <__lshift+0x3e>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	4b2a      	ldr	r3, [pc, #168]	; (800a798 <__lshift+0xd8>)
 800a6ee:	482b      	ldr	r0, [pc, #172]	; (800a79c <__lshift+0xdc>)
 800a6f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a6f4:	f000 fbe4 	bl	800aec0 <__assert_func>
 800a6f8:	3101      	adds	r1, #1
 800a6fa:	005b      	lsls	r3, r3, #1
 800a6fc:	e7ee      	b.n	800a6dc <__lshift+0x1c>
 800a6fe:	2300      	movs	r3, #0
 800a700:	f100 0114 	add.w	r1, r0, #20
 800a704:	f100 0210 	add.w	r2, r0, #16
 800a708:	4618      	mov	r0, r3
 800a70a:	4553      	cmp	r3, sl
 800a70c:	db37      	blt.n	800a77e <__lshift+0xbe>
 800a70e:	6920      	ldr	r0, [r4, #16]
 800a710:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a714:	f104 0314 	add.w	r3, r4, #20
 800a718:	f019 091f 	ands.w	r9, r9, #31
 800a71c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a720:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a724:	d02f      	beq.n	800a786 <__lshift+0xc6>
 800a726:	f1c9 0e20 	rsb	lr, r9, #32
 800a72a:	468a      	mov	sl, r1
 800a72c:	f04f 0c00 	mov.w	ip, #0
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	fa02 f209 	lsl.w	r2, r2, r9
 800a736:	ea42 020c 	orr.w	r2, r2, ip
 800a73a:	f84a 2b04 	str.w	r2, [sl], #4
 800a73e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a742:	4298      	cmp	r0, r3
 800a744:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a748:	d8f2      	bhi.n	800a730 <__lshift+0x70>
 800a74a:	1b03      	subs	r3, r0, r4
 800a74c:	3b15      	subs	r3, #21
 800a74e:	f023 0303 	bic.w	r3, r3, #3
 800a752:	3304      	adds	r3, #4
 800a754:	f104 0215 	add.w	r2, r4, #21
 800a758:	4290      	cmp	r0, r2
 800a75a:	bf38      	it	cc
 800a75c:	2304      	movcc	r3, #4
 800a75e:	f841 c003 	str.w	ip, [r1, r3]
 800a762:	f1bc 0f00 	cmp.w	ip, #0
 800a766:	d001      	beq.n	800a76c <__lshift+0xac>
 800a768:	f108 0602 	add.w	r6, r8, #2
 800a76c:	3e01      	subs	r6, #1
 800a76e:	4638      	mov	r0, r7
 800a770:	612e      	str	r6, [r5, #16]
 800a772:	4621      	mov	r1, r4
 800a774:	f7ff fdd2 	bl	800a31c <_Bfree>
 800a778:	4628      	mov	r0, r5
 800a77a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a77e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a782:	3301      	adds	r3, #1
 800a784:	e7c1      	b.n	800a70a <__lshift+0x4a>
 800a786:	3904      	subs	r1, #4
 800a788:	f853 2b04 	ldr.w	r2, [r3], #4
 800a78c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a790:	4298      	cmp	r0, r3
 800a792:	d8f9      	bhi.n	800a788 <__lshift+0xc8>
 800a794:	e7ea      	b.n	800a76c <__lshift+0xac>
 800a796:	bf00      	nop
 800a798:	0800b2d3 	.word	0x0800b2d3
 800a79c:	0800b2e4 	.word	0x0800b2e4

0800a7a0 <__mcmp>:
 800a7a0:	b530      	push	{r4, r5, lr}
 800a7a2:	6902      	ldr	r2, [r0, #16]
 800a7a4:	690c      	ldr	r4, [r1, #16]
 800a7a6:	1b12      	subs	r2, r2, r4
 800a7a8:	d10e      	bne.n	800a7c8 <__mcmp+0x28>
 800a7aa:	f100 0314 	add.w	r3, r0, #20
 800a7ae:	3114      	adds	r1, #20
 800a7b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a7b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a7b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a7bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a7c0:	42a5      	cmp	r5, r4
 800a7c2:	d003      	beq.n	800a7cc <__mcmp+0x2c>
 800a7c4:	d305      	bcc.n	800a7d2 <__mcmp+0x32>
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	bd30      	pop	{r4, r5, pc}
 800a7cc:	4283      	cmp	r3, r0
 800a7ce:	d3f3      	bcc.n	800a7b8 <__mcmp+0x18>
 800a7d0:	e7fa      	b.n	800a7c8 <__mcmp+0x28>
 800a7d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7d6:	e7f7      	b.n	800a7c8 <__mcmp+0x28>

0800a7d8 <__mdiff>:
 800a7d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7dc:	460c      	mov	r4, r1
 800a7de:	4606      	mov	r6, r0
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	4690      	mov	r8, r2
 800a7e6:	f7ff ffdb 	bl	800a7a0 <__mcmp>
 800a7ea:	1e05      	subs	r5, r0, #0
 800a7ec:	d110      	bne.n	800a810 <__mdiff+0x38>
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f7ff fd53 	bl	800a29c <_Balloc>
 800a7f6:	b930      	cbnz	r0, 800a806 <__mdiff+0x2e>
 800a7f8:	4b3a      	ldr	r3, [pc, #232]	; (800a8e4 <__mdiff+0x10c>)
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	f240 2132 	movw	r1, #562	; 0x232
 800a800:	4839      	ldr	r0, [pc, #228]	; (800a8e8 <__mdiff+0x110>)
 800a802:	f000 fb5d 	bl	800aec0 <__assert_func>
 800a806:	2301      	movs	r3, #1
 800a808:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a80c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a810:	bfa4      	itt	ge
 800a812:	4643      	movge	r3, r8
 800a814:	46a0      	movge	r8, r4
 800a816:	4630      	mov	r0, r6
 800a818:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a81c:	bfa6      	itte	ge
 800a81e:	461c      	movge	r4, r3
 800a820:	2500      	movge	r5, #0
 800a822:	2501      	movlt	r5, #1
 800a824:	f7ff fd3a 	bl	800a29c <_Balloc>
 800a828:	b920      	cbnz	r0, 800a834 <__mdiff+0x5c>
 800a82a:	4b2e      	ldr	r3, [pc, #184]	; (800a8e4 <__mdiff+0x10c>)
 800a82c:	4602      	mov	r2, r0
 800a82e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a832:	e7e5      	b.n	800a800 <__mdiff+0x28>
 800a834:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a838:	6926      	ldr	r6, [r4, #16]
 800a83a:	60c5      	str	r5, [r0, #12]
 800a83c:	f104 0914 	add.w	r9, r4, #20
 800a840:	f108 0514 	add.w	r5, r8, #20
 800a844:	f100 0e14 	add.w	lr, r0, #20
 800a848:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a84c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a850:	f108 0210 	add.w	r2, r8, #16
 800a854:	46f2      	mov	sl, lr
 800a856:	2100      	movs	r1, #0
 800a858:	f859 3b04 	ldr.w	r3, [r9], #4
 800a85c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a860:	fa1f f883 	uxth.w	r8, r3
 800a864:	fa11 f18b 	uxtah	r1, r1, fp
 800a868:	0c1b      	lsrs	r3, r3, #16
 800a86a:	eba1 0808 	sub.w	r8, r1, r8
 800a86e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a872:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a876:	fa1f f888 	uxth.w	r8, r8
 800a87a:	1419      	asrs	r1, r3, #16
 800a87c:	454e      	cmp	r6, r9
 800a87e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a882:	f84a 3b04 	str.w	r3, [sl], #4
 800a886:	d8e7      	bhi.n	800a858 <__mdiff+0x80>
 800a888:	1b33      	subs	r3, r6, r4
 800a88a:	3b15      	subs	r3, #21
 800a88c:	f023 0303 	bic.w	r3, r3, #3
 800a890:	3304      	adds	r3, #4
 800a892:	3415      	adds	r4, #21
 800a894:	42a6      	cmp	r6, r4
 800a896:	bf38      	it	cc
 800a898:	2304      	movcc	r3, #4
 800a89a:	441d      	add	r5, r3
 800a89c:	4473      	add	r3, lr
 800a89e:	469e      	mov	lr, r3
 800a8a0:	462e      	mov	r6, r5
 800a8a2:	4566      	cmp	r6, ip
 800a8a4:	d30e      	bcc.n	800a8c4 <__mdiff+0xec>
 800a8a6:	f10c 0203 	add.w	r2, ip, #3
 800a8aa:	1b52      	subs	r2, r2, r5
 800a8ac:	f022 0203 	bic.w	r2, r2, #3
 800a8b0:	3d03      	subs	r5, #3
 800a8b2:	45ac      	cmp	ip, r5
 800a8b4:	bf38      	it	cc
 800a8b6:	2200      	movcc	r2, #0
 800a8b8:	441a      	add	r2, r3
 800a8ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a8be:	b17b      	cbz	r3, 800a8e0 <__mdiff+0x108>
 800a8c0:	6107      	str	r7, [r0, #16]
 800a8c2:	e7a3      	b.n	800a80c <__mdiff+0x34>
 800a8c4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a8c8:	fa11 f288 	uxtah	r2, r1, r8
 800a8cc:	1414      	asrs	r4, r2, #16
 800a8ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a8d2:	b292      	uxth	r2, r2
 800a8d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a8d8:	f84e 2b04 	str.w	r2, [lr], #4
 800a8dc:	1421      	asrs	r1, r4, #16
 800a8de:	e7e0      	b.n	800a8a2 <__mdiff+0xca>
 800a8e0:	3f01      	subs	r7, #1
 800a8e2:	e7ea      	b.n	800a8ba <__mdiff+0xe2>
 800a8e4:	0800b2d3 	.word	0x0800b2d3
 800a8e8:	0800b2e4 	.word	0x0800b2e4

0800a8ec <__d2b>:
 800a8ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8f0:	4689      	mov	r9, r1
 800a8f2:	2101      	movs	r1, #1
 800a8f4:	ec57 6b10 	vmov	r6, r7, d0
 800a8f8:	4690      	mov	r8, r2
 800a8fa:	f7ff fccf 	bl	800a29c <_Balloc>
 800a8fe:	4604      	mov	r4, r0
 800a900:	b930      	cbnz	r0, 800a910 <__d2b+0x24>
 800a902:	4602      	mov	r2, r0
 800a904:	4b25      	ldr	r3, [pc, #148]	; (800a99c <__d2b+0xb0>)
 800a906:	4826      	ldr	r0, [pc, #152]	; (800a9a0 <__d2b+0xb4>)
 800a908:	f240 310a 	movw	r1, #778	; 0x30a
 800a90c:	f000 fad8 	bl	800aec0 <__assert_func>
 800a910:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a914:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a918:	bb35      	cbnz	r5, 800a968 <__d2b+0x7c>
 800a91a:	2e00      	cmp	r6, #0
 800a91c:	9301      	str	r3, [sp, #4]
 800a91e:	d028      	beq.n	800a972 <__d2b+0x86>
 800a920:	4668      	mov	r0, sp
 800a922:	9600      	str	r6, [sp, #0]
 800a924:	f7ff fd82 	bl	800a42c <__lo0bits>
 800a928:	9900      	ldr	r1, [sp, #0]
 800a92a:	b300      	cbz	r0, 800a96e <__d2b+0x82>
 800a92c:	9a01      	ldr	r2, [sp, #4]
 800a92e:	f1c0 0320 	rsb	r3, r0, #32
 800a932:	fa02 f303 	lsl.w	r3, r2, r3
 800a936:	430b      	orrs	r3, r1
 800a938:	40c2      	lsrs	r2, r0
 800a93a:	6163      	str	r3, [r4, #20]
 800a93c:	9201      	str	r2, [sp, #4]
 800a93e:	9b01      	ldr	r3, [sp, #4]
 800a940:	61a3      	str	r3, [r4, #24]
 800a942:	2b00      	cmp	r3, #0
 800a944:	bf14      	ite	ne
 800a946:	2202      	movne	r2, #2
 800a948:	2201      	moveq	r2, #1
 800a94a:	6122      	str	r2, [r4, #16]
 800a94c:	b1d5      	cbz	r5, 800a984 <__d2b+0x98>
 800a94e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a952:	4405      	add	r5, r0
 800a954:	f8c9 5000 	str.w	r5, [r9]
 800a958:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a95c:	f8c8 0000 	str.w	r0, [r8]
 800a960:	4620      	mov	r0, r4
 800a962:	b003      	add	sp, #12
 800a964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a96c:	e7d5      	b.n	800a91a <__d2b+0x2e>
 800a96e:	6161      	str	r1, [r4, #20]
 800a970:	e7e5      	b.n	800a93e <__d2b+0x52>
 800a972:	a801      	add	r0, sp, #4
 800a974:	f7ff fd5a 	bl	800a42c <__lo0bits>
 800a978:	9b01      	ldr	r3, [sp, #4]
 800a97a:	6163      	str	r3, [r4, #20]
 800a97c:	2201      	movs	r2, #1
 800a97e:	6122      	str	r2, [r4, #16]
 800a980:	3020      	adds	r0, #32
 800a982:	e7e3      	b.n	800a94c <__d2b+0x60>
 800a984:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a988:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a98c:	f8c9 0000 	str.w	r0, [r9]
 800a990:	6918      	ldr	r0, [r3, #16]
 800a992:	f7ff fd2b 	bl	800a3ec <__hi0bits>
 800a996:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a99a:	e7df      	b.n	800a95c <__d2b+0x70>
 800a99c:	0800b2d3 	.word	0x0800b2d3
 800a9a0:	0800b2e4 	.word	0x0800b2e4

0800a9a4 <_calloc_r>:
 800a9a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9a6:	fba1 2402 	umull	r2, r4, r1, r2
 800a9aa:	b94c      	cbnz	r4, 800a9c0 <_calloc_r+0x1c>
 800a9ac:	4611      	mov	r1, r2
 800a9ae:	9201      	str	r2, [sp, #4]
 800a9b0:	f7fd ffde 	bl	8008970 <_malloc_r>
 800a9b4:	9a01      	ldr	r2, [sp, #4]
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	b930      	cbnz	r0, 800a9c8 <_calloc_r+0x24>
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	b003      	add	sp, #12
 800a9be:	bd30      	pop	{r4, r5, pc}
 800a9c0:	220c      	movs	r2, #12
 800a9c2:	6002      	str	r2, [r0, #0]
 800a9c4:	2500      	movs	r5, #0
 800a9c6:	e7f8      	b.n	800a9ba <_calloc_r+0x16>
 800a9c8:	4621      	mov	r1, r4
 800a9ca:	f7fd ffa8 	bl	800891e <memset>
 800a9ce:	e7f4      	b.n	800a9ba <_calloc_r+0x16>

0800a9d0 <_free_r>:
 800a9d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9d2:	2900      	cmp	r1, #0
 800a9d4:	d044      	beq.n	800aa60 <_free_r+0x90>
 800a9d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9da:	9001      	str	r0, [sp, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	f1a1 0404 	sub.w	r4, r1, #4
 800a9e2:	bfb8      	it	lt
 800a9e4:	18e4      	addlt	r4, r4, r3
 800a9e6:	f7ff fc4d 	bl	800a284 <__malloc_lock>
 800a9ea:	4a1e      	ldr	r2, [pc, #120]	; (800aa64 <_free_r+0x94>)
 800a9ec:	9801      	ldr	r0, [sp, #4]
 800a9ee:	6813      	ldr	r3, [r2, #0]
 800a9f0:	b933      	cbnz	r3, 800aa00 <_free_r+0x30>
 800a9f2:	6063      	str	r3, [r4, #4]
 800a9f4:	6014      	str	r4, [r2, #0]
 800a9f6:	b003      	add	sp, #12
 800a9f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9fc:	f7ff bc48 	b.w	800a290 <__malloc_unlock>
 800aa00:	42a3      	cmp	r3, r4
 800aa02:	d908      	bls.n	800aa16 <_free_r+0x46>
 800aa04:	6825      	ldr	r5, [r4, #0]
 800aa06:	1961      	adds	r1, r4, r5
 800aa08:	428b      	cmp	r3, r1
 800aa0a:	bf01      	itttt	eq
 800aa0c:	6819      	ldreq	r1, [r3, #0]
 800aa0e:	685b      	ldreq	r3, [r3, #4]
 800aa10:	1949      	addeq	r1, r1, r5
 800aa12:	6021      	streq	r1, [r4, #0]
 800aa14:	e7ed      	b.n	800a9f2 <_free_r+0x22>
 800aa16:	461a      	mov	r2, r3
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	b10b      	cbz	r3, 800aa20 <_free_r+0x50>
 800aa1c:	42a3      	cmp	r3, r4
 800aa1e:	d9fa      	bls.n	800aa16 <_free_r+0x46>
 800aa20:	6811      	ldr	r1, [r2, #0]
 800aa22:	1855      	adds	r5, r2, r1
 800aa24:	42a5      	cmp	r5, r4
 800aa26:	d10b      	bne.n	800aa40 <_free_r+0x70>
 800aa28:	6824      	ldr	r4, [r4, #0]
 800aa2a:	4421      	add	r1, r4
 800aa2c:	1854      	adds	r4, r2, r1
 800aa2e:	42a3      	cmp	r3, r4
 800aa30:	6011      	str	r1, [r2, #0]
 800aa32:	d1e0      	bne.n	800a9f6 <_free_r+0x26>
 800aa34:	681c      	ldr	r4, [r3, #0]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	6053      	str	r3, [r2, #4]
 800aa3a:	4421      	add	r1, r4
 800aa3c:	6011      	str	r1, [r2, #0]
 800aa3e:	e7da      	b.n	800a9f6 <_free_r+0x26>
 800aa40:	d902      	bls.n	800aa48 <_free_r+0x78>
 800aa42:	230c      	movs	r3, #12
 800aa44:	6003      	str	r3, [r0, #0]
 800aa46:	e7d6      	b.n	800a9f6 <_free_r+0x26>
 800aa48:	6825      	ldr	r5, [r4, #0]
 800aa4a:	1961      	adds	r1, r4, r5
 800aa4c:	428b      	cmp	r3, r1
 800aa4e:	bf04      	itt	eq
 800aa50:	6819      	ldreq	r1, [r3, #0]
 800aa52:	685b      	ldreq	r3, [r3, #4]
 800aa54:	6063      	str	r3, [r4, #4]
 800aa56:	bf04      	itt	eq
 800aa58:	1949      	addeq	r1, r1, r5
 800aa5a:	6021      	streq	r1, [r4, #0]
 800aa5c:	6054      	str	r4, [r2, #4]
 800aa5e:	e7ca      	b.n	800a9f6 <_free_r+0x26>
 800aa60:	b003      	add	sp, #12
 800aa62:	bd30      	pop	{r4, r5, pc}
 800aa64:	24004d94 	.word	0x24004d94

0800aa68 <__sfputc_r>:
 800aa68:	6893      	ldr	r3, [r2, #8]
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	b410      	push	{r4}
 800aa70:	6093      	str	r3, [r2, #8]
 800aa72:	da08      	bge.n	800aa86 <__sfputc_r+0x1e>
 800aa74:	6994      	ldr	r4, [r2, #24]
 800aa76:	42a3      	cmp	r3, r4
 800aa78:	db01      	blt.n	800aa7e <__sfputc_r+0x16>
 800aa7a:	290a      	cmp	r1, #10
 800aa7c:	d103      	bne.n	800aa86 <__sfputc_r+0x1e>
 800aa7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa82:	f000 b95d 	b.w	800ad40 <__swbuf_r>
 800aa86:	6813      	ldr	r3, [r2, #0]
 800aa88:	1c58      	adds	r0, r3, #1
 800aa8a:	6010      	str	r0, [r2, #0]
 800aa8c:	7019      	strb	r1, [r3, #0]
 800aa8e:	4608      	mov	r0, r1
 800aa90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <__sfputs_r>:
 800aa96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa98:	4606      	mov	r6, r0
 800aa9a:	460f      	mov	r7, r1
 800aa9c:	4614      	mov	r4, r2
 800aa9e:	18d5      	adds	r5, r2, r3
 800aaa0:	42ac      	cmp	r4, r5
 800aaa2:	d101      	bne.n	800aaa8 <__sfputs_r+0x12>
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	e007      	b.n	800aab8 <__sfputs_r+0x22>
 800aaa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaac:	463a      	mov	r2, r7
 800aaae:	4630      	mov	r0, r6
 800aab0:	f7ff ffda 	bl	800aa68 <__sfputc_r>
 800aab4:	1c43      	adds	r3, r0, #1
 800aab6:	d1f3      	bne.n	800aaa0 <__sfputs_r+0xa>
 800aab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aabc <_vfiprintf_r>:
 800aabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac0:	460d      	mov	r5, r1
 800aac2:	b09d      	sub	sp, #116	; 0x74
 800aac4:	4614      	mov	r4, r2
 800aac6:	4698      	mov	r8, r3
 800aac8:	4606      	mov	r6, r0
 800aaca:	b118      	cbz	r0, 800aad4 <_vfiprintf_r+0x18>
 800aacc:	6983      	ldr	r3, [r0, #24]
 800aace:	b90b      	cbnz	r3, 800aad4 <_vfiprintf_r+0x18>
 800aad0:	f7fd fe52 	bl	8008778 <__sinit>
 800aad4:	4b89      	ldr	r3, [pc, #548]	; (800acfc <_vfiprintf_r+0x240>)
 800aad6:	429d      	cmp	r5, r3
 800aad8:	d11b      	bne.n	800ab12 <_vfiprintf_r+0x56>
 800aada:	6875      	ldr	r5, [r6, #4]
 800aadc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aade:	07d9      	lsls	r1, r3, #31
 800aae0:	d405      	bmi.n	800aaee <_vfiprintf_r+0x32>
 800aae2:	89ab      	ldrh	r3, [r5, #12]
 800aae4:	059a      	lsls	r2, r3, #22
 800aae6:	d402      	bmi.n	800aaee <_vfiprintf_r+0x32>
 800aae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaea:	f7fd ff08 	bl	80088fe <__retarget_lock_acquire_recursive>
 800aaee:	89ab      	ldrh	r3, [r5, #12]
 800aaf0:	071b      	lsls	r3, r3, #28
 800aaf2:	d501      	bpl.n	800aaf8 <_vfiprintf_r+0x3c>
 800aaf4:	692b      	ldr	r3, [r5, #16]
 800aaf6:	b9eb      	cbnz	r3, 800ab34 <_vfiprintf_r+0x78>
 800aaf8:	4629      	mov	r1, r5
 800aafa:	4630      	mov	r0, r6
 800aafc:	f000 f972 	bl	800ade4 <__swsetup_r>
 800ab00:	b1c0      	cbz	r0, 800ab34 <_vfiprintf_r+0x78>
 800ab02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab04:	07dc      	lsls	r4, r3, #31
 800ab06:	d50e      	bpl.n	800ab26 <_vfiprintf_r+0x6a>
 800ab08:	f04f 30ff 	mov.w	r0, #4294967295
 800ab0c:	b01d      	add	sp, #116	; 0x74
 800ab0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab12:	4b7b      	ldr	r3, [pc, #492]	; (800ad00 <_vfiprintf_r+0x244>)
 800ab14:	429d      	cmp	r5, r3
 800ab16:	d101      	bne.n	800ab1c <_vfiprintf_r+0x60>
 800ab18:	68b5      	ldr	r5, [r6, #8]
 800ab1a:	e7df      	b.n	800aadc <_vfiprintf_r+0x20>
 800ab1c:	4b79      	ldr	r3, [pc, #484]	; (800ad04 <_vfiprintf_r+0x248>)
 800ab1e:	429d      	cmp	r5, r3
 800ab20:	bf08      	it	eq
 800ab22:	68f5      	ldreq	r5, [r6, #12]
 800ab24:	e7da      	b.n	800aadc <_vfiprintf_r+0x20>
 800ab26:	89ab      	ldrh	r3, [r5, #12]
 800ab28:	0598      	lsls	r0, r3, #22
 800ab2a:	d4ed      	bmi.n	800ab08 <_vfiprintf_r+0x4c>
 800ab2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab2e:	f7fd fee7 	bl	8008900 <__retarget_lock_release_recursive>
 800ab32:	e7e9      	b.n	800ab08 <_vfiprintf_r+0x4c>
 800ab34:	2300      	movs	r3, #0
 800ab36:	9309      	str	r3, [sp, #36]	; 0x24
 800ab38:	2320      	movs	r3, #32
 800ab3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab42:	2330      	movs	r3, #48	; 0x30
 800ab44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad08 <_vfiprintf_r+0x24c>
 800ab48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab4c:	f04f 0901 	mov.w	r9, #1
 800ab50:	4623      	mov	r3, r4
 800ab52:	469a      	mov	sl, r3
 800ab54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab58:	b10a      	cbz	r2, 800ab5e <_vfiprintf_r+0xa2>
 800ab5a:	2a25      	cmp	r2, #37	; 0x25
 800ab5c:	d1f9      	bne.n	800ab52 <_vfiprintf_r+0x96>
 800ab5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ab62:	d00b      	beq.n	800ab7c <_vfiprintf_r+0xc0>
 800ab64:	465b      	mov	r3, fp
 800ab66:	4622      	mov	r2, r4
 800ab68:	4629      	mov	r1, r5
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	f7ff ff93 	bl	800aa96 <__sfputs_r>
 800ab70:	3001      	adds	r0, #1
 800ab72:	f000 80aa 	beq.w	800acca <_vfiprintf_r+0x20e>
 800ab76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab78:	445a      	add	r2, fp
 800ab7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ab7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f000 80a2 	beq.w	800acca <_vfiprintf_r+0x20e>
 800ab86:	2300      	movs	r3, #0
 800ab88:	f04f 32ff 	mov.w	r2, #4294967295
 800ab8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab90:	f10a 0a01 	add.w	sl, sl, #1
 800ab94:	9304      	str	r3, [sp, #16]
 800ab96:	9307      	str	r3, [sp, #28]
 800ab98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab9c:	931a      	str	r3, [sp, #104]	; 0x68
 800ab9e:	4654      	mov	r4, sl
 800aba0:	2205      	movs	r2, #5
 800aba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aba6:	4858      	ldr	r0, [pc, #352]	; (800ad08 <_vfiprintf_r+0x24c>)
 800aba8:	f7f5 fba2 	bl	80002f0 <memchr>
 800abac:	9a04      	ldr	r2, [sp, #16]
 800abae:	b9d8      	cbnz	r0, 800abe8 <_vfiprintf_r+0x12c>
 800abb0:	06d1      	lsls	r1, r2, #27
 800abb2:	bf44      	itt	mi
 800abb4:	2320      	movmi	r3, #32
 800abb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abba:	0713      	lsls	r3, r2, #28
 800abbc:	bf44      	itt	mi
 800abbe:	232b      	movmi	r3, #43	; 0x2b
 800abc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abc4:	f89a 3000 	ldrb.w	r3, [sl]
 800abc8:	2b2a      	cmp	r3, #42	; 0x2a
 800abca:	d015      	beq.n	800abf8 <_vfiprintf_r+0x13c>
 800abcc:	9a07      	ldr	r2, [sp, #28]
 800abce:	4654      	mov	r4, sl
 800abd0:	2000      	movs	r0, #0
 800abd2:	f04f 0c0a 	mov.w	ip, #10
 800abd6:	4621      	mov	r1, r4
 800abd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abdc:	3b30      	subs	r3, #48	; 0x30
 800abde:	2b09      	cmp	r3, #9
 800abe0:	d94e      	bls.n	800ac80 <_vfiprintf_r+0x1c4>
 800abe2:	b1b0      	cbz	r0, 800ac12 <_vfiprintf_r+0x156>
 800abe4:	9207      	str	r2, [sp, #28]
 800abe6:	e014      	b.n	800ac12 <_vfiprintf_r+0x156>
 800abe8:	eba0 0308 	sub.w	r3, r0, r8
 800abec:	fa09 f303 	lsl.w	r3, r9, r3
 800abf0:	4313      	orrs	r3, r2
 800abf2:	9304      	str	r3, [sp, #16]
 800abf4:	46a2      	mov	sl, r4
 800abf6:	e7d2      	b.n	800ab9e <_vfiprintf_r+0xe2>
 800abf8:	9b03      	ldr	r3, [sp, #12]
 800abfa:	1d19      	adds	r1, r3, #4
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	9103      	str	r1, [sp, #12]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	bfbb      	ittet	lt
 800ac04:	425b      	neglt	r3, r3
 800ac06:	f042 0202 	orrlt.w	r2, r2, #2
 800ac0a:	9307      	strge	r3, [sp, #28]
 800ac0c:	9307      	strlt	r3, [sp, #28]
 800ac0e:	bfb8      	it	lt
 800ac10:	9204      	strlt	r2, [sp, #16]
 800ac12:	7823      	ldrb	r3, [r4, #0]
 800ac14:	2b2e      	cmp	r3, #46	; 0x2e
 800ac16:	d10c      	bne.n	800ac32 <_vfiprintf_r+0x176>
 800ac18:	7863      	ldrb	r3, [r4, #1]
 800ac1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ac1c:	d135      	bne.n	800ac8a <_vfiprintf_r+0x1ce>
 800ac1e:	9b03      	ldr	r3, [sp, #12]
 800ac20:	1d1a      	adds	r2, r3, #4
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	9203      	str	r2, [sp, #12]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	bfb8      	it	lt
 800ac2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac2e:	3402      	adds	r4, #2
 800ac30:	9305      	str	r3, [sp, #20]
 800ac32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad18 <_vfiprintf_r+0x25c>
 800ac36:	7821      	ldrb	r1, [r4, #0]
 800ac38:	2203      	movs	r2, #3
 800ac3a:	4650      	mov	r0, sl
 800ac3c:	f7f5 fb58 	bl	80002f0 <memchr>
 800ac40:	b140      	cbz	r0, 800ac54 <_vfiprintf_r+0x198>
 800ac42:	2340      	movs	r3, #64	; 0x40
 800ac44:	eba0 000a 	sub.w	r0, r0, sl
 800ac48:	fa03 f000 	lsl.w	r0, r3, r0
 800ac4c:	9b04      	ldr	r3, [sp, #16]
 800ac4e:	4303      	orrs	r3, r0
 800ac50:	3401      	adds	r4, #1
 800ac52:	9304      	str	r3, [sp, #16]
 800ac54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac58:	482c      	ldr	r0, [pc, #176]	; (800ad0c <_vfiprintf_r+0x250>)
 800ac5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac5e:	2206      	movs	r2, #6
 800ac60:	f7f5 fb46 	bl	80002f0 <memchr>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	d03f      	beq.n	800ace8 <_vfiprintf_r+0x22c>
 800ac68:	4b29      	ldr	r3, [pc, #164]	; (800ad10 <_vfiprintf_r+0x254>)
 800ac6a:	bb1b      	cbnz	r3, 800acb4 <_vfiprintf_r+0x1f8>
 800ac6c:	9b03      	ldr	r3, [sp, #12]
 800ac6e:	3307      	adds	r3, #7
 800ac70:	f023 0307 	bic.w	r3, r3, #7
 800ac74:	3308      	adds	r3, #8
 800ac76:	9303      	str	r3, [sp, #12]
 800ac78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac7a:	443b      	add	r3, r7
 800ac7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac7e:	e767      	b.n	800ab50 <_vfiprintf_r+0x94>
 800ac80:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac84:	460c      	mov	r4, r1
 800ac86:	2001      	movs	r0, #1
 800ac88:	e7a5      	b.n	800abd6 <_vfiprintf_r+0x11a>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	3401      	adds	r4, #1
 800ac8e:	9305      	str	r3, [sp, #20]
 800ac90:	4619      	mov	r1, r3
 800ac92:	f04f 0c0a 	mov.w	ip, #10
 800ac96:	4620      	mov	r0, r4
 800ac98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac9c:	3a30      	subs	r2, #48	; 0x30
 800ac9e:	2a09      	cmp	r2, #9
 800aca0:	d903      	bls.n	800acaa <_vfiprintf_r+0x1ee>
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d0c5      	beq.n	800ac32 <_vfiprintf_r+0x176>
 800aca6:	9105      	str	r1, [sp, #20]
 800aca8:	e7c3      	b.n	800ac32 <_vfiprintf_r+0x176>
 800acaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800acae:	4604      	mov	r4, r0
 800acb0:	2301      	movs	r3, #1
 800acb2:	e7f0      	b.n	800ac96 <_vfiprintf_r+0x1da>
 800acb4:	ab03      	add	r3, sp, #12
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	462a      	mov	r2, r5
 800acba:	4b16      	ldr	r3, [pc, #88]	; (800ad14 <_vfiprintf_r+0x258>)
 800acbc:	a904      	add	r1, sp, #16
 800acbe:	4630      	mov	r0, r6
 800acc0:	f7fd ff5a 	bl	8008b78 <_printf_float>
 800acc4:	4607      	mov	r7, r0
 800acc6:	1c78      	adds	r0, r7, #1
 800acc8:	d1d6      	bne.n	800ac78 <_vfiprintf_r+0x1bc>
 800acca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800accc:	07d9      	lsls	r1, r3, #31
 800acce:	d405      	bmi.n	800acdc <_vfiprintf_r+0x220>
 800acd0:	89ab      	ldrh	r3, [r5, #12]
 800acd2:	059a      	lsls	r2, r3, #22
 800acd4:	d402      	bmi.n	800acdc <_vfiprintf_r+0x220>
 800acd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acd8:	f7fd fe12 	bl	8008900 <__retarget_lock_release_recursive>
 800acdc:	89ab      	ldrh	r3, [r5, #12]
 800acde:	065b      	lsls	r3, r3, #25
 800ace0:	f53f af12 	bmi.w	800ab08 <_vfiprintf_r+0x4c>
 800ace4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ace6:	e711      	b.n	800ab0c <_vfiprintf_r+0x50>
 800ace8:	ab03      	add	r3, sp, #12
 800acea:	9300      	str	r3, [sp, #0]
 800acec:	462a      	mov	r2, r5
 800acee:	4b09      	ldr	r3, [pc, #36]	; (800ad14 <_vfiprintf_r+0x258>)
 800acf0:	a904      	add	r1, sp, #16
 800acf2:	4630      	mov	r0, r6
 800acf4:	f7fe f9cc 	bl	8009090 <_printf_i>
 800acf8:	e7e4      	b.n	800acc4 <_vfiprintf_r+0x208>
 800acfa:	bf00      	nop
 800acfc:	0800b1dc 	.word	0x0800b1dc
 800ad00:	0800b1fc 	.word	0x0800b1fc
 800ad04:	0800b1bc 	.word	0x0800b1bc
 800ad08:	0800b43c 	.word	0x0800b43c
 800ad0c:	0800b446 	.word	0x0800b446
 800ad10:	08008b79 	.word	0x08008b79
 800ad14:	0800aa97 	.word	0x0800aa97
 800ad18:	0800b442 	.word	0x0800b442

0800ad1c <_read_r>:
 800ad1c:	b538      	push	{r3, r4, r5, lr}
 800ad1e:	4d07      	ldr	r5, [pc, #28]	; (800ad3c <_read_r+0x20>)
 800ad20:	4604      	mov	r4, r0
 800ad22:	4608      	mov	r0, r1
 800ad24:	4611      	mov	r1, r2
 800ad26:	2200      	movs	r2, #0
 800ad28:	602a      	str	r2, [r5, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	f7f6 f9b6 	bl	800109c <_read>
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	d102      	bne.n	800ad3a <_read_r+0x1e>
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	b103      	cbz	r3, 800ad3a <_read_r+0x1e>
 800ad38:	6023      	str	r3, [r4, #0]
 800ad3a:	bd38      	pop	{r3, r4, r5, pc}
 800ad3c:	24004d9c 	.word	0x24004d9c

0800ad40 <__swbuf_r>:
 800ad40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad42:	460e      	mov	r6, r1
 800ad44:	4614      	mov	r4, r2
 800ad46:	4605      	mov	r5, r0
 800ad48:	b118      	cbz	r0, 800ad52 <__swbuf_r+0x12>
 800ad4a:	6983      	ldr	r3, [r0, #24]
 800ad4c:	b90b      	cbnz	r3, 800ad52 <__swbuf_r+0x12>
 800ad4e:	f7fd fd13 	bl	8008778 <__sinit>
 800ad52:	4b21      	ldr	r3, [pc, #132]	; (800add8 <__swbuf_r+0x98>)
 800ad54:	429c      	cmp	r4, r3
 800ad56:	d12b      	bne.n	800adb0 <__swbuf_r+0x70>
 800ad58:	686c      	ldr	r4, [r5, #4]
 800ad5a:	69a3      	ldr	r3, [r4, #24]
 800ad5c:	60a3      	str	r3, [r4, #8]
 800ad5e:	89a3      	ldrh	r3, [r4, #12]
 800ad60:	071a      	lsls	r2, r3, #28
 800ad62:	d52f      	bpl.n	800adc4 <__swbuf_r+0x84>
 800ad64:	6923      	ldr	r3, [r4, #16]
 800ad66:	b36b      	cbz	r3, 800adc4 <__swbuf_r+0x84>
 800ad68:	6923      	ldr	r3, [r4, #16]
 800ad6a:	6820      	ldr	r0, [r4, #0]
 800ad6c:	1ac0      	subs	r0, r0, r3
 800ad6e:	6963      	ldr	r3, [r4, #20]
 800ad70:	b2f6      	uxtb	r6, r6
 800ad72:	4283      	cmp	r3, r0
 800ad74:	4637      	mov	r7, r6
 800ad76:	dc04      	bgt.n	800ad82 <__swbuf_r+0x42>
 800ad78:	4621      	mov	r1, r4
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	f7ff fa28 	bl	800a1d0 <_fflush_r>
 800ad80:	bb30      	cbnz	r0, 800add0 <__swbuf_r+0x90>
 800ad82:	68a3      	ldr	r3, [r4, #8]
 800ad84:	3b01      	subs	r3, #1
 800ad86:	60a3      	str	r3, [r4, #8]
 800ad88:	6823      	ldr	r3, [r4, #0]
 800ad8a:	1c5a      	adds	r2, r3, #1
 800ad8c:	6022      	str	r2, [r4, #0]
 800ad8e:	701e      	strb	r6, [r3, #0]
 800ad90:	6963      	ldr	r3, [r4, #20]
 800ad92:	3001      	adds	r0, #1
 800ad94:	4283      	cmp	r3, r0
 800ad96:	d004      	beq.n	800ada2 <__swbuf_r+0x62>
 800ad98:	89a3      	ldrh	r3, [r4, #12]
 800ad9a:	07db      	lsls	r3, r3, #31
 800ad9c:	d506      	bpl.n	800adac <__swbuf_r+0x6c>
 800ad9e:	2e0a      	cmp	r6, #10
 800ada0:	d104      	bne.n	800adac <__swbuf_r+0x6c>
 800ada2:	4621      	mov	r1, r4
 800ada4:	4628      	mov	r0, r5
 800ada6:	f7ff fa13 	bl	800a1d0 <_fflush_r>
 800adaa:	b988      	cbnz	r0, 800add0 <__swbuf_r+0x90>
 800adac:	4638      	mov	r0, r7
 800adae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adb0:	4b0a      	ldr	r3, [pc, #40]	; (800addc <__swbuf_r+0x9c>)
 800adb2:	429c      	cmp	r4, r3
 800adb4:	d101      	bne.n	800adba <__swbuf_r+0x7a>
 800adb6:	68ac      	ldr	r4, [r5, #8]
 800adb8:	e7cf      	b.n	800ad5a <__swbuf_r+0x1a>
 800adba:	4b09      	ldr	r3, [pc, #36]	; (800ade0 <__swbuf_r+0xa0>)
 800adbc:	429c      	cmp	r4, r3
 800adbe:	bf08      	it	eq
 800adc0:	68ec      	ldreq	r4, [r5, #12]
 800adc2:	e7ca      	b.n	800ad5a <__swbuf_r+0x1a>
 800adc4:	4621      	mov	r1, r4
 800adc6:	4628      	mov	r0, r5
 800adc8:	f000 f80c 	bl	800ade4 <__swsetup_r>
 800adcc:	2800      	cmp	r0, #0
 800adce:	d0cb      	beq.n	800ad68 <__swbuf_r+0x28>
 800add0:	f04f 37ff 	mov.w	r7, #4294967295
 800add4:	e7ea      	b.n	800adac <__swbuf_r+0x6c>
 800add6:	bf00      	nop
 800add8:	0800b1dc 	.word	0x0800b1dc
 800addc:	0800b1fc 	.word	0x0800b1fc
 800ade0:	0800b1bc 	.word	0x0800b1bc

0800ade4 <__swsetup_r>:
 800ade4:	4b32      	ldr	r3, [pc, #200]	; (800aeb0 <__swsetup_r+0xcc>)
 800ade6:	b570      	push	{r4, r5, r6, lr}
 800ade8:	681d      	ldr	r5, [r3, #0]
 800adea:	4606      	mov	r6, r0
 800adec:	460c      	mov	r4, r1
 800adee:	b125      	cbz	r5, 800adfa <__swsetup_r+0x16>
 800adf0:	69ab      	ldr	r3, [r5, #24]
 800adf2:	b913      	cbnz	r3, 800adfa <__swsetup_r+0x16>
 800adf4:	4628      	mov	r0, r5
 800adf6:	f7fd fcbf 	bl	8008778 <__sinit>
 800adfa:	4b2e      	ldr	r3, [pc, #184]	; (800aeb4 <__swsetup_r+0xd0>)
 800adfc:	429c      	cmp	r4, r3
 800adfe:	d10f      	bne.n	800ae20 <__swsetup_r+0x3c>
 800ae00:	686c      	ldr	r4, [r5, #4]
 800ae02:	89a3      	ldrh	r3, [r4, #12]
 800ae04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae08:	0719      	lsls	r1, r3, #28
 800ae0a:	d42c      	bmi.n	800ae66 <__swsetup_r+0x82>
 800ae0c:	06dd      	lsls	r5, r3, #27
 800ae0e:	d411      	bmi.n	800ae34 <__swsetup_r+0x50>
 800ae10:	2309      	movs	r3, #9
 800ae12:	6033      	str	r3, [r6, #0]
 800ae14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae18:	81a3      	strh	r3, [r4, #12]
 800ae1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1e:	e03e      	b.n	800ae9e <__swsetup_r+0xba>
 800ae20:	4b25      	ldr	r3, [pc, #148]	; (800aeb8 <__swsetup_r+0xd4>)
 800ae22:	429c      	cmp	r4, r3
 800ae24:	d101      	bne.n	800ae2a <__swsetup_r+0x46>
 800ae26:	68ac      	ldr	r4, [r5, #8]
 800ae28:	e7eb      	b.n	800ae02 <__swsetup_r+0x1e>
 800ae2a:	4b24      	ldr	r3, [pc, #144]	; (800aebc <__swsetup_r+0xd8>)
 800ae2c:	429c      	cmp	r4, r3
 800ae2e:	bf08      	it	eq
 800ae30:	68ec      	ldreq	r4, [r5, #12]
 800ae32:	e7e6      	b.n	800ae02 <__swsetup_r+0x1e>
 800ae34:	0758      	lsls	r0, r3, #29
 800ae36:	d512      	bpl.n	800ae5e <__swsetup_r+0x7a>
 800ae38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae3a:	b141      	cbz	r1, 800ae4e <__swsetup_r+0x6a>
 800ae3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae40:	4299      	cmp	r1, r3
 800ae42:	d002      	beq.n	800ae4a <__swsetup_r+0x66>
 800ae44:	4630      	mov	r0, r6
 800ae46:	f7ff fdc3 	bl	800a9d0 <_free_r>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	6363      	str	r3, [r4, #52]	; 0x34
 800ae4e:	89a3      	ldrh	r3, [r4, #12]
 800ae50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae54:	81a3      	strh	r3, [r4, #12]
 800ae56:	2300      	movs	r3, #0
 800ae58:	6063      	str	r3, [r4, #4]
 800ae5a:	6923      	ldr	r3, [r4, #16]
 800ae5c:	6023      	str	r3, [r4, #0]
 800ae5e:	89a3      	ldrh	r3, [r4, #12]
 800ae60:	f043 0308 	orr.w	r3, r3, #8
 800ae64:	81a3      	strh	r3, [r4, #12]
 800ae66:	6923      	ldr	r3, [r4, #16]
 800ae68:	b94b      	cbnz	r3, 800ae7e <__swsetup_r+0x9a>
 800ae6a:	89a3      	ldrh	r3, [r4, #12]
 800ae6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae74:	d003      	beq.n	800ae7e <__swsetup_r+0x9a>
 800ae76:	4621      	mov	r1, r4
 800ae78:	4630      	mov	r0, r6
 800ae7a:	f000 f877 	bl	800af6c <__smakebuf_r>
 800ae7e:	89a0      	ldrh	r0, [r4, #12]
 800ae80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae84:	f010 0301 	ands.w	r3, r0, #1
 800ae88:	d00a      	beq.n	800aea0 <__swsetup_r+0xbc>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	60a3      	str	r3, [r4, #8]
 800ae8e:	6963      	ldr	r3, [r4, #20]
 800ae90:	425b      	negs	r3, r3
 800ae92:	61a3      	str	r3, [r4, #24]
 800ae94:	6923      	ldr	r3, [r4, #16]
 800ae96:	b943      	cbnz	r3, 800aeaa <__swsetup_r+0xc6>
 800ae98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae9c:	d1ba      	bne.n	800ae14 <__swsetup_r+0x30>
 800ae9e:	bd70      	pop	{r4, r5, r6, pc}
 800aea0:	0781      	lsls	r1, r0, #30
 800aea2:	bf58      	it	pl
 800aea4:	6963      	ldrpl	r3, [r4, #20]
 800aea6:	60a3      	str	r3, [r4, #8]
 800aea8:	e7f4      	b.n	800ae94 <__swsetup_r+0xb0>
 800aeaa:	2000      	movs	r0, #0
 800aeac:	e7f7      	b.n	800ae9e <__swsetup_r+0xba>
 800aeae:	bf00      	nop
 800aeb0:	24000014 	.word	0x24000014
 800aeb4:	0800b1dc 	.word	0x0800b1dc
 800aeb8:	0800b1fc 	.word	0x0800b1fc
 800aebc:	0800b1bc 	.word	0x0800b1bc

0800aec0 <__assert_func>:
 800aec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aec2:	4614      	mov	r4, r2
 800aec4:	461a      	mov	r2, r3
 800aec6:	4b09      	ldr	r3, [pc, #36]	; (800aeec <__assert_func+0x2c>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4605      	mov	r5, r0
 800aecc:	68d8      	ldr	r0, [r3, #12]
 800aece:	b14c      	cbz	r4, 800aee4 <__assert_func+0x24>
 800aed0:	4b07      	ldr	r3, [pc, #28]	; (800aef0 <__assert_func+0x30>)
 800aed2:	9100      	str	r1, [sp, #0]
 800aed4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aed8:	4906      	ldr	r1, [pc, #24]	; (800aef4 <__assert_func+0x34>)
 800aeda:	462b      	mov	r3, r5
 800aedc:	f000 f80e 	bl	800aefc <fiprintf>
 800aee0:	f000 f8a3 	bl	800b02a <abort>
 800aee4:	4b04      	ldr	r3, [pc, #16]	; (800aef8 <__assert_func+0x38>)
 800aee6:	461c      	mov	r4, r3
 800aee8:	e7f3      	b.n	800aed2 <__assert_func+0x12>
 800aeea:	bf00      	nop
 800aeec:	24000014 	.word	0x24000014
 800aef0:	0800b44d 	.word	0x0800b44d
 800aef4:	0800b45a 	.word	0x0800b45a
 800aef8:	0800b488 	.word	0x0800b488

0800aefc <fiprintf>:
 800aefc:	b40e      	push	{r1, r2, r3}
 800aefe:	b503      	push	{r0, r1, lr}
 800af00:	4601      	mov	r1, r0
 800af02:	ab03      	add	r3, sp, #12
 800af04:	4805      	ldr	r0, [pc, #20]	; (800af1c <fiprintf+0x20>)
 800af06:	f853 2b04 	ldr.w	r2, [r3], #4
 800af0a:	6800      	ldr	r0, [r0, #0]
 800af0c:	9301      	str	r3, [sp, #4]
 800af0e:	f7ff fdd5 	bl	800aabc <_vfiprintf_r>
 800af12:	b002      	add	sp, #8
 800af14:	f85d eb04 	ldr.w	lr, [sp], #4
 800af18:	b003      	add	sp, #12
 800af1a:	4770      	bx	lr
 800af1c:	24000014 	.word	0x24000014

0800af20 <__swhatbuf_r>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	460e      	mov	r6, r1
 800af24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af28:	2900      	cmp	r1, #0
 800af2a:	b096      	sub	sp, #88	; 0x58
 800af2c:	4614      	mov	r4, r2
 800af2e:	461d      	mov	r5, r3
 800af30:	da08      	bge.n	800af44 <__swhatbuf_r+0x24>
 800af32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af36:	2200      	movs	r2, #0
 800af38:	602a      	str	r2, [r5, #0]
 800af3a:	061a      	lsls	r2, r3, #24
 800af3c:	d410      	bmi.n	800af60 <__swhatbuf_r+0x40>
 800af3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af42:	e00e      	b.n	800af62 <__swhatbuf_r+0x42>
 800af44:	466a      	mov	r2, sp
 800af46:	f000 f877 	bl	800b038 <_fstat_r>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	dbf1      	blt.n	800af32 <__swhatbuf_r+0x12>
 800af4e:	9a01      	ldr	r2, [sp, #4]
 800af50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af58:	425a      	negs	r2, r3
 800af5a:	415a      	adcs	r2, r3
 800af5c:	602a      	str	r2, [r5, #0]
 800af5e:	e7ee      	b.n	800af3e <__swhatbuf_r+0x1e>
 800af60:	2340      	movs	r3, #64	; 0x40
 800af62:	2000      	movs	r0, #0
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	b016      	add	sp, #88	; 0x58
 800af68:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af6c <__smakebuf_r>:
 800af6c:	898b      	ldrh	r3, [r1, #12]
 800af6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af70:	079d      	lsls	r5, r3, #30
 800af72:	4606      	mov	r6, r0
 800af74:	460c      	mov	r4, r1
 800af76:	d507      	bpl.n	800af88 <__smakebuf_r+0x1c>
 800af78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af7c:	6023      	str	r3, [r4, #0]
 800af7e:	6123      	str	r3, [r4, #16]
 800af80:	2301      	movs	r3, #1
 800af82:	6163      	str	r3, [r4, #20]
 800af84:	b002      	add	sp, #8
 800af86:	bd70      	pop	{r4, r5, r6, pc}
 800af88:	ab01      	add	r3, sp, #4
 800af8a:	466a      	mov	r2, sp
 800af8c:	f7ff ffc8 	bl	800af20 <__swhatbuf_r>
 800af90:	9900      	ldr	r1, [sp, #0]
 800af92:	4605      	mov	r5, r0
 800af94:	4630      	mov	r0, r6
 800af96:	f7fd fceb 	bl	8008970 <_malloc_r>
 800af9a:	b948      	cbnz	r0, 800afb0 <__smakebuf_r+0x44>
 800af9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afa0:	059a      	lsls	r2, r3, #22
 800afa2:	d4ef      	bmi.n	800af84 <__smakebuf_r+0x18>
 800afa4:	f023 0303 	bic.w	r3, r3, #3
 800afa8:	f043 0302 	orr.w	r3, r3, #2
 800afac:	81a3      	strh	r3, [r4, #12]
 800afae:	e7e3      	b.n	800af78 <__smakebuf_r+0xc>
 800afb0:	4b0d      	ldr	r3, [pc, #52]	; (800afe8 <__smakebuf_r+0x7c>)
 800afb2:	62b3      	str	r3, [r6, #40]	; 0x28
 800afb4:	89a3      	ldrh	r3, [r4, #12]
 800afb6:	6020      	str	r0, [r4, #0]
 800afb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afbc:	81a3      	strh	r3, [r4, #12]
 800afbe:	9b00      	ldr	r3, [sp, #0]
 800afc0:	6163      	str	r3, [r4, #20]
 800afc2:	9b01      	ldr	r3, [sp, #4]
 800afc4:	6120      	str	r0, [r4, #16]
 800afc6:	b15b      	cbz	r3, 800afe0 <__smakebuf_r+0x74>
 800afc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afcc:	4630      	mov	r0, r6
 800afce:	f000 f845 	bl	800b05c <_isatty_r>
 800afd2:	b128      	cbz	r0, 800afe0 <__smakebuf_r+0x74>
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	f023 0303 	bic.w	r3, r3, #3
 800afda:	f043 0301 	orr.w	r3, r3, #1
 800afde:	81a3      	strh	r3, [r4, #12]
 800afe0:	89a0      	ldrh	r0, [r4, #12]
 800afe2:	4305      	orrs	r5, r0
 800afe4:	81a5      	strh	r5, [r4, #12]
 800afe6:	e7cd      	b.n	800af84 <__smakebuf_r+0x18>
 800afe8:	08008711 	.word	0x08008711

0800afec <__ascii_mbtowc>:
 800afec:	b082      	sub	sp, #8
 800afee:	b901      	cbnz	r1, 800aff2 <__ascii_mbtowc+0x6>
 800aff0:	a901      	add	r1, sp, #4
 800aff2:	b142      	cbz	r2, 800b006 <__ascii_mbtowc+0x1a>
 800aff4:	b14b      	cbz	r3, 800b00a <__ascii_mbtowc+0x1e>
 800aff6:	7813      	ldrb	r3, [r2, #0]
 800aff8:	600b      	str	r3, [r1, #0]
 800affa:	7812      	ldrb	r2, [r2, #0]
 800affc:	1e10      	subs	r0, r2, #0
 800affe:	bf18      	it	ne
 800b000:	2001      	movne	r0, #1
 800b002:	b002      	add	sp, #8
 800b004:	4770      	bx	lr
 800b006:	4610      	mov	r0, r2
 800b008:	e7fb      	b.n	800b002 <__ascii_mbtowc+0x16>
 800b00a:	f06f 0001 	mvn.w	r0, #1
 800b00e:	e7f8      	b.n	800b002 <__ascii_mbtowc+0x16>

0800b010 <__ascii_wctomb>:
 800b010:	b149      	cbz	r1, 800b026 <__ascii_wctomb+0x16>
 800b012:	2aff      	cmp	r2, #255	; 0xff
 800b014:	bf85      	ittet	hi
 800b016:	238a      	movhi	r3, #138	; 0x8a
 800b018:	6003      	strhi	r3, [r0, #0]
 800b01a:	700a      	strbls	r2, [r1, #0]
 800b01c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b020:	bf98      	it	ls
 800b022:	2001      	movls	r0, #1
 800b024:	4770      	bx	lr
 800b026:	4608      	mov	r0, r1
 800b028:	4770      	bx	lr

0800b02a <abort>:
 800b02a:	b508      	push	{r3, lr}
 800b02c:	2006      	movs	r0, #6
 800b02e:	f000 f84d 	bl	800b0cc <raise>
 800b032:	2001      	movs	r0, #1
 800b034:	f7f6 f828 	bl	8001088 <_exit>

0800b038 <_fstat_r>:
 800b038:	b538      	push	{r3, r4, r5, lr}
 800b03a:	4d07      	ldr	r5, [pc, #28]	; (800b058 <_fstat_r+0x20>)
 800b03c:	2300      	movs	r3, #0
 800b03e:	4604      	mov	r4, r0
 800b040:	4608      	mov	r0, r1
 800b042:	4611      	mov	r1, r2
 800b044:	602b      	str	r3, [r5, #0]
 800b046:	f7f6 f86e 	bl	8001126 <_fstat>
 800b04a:	1c43      	adds	r3, r0, #1
 800b04c:	d102      	bne.n	800b054 <_fstat_r+0x1c>
 800b04e:	682b      	ldr	r3, [r5, #0]
 800b050:	b103      	cbz	r3, 800b054 <_fstat_r+0x1c>
 800b052:	6023      	str	r3, [r4, #0]
 800b054:	bd38      	pop	{r3, r4, r5, pc}
 800b056:	bf00      	nop
 800b058:	24004d9c 	.word	0x24004d9c

0800b05c <_isatty_r>:
 800b05c:	b538      	push	{r3, r4, r5, lr}
 800b05e:	4d06      	ldr	r5, [pc, #24]	; (800b078 <_isatty_r+0x1c>)
 800b060:	2300      	movs	r3, #0
 800b062:	4604      	mov	r4, r0
 800b064:	4608      	mov	r0, r1
 800b066:	602b      	str	r3, [r5, #0]
 800b068:	f7f6 f86d 	bl	8001146 <_isatty>
 800b06c:	1c43      	adds	r3, r0, #1
 800b06e:	d102      	bne.n	800b076 <_isatty_r+0x1a>
 800b070:	682b      	ldr	r3, [r5, #0]
 800b072:	b103      	cbz	r3, 800b076 <_isatty_r+0x1a>
 800b074:	6023      	str	r3, [r4, #0]
 800b076:	bd38      	pop	{r3, r4, r5, pc}
 800b078:	24004d9c 	.word	0x24004d9c

0800b07c <_raise_r>:
 800b07c:	291f      	cmp	r1, #31
 800b07e:	b538      	push	{r3, r4, r5, lr}
 800b080:	4604      	mov	r4, r0
 800b082:	460d      	mov	r5, r1
 800b084:	d904      	bls.n	800b090 <_raise_r+0x14>
 800b086:	2316      	movs	r3, #22
 800b088:	6003      	str	r3, [r0, #0]
 800b08a:	f04f 30ff 	mov.w	r0, #4294967295
 800b08e:	bd38      	pop	{r3, r4, r5, pc}
 800b090:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b092:	b112      	cbz	r2, 800b09a <_raise_r+0x1e>
 800b094:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b098:	b94b      	cbnz	r3, 800b0ae <_raise_r+0x32>
 800b09a:	4620      	mov	r0, r4
 800b09c:	f000 f830 	bl	800b100 <_getpid_r>
 800b0a0:	462a      	mov	r2, r5
 800b0a2:	4601      	mov	r1, r0
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0aa:	f000 b817 	b.w	800b0dc <_kill_r>
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d00a      	beq.n	800b0c8 <_raise_r+0x4c>
 800b0b2:	1c59      	adds	r1, r3, #1
 800b0b4:	d103      	bne.n	800b0be <_raise_r+0x42>
 800b0b6:	2316      	movs	r3, #22
 800b0b8:	6003      	str	r3, [r0, #0]
 800b0ba:	2001      	movs	r0, #1
 800b0bc:	e7e7      	b.n	800b08e <_raise_r+0x12>
 800b0be:	2400      	movs	r4, #0
 800b0c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	4798      	blx	r3
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	e7e0      	b.n	800b08e <_raise_r+0x12>

0800b0cc <raise>:
 800b0cc:	4b02      	ldr	r3, [pc, #8]	; (800b0d8 <raise+0xc>)
 800b0ce:	4601      	mov	r1, r0
 800b0d0:	6818      	ldr	r0, [r3, #0]
 800b0d2:	f7ff bfd3 	b.w	800b07c <_raise_r>
 800b0d6:	bf00      	nop
 800b0d8:	24000014 	.word	0x24000014

0800b0dc <_kill_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4d07      	ldr	r5, [pc, #28]	; (800b0fc <_kill_r+0x20>)
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	4608      	mov	r0, r1
 800b0e6:	4611      	mov	r1, r2
 800b0e8:	602b      	str	r3, [r5, #0]
 800b0ea:	f7f5 ffbd 	bl	8001068 <_kill>
 800b0ee:	1c43      	adds	r3, r0, #1
 800b0f0:	d102      	bne.n	800b0f8 <_kill_r+0x1c>
 800b0f2:	682b      	ldr	r3, [r5, #0]
 800b0f4:	b103      	cbz	r3, 800b0f8 <_kill_r+0x1c>
 800b0f6:	6023      	str	r3, [r4, #0]
 800b0f8:	bd38      	pop	{r3, r4, r5, pc}
 800b0fa:	bf00      	nop
 800b0fc:	24004d9c 	.word	0x24004d9c

0800b100 <_getpid_r>:
 800b100:	f7f5 bfaa 	b.w	8001058 <_getpid>

0800b104 <_init>:
 800b104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b106:	bf00      	nop
 800b108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b10a:	bc08      	pop	{r3}
 800b10c:	469e      	mov	lr, r3
 800b10e:	4770      	bx	lr

0800b110 <_fini>:
 800b110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b112:	bf00      	nop
 800b114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b116:	bc08      	pop	{r3}
 800b118:	469e      	mov	lr, r3
 800b11a:	4770      	bx	lr
