
freeRTOS_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004280  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08104520  08104520  00014520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081045d8  081045d8  000145d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081045dc  081045dc  000145dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  10000000  081045e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004a88  10000078  08104658  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10004b00  08104658  00024b00  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001a2dd  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000032db  00000000  00000000  0003a385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000014a8  00000000  00000000  0003d660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001360  00000000  00000000  0003eb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a82e  00000000  00000000  0003fe68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001658b  00000000  00000000  0007a696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018b66d  00000000  00000000  00090c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0021c28e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000059a8  00000000  00000000  0021c2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000078 	.word	0x10000078
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08104508 	.word	0x08104508

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000007c 	.word	0x1000007c
 81002dc:	08104508 	.word	0x08104508

081002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002e0:	b480      	push	{r7}
 81002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002e4:	4b09      	ldr	r3, [pc, #36]	; (810030c <SystemInit+0x2c>)
 81002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002ea:	4a08      	ldr	r2, [pc, #32]	; (810030c <SystemInit+0x2c>)
 81002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002f4:	4b05      	ldr	r3, [pc, #20]	; (810030c <SystemInit+0x2c>)
 81002f6:	691b      	ldr	r3, [r3, #16]
 81002f8:	4a04      	ldr	r2, [pc, #16]	; (810030c <SystemInit+0x2c>)
 81002fa:	f043 0310 	orr.w	r3, r3, #16
 81002fe:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100310:	b580      	push	{r7, lr}
 8100312:	b082      	sub	sp, #8
 8100314:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100316:	4b21      	ldr	r3, [pc, #132]	; (810039c <main+0x8c>)
 8100318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810031c:	4a1f      	ldr	r2, [pc, #124]	; (810039c <main+0x8c>)
 810031e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100322:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100326:	4b1d      	ldr	r3, [pc, #116]	; (810039c <main+0x8c>)
 8100328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810032c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100330:	607b      	str	r3, [r7, #4]
 8100332:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100334:	2001      	movs	r0, #1
 8100336:	f000 fcb1 	bl	8100c9c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810033a:	f000 fd3b 	bl	8100db4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810033e:	2201      	movs	r2, #1
 8100340:	2102      	movs	r1, #2
 8100342:	2000      	movs	r0, #0
 8100344:	f000 fcbc 	bl	8100cc0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100348:	4b15      	ldr	r3, [pc, #84]	; (81003a0 <main+0x90>)
 810034a:	681b      	ldr	r3, [r3, #0]
 810034c:	091b      	lsrs	r3, r3, #4
 810034e:	f003 030f 	and.w	r3, r3, #15
 8100352:	2b07      	cmp	r3, #7
 8100354:	d108      	bne.n	8100368 <main+0x58>
 8100356:	4b13      	ldr	r3, [pc, #76]	; (81003a4 <main+0x94>)
 8100358:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810035c:	4a11      	ldr	r2, [pc, #68]	; (81003a4 <main+0x94>)
 810035e:	f043 0301 	orr.w	r3, r3, #1
 8100362:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100366:	e007      	b.n	8100378 <main+0x68>
 8100368:	4b0e      	ldr	r3, [pc, #56]	; (81003a4 <main+0x94>)
 810036a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810036e:	4a0d      	ldr	r2, [pc, #52]	; (81003a4 <main+0x94>)
 8100370:	f043 0301 	orr.w	r3, r3, #1
 8100374:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100378:	f000 f946 	bl	8100608 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810037c:	f000 f81a 	bl	81003b4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8100380:	f001 fa48 	bl	8101814 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8100384:	4a08      	ldr	r2, [pc, #32]	; (81003a8 <main+0x98>)
 8100386:	2100      	movs	r1, #0
 8100388:	4808      	ldr	r0, [pc, #32]	; (81003ac <main+0x9c>)
 810038a:	f001 fa8d 	bl	81018a8 <osThreadNew>
 810038e:	4603      	mov	r3, r0
 8100390:	4a07      	ldr	r2, [pc, #28]	; (81003b0 <main+0xa0>)
 8100392:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8100394:	f001 fa62 	bl	810185c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100398:	e7fe      	b.n	8100398 <main+0x88>
 810039a:	bf00      	nop
 810039c:	58024400 	.word	0x58024400
 81003a0:	e000ed00 	.word	0xe000ed00
 81003a4:	58026400 	.word	0x58026400
 81003a8:	08104554 	.word	0x08104554
 81003ac:	0810041d 	.word	0x0810041d
 81003b0:	10000094 	.word	0x10000094

081003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81003b4:	b580      	push	{r7, lr}
 81003b6:	b086      	sub	sp, #24
 81003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81003ba:	1d3b      	adds	r3, r7, #4
 81003bc:	2200      	movs	r2, #0
 81003be:	601a      	str	r2, [r3, #0]
 81003c0:	605a      	str	r2, [r3, #4]
 81003c2:	609a      	str	r2, [r3, #8]
 81003c4:	60da      	str	r2, [r3, #12]
 81003c6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81003c8:	4b12      	ldr	r3, [pc, #72]	; (8100414 <MX_GPIO_Init+0x60>)
 81003ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003ce:	4a11      	ldr	r2, [pc, #68]	; (8100414 <MX_GPIO_Init+0x60>)
 81003d0:	f043 0310 	orr.w	r3, r3, #16
 81003d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81003d8:	4b0e      	ldr	r3, [pc, #56]	; (8100414 <MX_GPIO_Init+0x60>)
 81003da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003de:	f003 0310 	and.w	r3, r3, #16
 81003e2:	603b      	str	r3, [r7, #0]
 81003e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 81003e6:	2200      	movs	r2, #0
 81003e8:	2102      	movs	r1, #2
 81003ea:	480b      	ldr	r0, [pc, #44]	; (8100418 <MX_GPIO_Init+0x64>)
 81003ec:	f000 fc22 	bl	8100c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 81003f0:	2302      	movs	r3, #2
 81003f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81003f4:	2301      	movs	r3, #1
 81003f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81003f8:	2300      	movs	r3, #0
 81003fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81003fc:	2300      	movs	r3, #0
 81003fe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8100400:	1d3b      	adds	r3, r7, #4
 8100402:	4619      	mov	r1, r3
 8100404:	4804      	ldr	r0, [pc, #16]	; (8100418 <MX_GPIO_Init+0x64>)
 8100406:	f000 fa65 	bl	81008d4 <HAL_GPIO_Init>

}
 810040a:	bf00      	nop
 810040c:	3718      	adds	r7, #24
 810040e:	46bd      	mov	sp, r7
 8100410:	bd80      	pop	{r7, pc}
 8100412:	bf00      	nop
 8100414:	58024400 	.word	0x58024400
 8100418:	58021000 	.word	0x58021000

0810041c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 810041c:	b580      	push	{r7, lr}
 810041e:	b082      	sub	sp, #8
 8100420:	af00      	add	r7, sp, #0
 8100422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8100424:	2102      	movs	r1, #2
 8100426:	4804      	ldr	r0, [pc, #16]	; (8100438 <StartDefaultTask+0x1c>)
 8100428:	f000 fc1d 	bl	8100c66 <HAL_GPIO_TogglePin>
    osDelay(500);
 810042c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8100430:	f001 facc 	bl	81019cc <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8100434:	e7f6      	b.n	8100424 <StartDefaultTask+0x8>
 8100436:	bf00      	nop
 8100438:	58021000 	.word	0x58021000

0810043c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 810043c:	b580      	push	{r7, lr}
 810043e:	b082      	sub	sp, #8
 8100440:	af00      	add	r7, sp, #0
 8100442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8100444:	687b      	ldr	r3, [r7, #4]
 8100446:	681b      	ldr	r3, [r3, #0]
 8100448:	4a04      	ldr	r2, [pc, #16]	; (810045c <HAL_TIM_PeriodElapsedCallback+0x20>)
 810044a:	4293      	cmp	r3, r2
 810044c:	d101      	bne.n	8100452 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 810044e:	f000 f939 	bl	81006c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100452:	bf00      	nop
 8100454:	3708      	adds	r7, #8
 8100456:	46bd      	mov	sp, r7
 8100458:	bd80      	pop	{r7, pc}
 810045a:	bf00      	nop
 810045c:	40001000 	.word	0x40001000

08100460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100460:	b580      	push	{r7, lr}
 8100462:	b082      	sub	sp, #8
 8100464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100466:	4b0c      	ldr	r3, [pc, #48]	; (8100498 <HAL_MspInit+0x38>)
 8100468:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810046c:	4a0a      	ldr	r2, [pc, #40]	; (8100498 <HAL_MspInit+0x38>)
 810046e:	f043 0302 	orr.w	r3, r3, #2
 8100472:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100476:	4b08      	ldr	r3, [pc, #32]	; (8100498 <HAL_MspInit+0x38>)
 8100478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810047c:	f003 0302 	and.w	r3, r3, #2
 8100480:	607b      	str	r3, [r7, #4]
 8100482:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100484:	2200      	movs	r2, #0
 8100486:	210f      	movs	r1, #15
 8100488:	f06f 0001 	mvn.w	r0, #1
 810048c:	f000 f9e6 	bl	810085c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100490:	bf00      	nop
 8100492:	3708      	adds	r7, #8
 8100494:	46bd      	mov	sp, r7
 8100496:	bd80      	pop	{r7, pc}
 8100498:	58024400 	.word	0x58024400

0810049c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810049c:	b580      	push	{r7, lr}
 810049e:	b090      	sub	sp, #64	; 0x40
 81004a0:	af00      	add	r7, sp, #0
 81004a2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81004a4:	687b      	ldr	r3, [r7, #4]
 81004a6:	2b0f      	cmp	r3, #15
 81004a8:	d827      	bhi.n	81004fa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 81004aa:	2200      	movs	r2, #0
 81004ac:	6879      	ldr	r1, [r7, #4]
 81004ae:	2036      	movs	r0, #54	; 0x36
 81004b0:	f000 f9d4 	bl	810085c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 81004b4:	2036      	movs	r0, #54	; 0x36
 81004b6:	f000 f9eb 	bl	8100890 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 81004ba:	4a29      	ldr	r2, [pc, #164]	; (8100560 <HAL_InitTick+0xc4>)
 81004bc:	687b      	ldr	r3, [r7, #4]
 81004be:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 81004c0:	4b28      	ldr	r3, [pc, #160]	; (8100564 <HAL_InitTick+0xc8>)
 81004c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81004c6:	4a27      	ldr	r2, [pc, #156]	; (8100564 <HAL_InitTick+0xc8>)
 81004c8:	f043 0310 	orr.w	r3, r3, #16
 81004cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81004d0:	4b24      	ldr	r3, [pc, #144]	; (8100564 <HAL_InitTick+0xc8>)
 81004d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81004d6:	f003 0310 	and.w	r3, r3, #16
 81004da:	60fb      	str	r3, [r7, #12]
 81004dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81004de:	f107 0210 	add.w	r2, r7, #16
 81004e2:	f107 0314 	add.w	r3, r7, #20
 81004e6:	4611      	mov	r1, r2
 81004e8:	4618      	mov	r0, r3
 81004ea:	f000 fe33 	bl	8101154 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 81004ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81004f0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 81004f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81004f4:	2b00      	cmp	r3, #0
 81004f6:	d106      	bne.n	8100506 <HAL_InitTick+0x6a>
 81004f8:	e001      	b.n	81004fe <HAL_InitTick+0x62>
    return HAL_ERROR;
 81004fa:	2301      	movs	r3, #1
 81004fc:	e02b      	b.n	8100556 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 81004fe:	f000 fe13 	bl	8101128 <HAL_RCC_GetPCLK1Freq>
 8100502:	63f8      	str	r0, [r7, #60]	; 0x3c
 8100504:	e004      	b.n	8100510 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8100506:	f000 fe0f 	bl	8101128 <HAL_RCC_GetPCLK1Freq>
 810050a:	4603      	mov	r3, r0
 810050c:	005b      	lsls	r3, r3, #1
 810050e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8100510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8100512:	4a15      	ldr	r2, [pc, #84]	; (8100568 <HAL_InitTick+0xcc>)
 8100514:	fba2 2303 	umull	r2, r3, r2, r3
 8100518:	0c9b      	lsrs	r3, r3, #18
 810051a:	3b01      	subs	r3, #1
 810051c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 810051e:	4b13      	ldr	r3, [pc, #76]	; (810056c <HAL_InitTick+0xd0>)
 8100520:	4a13      	ldr	r2, [pc, #76]	; (8100570 <HAL_InitTick+0xd4>)
 8100522:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8100524:	4b11      	ldr	r3, [pc, #68]	; (810056c <HAL_InitTick+0xd0>)
 8100526:	f240 32e7 	movw	r2, #999	; 0x3e7
 810052a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 810052c:	4a0f      	ldr	r2, [pc, #60]	; (810056c <HAL_InitTick+0xd0>)
 810052e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100530:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8100532:	4b0e      	ldr	r3, [pc, #56]	; (810056c <HAL_InitTick+0xd0>)
 8100534:	2200      	movs	r2, #0
 8100536:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100538:	4b0c      	ldr	r3, [pc, #48]	; (810056c <HAL_InitTick+0xd0>)
 810053a:	2200      	movs	r2, #0
 810053c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 810053e:	480b      	ldr	r0, [pc, #44]	; (810056c <HAL_InitTick+0xd0>)
 8100540:	f000 fe4a 	bl	81011d8 <HAL_TIM_Base_Init>
 8100544:	4603      	mov	r3, r0
 8100546:	2b00      	cmp	r3, #0
 8100548:	d104      	bne.n	8100554 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 810054a:	4808      	ldr	r0, [pc, #32]	; (810056c <HAL_InitTick+0xd0>)
 810054c:	f000 fea6 	bl	810129c <HAL_TIM_Base_Start_IT>
 8100550:	4603      	mov	r3, r0
 8100552:	e000      	b.n	8100556 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8100554:	2301      	movs	r3, #1
}
 8100556:	4618      	mov	r0, r3
 8100558:	3740      	adds	r7, #64	; 0x40
 810055a:	46bd      	mov	sp, r7
 810055c:	bd80      	pop	{r7, pc}
 810055e:	bf00      	nop
 8100560:	10000008 	.word	0x10000008
 8100564:	58024400 	.word	0x58024400
 8100568:	431bde83 	.word	0x431bde83
 810056c:	10000098 	.word	0x10000098
 8100570:	40001000 	.word	0x40001000

08100574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100574:	b480      	push	{r7}
 8100576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100578:	e7fe      	b.n	8100578 <NMI_Handler+0x4>

0810057a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810057a:	b480      	push	{r7}
 810057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810057e:	e7fe      	b.n	810057e <HardFault_Handler+0x4>

08100580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100580:	b480      	push	{r7}
 8100582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100584:	e7fe      	b.n	8100584 <MemManage_Handler+0x4>

08100586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100586:	b480      	push	{r7}
 8100588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810058a:	e7fe      	b.n	810058a <BusFault_Handler+0x4>

0810058c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810058c:	b480      	push	{r7}
 810058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100590:	e7fe      	b.n	8100590 <UsageFault_Handler+0x4>

08100592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100592:	b480      	push	{r7}
 8100594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100596:	bf00      	nop
 8100598:	46bd      	mov	sp, r7
 810059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810059e:	4770      	bx	lr

081005a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 81005a0:	b580      	push	{r7, lr}
 81005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 81005a4:	4802      	ldr	r0, [pc, #8]	; (81005b0 <TIM6_DAC_IRQHandler+0x10>)
 81005a6:	f000 fef1 	bl	810138c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 81005aa:	bf00      	nop
 81005ac:	bd80      	pop	{r7, pc}
 81005ae:	bf00      	nop
 81005b0:	10000098 	.word	0x10000098

081005b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81005b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 81005ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81005b8:	f7ff fe92 	bl	81002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81005bc:	480c      	ldr	r0, [pc, #48]	; (81005f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81005be:	490d      	ldr	r1, [pc, #52]	; (81005f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81005c0:	4a0d      	ldr	r2, [pc, #52]	; (81005f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81005c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81005c4:	e002      	b.n	81005cc <LoopCopyDataInit>

081005c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81005c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81005c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81005ca:	3304      	adds	r3, #4

081005cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81005cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81005ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81005d0:	d3f9      	bcc.n	81005c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81005d2:	4a0a      	ldr	r2, [pc, #40]	; (81005fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81005d4:	4c0a      	ldr	r4, [pc, #40]	; (8100600 <LoopFillZerobss+0x22>)
  movs r3, #0
 81005d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 81005d8:	e001      	b.n	81005de <LoopFillZerobss>

081005da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81005da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81005dc:	3204      	adds	r2, #4

081005de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81005de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81005e0:	d3fb      	bcc.n	81005da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81005e2:	f003 fe93 	bl	810430c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81005e6:	f7ff fe93 	bl	8100310 <main>
  bx  lr
 81005ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81005ec:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81005f0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81005f4:	10000078 	.word	0x10000078
  ldr r2, =_sidata
 81005f8:	081045e0 	.word	0x081045e0
  ldr r2, =_sbss
 81005fc:	10000078 	.word	0x10000078
  ldr r4, =_ebss
 8100600:	10004b00 	.word	0x10004b00

08100604 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100604:	e7fe      	b.n	8100604 <ADC3_IRQHandler>
	...

08100608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100608:	b580      	push	{r7, lr}
 810060a:	b082      	sub	sp, #8
 810060c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810060e:	4b28      	ldr	r3, [pc, #160]	; (81006b0 <HAL_Init+0xa8>)
 8100610:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100614:	4a26      	ldr	r2, [pc, #152]	; (81006b0 <HAL_Init+0xa8>)
 8100616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810061a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810061e:	4b24      	ldr	r3, [pc, #144]	; (81006b0 <HAL_Init+0xa8>)
 8100620:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100628:	603b      	str	r3, [r7, #0]
 810062a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810062c:	4b21      	ldr	r3, [pc, #132]	; (81006b4 <HAL_Init+0xac>)
 810062e:	681b      	ldr	r3, [r3, #0]
 8100630:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100634:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100638:	4a1e      	ldr	r2, [pc, #120]	; (81006b4 <HAL_Init+0xac>)
 810063a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810063e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100640:	4b1c      	ldr	r3, [pc, #112]	; (81006b4 <HAL_Init+0xac>)
 8100642:	681b      	ldr	r3, [r3, #0]
 8100644:	4a1b      	ldr	r2, [pc, #108]	; (81006b4 <HAL_Init+0xac>)
 8100646:	f043 0301 	orr.w	r3, r3, #1
 810064a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810064c:	2003      	movs	r0, #3
 810064e:	f000 f8fa 	bl	8100846 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100652:	f000 fbbd 	bl	8100dd0 <HAL_RCC_GetSysClockFreq>
 8100656:	4602      	mov	r2, r0
 8100658:	4b15      	ldr	r3, [pc, #84]	; (81006b0 <HAL_Init+0xa8>)
 810065a:	699b      	ldr	r3, [r3, #24]
 810065c:	0a1b      	lsrs	r3, r3, #8
 810065e:	f003 030f 	and.w	r3, r3, #15
 8100662:	4915      	ldr	r1, [pc, #84]	; (81006b8 <HAL_Init+0xb0>)
 8100664:	5ccb      	ldrb	r3, [r1, r3]
 8100666:	f003 031f 	and.w	r3, r3, #31
 810066a:	fa22 f303 	lsr.w	r3, r2, r3
 810066e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100670:	4b0f      	ldr	r3, [pc, #60]	; (81006b0 <HAL_Init+0xa8>)
 8100672:	699b      	ldr	r3, [r3, #24]
 8100674:	f003 030f 	and.w	r3, r3, #15
 8100678:	4a0f      	ldr	r2, [pc, #60]	; (81006b8 <HAL_Init+0xb0>)
 810067a:	5cd3      	ldrb	r3, [r2, r3]
 810067c:	f003 031f 	and.w	r3, r3, #31
 8100680:	687a      	ldr	r2, [r7, #4]
 8100682:	fa22 f303 	lsr.w	r3, r2, r3
 8100686:	4a0d      	ldr	r2, [pc, #52]	; (81006bc <HAL_Init+0xb4>)
 8100688:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810068a:	4b0c      	ldr	r3, [pc, #48]	; (81006bc <HAL_Init+0xb4>)
 810068c:	681b      	ldr	r3, [r3, #0]
 810068e:	4a0c      	ldr	r2, [pc, #48]	; (81006c0 <HAL_Init+0xb8>)
 8100690:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100692:	200f      	movs	r0, #15
 8100694:	f7ff ff02 	bl	810049c <HAL_InitTick>
 8100698:	4603      	mov	r3, r0
 810069a:	2b00      	cmp	r3, #0
 810069c:	d001      	beq.n	81006a2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810069e:	2301      	movs	r3, #1
 81006a0:	e002      	b.n	81006a8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81006a2:	f7ff fedd 	bl	8100460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81006a6:	2300      	movs	r3, #0
}
 81006a8:	4618      	mov	r0, r3
 81006aa:	3708      	adds	r7, #8
 81006ac:	46bd      	mov	sp, r7
 81006ae:	bd80      	pop	{r7, pc}
 81006b0:	58024400 	.word	0x58024400
 81006b4:	40024400 	.word	0x40024400
 81006b8:	08104544 	.word	0x08104544
 81006bc:	10000004 	.word	0x10000004
 81006c0:	10000000 	.word	0x10000000

081006c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81006c4:	b480      	push	{r7}
 81006c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81006c8:	4b06      	ldr	r3, [pc, #24]	; (81006e4 <HAL_IncTick+0x20>)
 81006ca:	781b      	ldrb	r3, [r3, #0]
 81006cc:	461a      	mov	r2, r3
 81006ce:	4b06      	ldr	r3, [pc, #24]	; (81006e8 <HAL_IncTick+0x24>)
 81006d0:	681b      	ldr	r3, [r3, #0]
 81006d2:	4413      	add	r3, r2
 81006d4:	4a04      	ldr	r2, [pc, #16]	; (81006e8 <HAL_IncTick+0x24>)
 81006d6:	6013      	str	r3, [r2, #0]
}
 81006d8:	bf00      	nop
 81006da:	46bd      	mov	sp, r7
 81006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006e0:	4770      	bx	lr
 81006e2:	bf00      	nop
 81006e4:	1000000c 	.word	0x1000000c
 81006e8:	100000e4 	.word	0x100000e4

081006ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81006ec:	b480      	push	{r7}
 81006ee:	b085      	sub	sp, #20
 81006f0:	af00      	add	r7, sp, #0
 81006f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81006f4:	687b      	ldr	r3, [r7, #4]
 81006f6:	f003 0307 	and.w	r3, r3, #7
 81006fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81006fc:	4b0c      	ldr	r3, [pc, #48]	; (8100730 <__NVIC_SetPriorityGrouping+0x44>)
 81006fe:	68db      	ldr	r3, [r3, #12]
 8100700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100702:	68ba      	ldr	r2, [r7, #8]
 8100704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100708:	4013      	ands	r3, r2
 810070a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810070c:	68fb      	ldr	r3, [r7, #12]
 810070e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100710:	68bb      	ldr	r3, [r7, #8]
 8100712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810071c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810071e:	4a04      	ldr	r2, [pc, #16]	; (8100730 <__NVIC_SetPriorityGrouping+0x44>)
 8100720:	68bb      	ldr	r3, [r7, #8]
 8100722:	60d3      	str	r3, [r2, #12]
}
 8100724:	bf00      	nop
 8100726:	3714      	adds	r7, #20
 8100728:	46bd      	mov	sp, r7
 810072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810072e:	4770      	bx	lr
 8100730:	e000ed00 	.word	0xe000ed00

08100734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100734:	b480      	push	{r7}
 8100736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100738:	4b04      	ldr	r3, [pc, #16]	; (810074c <__NVIC_GetPriorityGrouping+0x18>)
 810073a:	68db      	ldr	r3, [r3, #12]
 810073c:	0a1b      	lsrs	r3, r3, #8
 810073e:	f003 0307 	and.w	r3, r3, #7
}
 8100742:	4618      	mov	r0, r3
 8100744:	46bd      	mov	sp, r7
 8100746:	f85d 7b04 	ldr.w	r7, [sp], #4
 810074a:	4770      	bx	lr
 810074c:	e000ed00 	.word	0xe000ed00

08100750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100750:	b480      	push	{r7}
 8100752:	b083      	sub	sp, #12
 8100754:	af00      	add	r7, sp, #0
 8100756:	4603      	mov	r3, r0
 8100758:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810075a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810075e:	2b00      	cmp	r3, #0
 8100760:	db0b      	blt.n	810077a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100762:	88fb      	ldrh	r3, [r7, #6]
 8100764:	f003 021f 	and.w	r2, r3, #31
 8100768:	4907      	ldr	r1, [pc, #28]	; (8100788 <__NVIC_EnableIRQ+0x38>)
 810076a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810076e:	095b      	lsrs	r3, r3, #5
 8100770:	2001      	movs	r0, #1
 8100772:	fa00 f202 	lsl.w	r2, r0, r2
 8100776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810077a:	bf00      	nop
 810077c:	370c      	adds	r7, #12
 810077e:	46bd      	mov	sp, r7
 8100780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100784:	4770      	bx	lr
 8100786:	bf00      	nop
 8100788:	e000e100 	.word	0xe000e100

0810078c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810078c:	b480      	push	{r7}
 810078e:	b083      	sub	sp, #12
 8100790:	af00      	add	r7, sp, #0
 8100792:	4603      	mov	r3, r0
 8100794:	6039      	str	r1, [r7, #0]
 8100796:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100798:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810079c:	2b00      	cmp	r3, #0
 810079e:	db0a      	blt.n	81007b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81007a0:	683b      	ldr	r3, [r7, #0]
 81007a2:	b2da      	uxtb	r2, r3
 81007a4:	490c      	ldr	r1, [pc, #48]	; (81007d8 <__NVIC_SetPriority+0x4c>)
 81007a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007aa:	0112      	lsls	r2, r2, #4
 81007ac:	b2d2      	uxtb	r2, r2
 81007ae:	440b      	add	r3, r1
 81007b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81007b4:	e00a      	b.n	81007cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81007b6:	683b      	ldr	r3, [r7, #0]
 81007b8:	b2da      	uxtb	r2, r3
 81007ba:	4908      	ldr	r1, [pc, #32]	; (81007dc <__NVIC_SetPriority+0x50>)
 81007bc:	88fb      	ldrh	r3, [r7, #6]
 81007be:	f003 030f 	and.w	r3, r3, #15
 81007c2:	3b04      	subs	r3, #4
 81007c4:	0112      	lsls	r2, r2, #4
 81007c6:	b2d2      	uxtb	r2, r2
 81007c8:	440b      	add	r3, r1
 81007ca:	761a      	strb	r2, [r3, #24]
}
 81007cc:	bf00      	nop
 81007ce:	370c      	adds	r7, #12
 81007d0:	46bd      	mov	sp, r7
 81007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007d6:	4770      	bx	lr
 81007d8:	e000e100 	.word	0xe000e100
 81007dc:	e000ed00 	.word	0xe000ed00

081007e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81007e0:	b480      	push	{r7}
 81007e2:	b089      	sub	sp, #36	; 0x24
 81007e4:	af00      	add	r7, sp, #0
 81007e6:	60f8      	str	r0, [r7, #12]
 81007e8:	60b9      	str	r1, [r7, #8]
 81007ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81007ec:	68fb      	ldr	r3, [r7, #12]
 81007ee:	f003 0307 	and.w	r3, r3, #7
 81007f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81007f4:	69fb      	ldr	r3, [r7, #28]
 81007f6:	f1c3 0307 	rsb	r3, r3, #7
 81007fa:	2b04      	cmp	r3, #4
 81007fc:	bf28      	it	cs
 81007fe:	2304      	movcs	r3, #4
 8100800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100802:	69fb      	ldr	r3, [r7, #28]
 8100804:	3304      	adds	r3, #4
 8100806:	2b06      	cmp	r3, #6
 8100808:	d902      	bls.n	8100810 <NVIC_EncodePriority+0x30>
 810080a:	69fb      	ldr	r3, [r7, #28]
 810080c:	3b03      	subs	r3, #3
 810080e:	e000      	b.n	8100812 <NVIC_EncodePriority+0x32>
 8100810:	2300      	movs	r3, #0
 8100812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100814:	f04f 32ff 	mov.w	r2, #4294967295
 8100818:	69bb      	ldr	r3, [r7, #24]
 810081a:	fa02 f303 	lsl.w	r3, r2, r3
 810081e:	43da      	mvns	r2, r3
 8100820:	68bb      	ldr	r3, [r7, #8]
 8100822:	401a      	ands	r2, r3
 8100824:	697b      	ldr	r3, [r7, #20]
 8100826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100828:	f04f 31ff 	mov.w	r1, #4294967295
 810082c:	697b      	ldr	r3, [r7, #20]
 810082e:	fa01 f303 	lsl.w	r3, r1, r3
 8100832:	43d9      	mvns	r1, r3
 8100834:	687b      	ldr	r3, [r7, #4]
 8100836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100838:	4313      	orrs	r3, r2
         );
}
 810083a:	4618      	mov	r0, r3
 810083c:	3724      	adds	r7, #36	; 0x24
 810083e:	46bd      	mov	sp, r7
 8100840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100844:	4770      	bx	lr

08100846 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100846:	b580      	push	{r7, lr}
 8100848:	b082      	sub	sp, #8
 810084a:	af00      	add	r7, sp, #0
 810084c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810084e:	6878      	ldr	r0, [r7, #4]
 8100850:	f7ff ff4c 	bl	81006ec <__NVIC_SetPriorityGrouping>
}
 8100854:	bf00      	nop
 8100856:	3708      	adds	r7, #8
 8100858:	46bd      	mov	sp, r7
 810085a:	bd80      	pop	{r7, pc}

0810085c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810085c:	b580      	push	{r7, lr}
 810085e:	b086      	sub	sp, #24
 8100860:	af00      	add	r7, sp, #0
 8100862:	4603      	mov	r3, r0
 8100864:	60b9      	str	r1, [r7, #8]
 8100866:	607a      	str	r2, [r7, #4]
 8100868:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810086a:	f7ff ff63 	bl	8100734 <__NVIC_GetPriorityGrouping>
 810086e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100870:	687a      	ldr	r2, [r7, #4]
 8100872:	68b9      	ldr	r1, [r7, #8]
 8100874:	6978      	ldr	r0, [r7, #20]
 8100876:	f7ff ffb3 	bl	81007e0 <NVIC_EncodePriority>
 810087a:	4602      	mov	r2, r0
 810087c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100880:	4611      	mov	r1, r2
 8100882:	4618      	mov	r0, r3
 8100884:	f7ff ff82 	bl	810078c <__NVIC_SetPriority>
}
 8100888:	bf00      	nop
 810088a:	3718      	adds	r7, #24
 810088c:	46bd      	mov	sp, r7
 810088e:	bd80      	pop	{r7, pc}

08100890 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100890:	b580      	push	{r7, lr}
 8100892:	b082      	sub	sp, #8
 8100894:	af00      	add	r7, sp, #0
 8100896:	4603      	mov	r3, r0
 8100898:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810089a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810089e:	4618      	mov	r0, r3
 81008a0:	f7ff ff56 	bl	8100750 <__NVIC_EnableIRQ>
}
 81008a4:	bf00      	nop
 81008a6:	3708      	adds	r7, #8
 81008a8:	46bd      	mov	sp, r7
 81008aa:	bd80      	pop	{r7, pc}

081008ac <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81008ac:	b480      	push	{r7}
 81008ae:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81008b0:	4b07      	ldr	r3, [pc, #28]	; (81008d0 <HAL_GetCurrentCPUID+0x24>)
 81008b2:	681b      	ldr	r3, [r3, #0]
 81008b4:	091b      	lsrs	r3, r3, #4
 81008b6:	f003 030f 	and.w	r3, r3, #15
 81008ba:	2b07      	cmp	r3, #7
 81008bc:	d101      	bne.n	81008c2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81008be:	2303      	movs	r3, #3
 81008c0:	e000      	b.n	81008c4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81008c2:	2301      	movs	r3, #1
  }
}
 81008c4:	4618      	mov	r0, r3
 81008c6:	46bd      	mov	sp, r7
 81008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008cc:	4770      	bx	lr
 81008ce:	bf00      	nop
 81008d0:	e000ed00 	.word	0xe000ed00

081008d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81008d4:	b480      	push	{r7}
 81008d6:	b089      	sub	sp, #36	; 0x24
 81008d8:	af00      	add	r7, sp, #0
 81008da:	6078      	str	r0, [r7, #4]
 81008dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81008de:	2300      	movs	r3, #0
 81008e0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81008e2:	4b89      	ldr	r3, [pc, #548]	; (8100b08 <HAL_GPIO_Init+0x234>)
 81008e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81008e6:	e194      	b.n	8100c12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81008e8:	683b      	ldr	r3, [r7, #0]
 81008ea:	681a      	ldr	r2, [r3, #0]
 81008ec:	2101      	movs	r1, #1
 81008ee:	69fb      	ldr	r3, [r7, #28]
 81008f0:	fa01 f303 	lsl.w	r3, r1, r3
 81008f4:	4013      	ands	r3, r2
 81008f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81008f8:	693b      	ldr	r3, [r7, #16]
 81008fa:	2b00      	cmp	r3, #0
 81008fc:	f000 8186 	beq.w	8100c0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100900:	683b      	ldr	r3, [r7, #0]
 8100902:	685b      	ldr	r3, [r3, #4]
 8100904:	f003 0303 	and.w	r3, r3, #3
 8100908:	2b01      	cmp	r3, #1
 810090a:	d005      	beq.n	8100918 <HAL_GPIO_Init+0x44>
 810090c:	683b      	ldr	r3, [r7, #0]
 810090e:	685b      	ldr	r3, [r3, #4]
 8100910:	f003 0303 	and.w	r3, r3, #3
 8100914:	2b02      	cmp	r3, #2
 8100916:	d130      	bne.n	810097a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100918:	687b      	ldr	r3, [r7, #4]
 810091a:	689b      	ldr	r3, [r3, #8]
 810091c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810091e:	69fb      	ldr	r3, [r7, #28]
 8100920:	005b      	lsls	r3, r3, #1
 8100922:	2203      	movs	r2, #3
 8100924:	fa02 f303 	lsl.w	r3, r2, r3
 8100928:	43db      	mvns	r3, r3
 810092a:	69ba      	ldr	r2, [r7, #24]
 810092c:	4013      	ands	r3, r2
 810092e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100930:	683b      	ldr	r3, [r7, #0]
 8100932:	68da      	ldr	r2, [r3, #12]
 8100934:	69fb      	ldr	r3, [r7, #28]
 8100936:	005b      	lsls	r3, r3, #1
 8100938:	fa02 f303 	lsl.w	r3, r2, r3
 810093c:	69ba      	ldr	r2, [r7, #24]
 810093e:	4313      	orrs	r3, r2
 8100940:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100942:	687b      	ldr	r3, [r7, #4]
 8100944:	69ba      	ldr	r2, [r7, #24]
 8100946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100948:	687b      	ldr	r3, [r7, #4]
 810094a:	685b      	ldr	r3, [r3, #4]
 810094c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810094e:	2201      	movs	r2, #1
 8100950:	69fb      	ldr	r3, [r7, #28]
 8100952:	fa02 f303 	lsl.w	r3, r2, r3
 8100956:	43db      	mvns	r3, r3
 8100958:	69ba      	ldr	r2, [r7, #24]
 810095a:	4013      	ands	r3, r2
 810095c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810095e:	683b      	ldr	r3, [r7, #0]
 8100960:	685b      	ldr	r3, [r3, #4]
 8100962:	091b      	lsrs	r3, r3, #4
 8100964:	f003 0201 	and.w	r2, r3, #1
 8100968:	69fb      	ldr	r3, [r7, #28]
 810096a:	fa02 f303 	lsl.w	r3, r2, r3
 810096e:	69ba      	ldr	r2, [r7, #24]
 8100970:	4313      	orrs	r3, r2
 8100972:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100974:	687b      	ldr	r3, [r7, #4]
 8100976:	69ba      	ldr	r2, [r7, #24]
 8100978:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810097a:	683b      	ldr	r3, [r7, #0]
 810097c:	685b      	ldr	r3, [r3, #4]
 810097e:	f003 0303 	and.w	r3, r3, #3
 8100982:	2b03      	cmp	r3, #3
 8100984:	d017      	beq.n	81009b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100986:	687b      	ldr	r3, [r7, #4]
 8100988:	68db      	ldr	r3, [r3, #12]
 810098a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810098c:	69fb      	ldr	r3, [r7, #28]
 810098e:	005b      	lsls	r3, r3, #1
 8100990:	2203      	movs	r2, #3
 8100992:	fa02 f303 	lsl.w	r3, r2, r3
 8100996:	43db      	mvns	r3, r3
 8100998:	69ba      	ldr	r2, [r7, #24]
 810099a:	4013      	ands	r3, r2
 810099c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810099e:	683b      	ldr	r3, [r7, #0]
 81009a0:	689a      	ldr	r2, [r3, #8]
 81009a2:	69fb      	ldr	r3, [r7, #28]
 81009a4:	005b      	lsls	r3, r3, #1
 81009a6:	fa02 f303 	lsl.w	r3, r2, r3
 81009aa:	69ba      	ldr	r2, [r7, #24]
 81009ac:	4313      	orrs	r3, r2
 81009ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81009b0:	687b      	ldr	r3, [r7, #4]
 81009b2:	69ba      	ldr	r2, [r7, #24]
 81009b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81009b6:	683b      	ldr	r3, [r7, #0]
 81009b8:	685b      	ldr	r3, [r3, #4]
 81009ba:	f003 0303 	and.w	r3, r3, #3
 81009be:	2b02      	cmp	r3, #2
 81009c0:	d123      	bne.n	8100a0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81009c2:	69fb      	ldr	r3, [r7, #28]
 81009c4:	08da      	lsrs	r2, r3, #3
 81009c6:	687b      	ldr	r3, [r7, #4]
 81009c8:	3208      	adds	r2, #8
 81009ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81009ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81009d0:	69fb      	ldr	r3, [r7, #28]
 81009d2:	f003 0307 	and.w	r3, r3, #7
 81009d6:	009b      	lsls	r3, r3, #2
 81009d8:	220f      	movs	r2, #15
 81009da:	fa02 f303 	lsl.w	r3, r2, r3
 81009de:	43db      	mvns	r3, r3
 81009e0:	69ba      	ldr	r2, [r7, #24]
 81009e2:	4013      	ands	r3, r2
 81009e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81009e6:	683b      	ldr	r3, [r7, #0]
 81009e8:	691a      	ldr	r2, [r3, #16]
 81009ea:	69fb      	ldr	r3, [r7, #28]
 81009ec:	f003 0307 	and.w	r3, r3, #7
 81009f0:	009b      	lsls	r3, r3, #2
 81009f2:	fa02 f303 	lsl.w	r3, r2, r3
 81009f6:	69ba      	ldr	r2, [r7, #24]
 81009f8:	4313      	orrs	r3, r2
 81009fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81009fc:	69fb      	ldr	r3, [r7, #28]
 81009fe:	08da      	lsrs	r2, r3, #3
 8100a00:	687b      	ldr	r3, [r7, #4]
 8100a02:	3208      	adds	r2, #8
 8100a04:	69b9      	ldr	r1, [r7, #24]
 8100a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100a0a:	687b      	ldr	r3, [r7, #4]
 8100a0c:	681b      	ldr	r3, [r3, #0]
 8100a0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100a10:	69fb      	ldr	r3, [r7, #28]
 8100a12:	005b      	lsls	r3, r3, #1
 8100a14:	2203      	movs	r2, #3
 8100a16:	fa02 f303 	lsl.w	r3, r2, r3
 8100a1a:	43db      	mvns	r3, r3
 8100a1c:	69ba      	ldr	r2, [r7, #24]
 8100a1e:	4013      	ands	r3, r2
 8100a20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100a22:	683b      	ldr	r3, [r7, #0]
 8100a24:	685b      	ldr	r3, [r3, #4]
 8100a26:	f003 0203 	and.w	r2, r3, #3
 8100a2a:	69fb      	ldr	r3, [r7, #28]
 8100a2c:	005b      	lsls	r3, r3, #1
 8100a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8100a32:	69ba      	ldr	r2, [r7, #24]
 8100a34:	4313      	orrs	r3, r2
 8100a36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100a38:	687b      	ldr	r3, [r7, #4]
 8100a3a:	69ba      	ldr	r2, [r7, #24]
 8100a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100a3e:	683b      	ldr	r3, [r7, #0]
 8100a40:	685b      	ldr	r3, [r3, #4]
 8100a42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100a46:	2b00      	cmp	r3, #0
 8100a48:	f000 80e0 	beq.w	8100c0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100a4c:	4b2f      	ldr	r3, [pc, #188]	; (8100b0c <HAL_GPIO_Init+0x238>)
 8100a4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100a52:	4a2e      	ldr	r2, [pc, #184]	; (8100b0c <HAL_GPIO_Init+0x238>)
 8100a54:	f043 0302 	orr.w	r3, r3, #2
 8100a58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100a5c:	4b2b      	ldr	r3, [pc, #172]	; (8100b0c <HAL_GPIO_Init+0x238>)
 8100a5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100a62:	f003 0302 	and.w	r3, r3, #2
 8100a66:	60fb      	str	r3, [r7, #12]
 8100a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100a6a:	4a29      	ldr	r2, [pc, #164]	; (8100b10 <HAL_GPIO_Init+0x23c>)
 8100a6c:	69fb      	ldr	r3, [r7, #28]
 8100a6e:	089b      	lsrs	r3, r3, #2
 8100a70:	3302      	adds	r3, #2
 8100a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100a78:	69fb      	ldr	r3, [r7, #28]
 8100a7a:	f003 0303 	and.w	r3, r3, #3
 8100a7e:	009b      	lsls	r3, r3, #2
 8100a80:	220f      	movs	r2, #15
 8100a82:	fa02 f303 	lsl.w	r3, r2, r3
 8100a86:	43db      	mvns	r3, r3
 8100a88:	69ba      	ldr	r2, [r7, #24]
 8100a8a:	4013      	ands	r3, r2
 8100a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100a8e:	687b      	ldr	r3, [r7, #4]
 8100a90:	4a20      	ldr	r2, [pc, #128]	; (8100b14 <HAL_GPIO_Init+0x240>)
 8100a92:	4293      	cmp	r3, r2
 8100a94:	d052      	beq.n	8100b3c <HAL_GPIO_Init+0x268>
 8100a96:	687b      	ldr	r3, [r7, #4]
 8100a98:	4a1f      	ldr	r2, [pc, #124]	; (8100b18 <HAL_GPIO_Init+0x244>)
 8100a9a:	4293      	cmp	r3, r2
 8100a9c:	d031      	beq.n	8100b02 <HAL_GPIO_Init+0x22e>
 8100a9e:	687b      	ldr	r3, [r7, #4]
 8100aa0:	4a1e      	ldr	r2, [pc, #120]	; (8100b1c <HAL_GPIO_Init+0x248>)
 8100aa2:	4293      	cmp	r3, r2
 8100aa4:	d02b      	beq.n	8100afe <HAL_GPIO_Init+0x22a>
 8100aa6:	687b      	ldr	r3, [r7, #4]
 8100aa8:	4a1d      	ldr	r2, [pc, #116]	; (8100b20 <HAL_GPIO_Init+0x24c>)
 8100aaa:	4293      	cmp	r3, r2
 8100aac:	d025      	beq.n	8100afa <HAL_GPIO_Init+0x226>
 8100aae:	687b      	ldr	r3, [r7, #4]
 8100ab0:	4a1c      	ldr	r2, [pc, #112]	; (8100b24 <HAL_GPIO_Init+0x250>)
 8100ab2:	4293      	cmp	r3, r2
 8100ab4:	d01f      	beq.n	8100af6 <HAL_GPIO_Init+0x222>
 8100ab6:	687b      	ldr	r3, [r7, #4]
 8100ab8:	4a1b      	ldr	r2, [pc, #108]	; (8100b28 <HAL_GPIO_Init+0x254>)
 8100aba:	4293      	cmp	r3, r2
 8100abc:	d019      	beq.n	8100af2 <HAL_GPIO_Init+0x21e>
 8100abe:	687b      	ldr	r3, [r7, #4]
 8100ac0:	4a1a      	ldr	r2, [pc, #104]	; (8100b2c <HAL_GPIO_Init+0x258>)
 8100ac2:	4293      	cmp	r3, r2
 8100ac4:	d013      	beq.n	8100aee <HAL_GPIO_Init+0x21a>
 8100ac6:	687b      	ldr	r3, [r7, #4]
 8100ac8:	4a19      	ldr	r2, [pc, #100]	; (8100b30 <HAL_GPIO_Init+0x25c>)
 8100aca:	4293      	cmp	r3, r2
 8100acc:	d00d      	beq.n	8100aea <HAL_GPIO_Init+0x216>
 8100ace:	687b      	ldr	r3, [r7, #4]
 8100ad0:	4a18      	ldr	r2, [pc, #96]	; (8100b34 <HAL_GPIO_Init+0x260>)
 8100ad2:	4293      	cmp	r3, r2
 8100ad4:	d007      	beq.n	8100ae6 <HAL_GPIO_Init+0x212>
 8100ad6:	687b      	ldr	r3, [r7, #4]
 8100ad8:	4a17      	ldr	r2, [pc, #92]	; (8100b38 <HAL_GPIO_Init+0x264>)
 8100ada:	4293      	cmp	r3, r2
 8100adc:	d101      	bne.n	8100ae2 <HAL_GPIO_Init+0x20e>
 8100ade:	2309      	movs	r3, #9
 8100ae0:	e02d      	b.n	8100b3e <HAL_GPIO_Init+0x26a>
 8100ae2:	230a      	movs	r3, #10
 8100ae4:	e02b      	b.n	8100b3e <HAL_GPIO_Init+0x26a>
 8100ae6:	2308      	movs	r3, #8
 8100ae8:	e029      	b.n	8100b3e <HAL_GPIO_Init+0x26a>
 8100aea:	2307      	movs	r3, #7
 8100aec:	e027      	b.n	8100b3e <HAL_GPIO_Init+0x26a>
 8100aee:	2306      	movs	r3, #6
 8100af0:	e025      	b.n	8100b3e <HAL_GPIO_Init+0x26a>
 8100af2:	2305      	movs	r3, #5
 8100af4:	e023      	b.n	8100b3e <HAL_GPIO_Init+0x26a>
 8100af6:	2304      	movs	r3, #4
 8100af8:	e021      	b.n	8100b3e <HAL_GPIO_Init+0x26a>
 8100afa:	2303      	movs	r3, #3
 8100afc:	e01f      	b.n	8100b3e <HAL_GPIO_Init+0x26a>
 8100afe:	2302      	movs	r3, #2
 8100b00:	e01d      	b.n	8100b3e <HAL_GPIO_Init+0x26a>
 8100b02:	2301      	movs	r3, #1
 8100b04:	e01b      	b.n	8100b3e <HAL_GPIO_Init+0x26a>
 8100b06:	bf00      	nop
 8100b08:	580000c0 	.word	0x580000c0
 8100b0c:	58024400 	.word	0x58024400
 8100b10:	58000400 	.word	0x58000400
 8100b14:	58020000 	.word	0x58020000
 8100b18:	58020400 	.word	0x58020400
 8100b1c:	58020800 	.word	0x58020800
 8100b20:	58020c00 	.word	0x58020c00
 8100b24:	58021000 	.word	0x58021000
 8100b28:	58021400 	.word	0x58021400
 8100b2c:	58021800 	.word	0x58021800
 8100b30:	58021c00 	.word	0x58021c00
 8100b34:	58022000 	.word	0x58022000
 8100b38:	58022400 	.word	0x58022400
 8100b3c:	2300      	movs	r3, #0
 8100b3e:	69fa      	ldr	r2, [r7, #28]
 8100b40:	f002 0203 	and.w	r2, r2, #3
 8100b44:	0092      	lsls	r2, r2, #2
 8100b46:	4093      	lsls	r3, r2
 8100b48:	69ba      	ldr	r2, [r7, #24]
 8100b4a:	4313      	orrs	r3, r2
 8100b4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100b4e:	4938      	ldr	r1, [pc, #224]	; (8100c30 <HAL_GPIO_Init+0x35c>)
 8100b50:	69fb      	ldr	r3, [r7, #28]
 8100b52:	089b      	lsrs	r3, r3, #2
 8100b54:	3302      	adds	r3, #2
 8100b56:	69ba      	ldr	r2, [r7, #24]
 8100b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100b60:	681b      	ldr	r3, [r3, #0]
 8100b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100b64:	693b      	ldr	r3, [r7, #16]
 8100b66:	43db      	mvns	r3, r3
 8100b68:	69ba      	ldr	r2, [r7, #24]
 8100b6a:	4013      	ands	r3, r2
 8100b6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100b6e:	683b      	ldr	r3, [r7, #0]
 8100b70:	685b      	ldr	r3, [r3, #4]
 8100b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100b76:	2b00      	cmp	r3, #0
 8100b78:	d003      	beq.n	8100b82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100b7a:	69ba      	ldr	r2, [r7, #24]
 8100b7c:	693b      	ldr	r3, [r7, #16]
 8100b7e:	4313      	orrs	r3, r2
 8100b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100b82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100b86:	69bb      	ldr	r3, [r7, #24]
 8100b88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100b8e:	685b      	ldr	r3, [r3, #4]
 8100b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100b92:	693b      	ldr	r3, [r7, #16]
 8100b94:	43db      	mvns	r3, r3
 8100b96:	69ba      	ldr	r2, [r7, #24]
 8100b98:	4013      	ands	r3, r2
 8100b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100b9c:	683b      	ldr	r3, [r7, #0]
 8100b9e:	685b      	ldr	r3, [r3, #4]
 8100ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100ba4:	2b00      	cmp	r3, #0
 8100ba6:	d003      	beq.n	8100bb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100ba8:	69ba      	ldr	r2, [r7, #24]
 8100baa:	693b      	ldr	r3, [r7, #16]
 8100bac:	4313      	orrs	r3, r2
 8100bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100bb4:	69bb      	ldr	r3, [r7, #24]
 8100bb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100bb8:	697b      	ldr	r3, [r7, #20]
 8100bba:	685b      	ldr	r3, [r3, #4]
 8100bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100bbe:	693b      	ldr	r3, [r7, #16]
 8100bc0:	43db      	mvns	r3, r3
 8100bc2:	69ba      	ldr	r2, [r7, #24]
 8100bc4:	4013      	ands	r3, r2
 8100bc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100bc8:	683b      	ldr	r3, [r7, #0]
 8100bca:	685b      	ldr	r3, [r3, #4]
 8100bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100bd0:	2b00      	cmp	r3, #0
 8100bd2:	d003      	beq.n	8100bdc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100bd4:	69ba      	ldr	r2, [r7, #24]
 8100bd6:	693b      	ldr	r3, [r7, #16]
 8100bd8:	4313      	orrs	r3, r2
 8100bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100bdc:	697b      	ldr	r3, [r7, #20]
 8100bde:	69ba      	ldr	r2, [r7, #24]
 8100be0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100be2:	697b      	ldr	r3, [r7, #20]
 8100be4:	681b      	ldr	r3, [r3, #0]
 8100be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100be8:	693b      	ldr	r3, [r7, #16]
 8100bea:	43db      	mvns	r3, r3
 8100bec:	69ba      	ldr	r2, [r7, #24]
 8100bee:	4013      	ands	r3, r2
 8100bf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100bf2:	683b      	ldr	r3, [r7, #0]
 8100bf4:	685b      	ldr	r3, [r3, #4]
 8100bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100bfa:	2b00      	cmp	r3, #0
 8100bfc:	d003      	beq.n	8100c06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100bfe:	69ba      	ldr	r2, [r7, #24]
 8100c00:	693b      	ldr	r3, [r7, #16]
 8100c02:	4313      	orrs	r3, r2
 8100c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100c06:	697b      	ldr	r3, [r7, #20]
 8100c08:	69ba      	ldr	r2, [r7, #24]
 8100c0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100c0c:	69fb      	ldr	r3, [r7, #28]
 8100c0e:	3301      	adds	r3, #1
 8100c10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100c12:	683b      	ldr	r3, [r7, #0]
 8100c14:	681a      	ldr	r2, [r3, #0]
 8100c16:	69fb      	ldr	r3, [r7, #28]
 8100c18:	fa22 f303 	lsr.w	r3, r2, r3
 8100c1c:	2b00      	cmp	r3, #0
 8100c1e:	f47f ae63 	bne.w	81008e8 <HAL_GPIO_Init+0x14>
  }
}
 8100c22:	bf00      	nop
 8100c24:	bf00      	nop
 8100c26:	3724      	adds	r7, #36	; 0x24
 8100c28:	46bd      	mov	sp, r7
 8100c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c2e:	4770      	bx	lr
 8100c30:	58000400 	.word	0x58000400

08100c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100c34:	b480      	push	{r7}
 8100c36:	b083      	sub	sp, #12
 8100c38:	af00      	add	r7, sp, #0
 8100c3a:	6078      	str	r0, [r7, #4]
 8100c3c:	460b      	mov	r3, r1
 8100c3e:	807b      	strh	r3, [r7, #2]
 8100c40:	4613      	mov	r3, r2
 8100c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100c44:	787b      	ldrb	r3, [r7, #1]
 8100c46:	2b00      	cmp	r3, #0
 8100c48:	d003      	beq.n	8100c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8100c4a:	887a      	ldrh	r2, [r7, #2]
 8100c4c:	687b      	ldr	r3, [r7, #4]
 8100c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8100c50:	e003      	b.n	8100c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100c52:	887b      	ldrh	r3, [r7, #2]
 8100c54:	041a      	lsls	r2, r3, #16
 8100c56:	687b      	ldr	r3, [r7, #4]
 8100c58:	619a      	str	r2, [r3, #24]
}
 8100c5a:	bf00      	nop
 8100c5c:	370c      	adds	r7, #12
 8100c5e:	46bd      	mov	sp, r7
 8100c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c64:	4770      	bx	lr

08100c66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100c66:	b480      	push	{r7}
 8100c68:	b085      	sub	sp, #20
 8100c6a:	af00      	add	r7, sp, #0
 8100c6c:	6078      	str	r0, [r7, #4]
 8100c6e:	460b      	mov	r3, r1
 8100c70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8100c72:	687b      	ldr	r3, [r7, #4]
 8100c74:	695b      	ldr	r3, [r3, #20]
 8100c76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8100c78:	887a      	ldrh	r2, [r7, #2]
 8100c7a:	68fb      	ldr	r3, [r7, #12]
 8100c7c:	4013      	ands	r3, r2
 8100c7e:	041a      	lsls	r2, r3, #16
 8100c80:	68fb      	ldr	r3, [r7, #12]
 8100c82:	43d9      	mvns	r1, r3
 8100c84:	887b      	ldrh	r3, [r7, #2]
 8100c86:	400b      	ands	r3, r1
 8100c88:	431a      	orrs	r2, r3
 8100c8a:	687b      	ldr	r3, [r7, #4]
 8100c8c:	619a      	str	r2, [r3, #24]
}
 8100c8e:	bf00      	nop
 8100c90:	3714      	adds	r7, #20
 8100c92:	46bd      	mov	sp, r7
 8100c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c98:	4770      	bx	lr
	...

08100c9c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100c9c:	b480      	push	{r7}
 8100c9e:	b083      	sub	sp, #12
 8100ca0:	af00      	add	r7, sp, #0
 8100ca2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100ca4:	4b05      	ldr	r3, [pc, #20]	; (8100cbc <HAL_HSEM_ActivateNotification+0x20>)
 8100ca6:	681a      	ldr	r2, [r3, #0]
 8100ca8:	4904      	ldr	r1, [pc, #16]	; (8100cbc <HAL_HSEM_ActivateNotification+0x20>)
 8100caa:	687b      	ldr	r3, [r7, #4]
 8100cac:	4313      	orrs	r3, r2
 8100cae:	600b      	str	r3, [r1, #0]
#endif
}
 8100cb0:	bf00      	nop
 8100cb2:	370c      	adds	r7, #12
 8100cb4:	46bd      	mov	sp, r7
 8100cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cba:	4770      	bx	lr
 8100cbc:	58026510 	.word	0x58026510

08100cc0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100cc0:	b580      	push	{r7, lr}
 8100cc2:	b084      	sub	sp, #16
 8100cc4:	af00      	add	r7, sp, #0
 8100cc6:	60f8      	str	r0, [r7, #12]
 8100cc8:	460b      	mov	r3, r1
 8100cca:	607a      	str	r2, [r7, #4]
 8100ccc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100cce:	4b37      	ldr	r3, [pc, #220]	; (8100dac <HAL_PWREx_EnterSTOPMode+0xec>)
 8100cd0:	681b      	ldr	r3, [r3, #0]
 8100cd2:	f023 0201 	bic.w	r2, r3, #1
 8100cd6:	4935      	ldr	r1, [pc, #212]	; (8100dac <HAL_PWREx_EnterSTOPMode+0xec>)
 8100cd8:	68fb      	ldr	r3, [r7, #12]
 8100cda:	4313      	orrs	r3, r2
 8100cdc:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100cde:	687b      	ldr	r3, [r7, #4]
 8100ce0:	2b00      	cmp	r3, #0
 8100ce2:	d123      	bne.n	8100d2c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100ce4:	f7ff fde2 	bl	81008ac <HAL_GetCurrentCPUID>
 8100ce8:	4603      	mov	r3, r0
 8100cea:	2b03      	cmp	r3, #3
 8100cec:	d158      	bne.n	8100da0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100cee:	4b2f      	ldr	r3, [pc, #188]	; (8100dac <HAL_PWREx_EnterSTOPMode+0xec>)
 8100cf0:	691b      	ldr	r3, [r3, #16]
 8100cf2:	4a2e      	ldr	r2, [pc, #184]	; (8100dac <HAL_PWREx_EnterSTOPMode+0xec>)
 8100cf4:	f023 0301 	bic.w	r3, r3, #1
 8100cf8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100cfa:	4b2d      	ldr	r3, [pc, #180]	; (8100db0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100cfc:	691b      	ldr	r3, [r3, #16]
 8100cfe:	4a2c      	ldr	r2, [pc, #176]	; (8100db0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d00:	f043 0304 	orr.w	r3, r3, #4
 8100d04:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100d06:	f3bf 8f4f 	dsb	sy
}
 8100d0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100d0c:	f3bf 8f6f 	isb	sy
}
 8100d10:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100d12:	7afb      	ldrb	r3, [r7, #11]
 8100d14:	2b01      	cmp	r3, #1
 8100d16:	d101      	bne.n	8100d1c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100d18:	bf30      	wfi
 8100d1a:	e000      	b.n	8100d1e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100d1c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100d1e:	4b24      	ldr	r3, [pc, #144]	; (8100db0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d20:	691b      	ldr	r3, [r3, #16]
 8100d22:	4a23      	ldr	r2, [pc, #140]	; (8100db0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d24:	f023 0304 	bic.w	r3, r3, #4
 8100d28:	6113      	str	r3, [r2, #16]
 8100d2a:	e03c      	b.n	8100da6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100d2c:	687b      	ldr	r3, [r7, #4]
 8100d2e:	2b01      	cmp	r3, #1
 8100d30:	d123      	bne.n	8100d7a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100d32:	f7ff fdbb 	bl	81008ac <HAL_GetCurrentCPUID>
 8100d36:	4603      	mov	r3, r0
 8100d38:	2b01      	cmp	r3, #1
 8100d3a:	d133      	bne.n	8100da4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100d3c:	4b1b      	ldr	r3, [pc, #108]	; (8100dac <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d3e:	695b      	ldr	r3, [r3, #20]
 8100d40:	4a1a      	ldr	r2, [pc, #104]	; (8100dac <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d42:	f023 0302 	bic.w	r3, r3, #2
 8100d46:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100d48:	4b19      	ldr	r3, [pc, #100]	; (8100db0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d4a:	691b      	ldr	r3, [r3, #16]
 8100d4c:	4a18      	ldr	r2, [pc, #96]	; (8100db0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d4e:	f043 0304 	orr.w	r3, r3, #4
 8100d52:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100d54:	f3bf 8f4f 	dsb	sy
}
 8100d58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100d5a:	f3bf 8f6f 	isb	sy
}
 8100d5e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100d60:	7afb      	ldrb	r3, [r7, #11]
 8100d62:	2b01      	cmp	r3, #1
 8100d64:	d101      	bne.n	8100d6a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100d66:	bf30      	wfi
 8100d68:	e000      	b.n	8100d6c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100d6a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100d6c:	4b10      	ldr	r3, [pc, #64]	; (8100db0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d6e:	691b      	ldr	r3, [r3, #16]
 8100d70:	4a0f      	ldr	r2, [pc, #60]	; (8100db0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d72:	f023 0304 	bic.w	r3, r3, #4
 8100d76:	6113      	str	r3, [r2, #16]
 8100d78:	e015      	b.n	8100da6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100d7a:	f7ff fd97 	bl	81008ac <HAL_GetCurrentCPUID>
 8100d7e:	4603      	mov	r3, r0
 8100d80:	2b03      	cmp	r3, #3
 8100d82:	d106      	bne.n	8100d92 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100d84:	4b09      	ldr	r3, [pc, #36]	; (8100dac <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d86:	691b      	ldr	r3, [r3, #16]
 8100d88:	4a08      	ldr	r2, [pc, #32]	; (8100dac <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d8a:	f023 0304 	bic.w	r3, r3, #4
 8100d8e:	6113      	str	r3, [r2, #16]
 8100d90:	e009      	b.n	8100da6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100d92:	4b06      	ldr	r3, [pc, #24]	; (8100dac <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d94:	695b      	ldr	r3, [r3, #20]
 8100d96:	4a05      	ldr	r2, [pc, #20]	; (8100dac <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d98:	f023 0304 	bic.w	r3, r3, #4
 8100d9c:	6153      	str	r3, [r2, #20]
 8100d9e:	e002      	b.n	8100da6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100da0:	bf00      	nop
 8100da2:	e000      	b.n	8100da6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100da4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100da6:	3710      	adds	r7, #16
 8100da8:	46bd      	mov	sp, r7
 8100daa:	bd80      	pop	{r7, pc}
 8100dac:	58024800 	.word	0x58024800
 8100db0:	e000ed00 	.word	0xe000ed00

08100db4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100db4:	b580      	push	{r7, lr}
 8100db6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100db8:	f7ff fd78 	bl	81008ac <HAL_GetCurrentCPUID>
 8100dbc:	4603      	mov	r3, r0
 8100dbe:	2b03      	cmp	r3, #3
 8100dc0:	d101      	bne.n	8100dc6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100dc2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100dc4:	e001      	b.n	8100dca <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100dc6:	bf40      	sev
    __WFE ();
 8100dc8:	bf20      	wfe
}
 8100dca:	bf00      	nop
 8100dcc:	bd80      	pop	{r7, pc}
	...

08100dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100dd0:	b480      	push	{r7}
 8100dd2:	b089      	sub	sp, #36	; 0x24
 8100dd4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100dd6:	4bb3      	ldr	r3, [pc, #716]	; (81010a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100dd8:	691b      	ldr	r3, [r3, #16]
 8100dda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8100dde:	2b18      	cmp	r3, #24
 8100de0:	f200 8155 	bhi.w	810108e <HAL_RCC_GetSysClockFreq+0x2be>
 8100de4:	a201      	add	r2, pc, #4	; (adr r2, 8100dec <HAL_RCC_GetSysClockFreq+0x1c>)
 8100de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100dea:	bf00      	nop
 8100dec:	08100e51 	.word	0x08100e51
 8100df0:	0810108f 	.word	0x0810108f
 8100df4:	0810108f 	.word	0x0810108f
 8100df8:	0810108f 	.word	0x0810108f
 8100dfc:	0810108f 	.word	0x0810108f
 8100e00:	0810108f 	.word	0x0810108f
 8100e04:	0810108f 	.word	0x0810108f
 8100e08:	0810108f 	.word	0x0810108f
 8100e0c:	08100e77 	.word	0x08100e77
 8100e10:	0810108f 	.word	0x0810108f
 8100e14:	0810108f 	.word	0x0810108f
 8100e18:	0810108f 	.word	0x0810108f
 8100e1c:	0810108f 	.word	0x0810108f
 8100e20:	0810108f 	.word	0x0810108f
 8100e24:	0810108f 	.word	0x0810108f
 8100e28:	0810108f 	.word	0x0810108f
 8100e2c:	08100e7d 	.word	0x08100e7d
 8100e30:	0810108f 	.word	0x0810108f
 8100e34:	0810108f 	.word	0x0810108f
 8100e38:	0810108f 	.word	0x0810108f
 8100e3c:	0810108f 	.word	0x0810108f
 8100e40:	0810108f 	.word	0x0810108f
 8100e44:	0810108f 	.word	0x0810108f
 8100e48:	0810108f 	.word	0x0810108f
 8100e4c:	08100e83 	.word	0x08100e83
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100e50:	4b94      	ldr	r3, [pc, #592]	; (81010a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e52:	681b      	ldr	r3, [r3, #0]
 8100e54:	f003 0320 	and.w	r3, r3, #32
 8100e58:	2b00      	cmp	r3, #0
 8100e5a:	d009      	beq.n	8100e70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100e5c:	4b91      	ldr	r3, [pc, #580]	; (81010a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e5e:	681b      	ldr	r3, [r3, #0]
 8100e60:	08db      	lsrs	r3, r3, #3
 8100e62:	f003 0303 	and.w	r3, r3, #3
 8100e66:	4a90      	ldr	r2, [pc, #576]	; (81010a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100e68:	fa22 f303 	lsr.w	r3, r2, r3
 8100e6c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8100e6e:	e111      	b.n	8101094 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100e70:	4b8d      	ldr	r3, [pc, #564]	; (81010a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100e72:	61bb      	str	r3, [r7, #24]
    break;
 8100e74:	e10e      	b.n	8101094 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8100e76:	4b8d      	ldr	r3, [pc, #564]	; (81010ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100e78:	61bb      	str	r3, [r7, #24]
    break;
 8100e7a:	e10b      	b.n	8101094 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8100e7c:	4b8c      	ldr	r3, [pc, #560]	; (81010b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100e7e:	61bb      	str	r3, [r7, #24]
    break;
 8100e80:	e108      	b.n	8101094 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100e82:	4b88      	ldr	r3, [pc, #544]	; (81010a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100e86:	f003 0303 	and.w	r3, r3, #3
 8100e8a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8100e8c:	4b85      	ldr	r3, [pc, #532]	; (81010a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100e90:	091b      	lsrs	r3, r3, #4
 8100e92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8100e96:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100e98:	4b82      	ldr	r3, [pc, #520]	; (81010a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100e9c:	f003 0301 	and.w	r3, r3, #1
 8100ea0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8100ea2:	4b80      	ldr	r3, [pc, #512]	; (81010a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8100ea6:	08db      	lsrs	r3, r3, #3
 8100ea8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100eac:	68fa      	ldr	r2, [r7, #12]
 8100eae:	fb02 f303 	mul.w	r3, r2, r3
 8100eb2:	ee07 3a90 	vmov	s15, r3
 8100eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100eba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8100ebe:	693b      	ldr	r3, [r7, #16]
 8100ec0:	2b00      	cmp	r3, #0
 8100ec2:	f000 80e1 	beq.w	8101088 <HAL_RCC_GetSysClockFreq+0x2b8>
 8100ec6:	697b      	ldr	r3, [r7, #20]
 8100ec8:	2b02      	cmp	r3, #2
 8100eca:	f000 8083 	beq.w	8100fd4 <HAL_RCC_GetSysClockFreq+0x204>
 8100ece:	697b      	ldr	r3, [r7, #20]
 8100ed0:	2b02      	cmp	r3, #2
 8100ed2:	f200 80a1 	bhi.w	8101018 <HAL_RCC_GetSysClockFreq+0x248>
 8100ed6:	697b      	ldr	r3, [r7, #20]
 8100ed8:	2b00      	cmp	r3, #0
 8100eda:	d003      	beq.n	8100ee4 <HAL_RCC_GetSysClockFreq+0x114>
 8100edc:	697b      	ldr	r3, [r7, #20]
 8100ede:	2b01      	cmp	r3, #1
 8100ee0:	d056      	beq.n	8100f90 <HAL_RCC_GetSysClockFreq+0x1c0>
 8100ee2:	e099      	b.n	8101018 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100ee4:	4b6f      	ldr	r3, [pc, #444]	; (81010a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ee6:	681b      	ldr	r3, [r3, #0]
 8100ee8:	f003 0320 	and.w	r3, r3, #32
 8100eec:	2b00      	cmp	r3, #0
 8100eee:	d02d      	beq.n	8100f4c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100ef0:	4b6c      	ldr	r3, [pc, #432]	; (81010a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ef2:	681b      	ldr	r3, [r3, #0]
 8100ef4:	08db      	lsrs	r3, r3, #3
 8100ef6:	f003 0303 	and.w	r3, r3, #3
 8100efa:	4a6b      	ldr	r2, [pc, #428]	; (81010a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100efc:	fa22 f303 	lsr.w	r3, r2, r3
 8100f00:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100f02:	687b      	ldr	r3, [r7, #4]
 8100f04:	ee07 3a90 	vmov	s15, r3
 8100f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f0c:	693b      	ldr	r3, [r7, #16]
 8100f0e:	ee07 3a90 	vmov	s15, r3
 8100f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100f1a:	4b62      	ldr	r3, [pc, #392]	; (81010a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f22:	ee07 3a90 	vmov	s15, r3
 8100f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8100f2e:	eddf 5a61 	vldr	s11, [pc, #388]	; 81010b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100f46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8100f4a:	e087      	b.n	810105c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100f4c:	693b      	ldr	r3, [r7, #16]
 8100f4e:	ee07 3a90 	vmov	s15, r3
 8100f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f56:	eddf 6a58 	vldr	s13, [pc, #352]	; 81010b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8100f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100f5e:	4b51      	ldr	r3, [pc, #324]	; (81010a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f66:	ee07 3a90 	vmov	s15, r3
 8100f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8100f72:	eddf 5a50 	vldr	s11, [pc, #320]	; 81010b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100f8e:	e065      	b.n	810105c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100f90:	693b      	ldr	r3, [r7, #16]
 8100f92:	ee07 3a90 	vmov	s15, r3
 8100f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f9a:	eddf 6a48 	vldr	s13, [pc, #288]	; 81010bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8100f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100fa2:	4b40      	ldr	r3, [pc, #256]	; (81010a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100faa:	ee07 3a90 	vmov	s15, r3
 8100fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8100fb6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81010b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100fd2:	e043      	b.n	810105c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100fd4:	693b      	ldr	r3, [r7, #16]
 8100fd6:	ee07 3a90 	vmov	s15, r3
 8100fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100fde:	eddf 6a38 	vldr	s13, [pc, #224]	; 81010c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8100fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100fe6:	4b2f      	ldr	r3, [pc, #188]	; (81010a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100fee:	ee07 3a90 	vmov	s15, r3
 8100ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8100ffa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81010b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810100a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810100e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101016:	e021      	b.n	810105c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101018:	693b      	ldr	r3, [r7, #16]
 810101a:	ee07 3a90 	vmov	s15, r3
 810101e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101022:	eddf 6a26 	vldr	s13, [pc, #152]	; 81010bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8101026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810102a:	4b1e      	ldr	r3, [pc, #120]	; (81010a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810102e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101032:	ee07 3a90 	vmov	s15, r3
 8101036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810103a:	ed97 6a02 	vldr	s12, [r7, #8]
 810103e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81010b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810104a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810104e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810105a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810105c:	4b11      	ldr	r3, [pc, #68]	; (81010a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101060:	0a5b      	lsrs	r3, r3, #9
 8101062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101066:	3301      	adds	r3, #1
 8101068:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810106a:	683b      	ldr	r3, [r7, #0]
 810106c:	ee07 3a90 	vmov	s15, r3
 8101070:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101074:	edd7 6a07 	vldr	s13, [r7, #28]
 8101078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810107c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101080:	ee17 3a90 	vmov	r3, s15
 8101084:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101086:	e005      	b.n	8101094 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101088:	2300      	movs	r3, #0
 810108a:	61bb      	str	r3, [r7, #24]
    break;
 810108c:	e002      	b.n	8101094 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810108e:	4b07      	ldr	r3, [pc, #28]	; (81010ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101090:	61bb      	str	r3, [r7, #24]
    break;
 8101092:	bf00      	nop
  }

  return sysclockfreq;
 8101094:	69bb      	ldr	r3, [r7, #24]
}
 8101096:	4618      	mov	r0, r3
 8101098:	3724      	adds	r7, #36	; 0x24
 810109a:	46bd      	mov	sp, r7
 810109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010a0:	4770      	bx	lr
 81010a2:	bf00      	nop
 81010a4:	58024400 	.word	0x58024400
 81010a8:	03d09000 	.word	0x03d09000
 81010ac:	003d0900 	.word	0x003d0900
 81010b0:	007a1200 	.word	0x007a1200
 81010b4:	46000000 	.word	0x46000000
 81010b8:	4c742400 	.word	0x4c742400
 81010bc:	4a742400 	.word	0x4a742400
 81010c0:	4af42400 	.word	0x4af42400

081010c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81010c4:	b580      	push	{r7, lr}
 81010c6:	b082      	sub	sp, #8
 81010c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81010ca:	f7ff fe81 	bl	8100dd0 <HAL_RCC_GetSysClockFreq>
 81010ce:	4602      	mov	r2, r0
 81010d0:	4b11      	ldr	r3, [pc, #68]	; (8101118 <HAL_RCC_GetHCLKFreq+0x54>)
 81010d2:	699b      	ldr	r3, [r3, #24]
 81010d4:	0a1b      	lsrs	r3, r3, #8
 81010d6:	f003 030f 	and.w	r3, r3, #15
 81010da:	4910      	ldr	r1, [pc, #64]	; (810111c <HAL_RCC_GetHCLKFreq+0x58>)
 81010dc:	5ccb      	ldrb	r3, [r1, r3]
 81010de:	f003 031f 	and.w	r3, r3, #31
 81010e2:	fa22 f303 	lsr.w	r3, r2, r3
 81010e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81010e8:	4b0b      	ldr	r3, [pc, #44]	; (8101118 <HAL_RCC_GetHCLKFreq+0x54>)
 81010ea:	699b      	ldr	r3, [r3, #24]
 81010ec:	f003 030f 	and.w	r3, r3, #15
 81010f0:	4a0a      	ldr	r2, [pc, #40]	; (810111c <HAL_RCC_GetHCLKFreq+0x58>)
 81010f2:	5cd3      	ldrb	r3, [r2, r3]
 81010f4:	f003 031f 	and.w	r3, r3, #31
 81010f8:	687a      	ldr	r2, [r7, #4]
 81010fa:	fa22 f303 	lsr.w	r3, r2, r3
 81010fe:	4a08      	ldr	r2, [pc, #32]	; (8101120 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101100:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101102:	4b07      	ldr	r3, [pc, #28]	; (8101120 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101104:	681b      	ldr	r3, [r3, #0]
 8101106:	4a07      	ldr	r2, [pc, #28]	; (8101124 <HAL_RCC_GetHCLKFreq+0x60>)
 8101108:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810110a:	4b05      	ldr	r3, [pc, #20]	; (8101120 <HAL_RCC_GetHCLKFreq+0x5c>)
 810110c:	681b      	ldr	r3, [r3, #0]
}
 810110e:	4618      	mov	r0, r3
 8101110:	3708      	adds	r7, #8
 8101112:	46bd      	mov	sp, r7
 8101114:	bd80      	pop	{r7, pc}
 8101116:	bf00      	nop
 8101118:	58024400 	.word	0x58024400
 810111c:	08104544 	.word	0x08104544
 8101120:	10000004 	.word	0x10000004
 8101124:	10000000 	.word	0x10000000

08101128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8101128:	b580      	push	{r7, lr}
 810112a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810112c:	f7ff ffca 	bl	81010c4 <HAL_RCC_GetHCLKFreq>
 8101130:	4602      	mov	r2, r0
 8101132:	4b06      	ldr	r3, [pc, #24]	; (810114c <HAL_RCC_GetPCLK1Freq+0x24>)
 8101134:	69db      	ldr	r3, [r3, #28]
 8101136:	091b      	lsrs	r3, r3, #4
 8101138:	f003 0307 	and.w	r3, r3, #7
 810113c:	4904      	ldr	r1, [pc, #16]	; (8101150 <HAL_RCC_GetPCLK1Freq+0x28>)
 810113e:	5ccb      	ldrb	r3, [r1, r3]
 8101140:	f003 031f 	and.w	r3, r3, #31
 8101144:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101148:	4618      	mov	r0, r3
 810114a:	bd80      	pop	{r7, pc}
 810114c:	58024400 	.word	0x58024400
 8101150:	08104544 	.word	0x08104544

08101154 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8101154:	b480      	push	{r7}
 8101156:	b083      	sub	sp, #12
 8101158:	af00      	add	r7, sp, #0
 810115a:	6078      	str	r0, [r7, #4]
 810115c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810115e:	687b      	ldr	r3, [r7, #4]
 8101160:	223f      	movs	r2, #63	; 0x3f
 8101162:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8101164:	4b1a      	ldr	r3, [pc, #104]	; (81011d0 <HAL_RCC_GetClockConfig+0x7c>)
 8101166:	691b      	ldr	r3, [r3, #16]
 8101168:	f003 0207 	and.w	r2, r3, #7
 810116c:	687b      	ldr	r3, [r7, #4]
 810116e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8101170:	4b17      	ldr	r3, [pc, #92]	; (81011d0 <HAL_RCC_GetClockConfig+0x7c>)
 8101172:	699b      	ldr	r3, [r3, #24]
 8101174:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8101178:	687b      	ldr	r3, [r7, #4]
 810117a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 810117c:	4b14      	ldr	r3, [pc, #80]	; (81011d0 <HAL_RCC_GetClockConfig+0x7c>)
 810117e:	699b      	ldr	r3, [r3, #24]
 8101180:	f003 020f 	and.w	r2, r3, #15
 8101184:	687b      	ldr	r3, [r7, #4]
 8101186:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8101188:	4b11      	ldr	r3, [pc, #68]	; (81011d0 <HAL_RCC_GetClockConfig+0x7c>)
 810118a:	699b      	ldr	r3, [r3, #24]
 810118c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101190:	687b      	ldr	r3, [r7, #4]
 8101192:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8101194:	4b0e      	ldr	r3, [pc, #56]	; (81011d0 <HAL_RCC_GetClockConfig+0x7c>)
 8101196:	69db      	ldr	r3, [r3, #28]
 8101198:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810119c:	687b      	ldr	r3, [r7, #4]
 810119e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 81011a0:	4b0b      	ldr	r3, [pc, #44]	; (81011d0 <HAL_RCC_GetClockConfig+0x7c>)
 81011a2:	69db      	ldr	r3, [r3, #28]
 81011a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 81011a8:	687b      	ldr	r3, [r7, #4]
 81011aa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 81011ac:	4b08      	ldr	r3, [pc, #32]	; (81011d0 <HAL_RCC_GetClockConfig+0x7c>)
 81011ae:	6a1b      	ldr	r3, [r3, #32]
 81011b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81011b4:	687b      	ldr	r3, [r7, #4]
 81011b6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 81011b8:	4b06      	ldr	r3, [pc, #24]	; (81011d4 <HAL_RCC_GetClockConfig+0x80>)
 81011ba:	681b      	ldr	r3, [r3, #0]
 81011bc:	f003 020f 	and.w	r2, r3, #15
 81011c0:	683b      	ldr	r3, [r7, #0]
 81011c2:	601a      	str	r2, [r3, #0]
}
 81011c4:	bf00      	nop
 81011c6:	370c      	adds	r7, #12
 81011c8:	46bd      	mov	sp, r7
 81011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011ce:	4770      	bx	lr
 81011d0:	58024400 	.word	0x58024400
 81011d4:	52002000 	.word	0x52002000

081011d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81011d8:	b580      	push	{r7, lr}
 81011da:	b082      	sub	sp, #8
 81011dc:	af00      	add	r7, sp, #0
 81011de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81011e0:	687b      	ldr	r3, [r7, #4]
 81011e2:	2b00      	cmp	r3, #0
 81011e4:	d101      	bne.n	81011ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81011e6:	2301      	movs	r3, #1
 81011e8:	e049      	b.n	810127e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81011ea:	687b      	ldr	r3, [r7, #4]
 81011ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81011f0:	b2db      	uxtb	r3, r3
 81011f2:	2b00      	cmp	r3, #0
 81011f4:	d106      	bne.n	8101204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81011f6:	687b      	ldr	r3, [r7, #4]
 81011f8:	2200      	movs	r2, #0
 81011fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81011fe:	6878      	ldr	r0, [r7, #4]
 8101200:	f000 f841 	bl	8101286 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101204:	687b      	ldr	r3, [r7, #4]
 8101206:	2202      	movs	r2, #2
 8101208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810120c:	687b      	ldr	r3, [r7, #4]
 810120e:	681a      	ldr	r2, [r3, #0]
 8101210:	687b      	ldr	r3, [r7, #4]
 8101212:	3304      	adds	r3, #4
 8101214:	4619      	mov	r1, r3
 8101216:	4610      	mov	r0, r2
 8101218:	f000 fa00 	bl	810161c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810121c:	687b      	ldr	r3, [r7, #4]
 810121e:	2201      	movs	r2, #1
 8101220:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101224:	687b      	ldr	r3, [r7, #4]
 8101226:	2201      	movs	r2, #1
 8101228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810122c:	687b      	ldr	r3, [r7, #4]
 810122e:	2201      	movs	r2, #1
 8101230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8101234:	687b      	ldr	r3, [r7, #4]
 8101236:	2201      	movs	r2, #1
 8101238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810123c:	687b      	ldr	r3, [r7, #4]
 810123e:	2201      	movs	r2, #1
 8101240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8101244:	687b      	ldr	r3, [r7, #4]
 8101246:	2201      	movs	r2, #1
 8101248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810124c:	687b      	ldr	r3, [r7, #4]
 810124e:	2201      	movs	r2, #1
 8101250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101254:	687b      	ldr	r3, [r7, #4]
 8101256:	2201      	movs	r2, #1
 8101258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810125c:	687b      	ldr	r3, [r7, #4]
 810125e:	2201      	movs	r2, #1
 8101260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8101264:	687b      	ldr	r3, [r7, #4]
 8101266:	2201      	movs	r2, #1
 8101268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810126c:	687b      	ldr	r3, [r7, #4]
 810126e:	2201      	movs	r2, #1
 8101270:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8101274:	687b      	ldr	r3, [r7, #4]
 8101276:	2201      	movs	r2, #1
 8101278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810127c:	2300      	movs	r3, #0
}
 810127e:	4618      	mov	r0, r3
 8101280:	3708      	adds	r7, #8
 8101282:	46bd      	mov	sp, r7
 8101284:	bd80      	pop	{r7, pc}

08101286 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8101286:	b480      	push	{r7}
 8101288:	b083      	sub	sp, #12
 810128a:	af00      	add	r7, sp, #0
 810128c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 810128e:	bf00      	nop
 8101290:	370c      	adds	r7, #12
 8101292:	46bd      	mov	sp, r7
 8101294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101298:	4770      	bx	lr
	...

0810129c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810129c:	b480      	push	{r7}
 810129e:	b085      	sub	sp, #20
 81012a0:	af00      	add	r7, sp, #0
 81012a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81012a4:	687b      	ldr	r3, [r7, #4]
 81012a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81012aa:	b2db      	uxtb	r3, r3
 81012ac:	2b01      	cmp	r3, #1
 81012ae:	d001      	beq.n	81012b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81012b0:	2301      	movs	r3, #1
 81012b2:	e054      	b.n	810135e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81012b4:	687b      	ldr	r3, [r7, #4]
 81012b6:	2202      	movs	r2, #2
 81012b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81012bc:	687b      	ldr	r3, [r7, #4]
 81012be:	681b      	ldr	r3, [r3, #0]
 81012c0:	68da      	ldr	r2, [r3, #12]
 81012c2:	687b      	ldr	r3, [r7, #4]
 81012c4:	681b      	ldr	r3, [r3, #0]
 81012c6:	f042 0201 	orr.w	r2, r2, #1
 81012ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81012cc:	687b      	ldr	r3, [r7, #4]
 81012ce:	681b      	ldr	r3, [r3, #0]
 81012d0:	4a26      	ldr	r2, [pc, #152]	; (810136c <HAL_TIM_Base_Start_IT+0xd0>)
 81012d2:	4293      	cmp	r3, r2
 81012d4:	d022      	beq.n	810131c <HAL_TIM_Base_Start_IT+0x80>
 81012d6:	687b      	ldr	r3, [r7, #4]
 81012d8:	681b      	ldr	r3, [r3, #0]
 81012da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81012de:	d01d      	beq.n	810131c <HAL_TIM_Base_Start_IT+0x80>
 81012e0:	687b      	ldr	r3, [r7, #4]
 81012e2:	681b      	ldr	r3, [r3, #0]
 81012e4:	4a22      	ldr	r2, [pc, #136]	; (8101370 <HAL_TIM_Base_Start_IT+0xd4>)
 81012e6:	4293      	cmp	r3, r2
 81012e8:	d018      	beq.n	810131c <HAL_TIM_Base_Start_IT+0x80>
 81012ea:	687b      	ldr	r3, [r7, #4]
 81012ec:	681b      	ldr	r3, [r3, #0]
 81012ee:	4a21      	ldr	r2, [pc, #132]	; (8101374 <HAL_TIM_Base_Start_IT+0xd8>)
 81012f0:	4293      	cmp	r3, r2
 81012f2:	d013      	beq.n	810131c <HAL_TIM_Base_Start_IT+0x80>
 81012f4:	687b      	ldr	r3, [r7, #4]
 81012f6:	681b      	ldr	r3, [r3, #0]
 81012f8:	4a1f      	ldr	r2, [pc, #124]	; (8101378 <HAL_TIM_Base_Start_IT+0xdc>)
 81012fa:	4293      	cmp	r3, r2
 81012fc:	d00e      	beq.n	810131c <HAL_TIM_Base_Start_IT+0x80>
 81012fe:	687b      	ldr	r3, [r7, #4]
 8101300:	681b      	ldr	r3, [r3, #0]
 8101302:	4a1e      	ldr	r2, [pc, #120]	; (810137c <HAL_TIM_Base_Start_IT+0xe0>)
 8101304:	4293      	cmp	r3, r2
 8101306:	d009      	beq.n	810131c <HAL_TIM_Base_Start_IT+0x80>
 8101308:	687b      	ldr	r3, [r7, #4]
 810130a:	681b      	ldr	r3, [r3, #0]
 810130c:	4a1c      	ldr	r2, [pc, #112]	; (8101380 <HAL_TIM_Base_Start_IT+0xe4>)
 810130e:	4293      	cmp	r3, r2
 8101310:	d004      	beq.n	810131c <HAL_TIM_Base_Start_IT+0x80>
 8101312:	687b      	ldr	r3, [r7, #4]
 8101314:	681b      	ldr	r3, [r3, #0]
 8101316:	4a1b      	ldr	r2, [pc, #108]	; (8101384 <HAL_TIM_Base_Start_IT+0xe8>)
 8101318:	4293      	cmp	r3, r2
 810131a:	d115      	bne.n	8101348 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810131c:	687b      	ldr	r3, [r7, #4]
 810131e:	681b      	ldr	r3, [r3, #0]
 8101320:	689a      	ldr	r2, [r3, #8]
 8101322:	4b19      	ldr	r3, [pc, #100]	; (8101388 <HAL_TIM_Base_Start_IT+0xec>)
 8101324:	4013      	ands	r3, r2
 8101326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101328:	68fb      	ldr	r3, [r7, #12]
 810132a:	2b06      	cmp	r3, #6
 810132c:	d015      	beq.n	810135a <HAL_TIM_Base_Start_IT+0xbe>
 810132e:	68fb      	ldr	r3, [r7, #12]
 8101330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101334:	d011      	beq.n	810135a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8101336:	687b      	ldr	r3, [r7, #4]
 8101338:	681b      	ldr	r3, [r3, #0]
 810133a:	681a      	ldr	r2, [r3, #0]
 810133c:	687b      	ldr	r3, [r7, #4]
 810133e:	681b      	ldr	r3, [r3, #0]
 8101340:	f042 0201 	orr.w	r2, r2, #1
 8101344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101346:	e008      	b.n	810135a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8101348:	687b      	ldr	r3, [r7, #4]
 810134a:	681b      	ldr	r3, [r3, #0]
 810134c:	681a      	ldr	r2, [r3, #0]
 810134e:	687b      	ldr	r3, [r7, #4]
 8101350:	681b      	ldr	r3, [r3, #0]
 8101352:	f042 0201 	orr.w	r2, r2, #1
 8101356:	601a      	str	r2, [r3, #0]
 8101358:	e000      	b.n	810135c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810135a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810135c:	2300      	movs	r3, #0
}
 810135e:	4618      	mov	r0, r3
 8101360:	3714      	adds	r7, #20
 8101362:	46bd      	mov	sp, r7
 8101364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101368:	4770      	bx	lr
 810136a:	bf00      	nop
 810136c:	40010000 	.word	0x40010000
 8101370:	40000400 	.word	0x40000400
 8101374:	40000800 	.word	0x40000800
 8101378:	40000c00 	.word	0x40000c00
 810137c:	40010400 	.word	0x40010400
 8101380:	40001800 	.word	0x40001800
 8101384:	40014000 	.word	0x40014000
 8101388:	00010007 	.word	0x00010007

0810138c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810138c:	b580      	push	{r7, lr}
 810138e:	b082      	sub	sp, #8
 8101390:	af00      	add	r7, sp, #0
 8101392:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8101394:	687b      	ldr	r3, [r7, #4]
 8101396:	681b      	ldr	r3, [r3, #0]
 8101398:	691b      	ldr	r3, [r3, #16]
 810139a:	f003 0302 	and.w	r3, r3, #2
 810139e:	2b02      	cmp	r3, #2
 81013a0:	d122      	bne.n	81013e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 81013a2:	687b      	ldr	r3, [r7, #4]
 81013a4:	681b      	ldr	r3, [r3, #0]
 81013a6:	68db      	ldr	r3, [r3, #12]
 81013a8:	f003 0302 	and.w	r3, r3, #2
 81013ac:	2b02      	cmp	r3, #2
 81013ae:	d11b      	bne.n	81013e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 81013b0:	687b      	ldr	r3, [r7, #4]
 81013b2:	681b      	ldr	r3, [r3, #0]
 81013b4:	f06f 0202 	mvn.w	r2, #2
 81013b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81013ba:	687b      	ldr	r3, [r7, #4]
 81013bc:	2201      	movs	r2, #1
 81013be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81013c0:	687b      	ldr	r3, [r7, #4]
 81013c2:	681b      	ldr	r3, [r3, #0]
 81013c4:	699b      	ldr	r3, [r3, #24]
 81013c6:	f003 0303 	and.w	r3, r3, #3
 81013ca:	2b00      	cmp	r3, #0
 81013cc:	d003      	beq.n	81013d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81013ce:	6878      	ldr	r0, [r7, #4]
 81013d0:	f000 f905 	bl	81015de <HAL_TIM_IC_CaptureCallback>
 81013d4:	e005      	b.n	81013e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81013d6:	6878      	ldr	r0, [r7, #4]
 81013d8:	f000 f8f7 	bl	81015ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81013dc:	6878      	ldr	r0, [r7, #4]
 81013de:	f000 f908 	bl	81015f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81013e2:	687b      	ldr	r3, [r7, #4]
 81013e4:	2200      	movs	r2, #0
 81013e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 81013e8:	687b      	ldr	r3, [r7, #4]
 81013ea:	681b      	ldr	r3, [r3, #0]
 81013ec:	691b      	ldr	r3, [r3, #16]
 81013ee:	f003 0304 	and.w	r3, r3, #4
 81013f2:	2b04      	cmp	r3, #4
 81013f4:	d122      	bne.n	810143c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 81013f6:	687b      	ldr	r3, [r7, #4]
 81013f8:	681b      	ldr	r3, [r3, #0]
 81013fa:	68db      	ldr	r3, [r3, #12]
 81013fc:	f003 0304 	and.w	r3, r3, #4
 8101400:	2b04      	cmp	r3, #4
 8101402:	d11b      	bne.n	810143c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8101404:	687b      	ldr	r3, [r7, #4]
 8101406:	681b      	ldr	r3, [r3, #0]
 8101408:	f06f 0204 	mvn.w	r2, #4
 810140c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810140e:	687b      	ldr	r3, [r7, #4]
 8101410:	2202      	movs	r2, #2
 8101412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8101414:	687b      	ldr	r3, [r7, #4]
 8101416:	681b      	ldr	r3, [r3, #0]
 8101418:	699b      	ldr	r3, [r3, #24]
 810141a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810141e:	2b00      	cmp	r3, #0
 8101420:	d003      	beq.n	810142a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101422:	6878      	ldr	r0, [r7, #4]
 8101424:	f000 f8db 	bl	81015de <HAL_TIM_IC_CaptureCallback>
 8101428:	e005      	b.n	8101436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810142a:	6878      	ldr	r0, [r7, #4]
 810142c:	f000 f8cd 	bl	81015ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101430:	6878      	ldr	r0, [r7, #4]
 8101432:	f000 f8de 	bl	81015f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101436:	687b      	ldr	r3, [r7, #4]
 8101438:	2200      	movs	r2, #0
 810143a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 810143c:	687b      	ldr	r3, [r7, #4]
 810143e:	681b      	ldr	r3, [r3, #0]
 8101440:	691b      	ldr	r3, [r3, #16]
 8101442:	f003 0308 	and.w	r3, r3, #8
 8101446:	2b08      	cmp	r3, #8
 8101448:	d122      	bne.n	8101490 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810144a:	687b      	ldr	r3, [r7, #4]
 810144c:	681b      	ldr	r3, [r3, #0]
 810144e:	68db      	ldr	r3, [r3, #12]
 8101450:	f003 0308 	and.w	r3, r3, #8
 8101454:	2b08      	cmp	r3, #8
 8101456:	d11b      	bne.n	8101490 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8101458:	687b      	ldr	r3, [r7, #4]
 810145a:	681b      	ldr	r3, [r3, #0]
 810145c:	f06f 0208 	mvn.w	r2, #8
 8101460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8101462:	687b      	ldr	r3, [r7, #4]
 8101464:	2204      	movs	r2, #4
 8101466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8101468:	687b      	ldr	r3, [r7, #4]
 810146a:	681b      	ldr	r3, [r3, #0]
 810146c:	69db      	ldr	r3, [r3, #28]
 810146e:	f003 0303 	and.w	r3, r3, #3
 8101472:	2b00      	cmp	r3, #0
 8101474:	d003      	beq.n	810147e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101476:	6878      	ldr	r0, [r7, #4]
 8101478:	f000 f8b1 	bl	81015de <HAL_TIM_IC_CaptureCallback>
 810147c:	e005      	b.n	810148a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810147e:	6878      	ldr	r0, [r7, #4]
 8101480:	f000 f8a3 	bl	81015ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101484:	6878      	ldr	r0, [r7, #4]
 8101486:	f000 f8b4 	bl	81015f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810148a:	687b      	ldr	r3, [r7, #4]
 810148c:	2200      	movs	r2, #0
 810148e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8101490:	687b      	ldr	r3, [r7, #4]
 8101492:	681b      	ldr	r3, [r3, #0]
 8101494:	691b      	ldr	r3, [r3, #16]
 8101496:	f003 0310 	and.w	r3, r3, #16
 810149a:	2b10      	cmp	r3, #16
 810149c:	d122      	bne.n	81014e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810149e:	687b      	ldr	r3, [r7, #4]
 81014a0:	681b      	ldr	r3, [r3, #0]
 81014a2:	68db      	ldr	r3, [r3, #12]
 81014a4:	f003 0310 	and.w	r3, r3, #16
 81014a8:	2b10      	cmp	r3, #16
 81014aa:	d11b      	bne.n	81014e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 81014ac:	687b      	ldr	r3, [r7, #4]
 81014ae:	681b      	ldr	r3, [r3, #0]
 81014b0:	f06f 0210 	mvn.w	r2, #16
 81014b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81014b6:	687b      	ldr	r3, [r7, #4]
 81014b8:	2208      	movs	r2, #8
 81014ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81014bc:	687b      	ldr	r3, [r7, #4]
 81014be:	681b      	ldr	r3, [r3, #0]
 81014c0:	69db      	ldr	r3, [r3, #28]
 81014c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81014c6:	2b00      	cmp	r3, #0
 81014c8:	d003      	beq.n	81014d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81014ca:	6878      	ldr	r0, [r7, #4]
 81014cc:	f000 f887 	bl	81015de <HAL_TIM_IC_CaptureCallback>
 81014d0:	e005      	b.n	81014de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81014d2:	6878      	ldr	r0, [r7, #4]
 81014d4:	f000 f879 	bl	81015ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81014d8:	6878      	ldr	r0, [r7, #4]
 81014da:	f000 f88a 	bl	81015f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81014de:	687b      	ldr	r3, [r7, #4]
 81014e0:	2200      	movs	r2, #0
 81014e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 81014e4:	687b      	ldr	r3, [r7, #4]
 81014e6:	681b      	ldr	r3, [r3, #0]
 81014e8:	691b      	ldr	r3, [r3, #16]
 81014ea:	f003 0301 	and.w	r3, r3, #1
 81014ee:	2b01      	cmp	r3, #1
 81014f0:	d10e      	bne.n	8101510 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81014f2:	687b      	ldr	r3, [r7, #4]
 81014f4:	681b      	ldr	r3, [r3, #0]
 81014f6:	68db      	ldr	r3, [r3, #12]
 81014f8:	f003 0301 	and.w	r3, r3, #1
 81014fc:	2b01      	cmp	r3, #1
 81014fe:	d107      	bne.n	8101510 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8101500:	687b      	ldr	r3, [r7, #4]
 8101502:	681b      	ldr	r3, [r3, #0]
 8101504:	f06f 0201 	mvn.w	r2, #1
 8101508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810150a:	6878      	ldr	r0, [r7, #4]
 810150c:	f7fe ff96 	bl	810043c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8101510:	687b      	ldr	r3, [r7, #4]
 8101512:	681b      	ldr	r3, [r3, #0]
 8101514:	691b      	ldr	r3, [r3, #16]
 8101516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810151a:	2b80      	cmp	r3, #128	; 0x80
 810151c:	d10e      	bne.n	810153c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810151e:	687b      	ldr	r3, [r7, #4]
 8101520:	681b      	ldr	r3, [r3, #0]
 8101522:	68db      	ldr	r3, [r3, #12]
 8101524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101528:	2b80      	cmp	r3, #128	; 0x80
 810152a:	d107      	bne.n	810153c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 810152c:	687b      	ldr	r3, [r7, #4]
 810152e:	681b      	ldr	r3, [r3, #0]
 8101530:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8101534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8101536:	6878      	ldr	r0, [r7, #4]
 8101538:	f000 f914 	bl	8101764 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 810153c:	687b      	ldr	r3, [r7, #4]
 810153e:	681b      	ldr	r3, [r3, #0]
 8101540:	691b      	ldr	r3, [r3, #16]
 8101542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810154a:	d10e      	bne.n	810156a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810154c:	687b      	ldr	r3, [r7, #4]
 810154e:	681b      	ldr	r3, [r3, #0]
 8101550:	68db      	ldr	r3, [r3, #12]
 8101552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101556:	2b80      	cmp	r3, #128	; 0x80
 8101558:	d107      	bne.n	810156a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810155a:	687b      	ldr	r3, [r7, #4]
 810155c:	681b      	ldr	r3, [r3, #0]
 810155e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8101562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8101564:	6878      	ldr	r0, [r7, #4]
 8101566:	f000 f907 	bl	8101778 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810156a:	687b      	ldr	r3, [r7, #4]
 810156c:	681b      	ldr	r3, [r3, #0]
 810156e:	691b      	ldr	r3, [r3, #16]
 8101570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101574:	2b40      	cmp	r3, #64	; 0x40
 8101576:	d10e      	bne.n	8101596 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8101578:	687b      	ldr	r3, [r7, #4]
 810157a:	681b      	ldr	r3, [r3, #0]
 810157c:	68db      	ldr	r3, [r3, #12]
 810157e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101582:	2b40      	cmp	r3, #64	; 0x40
 8101584:	d107      	bne.n	8101596 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8101586:	687b      	ldr	r3, [r7, #4]
 8101588:	681b      	ldr	r3, [r3, #0]
 810158a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810158e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8101590:	6878      	ldr	r0, [r7, #4]
 8101592:	f000 f838 	bl	8101606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8101596:	687b      	ldr	r3, [r7, #4]
 8101598:	681b      	ldr	r3, [r3, #0]
 810159a:	691b      	ldr	r3, [r3, #16]
 810159c:	f003 0320 	and.w	r3, r3, #32
 81015a0:	2b20      	cmp	r3, #32
 81015a2:	d10e      	bne.n	81015c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 81015a4:	687b      	ldr	r3, [r7, #4]
 81015a6:	681b      	ldr	r3, [r3, #0]
 81015a8:	68db      	ldr	r3, [r3, #12]
 81015aa:	f003 0320 	and.w	r3, r3, #32
 81015ae:	2b20      	cmp	r3, #32
 81015b0:	d107      	bne.n	81015c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 81015b2:	687b      	ldr	r3, [r7, #4]
 81015b4:	681b      	ldr	r3, [r3, #0]
 81015b6:	f06f 0220 	mvn.w	r2, #32
 81015ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81015bc:	6878      	ldr	r0, [r7, #4]
 81015be:	f000 f8c7 	bl	8101750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81015c2:	bf00      	nop
 81015c4:	3708      	adds	r7, #8
 81015c6:	46bd      	mov	sp, r7
 81015c8:	bd80      	pop	{r7, pc}

081015ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81015ca:	b480      	push	{r7}
 81015cc:	b083      	sub	sp, #12
 81015ce:	af00      	add	r7, sp, #0
 81015d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81015d2:	bf00      	nop
 81015d4:	370c      	adds	r7, #12
 81015d6:	46bd      	mov	sp, r7
 81015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015dc:	4770      	bx	lr

081015de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81015de:	b480      	push	{r7}
 81015e0:	b083      	sub	sp, #12
 81015e2:	af00      	add	r7, sp, #0
 81015e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81015e6:	bf00      	nop
 81015e8:	370c      	adds	r7, #12
 81015ea:	46bd      	mov	sp, r7
 81015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015f0:	4770      	bx	lr

081015f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81015f2:	b480      	push	{r7}
 81015f4:	b083      	sub	sp, #12
 81015f6:	af00      	add	r7, sp, #0
 81015f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81015fa:	bf00      	nop
 81015fc:	370c      	adds	r7, #12
 81015fe:	46bd      	mov	sp, r7
 8101600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101604:	4770      	bx	lr

08101606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8101606:	b480      	push	{r7}
 8101608:	b083      	sub	sp, #12
 810160a:	af00      	add	r7, sp, #0
 810160c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810160e:	bf00      	nop
 8101610:	370c      	adds	r7, #12
 8101612:	46bd      	mov	sp, r7
 8101614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101618:	4770      	bx	lr
	...

0810161c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810161c:	b480      	push	{r7}
 810161e:	b085      	sub	sp, #20
 8101620:	af00      	add	r7, sp, #0
 8101622:	6078      	str	r0, [r7, #4]
 8101624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8101626:	687b      	ldr	r3, [r7, #4]
 8101628:	681b      	ldr	r3, [r3, #0]
 810162a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810162c:	687b      	ldr	r3, [r7, #4]
 810162e:	4a40      	ldr	r2, [pc, #256]	; (8101730 <TIM_Base_SetConfig+0x114>)
 8101630:	4293      	cmp	r3, r2
 8101632:	d013      	beq.n	810165c <TIM_Base_SetConfig+0x40>
 8101634:	687b      	ldr	r3, [r7, #4]
 8101636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810163a:	d00f      	beq.n	810165c <TIM_Base_SetConfig+0x40>
 810163c:	687b      	ldr	r3, [r7, #4]
 810163e:	4a3d      	ldr	r2, [pc, #244]	; (8101734 <TIM_Base_SetConfig+0x118>)
 8101640:	4293      	cmp	r3, r2
 8101642:	d00b      	beq.n	810165c <TIM_Base_SetConfig+0x40>
 8101644:	687b      	ldr	r3, [r7, #4]
 8101646:	4a3c      	ldr	r2, [pc, #240]	; (8101738 <TIM_Base_SetConfig+0x11c>)
 8101648:	4293      	cmp	r3, r2
 810164a:	d007      	beq.n	810165c <TIM_Base_SetConfig+0x40>
 810164c:	687b      	ldr	r3, [r7, #4]
 810164e:	4a3b      	ldr	r2, [pc, #236]	; (810173c <TIM_Base_SetConfig+0x120>)
 8101650:	4293      	cmp	r3, r2
 8101652:	d003      	beq.n	810165c <TIM_Base_SetConfig+0x40>
 8101654:	687b      	ldr	r3, [r7, #4]
 8101656:	4a3a      	ldr	r2, [pc, #232]	; (8101740 <TIM_Base_SetConfig+0x124>)
 8101658:	4293      	cmp	r3, r2
 810165a:	d108      	bne.n	810166e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810165c:	68fb      	ldr	r3, [r7, #12]
 810165e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8101662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8101664:	683b      	ldr	r3, [r7, #0]
 8101666:	685b      	ldr	r3, [r3, #4]
 8101668:	68fa      	ldr	r2, [r7, #12]
 810166a:	4313      	orrs	r3, r2
 810166c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810166e:	687b      	ldr	r3, [r7, #4]
 8101670:	4a2f      	ldr	r2, [pc, #188]	; (8101730 <TIM_Base_SetConfig+0x114>)
 8101672:	4293      	cmp	r3, r2
 8101674:	d01f      	beq.n	81016b6 <TIM_Base_SetConfig+0x9a>
 8101676:	687b      	ldr	r3, [r7, #4]
 8101678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810167c:	d01b      	beq.n	81016b6 <TIM_Base_SetConfig+0x9a>
 810167e:	687b      	ldr	r3, [r7, #4]
 8101680:	4a2c      	ldr	r2, [pc, #176]	; (8101734 <TIM_Base_SetConfig+0x118>)
 8101682:	4293      	cmp	r3, r2
 8101684:	d017      	beq.n	81016b6 <TIM_Base_SetConfig+0x9a>
 8101686:	687b      	ldr	r3, [r7, #4]
 8101688:	4a2b      	ldr	r2, [pc, #172]	; (8101738 <TIM_Base_SetConfig+0x11c>)
 810168a:	4293      	cmp	r3, r2
 810168c:	d013      	beq.n	81016b6 <TIM_Base_SetConfig+0x9a>
 810168e:	687b      	ldr	r3, [r7, #4]
 8101690:	4a2a      	ldr	r2, [pc, #168]	; (810173c <TIM_Base_SetConfig+0x120>)
 8101692:	4293      	cmp	r3, r2
 8101694:	d00f      	beq.n	81016b6 <TIM_Base_SetConfig+0x9a>
 8101696:	687b      	ldr	r3, [r7, #4]
 8101698:	4a29      	ldr	r2, [pc, #164]	; (8101740 <TIM_Base_SetConfig+0x124>)
 810169a:	4293      	cmp	r3, r2
 810169c:	d00b      	beq.n	81016b6 <TIM_Base_SetConfig+0x9a>
 810169e:	687b      	ldr	r3, [r7, #4]
 81016a0:	4a28      	ldr	r2, [pc, #160]	; (8101744 <TIM_Base_SetConfig+0x128>)
 81016a2:	4293      	cmp	r3, r2
 81016a4:	d007      	beq.n	81016b6 <TIM_Base_SetConfig+0x9a>
 81016a6:	687b      	ldr	r3, [r7, #4]
 81016a8:	4a27      	ldr	r2, [pc, #156]	; (8101748 <TIM_Base_SetConfig+0x12c>)
 81016aa:	4293      	cmp	r3, r2
 81016ac:	d003      	beq.n	81016b6 <TIM_Base_SetConfig+0x9a>
 81016ae:	687b      	ldr	r3, [r7, #4]
 81016b0:	4a26      	ldr	r2, [pc, #152]	; (810174c <TIM_Base_SetConfig+0x130>)
 81016b2:	4293      	cmp	r3, r2
 81016b4:	d108      	bne.n	81016c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81016b6:	68fb      	ldr	r3, [r7, #12]
 81016b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81016bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81016be:	683b      	ldr	r3, [r7, #0]
 81016c0:	68db      	ldr	r3, [r3, #12]
 81016c2:	68fa      	ldr	r2, [r7, #12]
 81016c4:	4313      	orrs	r3, r2
 81016c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81016c8:	68fb      	ldr	r3, [r7, #12]
 81016ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81016ce:	683b      	ldr	r3, [r7, #0]
 81016d0:	695b      	ldr	r3, [r3, #20]
 81016d2:	4313      	orrs	r3, r2
 81016d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81016d6:	687b      	ldr	r3, [r7, #4]
 81016d8:	68fa      	ldr	r2, [r7, #12]
 81016da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81016dc:	683b      	ldr	r3, [r7, #0]
 81016de:	689a      	ldr	r2, [r3, #8]
 81016e0:	687b      	ldr	r3, [r7, #4]
 81016e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81016e4:	683b      	ldr	r3, [r7, #0]
 81016e6:	681a      	ldr	r2, [r3, #0]
 81016e8:	687b      	ldr	r3, [r7, #4]
 81016ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81016ec:	687b      	ldr	r3, [r7, #4]
 81016ee:	4a10      	ldr	r2, [pc, #64]	; (8101730 <TIM_Base_SetConfig+0x114>)
 81016f0:	4293      	cmp	r3, r2
 81016f2:	d00f      	beq.n	8101714 <TIM_Base_SetConfig+0xf8>
 81016f4:	687b      	ldr	r3, [r7, #4]
 81016f6:	4a12      	ldr	r2, [pc, #72]	; (8101740 <TIM_Base_SetConfig+0x124>)
 81016f8:	4293      	cmp	r3, r2
 81016fa:	d00b      	beq.n	8101714 <TIM_Base_SetConfig+0xf8>
 81016fc:	687b      	ldr	r3, [r7, #4]
 81016fe:	4a11      	ldr	r2, [pc, #68]	; (8101744 <TIM_Base_SetConfig+0x128>)
 8101700:	4293      	cmp	r3, r2
 8101702:	d007      	beq.n	8101714 <TIM_Base_SetConfig+0xf8>
 8101704:	687b      	ldr	r3, [r7, #4]
 8101706:	4a10      	ldr	r2, [pc, #64]	; (8101748 <TIM_Base_SetConfig+0x12c>)
 8101708:	4293      	cmp	r3, r2
 810170a:	d003      	beq.n	8101714 <TIM_Base_SetConfig+0xf8>
 810170c:	687b      	ldr	r3, [r7, #4]
 810170e:	4a0f      	ldr	r2, [pc, #60]	; (810174c <TIM_Base_SetConfig+0x130>)
 8101710:	4293      	cmp	r3, r2
 8101712:	d103      	bne.n	810171c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8101714:	683b      	ldr	r3, [r7, #0]
 8101716:	691a      	ldr	r2, [r3, #16]
 8101718:	687b      	ldr	r3, [r7, #4]
 810171a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810171c:	687b      	ldr	r3, [r7, #4]
 810171e:	2201      	movs	r2, #1
 8101720:	615a      	str	r2, [r3, #20]
}
 8101722:	bf00      	nop
 8101724:	3714      	adds	r7, #20
 8101726:	46bd      	mov	sp, r7
 8101728:	f85d 7b04 	ldr.w	r7, [sp], #4
 810172c:	4770      	bx	lr
 810172e:	bf00      	nop
 8101730:	40010000 	.word	0x40010000
 8101734:	40000400 	.word	0x40000400
 8101738:	40000800 	.word	0x40000800
 810173c:	40000c00 	.word	0x40000c00
 8101740:	40010400 	.word	0x40010400
 8101744:	40014000 	.word	0x40014000
 8101748:	40014400 	.word	0x40014400
 810174c:	40014800 	.word	0x40014800

08101750 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8101750:	b480      	push	{r7}
 8101752:	b083      	sub	sp, #12
 8101754:	af00      	add	r7, sp, #0
 8101756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8101758:	bf00      	nop
 810175a:	370c      	adds	r7, #12
 810175c:	46bd      	mov	sp, r7
 810175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101762:	4770      	bx	lr

08101764 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8101764:	b480      	push	{r7}
 8101766:	b083      	sub	sp, #12
 8101768:	af00      	add	r7, sp, #0
 810176a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810176c:	bf00      	nop
 810176e:	370c      	adds	r7, #12
 8101770:	46bd      	mov	sp, r7
 8101772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101776:	4770      	bx	lr

08101778 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8101778:	b480      	push	{r7}
 810177a:	b083      	sub	sp, #12
 810177c:	af00      	add	r7, sp, #0
 810177e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8101780:	bf00      	nop
 8101782:	370c      	adds	r7, #12
 8101784:	46bd      	mov	sp, r7
 8101786:	f85d 7b04 	ldr.w	r7, [sp], #4
 810178a:	4770      	bx	lr

0810178c <__NVIC_SetPriority>:
{
 810178c:	b480      	push	{r7}
 810178e:	b083      	sub	sp, #12
 8101790:	af00      	add	r7, sp, #0
 8101792:	4603      	mov	r3, r0
 8101794:	6039      	str	r1, [r7, #0]
 8101796:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101798:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810179c:	2b00      	cmp	r3, #0
 810179e:	db0a      	blt.n	81017b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81017a0:	683b      	ldr	r3, [r7, #0]
 81017a2:	b2da      	uxtb	r2, r3
 81017a4:	490c      	ldr	r1, [pc, #48]	; (81017d8 <__NVIC_SetPriority+0x4c>)
 81017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81017aa:	0112      	lsls	r2, r2, #4
 81017ac:	b2d2      	uxtb	r2, r2
 81017ae:	440b      	add	r3, r1
 81017b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 81017b4:	e00a      	b.n	81017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81017b6:	683b      	ldr	r3, [r7, #0]
 81017b8:	b2da      	uxtb	r2, r3
 81017ba:	4908      	ldr	r1, [pc, #32]	; (81017dc <__NVIC_SetPriority+0x50>)
 81017bc:	88fb      	ldrh	r3, [r7, #6]
 81017be:	f003 030f 	and.w	r3, r3, #15
 81017c2:	3b04      	subs	r3, #4
 81017c4:	0112      	lsls	r2, r2, #4
 81017c6:	b2d2      	uxtb	r2, r2
 81017c8:	440b      	add	r3, r1
 81017ca:	761a      	strb	r2, [r3, #24]
}
 81017cc:	bf00      	nop
 81017ce:	370c      	adds	r7, #12
 81017d0:	46bd      	mov	sp, r7
 81017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017d6:	4770      	bx	lr
 81017d8:	e000e100 	.word	0xe000e100
 81017dc:	e000ed00 	.word	0xe000ed00

081017e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 81017e0:	b580      	push	{r7, lr}
 81017e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 81017e4:	4b05      	ldr	r3, [pc, #20]	; (81017fc <SysTick_Handler+0x1c>)
 81017e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 81017e8:	f002 f962 	bl	8103ab0 <xTaskGetSchedulerState>
 81017ec:	4603      	mov	r3, r0
 81017ee:	2b01      	cmp	r3, #1
 81017f0:	d001      	beq.n	81017f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 81017f2:	f000 fd99 	bl	8102328 <xPortSysTickHandler>
  }
}
 81017f6:	bf00      	nop
 81017f8:	bd80      	pop	{r7, pc}
 81017fa:	bf00      	nop
 81017fc:	e000e010 	.word	0xe000e010

08101800 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8101800:	b580      	push	{r7, lr}
 8101802:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8101804:	2100      	movs	r1, #0
 8101806:	f06f 0004 	mvn.w	r0, #4
 810180a:	f7ff ffbf 	bl	810178c <__NVIC_SetPriority>
#endif
}
 810180e:	bf00      	nop
 8101810:	bd80      	pop	{r7, pc}
	...

08101814 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8101814:	b480      	push	{r7}
 8101816:	b083      	sub	sp, #12
 8101818:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810181a:	f3ef 8305 	mrs	r3, IPSR
 810181e:	603b      	str	r3, [r7, #0]
  return(result);
 8101820:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8101822:	2b00      	cmp	r3, #0
 8101824:	d003      	beq.n	810182e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8101826:	f06f 0305 	mvn.w	r3, #5
 810182a:	607b      	str	r3, [r7, #4]
 810182c:	e00c      	b.n	8101848 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810182e:	4b0a      	ldr	r3, [pc, #40]	; (8101858 <osKernelInitialize+0x44>)
 8101830:	681b      	ldr	r3, [r3, #0]
 8101832:	2b00      	cmp	r3, #0
 8101834:	d105      	bne.n	8101842 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8101836:	4b08      	ldr	r3, [pc, #32]	; (8101858 <osKernelInitialize+0x44>)
 8101838:	2201      	movs	r2, #1
 810183a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810183c:	2300      	movs	r3, #0
 810183e:	607b      	str	r3, [r7, #4]
 8101840:	e002      	b.n	8101848 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8101842:	f04f 33ff 	mov.w	r3, #4294967295
 8101846:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8101848:	687b      	ldr	r3, [r7, #4]
}
 810184a:	4618      	mov	r0, r3
 810184c:	370c      	adds	r7, #12
 810184e:	46bd      	mov	sp, r7
 8101850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101854:	4770      	bx	lr
 8101856:	bf00      	nop
 8101858:	100000e8 	.word	0x100000e8

0810185c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810185c:	b580      	push	{r7, lr}
 810185e:	b082      	sub	sp, #8
 8101860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8101862:	f3ef 8305 	mrs	r3, IPSR
 8101866:	603b      	str	r3, [r7, #0]
  return(result);
 8101868:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810186a:	2b00      	cmp	r3, #0
 810186c:	d003      	beq.n	8101876 <osKernelStart+0x1a>
    stat = osErrorISR;
 810186e:	f06f 0305 	mvn.w	r3, #5
 8101872:	607b      	str	r3, [r7, #4]
 8101874:	e010      	b.n	8101898 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8101876:	4b0b      	ldr	r3, [pc, #44]	; (81018a4 <osKernelStart+0x48>)
 8101878:	681b      	ldr	r3, [r3, #0]
 810187a:	2b01      	cmp	r3, #1
 810187c:	d109      	bne.n	8101892 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810187e:	f7ff ffbf 	bl	8101800 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8101882:	4b08      	ldr	r3, [pc, #32]	; (81018a4 <osKernelStart+0x48>)
 8101884:	2202      	movs	r2, #2
 8101886:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8101888:	f001 fcb6 	bl	81031f8 <vTaskStartScheduler>
      stat = osOK;
 810188c:	2300      	movs	r3, #0
 810188e:	607b      	str	r3, [r7, #4]
 8101890:	e002      	b.n	8101898 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8101892:	f04f 33ff 	mov.w	r3, #4294967295
 8101896:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8101898:	687b      	ldr	r3, [r7, #4]
}
 810189a:	4618      	mov	r0, r3
 810189c:	3708      	adds	r7, #8
 810189e:	46bd      	mov	sp, r7
 81018a0:	bd80      	pop	{r7, pc}
 81018a2:	bf00      	nop
 81018a4:	100000e8 	.word	0x100000e8

081018a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 81018a8:	b580      	push	{r7, lr}
 81018aa:	b08e      	sub	sp, #56	; 0x38
 81018ac:	af04      	add	r7, sp, #16
 81018ae:	60f8      	str	r0, [r7, #12]
 81018b0:	60b9      	str	r1, [r7, #8]
 81018b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81018b4:	2300      	movs	r3, #0
 81018b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81018b8:	f3ef 8305 	mrs	r3, IPSR
 81018bc:	617b      	str	r3, [r7, #20]
  return(result);
 81018be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 81018c0:	2b00      	cmp	r3, #0
 81018c2:	d17e      	bne.n	81019c2 <osThreadNew+0x11a>
 81018c4:	68fb      	ldr	r3, [r7, #12]
 81018c6:	2b00      	cmp	r3, #0
 81018c8:	d07b      	beq.n	81019c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 81018ca:	2380      	movs	r3, #128	; 0x80
 81018cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 81018ce:	2318      	movs	r3, #24
 81018d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 81018d2:	2300      	movs	r3, #0
 81018d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 81018d6:	f04f 33ff 	mov.w	r3, #4294967295
 81018da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 81018dc:	687b      	ldr	r3, [r7, #4]
 81018de:	2b00      	cmp	r3, #0
 81018e0:	d045      	beq.n	810196e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 81018e2:	687b      	ldr	r3, [r7, #4]
 81018e4:	681b      	ldr	r3, [r3, #0]
 81018e6:	2b00      	cmp	r3, #0
 81018e8:	d002      	beq.n	81018f0 <osThreadNew+0x48>
        name = attr->name;
 81018ea:	687b      	ldr	r3, [r7, #4]
 81018ec:	681b      	ldr	r3, [r3, #0]
 81018ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 81018f0:	687b      	ldr	r3, [r7, #4]
 81018f2:	699b      	ldr	r3, [r3, #24]
 81018f4:	2b00      	cmp	r3, #0
 81018f6:	d002      	beq.n	81018fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 81018f8:	687b      	ldr	r3, [r7, #4]
 81018fa:	699b      	ldr	r3, [r3, #24]
 81018fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 81018fe:	69fb      	ldr	r3, [r7, #28]
 8101900:	2b00      	cmp	r3, #0
 8101902:	d008      	beq.n	8101916 <osThreadNew+0x6e>
 8101904:	69fb      	ldr	r3, [r7, #28]
 8101906:	2b38      	cmp	r3, #56	; 0x38
 8101908:	d805      	bhi.n	8101916 <osThreadNew+0x6e>
 810190a:	687b      	ldr	r3, [r7, #4]
 810190c:	685b      	ldr	r3, [r3, #4]
 810190e:	f003 0301 	and.w	r3, r3, #1
 8101912:	2b00      	cmp	r3, #0
 8101914:	d001      	beq.n	810191a <osThreadNew+0x72>
        return (NULL);
 8101916:	2300      	movs	r3, #0
 8101918:	e054      	b.n	81019c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810191a:	687b      	ldr	r3, [r7, #4]
 810191c:	695b      	ldr	r3, [r3, #20]
 810191e:	2b00      	cmp	r3, #0
 8101920:	d003      	beq.n	810192a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8101922:	687b      	ldr	r3, [r7, #4]
 8101924:	695b      	ldr	r3, [r3, #20]
 8101926:	089b      	lsrs	r3, r3, #2
 8101928:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810192a:	687b      	ldr	r3, [r7, #4]
 810192c:	689b      	ldr	r3, [r3, #8]
 810192e:	2b00      	cmp	r3, #0
 8101930:	d00e      	beq.n	8101950 <osThreadNew+0xa8>
 8101932:	687b      	ldr	r3, [r7, #4]
 8101934:	68db      	ldr	r3, [r3, #12]
 8101936:	2bbb      	cmp	r3, #187	; 0xbb
 8101938:	d90a      	bls.n	8101950 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810193a:	687b      	ldr	r3, [r7, #4]
 810193c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810193e:	2b00      	cmp	r3, #0
 8101940:	d006      	beq.n	8101950 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8101942:	687b      	ldr	r3, [r7, #4]
 8101944:	695b      	ldr	r3, [r3, #20]
 8101946:	2b00      	cmp	r3, #0
 8101948:	d002      	beq.n	8101950 <osThreadNew+0xa8>
        mem = 1;
 810194a:	2301      	movs	r3, #1
 810194c:	61bb      	str	r3, [r7, #24]
 810194e:	e010      	b.n	8101972 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8101950:	687b      	ldr	r3, [r7, #4]
 8101952:	689b      	ldr	r3, [r3, #8]
 8101954:	2b00      	cmp	r3, #0
 8101956:	d10c      	bne.n	8101972 <osThreadNew+0xca>
 8101958:	687b      	ldr	r3, [r7, #4]
 810195a:	68db      	ldr	r3, [r3, #12]
 810195c:	2b00      	cmp	r3, #0
 810195e:	d108      	bne.n	8101972 <osThreadNew+0xca>
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	691b      	ldr	r3, [r3, #16]
 8101964:	2b00      	cmp	r3, #0
 8101966:	d104      	bne.n	8101972 <osThreadNew+0xca>
          mem = 0;
 8101968:	2300      	movs	r3, #0
 810196a:	61bb      	str	r3, [r7, #24]
 810196c:	e001      	b.n	8101972 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 810196e:	2300      	movs	r3, #0
 8101970:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8101972:	69bb      	ldr	r3, [r7, #24]
 8101974:	2b01      	cmp	r3, #1
 8101976:	d110      	bne.n	810199a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8101978:	687b      	ldr	r3, [r7, #4]
 810197a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 810197c:	687a      	ldr	r2, [r7, #4]
 810197e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8101980:	9202      	str	r2, [sp, #8]
 8101982:	9301      	str	r3, [sp, #4]
 8101984:	69fb      	ldr	r3, [r7, #28]
 8101986:	9300      	str	r3, [sp, #0]
 8101988:	68bb      	ldr	r3, [r7, #8]
 810198a:	6a3a      	ldr	r2, [r7, #32]
 810198c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810198e:	68f8      	ldr	r0, [r7, #12]
 8101990:	f001 fa46 	bl	8102e20 <xTaskCreateStatic>
 8101994:	4603      	mov	r3, r0
 8101996:	613b      	str	r3, [r7, #16]
 8101998:	e013      	b.n	81019c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810199a:	69bb      	ldr	r3, [r7, #24]
 810199c:	2b00      	cmp	r3, #0
 810199e:	d110      	bne.n	81019c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 81019a0:	6a3b      	ldr	r3, [r7, #32]
 81019a2:	b29a      	uxth	r2, r3
 81019a4:	f107 0310 	add.w	r3, r7, #16
 81019a8:	9301      	str	r3, [sp, #4]
 81019aa:	69fb      	ldr	r3, [r7, #28]
 81019ac:	9300      	str	r3, [sp, #0]
 81019ae:	68bb      	ldr	r3, [r7, #8]
 81019b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81019b2:	68f8      	ldr	r0, [r7, #12]
 81019b4:	f001 fa91 	bl	8102eda <xTaskCreate>
 81019b8:	4603      	mov	r3, r0
 81019ba:	2b01      	cmp	r3, #1
 81019bc:	d001      	beq.n	81019c2 <osThreadNew+0x11a>
            hTask = NULL;
 81019be:	2300      	movs	r3, #0
 81019c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 81019c2:	693b      	ldr	r3, [r7, #16]
}
 81019c4:	4618      	mov	r0, r3
 81019c6:	3728      	adds	r7, #40	; 0x28
 81019c8:	46bd      	mov	sp, r7
 81019ca:	bd80      	pop	{r7, pc}

081019cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 81019cc:	b580      	push	{r7, lr}
 81019ce:	b084      	sub	sp, #16
 81019d0:	af00      	add	r7, sp, #0
 81019d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81019d4:	f3ef 8305 	mrs	r3, IPSR
 81019d8:	60bb      	str	r3, [r7, #8]
  return(result);
 81019da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81019dc:	2b00      	cmp	r3, #0
 81019de:	d003      	beq.n	81019e8 <osDelay+0x1c>
    stat = osErrorISR;
 81019e0:	f06f 0305 	mvn.w	r3, #5
 81019e4:	60fb      	str	r3, [r7, #12]
 81019e6:	e007      	b.n	81019f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 81019e8:	2300      	movs	r3, #0
 81019ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 81019ec:	687b      	ldr	r3, [r7, #4]
 81019ee:	2b00      	cmp	r3, #0
 81019f0:	d002      	beq.n	81019f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 81019f2:	6878      	ldr	r0, [r7, #4]
 81019f4:	f001 fbcc 	bl	8103190 <vTaskDelay>
    }
  }

  return (stat);
 81019f8:	68fb      	ldr	r3, [r7, #12]
}
 81019fa:	4618      	mov	r0, r3
 81019fc:	3710      	adds	r7, #16
 81019fe:	46bd      	mov	sp, r7
 8101a00:	bd80      	pop	{r7, pc}
	...

08101a04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8101a04:	b480      	push	{r7}
 8101a06:	b085      	sub	sp, #20
 8101a08:	af00      	add	r7, sp, #0
 8101a0a:	60f8      	str	r0, [r7, #12]
 8101a0c:	60b9      	str	r1, [r7, #8]
 8101a0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8101a10:	68fb      	ldr	r3, [r7, #12]
 8101a12:	4a07      	ldr	r2, [pc, #28]	; (8101a30 <vApplicationGetIdleTaskMemory+0x2c>)
 8101a14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8101a16:	68bb      	ldr	r3, [r7, #8]
 8101a18:	4a06      	ldr	r2, [pc, #24]	; (8101a34 <vApplicationGetIdleTaskMemory+0x30>)
 8101a1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8101a1c:	687b      	ldr	r3, [r7, #4]
 8101a1e:	2280      	movs	r2, #128	; 0x80
 8101a20:	601a      	str	r2, [r3, #0]
}
 8101a22:	bf00      	nop
 8101a24:	3714      	adds	r7, #20
 8101a26:	46bd      	mov	sp, r7
 8101a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a2c:	4770      	bx	lr
 8101a2e:	bf00      	nop
 8101a30:	100000ec 	.word	0x100000ec
 8101a34:	100001a8 	.word	0x100001a8

08101a38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8101a38:	b480      	push	{r7}
 8101a3a:	b085      	sub	sp, #20
 8101a3c:	af00      	add	r7, sp, #0
 8101a3e:	60f8      	str	r0, [r7, #12]
 8101a40:	60b9      	str	r1, [r7, #8]
 8101a42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8101a44:	68fb      	ldr	r3, [r7, #12]
 8101a46:	4a07      	ldr	r2, [pc, #28]	; (8101a64 <vApplicationGetTimerTaskMemory+0x2c>)
 8101a48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8101a4a:	68bb      	ldr	r3, [r7, #8]
 8101a4c:	4a06      	ldr	r2, [pc, #24]	; (8101a68 <vApplicationGetTimerTaskMemory+0x30>)
 8101a4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8101a50:	687b      	ldr	r3, [r7, #4]
 8101a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101a56:	601a      	str	r2, [r3, #0]
}
 8101a58:	bf00      	nop
 8101a5a:	3714      	adds	r7, #20
 8101a5c:	46bd      	mov	sp, r7
 8101a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a62:	4770      	bx	lr
 8101a64:	100003a8 	.word	0x100003a8
 8101a68:	10000464 	.word	0x10000464

08101a6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8101a6c:	b580      	push	{r7, lr}
 8101a6e:	b08a      	sub	sp, #40	; 0x28
 8101a70:	af00      	add	r7, sp, #0
 8101a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8101a74:	2300      	movs	r3, #0
 8101a76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8101a78:	f001 fc2e 	bl	81032d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8101a7c:	4b5b      	ldr	r3, [pc, #364]	; (8101bec <pvPortMalloc+0x180>)
 8101a7e:	681b      	ldr	r3, [r3, #0]
 8101a80:	2b00      	cmp	r3, #0
 8101a82:	d101      	bne.n	8101a88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8101a84:	f000 f920 	bl	8101cc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8101a88:	4b59      	ldr	r3, [pc, #356]	; (8101bf0 <pvPortMalloc+0x184>)
 8101a8a:	681a      	ldr	r2, [r3, #0]
 8101a8c:	687b      	ldr	r3, [r7, #4]
 8101a8e:	4013      	ands	r3, r2
 8101a90:	2b00      	cmp	r3, #0
 8101a92:	f040 8093 	bne.w	8101bbc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8101a96:	687b      	ldr	r3, [r7, #4]
 8101a98:	2b00      	cmp	r3, #0
 8101a9a:	d01d      	beq.n	8101ad8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8101a9c:	2208      	movs	r2, #8
 8101a9e:	687b      	ldr	r3, [r7, #4]
 8101aa0:	4413      	add	r3, r2
 8101aa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8101aa4:	687b      	ldr	r3, [r7, #4]
 8101aa6:	f003 0307 	and.w	r3, r3, #7
 8101aaa:	2b00      	cmp	r3, #0
 8101aac:	d014      	beq.n	8101ad8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8101aae:	687b      	ldr	r3, [r7, #4]
 8101ab0:	f023 0307 	bic.w	r3, r3, #7
 8101ab4:	3308      	adds	r3, #8
 8101ab6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8101ab8:	687b      	ldr	r3, [r7, #4]
 8101aba:	f003 0307 	and.w	r3, r3, #7
 8101abe:	2b00      	cmp	r3, #0
 8101ac0:	d00a      	beq.n	8101ad8 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8101ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101ac6:	f383 8811 	msr	BASEPRI, r3
 8101aca:	f3bf 8f6f 	isb	sy
 8101ace:	f3bf 8f4f 	dsb	sy
 8101ad2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8101ad4:	bf00      	nop
 8101ad6:	e7fe      	b.n	8101ad6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8101ad8:	687b      	ldr	r3, [r7, #4]
 8101ada:	2b00      	cmp	r3, #0
 8101adc:	d06e      	beq.n	8101bbc <pvPortMalloc+0x150>
 8101ade:	4b45      	ldr	r3, [pc, #276]	; (8101bf4 <pvPortMalloc+0x188>)
 8101ae0:	681b      	ldr	r3, [r3, #0]
 8101ae2:	687a      	ldr	r2, [r7, #4]
 8101ae4:	429a      	cmp	r2, r3
 8101ae6:	d869      	bhi.n	8101bbc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8101ae8:	4b43      	ldr	r3, [pc, #268]	; (8101bf8 <pvPortMalloc+0x18c>)
 8101aea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8101aec:	4b42      	ldr	r3, [pc, #264]	; (8101bf8 <pvPortMalloc+0x18c>)
 8101aee:	681b      	ldr	r3, [r3, #0]
 8101af0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8101af2:	e004      	b.n	8101afe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8101af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101af6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8101af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101afa:	681b      	ldr	r3, [r3, #0]
 8101afc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8101afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b00:	685b      	ldr	r3, [r3, #4]
 8101b02:	687a      	ldr	r2, [r7, #4]
 8101b04:	429a      	cmp	r2, r3
 8101b06:	d903      	bls.n	8101b10 <pvPortMalloc+0xa4>
 8101b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b0a:	681b      	ldr	r3, [r3, #0]
 8101b0c:	2b00      	cmp	r3, #0
 8101b0e:	d1f1      	bne.n	8101af4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8101b10:	4b36      	ldr	r3, [pc, #216]	; (8101bec <pvPortMalloc+0x180>)
 8101b12:	681b      	ldr	r3, [r3, #0]
 8101b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101b16:	429a      	cmp	r2, r3
 8101b18:	d050      	beq.n	8101bbc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8101b1a:	6a3b      	ldr	r3, [r7, #32]
 8101b1c:	681b      	ldr	r3, [r3, #0]
 8101b1e:	2208      	movs	r2, #8
 8101b20:	4413      	add	r3, r2
 8101b22:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8101b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b26:	681a      	ldr	r2, [r3, #0]
 8101b28:	6a3b      	ldr	r3, [r7, #32]
 8101b2a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8101b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b2e:	685a      	ldr	r2, [r3, #4]
 8101b30:	687b      	ldr	r3, [r7, #4]
 8101b32:	1ad2      	subs	r2, r2, r3
 8101b34:	2308      	movs	r3, #8
 8101b36:	005b      	lsls	r3, r3, #1
 8101b38:	429a      	cmp	r2, r3
 8101b3a:	d91f      	bls.n	8101b7c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8101b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101b3e:	687b      	ldr	r3, [r7, #4]
 8101b40:	4413      	add	r3, r2
 8101b42:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8101b44:	69bb      	ldr	r3, [r7, #24]
 8101b46:	f003 0307 	and.w	r3, r3, #7
 8101b4a:	2b00      	cmp	r3, #0
 8101b4c:	d00a      	beq.n	8101b64 <pvPortMalloc+0xf8>
	__asm volatile
 8101b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101b52:	f383 8811 	msr	BASEPRI, r3
 8101b56:	f3bf 8f6f 	isb	sy
 8101b5a:	f3bf 8f4f 	dsb	sy
 8101b5e:	613b      	str	r3, [r7, #16]
}
 8101b60:	bf00      	nop
 8101b62:	e7fe      	b.n	8101b62 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8101b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b66:	685a      	ldr	r2, [r3, #4]
 8101b68:	687b      	ldr	r3, [r7, #4]
 8101b6a:	1ad2      	subs	r2, r2, r3
 8101b6c:	69bb      	ldr	r3, [r7, #24]
 8101b6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8101b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b72:	687a      	ldr	r2, [r7, #4]
 8101b74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8101b76:	69b8      	ldr	r0, [r7, #24]
 8101b78:	f000 f908 	bl	8101d8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8101b7c:	4b1d      	ldr	r3, [pc, #116]	; (8101bf4 <pvPortMalloc+0x188>)
 8101b7e:	681a      	ldr	r2, [r3, #0]
 8101b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b82:	685b      	ldr	r3, [r3, #4]
 8101b84:	1ad3      	subs	r3, r2, r3
 8101b86:	4a1b      	ldr	r2, [pc, #108]	; (8101bf4 <pvPortMalloc+0x188>)
 8101b88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8101b8a:	4b1a      	ldr	r3, [pc, #104]	; (8101bf4 <pvPortMalloc+0x188>)
 8101b8c:	681a      	ldr	r2, [r3, #0]
 8101b8e:	4b1b      	ldr	r3, [pc, #108]	; (8101bfc <pvPortMalloc+0x190>)
 8101b90:	681b      	ldr	r3, [r3, #0]
 8101b92:	429a      	cmp	r2, r3
 8101b94:	d203      	bcs.n	8101b9e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8101b96:	4b17      	ldr	r3, [pc, #92]	; (8101bf4 <pvPortMalloc+0x188>)
 8101b98:	681b      	ldr	r3, [r3, #0]
 8101b9a:	4a18      	ldr	r2, [pc, #96]	; (8101bfc <pvPortMalloc+0x190>)
 8101b9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8101b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101ba0:	685a      	ldr	r2, [r3, #4]
 8101ba2:	4b13      	ldr	r3, [pc, #76]	; (8101bf0 <pvPortMalloc+0x184>)
 8101ba4:	681b      	ldr	r3, [r3, #0]
 8101ba6:	431a      	orrs	r2, r3
 8101ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101baa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8101bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101bae:	2200      	movs	r2, #0
 8101bb0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8101bb2:	4b13      	ldr	r3, [pc, #76]	; (8101c00 <pvPortMalloc+0x194>)
 8101bb4:	681b      	ldr	r3, [r3, #0]
 8101bb6:	3301      	adds	r3, #1
 8101bb8:	4a11      	ldr	r2, [pc, #68]	; (8101c00 <pvPortMalloc+0x194>)
 8101bba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8101bbc:	f001 fb9a 	bl	81032f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8101bc0:	69fb      	ldr	r3, [r7, #28]
 8101bc2:	f003 0307 	and.w	r3, r3, #7
 8101bc6:	2b00      	cmp	r3, #0
 8101bc8:	d00a      	beq.n	8101be0 <pvPortMalloc+0x174>
	__asm volatile
 8101bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101bce:	f383 8811 	msr	BASEPRI, r3
 8101bd2:	f3bf 8f6f 	isb	sy
 8101bd6:	f3bf 8f4f 	dsb	sy
 8101bda:	60fb      	str	r3, [r7, #12]
}
 8101bdc:	bf00      	nop
 8101bde:	e7fe      	b.n	8101bde <pvPortMalloc+0x172>
	return pvReturn;
 8101be0:	69fb      	ldr	r3, [r7, #28]
}
 8101be2:	4618      	mov	r0, r3
 8101be4:	3728      	adds	r7, #40	; 0x28
 8101be6:	46bd      	mov	sp, r7
 8101be8:	bd80      	pop	{r7, pc}
 8101bea:	bf00      	nop
 8101bec:	1000446c 	.word	0x1000446c
 8101bf0:	10004480 	.word	0x10004480
 8101bf4:	10004470 	.word	0x10004470
 8101bf8:	10004464 	.word	0x10004464
 8101bfc:	10004474 	.word	0x10004474
 8101c00:	10004478 	.word	0x10004478

08101c04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8101c04:	b580      	push	{r7, lr}
 8101c06:	b086      	sub	sp, #24
 8101c08:	af00      	add	r7, sp, #0
 8101c0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8101c0c:	687b      	ldr	r3, [r7, #4]
 8101c0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8101c10:	687b      	ldr	r3, [r7, #4]
 8101c12:	2b00      	cmp	r3, #0
 8101c14:	d04d      	beq.n	8101cb2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8101c16:	2308      	movs	r3, #8
 8101c18:	425b      	negs	r3, r3
 8101c1a:	697a      	ldr	r2, [r7, #20]
 8101c1c:	4413      	add	r3, r2
 8101c1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8101c20:	697b      	ldr	r3, [r7, #20]
 8101c22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8101c24:	693b      	ldr	r3, [r7, #16]
 8101c26:	685a      	ldr	r2, [r3, #4]
 8101c28:	4b24      	ldr	r3, [pc, #144]	; (8101cbc <vPortFree+0xb8>)
 8101c2a:	681b      	ldr	r3, [r3, #0]
 8101c2c:	4013      	ands	r3, r2
 8101c2e:	2b00      	cmp	r3, #0
 8101c30:	d10a      	bne.n	8101c48 <vPortFree+0x44>
	__asm volatile
 8101c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101c36:	f383 8811 	msr	BASEPRI, r3
 8101c3a:	f3bf 8f6f 	isb	sy
 8101c3e:	f3bf 8f4f 	dsb	sy
 8101c42:	60fb      	str	r3, [r7, #12]
}
 8101c44:	bf00      	nop
 8101c46:	e7fe      	b.n	8101c46 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8101c48:	693b      	ldr	r3, [r7, #16]
 8101c4a:	681b      	ldr	r3, [r3, #0]
 8101c4c:	2b00      	cmp	r3, #0
 8101c4e:	d00a      	beq.n	8101c66 <vPortFree+0x62>
	__asm volatile
 8101c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101c54:	f383 8811 	msr	BASEPRI, r3
 8101c58:	f3bf 8f6f 	isb	sy
 8101c5c:	f3bf 8f4f 	dsb	sy
 8101c60:	60bb      	str	r3, [r7, #8]
}
 8101c62:	bf00      	nop
 8101c64:	e7fe      	b.n	8101c64 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8101c66:	693b      	ldr	r3, [r7, #16]
 8101c68:	685a      	ldr	r2, [r3, #4]
 8101c6a:	4b14      	ldr	r3, [pc, #80]	; (8101cbc <vPortFree+0xb8>)
 8101c6c:	681b      	ldr	r3, [r3, #0]
 8101c6e:	4013      	ands	r3, r2
 8101c70:	2b00      	cmp	r3, #0
 8101c72:	d01e      	beq.n	8101cb2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8101c74:	693b      	ldr	r3, [r7, #16]
 8101c76:	681b      	ldr	r3, [r3, #0]
 8101c78:	2b00      	cmp	r3, #0
 8101c7a:	d11a      	bne.n	8101cb2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8101c7c:	693b      	ldr	r3, [r7, #16]
 8101c7e:	685a      	ldr	r2, [r3, #4]
 8101c80:	4b0e      	ldr	r3, [pc, #56]	; (8101cbc <vPortFree+0xb8>)
 8101c82:	681b      	ldr	r3, [r3, #0]
 8101c84:	43db      	mvns	r3, r3
 8101c86:	401a      	ands	r2, r3
 8101c88:	693b      	ldr	r3, [r7, #16]
 8101c8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8101c8c:	f001 fb24 	bl	81032d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8101c90:	693b      	ldr	r3, [r7, #16]
 8101c92:	685a      	ldr	r2, [r3, #4]
 8101c94:	4b0a      	ldr	r3, [pc, #40]	; (8101cc0 <vPortFree+0xbc>)
 8101c96:	681b      	ldr	r3, [r3, #0]
 8101c98:	4413      	add	r3, r2
 8101c9a:	4a09      	ldr	r2, [pc, #36]	; (8101cc0 <vPortFree+0xbc>)
 8101c9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8101c9e:	6938      	ldr	r0, [r7, #16]
 8101ca0:	f000 f874 	bl	8101d8c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8101ca4:	4b07      	ldr	r3, [pc, #28]	; (8101cc4 <vPortFree+0xc0>)
 8101ca6:	681b      	ldr	r3, [r3, #0]
 8101ca8:	3301      	adds	r3, #1
 8101caa:	4a06      	ldr	r2, [pc, #24]	; (8101cc4 <vPortFree+0xc0>)
 8101cac:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8101cae:	f001 fb21 	bl	81032f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8101cb2:	bf00      	nop
 8101cb4:	3718      	adds	r7, #24
 8101cb6:	46bd      	mov	sp, r7
 8101cb8:	bd80      	pop	{r7, pc}
 8101cba:	bf00      	nop
 8101cbc:	10004480 	.word	0x10004480
 8101cc0:	10004470 	.word	0x10004470
 8101cc4:	1000447c 	.word	0x1000447c

08101cc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8101cc8:	b480      	push	{r7}
 8101cca:	b085      	sub	sp, #20
 8101ccc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8101cce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8101cd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8101cd4:	4b27      	ldr	r3, [pc, #156]	; (8101d74 <prvHeapInit+0xac>)
 8101cd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8101cd8:	68fb      	ldr	r3, [r7, #12]
 8101cda:	f003 0307 	and.w	r3, r3, #7
 8101cde:	2b00      	cmp	r3, #0
 8101ce0:	d00c      	beq.n	8101cfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8101ce2:	68fb      	ldr	r3, [r7, #12]
 8101ce4:	3307      	adds	r3, #7
 8101ce6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8101ce8:	68fb      	ldr	r3, [r7, #12]
 8101cea:	f023 0307 	bic.w	r3, r3, #7
 8101cee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8101cf0:	68ba      	ldr	r2, [r7, #8]
 8101cf2:	68fb      	ldr	r3, [r7, #12]
 8101cf4:	1ad3      	subs	r3, r2, r3
 8101cf6:	4a1f      	ldr	r2, [pc, #124]	; (8101d74 <prvHeapInit+0xac>)
 8101cf8:	4413      	add	r3, r2
 8101cfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8101cfc:	68fb      	ldr	r3, [r7, #12]
 8101cfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8101d00:	4a1d      	ldr	r2, [pc, #116]	; (8101d78 <prvHeapInit+0xb0>)
 8101d02:	687b      	ldr	r3, [r7, #4]
 8101d04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8101d06:	4b1c      	ldr	r3, [pc, #112]	; (8101d78 <prvHeapInit+0xb0>)
 8101d08:	2200      	movs	r2, #0
 8101d0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8101d0c:	687b      	ldr	r3, [r7, #4]
 8101d0e:	68ba      	ldr	r2, [r7, #8]
 8101d10:	4413      	add	r3, r2
 8101d12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8101d14:	2208      	movs	r2, #8
 8101d16:	68fb      	ldr	r3, [r7, #12]
 8101d18:	1a9b      	subs	r3, r3, r2
 8101d1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8101d1c:	68fb      	ldr	r3, [r7, #12]
 8101d1e:	f023 0307 	bic.w	r3, r3, #7
 8101d22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8101d24:	68fb      	ldr	r3, [r7, #12]
 8101d26:	4a15      	ldr	r2, [pc, #84]	; (8101d7c <prvHeapInit+0xb4>)
 8101d28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8101d2a:	4b14      	ldr	r3, [pc, #80]	; (8101d7c <prvHeapInit+0xb4>)
 8101d2c:	681b      	ldr	r3, [r3, #0]
 8101d2e:	2200      	movs	r2, #0
 8101d30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8101d32:	4b12      	ldr	r3, [pc, #72]	; (8101d7c <prvHeapInit+0xb4>)
 8101d34:	681b      	ldr	r3, [r3, #0]
 8101d36:	2200      	movs	r2, #0
 8101d38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8101d3a:	687b      	ldr	r3, [r7, #4]
 8101d3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8101d3e:	683b      	ldr	r3, [r7, #0]
 8101d40:	68fa      	ldr	r2, [r7, #12]
 8101d42:	1ad2      	subs	r2, r2, r3
 8101d44:	683b      	ldr	r3, [r7, #0]
 8101d46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8101d48:	4b0c      	ldr	r3, [pc, #48]	; (8101d7c <prvHeapInit+0xb4>)
 8101d4a:	681a      	ldr	r2, [r3, #0]
 8101d4c:	683b      	ldr	r3, [r7, #0]
 8101d4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101d50:	683b      	ldr	r3, [r7, #0]
 8101d52:	685b      	ldr	r3, [r3, #4]
 8101d54:	4a0a      	ldr	r2, [pc, #40]	; (8101d80 <prvHeapInit+0xb8>)
 8101d56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101d58:	683b      	ldr	r3, [r7, #0]
 8101d5a:	685b      	ldr	r3, [r3, #4]
 8101d5c:	4a09      	ldr	r2, [pc, #36]	; (8101d84 <prvHeapInit+0xbc>)
 8101d5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8101d60:	4b09      	ldr	r3, [pc, #36]	; (8101d88 <prvHeapInit+0xc0>)
 8101d62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8101d66:	601a      	str	r2, [r3, #0]
}
 8101d68:	bf00      	nop
 8101d6a:	3714      	adds	r7, #20
 8101d6c:	46bd      	mov	sp, r7
 8101d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d72:	4770      	bx	lr
 8101d74:	10000864 	.word	0x10000864
 8101d78:	10004464 	.word	0x10004464
 8101d7c:	1000446c 	.word	0x1000446c
 8101d80:	10004474 	.word	0x10004474
 8101d84:	10004470 	.word	0x10004470
 8101d88:	10004480 	.word	0x10004480

08101d8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8101d8c:	b480      	push	{r7}
 8101d8e:	b085      	sub	sp, #20
 8101d90:	af00      	add	r7, sp, #0
 8101d92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8101d94:	4b28      	ldr	r3, [pc, #160]	; (8101e38 <prvInsertBlockIntoFreeList+0xac>)
 8101d96:	60fb      	str	r3, [r7, #12]
 8101d98:	e002      	b.n	8101da0 <prvInsertBlockIntoFreeList+0x14>
 8101d9a:	68fb      	ldr	r3, [r7, #12]
 8101d9c:	681b      	ldr	r3, [r3, #0]
 8101d9e:	60fb      	str	r3, [r7, #12]
 8101da0:	68fb      	ldr	r3, [r7, #12]
 8101da2:	681b      	ldr	r3, [r3, #0]
 8101da4:	687a      	ldr	r2, [r7, #4]
 8101da6:	429a      	cmp	r2, r3
 8101da8:	d8f7      	bhi.n	8101d9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8101daa:	68fb      	ldr	r3, [r7, #12]
 8101dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8101dae:	68fb      	ldr	r3, [r7, #12]
 8101db0:	685b      	ldr	r3, [r3, #4]
 8101db2:	68ba      	ldr	r2, [r7, #8]
 8101db4:	4413      	add	r3, r2
 8101db6:	687a      	ldr	r2, [r7, #4]
 8101db8:	429a      	cmp	r2, r3
 8101dba:	d108      	bne.n	8101dce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8101dbc:	68fb      	ldr	r3, [r7, #12]
 8101dbe:	685a      	ldr	r2, [r3, #4]
 8101dc0:	687b      	ldr	r3, [r7, #4]
 8101dc2:	685b      	ldr	r3, [r3, #4]
 8101dc4:	441a      	add	r2, r3
 8101dc6:	68fb      	ldr	r3, [r7, #12]
 8101dc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8101dca:	68fb      	ldr	r3, [r7, #12]
 8101dcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8101dce:	687b      	ldr	r3, [r7, #4]
 8101dd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8101dd2:	687b      	ldr	r3, [r7, #4]
 8101dd4:	685b      	ldr	r3, [r3, #4]
 8101dd6:	68ba      	ldr	r2, [r7, #8]
 8101dd8:	441a      	add	r2, r3
 8101dda:	68fb      	ldr	r3, [r7, #12]
 8101ddc:	681b      	ldr	r3, [r3, #0]
 8101dde:	429a      	cmp	r2, r3
 8101de0:	d118      	bne.n	8101e14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8101de2:	68fb      	ldr	r3, [r7, #12]
 8101de4:	681a      	ldr	r2, [r3, #0]
 8101de6:	4b15      	ldr	r3, [pc, #84]	; (8101e3c <prvInsertBlockIntoFreeList+0xb0>)
 8101de8:	681b      	ldr	r3, [r3, #0]
 8101dea:	429a      	cmp	r2, r3
 8101dec:	d00d      	beq.n	8101e0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8101dee:	687b      	ldr	r3, [r7, #4]
 8101df0:	685a      	ldr	r2, [r3, #4]
 8101df2:	68fb      	ldr	r3, [r7, #12]
 8101df4:	681b      	ldr	r3, [r3, #0]
 8101df6:	685b      	ldr	r3, [r3, #4]
 8101df8:	441a      	add	r2, r3
 8101dfa:	687b      	ldr	r3, [r7, #4]
 8101dfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8101dfe:	68fb      	ldr	r3, [r7, #12]
 8101e00:	681b      	ldr	r3, [r3, #0]
 8101e02:	681a      	ldr	r2, [r3, #0]
 8101e04:	687b      	ldr	r3, [r7, #4]
 8101e06:	601a      	str	r2, [r3, #0]
 8101e08:	e008      	b.n	8101e1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8101e0a:	4b0c      	ldr	r3, [pc, #48]	; (8101e3c <prvInsertBlockIntoFreeList+0xb0>)
 8101e0c:	681a      	ldr	r2, [r3, #0]
 8101e0e:	687b      	ldr	r3, [r7, #4]
 8101e10:	601a      	str	r2, [r3, #0]
 8101e12:	e003      	b.n	8101e1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8101e14:	68fb      	ldr	r3, [r7, #12]
 8101e16:	681a      	ldr	r2, [r3, #0]
 8101e18:	687b      	ldr	r3, [r7, #4]
 8101e1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8101e1c:	68fa      	ldr	r2, [r7, #12]
 8101e1e:	687b      	ldr	r3, [r7, #4]
 8101e20:	429a      	cmp	r2, r3
 8101e22:	d002      	beq.n	8101e2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8101e24:	68fb      	ldr	r3, [r7, #12]
 8101e26:	687a      	ldr	r2, [r7, #4]
 8101e28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8101e2a:	bf00      	nop
 8101e2c:	3714      	adds	r7, #20
 8101e2e:	46bd      	mov	sp, r7
 8101e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e34:	4770      	bx	lr
 8101e36:	bf00      	nop
 8101e38:	10004464 	.word	0x10004464
 8101e3c:	1000446c 	.word	0x1000446c

08101e40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8101e40:	b480      	push	{r7}
 8101e42:	b083      	sub	sp, #12
 8101e44:	af00      	add	r7, sp, #0
 8101e46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101e48:	687b      	ldr	r3, [r7, #4]
 8101e4a:	f103 0208 	add.w	r2, r3, #8
 8101e4e:	687b      	ldr	r3, [r7, #4]
 8101e50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8101e52:	687b      	ldr	r3, [r7, #4]
 8101e54:	f04f 32ff 	mov.w	r2, #4294967295
 8101e58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101e5a:	687b      	ldr	r3, [r7, #4]
 8101e5c:	f103 0208 	add.w	r2, r3, #8
 8101e60:	687b      	ldr	r3, [r7, #4]
 8101e62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101e64:	687b      	ldr	r3, [r7, #4]
 8101e66:	f103 0208 	add.w	r2, r3, #8
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8101e6e:	687b      	ldr	r3, [r7, #4]
 8101e70:	2200      	movs	r2, #0
 8101e72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8101e74:	bf00      	nop
 8101e76:	370c      	adds	r7, #12
 8101e78:	46bd      	mov	sp, r7
 8101e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e7e:	4770      	bx	lr

08101e80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8101e80:	b480      	push	{r7}
 8101e82:	b083      	sub	sp, #12
 8101e84:	af00      	add	r7, sp, #0
 8101e86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8101e88:	687b      	ldr	r3, [r7, #4]
 8101e8a:	2200      	movs	r2, #0
 8101e8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8101e8e:	bf00      	nop
 8101e90:	370c      	adds	r7, #12
 8101e92:	46bd      	mov	sp, r7
 8101e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e98:	4770      	bx	lr

08101e9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8101e9a:	b480      	push	{r7}
 8101e9c:	b085      	sub	sp, #20
 8101e9e:	af00      	add	r7, sp, #0
 8101ea0:	6078      	str	r0, [r7, #4]
 8101ea2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8101ea4:	687b      	ldr	r3, [r7, #4]
 8101ea6:	685b      	ldr	r3, [r3, #4]
 8101ea8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8101eaa:	683b      	ldr	r3, [r7, #0]
 8101eac:	68fa      	ldr	r2, [r7, #12]
 8101eae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8101eb0:	68fb      	ldr	r3, [r7, #12]
 8101eb2:	689a      	ldr	r2, [r3, #8]
 8101eb4:	683b      	ldr	r3, [r7, #0]
 8101eb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8101eb8:	68fb      	ldr	r3, [r7, #12]
 8101eba:	689b      	ldr	r3, [r3, #8]
 8101ebc:	683a      	ldr	r2, [r7, #0]
 8101ebe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8101ec0:	68fb      	ldr	r3, [r7, #12]
 8101ec2:	683a      	ldr	r2, [r7, #0]
 8101ec4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8101ec6:	683b      	ldr	r3, [r7, #0]
 8101ec8:	687a      	ldr	r2, [r7, #4]
 8101eca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8101ecc:	687b      	ldr	r3, [r7, #4]
 8101ece:	681b      	ldr	r3, [r3, #0]
 8101ed0:	1c5a      	adds	r2, r3, #1
 8101ed2:	687b      	ldr	r3, [r7, #4]
 8101ed4:	601a      	str	r2, [r3, #0]
}
 8101ed6:	bf00      	nop
 8101ed8:	3714      	adds	r7, #20
 8101eda:	46bd      	mov	sp, r7
 8101edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ee0:	4770      	bx	lr

08101ee2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8101ee2:	b480      	push	{r7}
 8101ee4:	b085      	sub	sp, #20
 8101ee6:	af00      	add	r7, sp, #0
 8101ee8:	6078      	str	r0, [r7, #4]
 8101eea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8101eec:	683b      	ldr	r3, [r7, #0]
 8101eee:	681b      	ldr	r3, [r3, #0]
 8101ef0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8101ef2:	68bb      	ldr	r3, [r7, #8]
 8101ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101ef8:	d103      	bne.n	8101f02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8101efa:	687b      	ldr	r3, [r7, #4]
 8101efc:	691b      	ldr	r3, [r3, #16]
 8101efe:	60fb      	str	r3, [r7, #12]
 8101f00:	e00c      	b.n	8101f1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8101f02:	687b      	ldr	r3, [r7, #4]
 8101f04:	3308      	adds	r3, #8
 8101f06:	60fb      	str	r3, [r7, #12]
 8101f08:	e002      	b.n	8101f10 <vListInsert+0x2e>
 8101f0a:	68fb      	ldr	r3, [r7, #12]
 8101f0c:	685b      	ldr	r3, [r3, #4]
 8101f0e:	60fb      	str	r3, [r7, #12]
 8101f10:	68fb      	ldr	r3, [r7, #12]
 8101f12:	685b      	ldr	r3, [r3, #4]
 8101f14:	681b      	ldr	r3, [r3, #0]
 8101f16:	68ba      	ldr	r2, [r7, #8]
 8101f18:	429a      	cmp	r2, r3
 8101f1a:	d2f6      	bcs.n	8101f0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8101f1c:	68fb      	ldr	r3, [r7, #12]
 8101f1e:	685a      	ldr	r2, [r3, #4]
 8101f20:	683b      	ldr	r3, [r7, #0]
 8101f22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8101f24:	683b      	ldr	r3, [r7, #0]
 8101f26:	685b      	ldr	r3, [r3, #4]
 8101f28:	683a      	ldr	r2, [r7, #0]
 8101f2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8101f2c:	683b      	ldr	r3, [r7, #0]
 8101f2e:	68fa      	ldr	r2, [r7, #12]
 8101f30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8101f32:	68fb      	ldr	r3, [r7, #12]
 8101f34:	683a      	ldr	r2, [r7, #0]
 8101f36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8101f38:	683b      	ldr	r3, [r7, #0]
 8101f3a:	687a      	ldr	r2, [r7, #4]
 8101f3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8101f3e:	687b      	ldr	r3, [r7, #4]
 8101f40:	681b      	ldr	r3, [r3, #0]
 8101f42:	1c5a      	adds	r2, r3, #1
 8101f44:	687b      	ldr	r3, [r7, #4]
 8101f46:	601a      	str	r2, [r3, #0]
}
 8101f48:	bf00      	nop
 8101f4a:	3714      	adds	r7, #20
 8101f4c:	46bd      	mov	sp, r7
 8101f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f52:	4770      	bx	lr

08101f54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8101f54:	b480      	push	{r7}
 8101f56:	b085      	sub	sp, #20
 8101f58:	af00      	add	r7, sp, #0
 8101f5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8101f5c:	687b      	ldr	r3, [r7, #4]
 8101f5e:	691b      	ldr	r3, [r3, #16]
 8101f60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8101f62:	687b      	ldr	r3, [r7, #4]
 8101f64:	685b      	ldr	r3, [r3, #4]
 8101f66:	687a      	ldr	r2, [r7, #4]
 8101f68:	6892      	ldr	r2, [r2, #8]
 8101f6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	689b      	ldr	r3, [r3, #8]
 8101f70:	687a      	ldr	r2, [r7, #4]
 8101f72:	6852      	ldr	r2, [r2, #4]
 8101f74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8101f76:	68fb      	ldr	r3, [r7, #12]
 8101f78:	685b      	ldr	r3, [r3, #4]
 8101f7a:	687a      	ldr	r2, [r7, #4]
 8101f7c:	429a      	cmp	r2, r3
 8101f7e:	d103      	bne.n	8101f88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8101f80:	687b      	ldr	r3, [r7, #4]
 8101f82:	689a      	ldr	r2, [r3, #8]
 8101f84:	68fb      	ldr	r3, [r7, #12]
 8101f86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8101f88:	687b      	ldr	r3, [r7, #4]
 8101f8a:	2200      	movs	r2, #0
 8101f8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8101f8e:	68fb      	ldr	r3, [r7, #12]
 8101f90:	681b      	ldr	r3, [r3, #0]
 8101f92:	1e5a      	subs	r2, r3, #1
 8101f94:	68fb      	ldr	r3, [r7, #12]
 8101f96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8101f98:	68fb      	ldr	r3, [r7, #12]
 8101f9a:	681b      	ldr	r3, [r3, #0]
}
 8101f9c:	4618      	mov	r0, r3
 8101f9e:	3714      	adds	r7, #20
 8101fa0:	46bd      	mov	sp, r7
 8101fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fa6:	4770      	bx	lr

08101fa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8101fa8:	b480      	push	{r7}
 8101faa:	b085      	sub	sp, #20
 8101fac:	af00      	add	r7, sp, #0
 8101fae:	60f8      	str	r0, [r7, #12]
 8101fb0:	60b9      	str	r1, [r7, #8]
 8101fb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8101fb4:	68fb      	ldr	r3, [r7, #12]
 8101fb6:	3b04      	subs	r3, #4
 8101fb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8101fba:	68fb      	ldr	r3, [r7, #12]
 8101fbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8101fc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8101fc2:	68fb      	ldr	r3, [r7, #12]
 8101fc4:	3b04      	subs	r3, #4
 8101fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8101fc8:	68bb      	ldr	r3, [r7, #8]
 8101fca:	f023 0201 	bic.w	r2, r3, #1
 8101fce:	68fb      	ldr	r3, [r7, #12]
 8101fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8101fd2:	68fb      	ldr	r3, [r7, #12]
 8101fd4:	3b04      	subs	r3, #4
 8101fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8101fd8:	4a0c      	ldr	r2, [pc, #48]	; (810200c <pxPortInitialiseStack+0x64>)
 8101fda:	68fb      	ldr	r3, [r7, #12]
 8101fdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8101fde:	68fb      	ldr	r3, [r7, #12]
 8101fe0:	3b14      	subs	r3, #20
 8101fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8101fe4:	687a      	ldr	r2, [r7, #4]
 8101fe6:	68fb      	ldr	r3, [r7, #12]
 8101fe8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8101fea:	68fb      	ldr	r3, [r7, #12]
 8101fec:	3b04      	subs	r3, #4
 8101fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8101ff0:	68fb      	ldr	r3, [r7, #12]
 8101ff2:	f06f 0202 	mvn.w	r2, #2
 8101ff6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8101ff8:	68fb      	ldr	r3, [r7, #12]
 8101ffa:	3b20      	subs	r3, #32
 8101ffc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8101ffe:	68fb      	ldr	r3, [r7, #12]
}
 8102000:	4618      	mov	r0, r3
 8102002:	3714      	adds	r7, #20
 8102004:	46bd      	mov	sp, r7
 8102006:	f85d 7b04 	ldr.w	r7, [sp], #4
 810200a:	4770      	bx	lr
 810200c:	08102011 	.word	0x08102011

08102010 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8102010:	b480      	push	{r7}
 8102012:	b085      	sub	sp, #20
 8102014:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8102016:	2300      	movs	r3, #0
 8102018:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810201a:	4b12      	ldr	r3, [pc, #72]	; (8102064 <prvTaskExitError+0x54>)
 810201c:	681b      	ldr	r3, [r3, #0]
 810201e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102022:	d00a      	beq.n	810203a <prvTaskExitError+0x2a>
	__asm volatile
 8102024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102028:	f383 8811 	msr	BASEPRI, r3
 810202c:	f3bf 8f6f 	isb	sy
 8102030:	f3bf 8f4f 	dsb	sy
 8102034:	60fb      	str	r3, [r7, #12]
}
 8102036:	bf00      	nop
 8102038:	e7fe      	b.n	8102038 <prvTaskExitError+0x28>
	__asm volatile
 810203a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810203e:	f383 8811 	msr	BASEPRI, r3
 8102042:	f3bf 8f6f 	isb	sy
 8102046:	f3bf 8f4f 	dsb	sy
 810204a:	60bb      	str	r3, [r7, #8]
}
 810204c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810204e:	bf00      	nop
 8102050:	687b      	ldr	r3, [r7, #4]
 8102052:	2b00      	cmp	r3, #0
 8102054:	d0fc      	beq.n	8102050 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8102056:	bf00      	nop
 8102058:	bf00      	nop
 810205a:	3714      	adds	r7, #20
 810205c:	46bd      	mov	sp, r7
 810205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102062:	4770      	bx	lr
 8102064:	10000010 	.word	0x10000010
	...

08102070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8102070:	4b07      	ldr	r3, [pc, #28]	; (8102090 <pxCurrentTCBConst2>)
 8102072:	6819      	ldr	r1, [r3, #0]
 8102074:	6808      	ldr	r0, [r1, #0]
 8102076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810207a:	f380 8809 	msr	PSP, r0
 810207e:	f3bf 8f6f 	isb	sy
 8102082:	f04f 0000 	mov.w	r0, #0
 8102086:	f380 8811 	msr	BASEPRI, r0
 810208a:	4770      	bx	lr
 810208c:	f3af 8000 	nop.w

08102090 <pxCurrentTCBConst2>:
 8102090:	100044cc 	.word	0x100044cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8102094:	bf00      	nop
 8102096:	bf00      	nop

08102098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8102098:	4808      	ldr	r0, [pc, #32]	; (81020bc <prvPortStartFirstTask+0x24>)
 810209a:	6800      	ldr	r0, [r0, #0]
 810209c:	6800      	ldr	r0, [r0, #0]
 810209e:	f380 8808 	msr	MSP, r0
 81020a2:	f04f 0000 	mov.w	r0, #0
 81020a6:	f380 8814 	msr	CONTROL, r0
 81020aa:	b662      	cpsie	i
 81020ac:	b661      	cpsie	f
 81020ae:	f3bf 8f4f 	dsb	sy
 81020b2:	f3bf 8f6f 	isb	sy
 81020b6:	df00      	svc	0
 81020b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 81020ba:	bf00      	nop
 81020bc:	e000ed08 	.word	0xe000ed08

081020c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 81020c0:	b580      	push	{r7, lr}
 81020c2:	b086      	sub	sp, #24
 81020c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 81020c6:	4b46      	ldr	r3, [pc, #280]	; (81021e0 <xPortStartScheduler+0x120>)
 81020c8:	681b      	ldr	r3, [r3, #0]
 81020ca:	4a46      	ldr	r2, [pc, #280]	; (81021e4 <xPortStartScheduler+0x124>)
 81020cc:	4293      	cmp	r3, r2
 81020ce:	d10a      	bne.n	81020e6 <xPortStartScheduler+0x26>
	__asm volatile
 81020d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81020d4:	f383 8811 	msr	BASEPRI, r3
 81020d8:	f3bf 8f6f 	isb	sy
 81020dc:	f3bf 8f4f 	dsb	sy
 81020e0:	613b      	str	r3, [r7, #16]
}
 81020e2:	bf00      	nop
 81020e4:	e7fe      	b.n	81020e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 81020e6:	4b3e      	ldr	r3, [pc, #248]	; (81021e0 <xPortStartScheduler+0x120>)
 81020e8:	681b      	ldr	r3, [r3, #0]
 81020ea:	4a3f      	ldr	r2, [pc, #252]	; (81021e8 <xPortStartScheduler+0x128>)
 81020ec:	4293      	cmp	r3, r2
 81020ee:	d10a      	bne.n	8102106 <xPortStartScheduler+0x46>
	__asm volatile
 81020f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81020f4:	f383 8811 	msr	BASEPRI, r3
 81020f8:	f3bf 8f6f 	isb	sy
 81020fc:	f3bf 8f4f 	dsb	sy
 8102100:	60fb      	str	r3, [r7, #12]
}
 8102102:	bf00      	nop
 8102104:	e7fe      	b.n	8102104 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8102106:	4b39      	ldr	r3, [pc, #228]	; (81021ec <xPortStartScheduler+0x12c>)
 8102108:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810210a:	697b      	ldr	r3, [r7, #20]
 810210c:	781b      	ldrb	r3, [r3, #0]
 810210e:	b2db      	uxtb	r3, r3
 8102110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8102112:	697b      	ldr	r3, [r7, #20]
 8102114:	22ff      	movs	r2, #255	; 0xff
 8102116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8102118:	697b      	ldr	r3, [r7, #20]
 810211a:	781b      	ldrb	r3, [r3, #0]
 810211c:	b2db      	uxtb	r3, r3
 810211e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8102120:	78fb      	ldrb	r3, [r7, #3]
 8102122:	b2db      	uxtb	r3, r3
 8102124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8102128:	b2da      	uxtb	r2, r3
 810212a:	4b31      	ldr	r3, [pc, #196]	; (81021f0 <xPortStartScheduler+0x130>)
 810212c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810212e:	4b31      	ldr	r3, [pc, #196]	; (81021f4 <xPortStartScheduler+0x134>)
 8102130:	2207      	movs	r2, #7
 8102132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8102134:	e009      	b.n	810214a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8102136:	4b2f      	ldr	r3, [pc, #188]	; (81021f4 <xPortStartScheduler+0x134>)
 8102138:	681b      	ldr	r3, [r3, #0]
 810213a:	3b01      	subs	r3, #1
 810213c:	4a2d      	ldr	r2, [pc, #180]	; (81021f4 <xPortStartScheduler+0x134>)
 810213e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8102140:	78fb      	ldrb	r3, [r7, #3]
 8102142:	b2db      	uxtb	r3, r3
 8102144:	005b      	lsls	r3, r3, #1
 8102146:	b2db      	uxtb	r3, r3
 8102148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810214a:	78fb      	ldrb	r3, [r7, #3]
 810214c:	b2db      	uxtb	r3, r3
 810214e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102152:	2b80      	cmp	r3, #128	; 0x80
 8102154:	d0ef      	beq.n	8102136 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8102156:	4b27      	ldr	r3, [pc, #156]	; (81021f4 <xPortStartScheduler+0x134>)
 8102158:	681b      	ldr	r3, [r3, #0]
 810215a:	f1c3 0307 	rsb	r3, r3, #7
 810215e:	2b04      	cmp	r3, #4
 8102160:	d00a      	beq.n	8102178 <xPortStartScheduler+0xb8>
	__asm volatile
 8102162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102166:	f383 8811 	msr	BASEPRI, r3
 810216a:	f3bf 8f6f 	isb	sy
 810216e:	f3bf 8f4f 	dsb	sy
 8102172:	60bb      	str	r3, [r7, #8]
}
 8102174:	bf00      	nop
 8102176:	e7fe      	b.n	8102176 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8102178:	4b1e      	ldr	r3, [pc, #120]	; (81021f4 <xPortStartScheduler+0x134>)
 810217a:	681b      	ldr	r3, [r3, #0]
 810217c:	021b      	lsls	r3, r3, #8
 810217e:	4a1d      	ldr	r2, [pc, #116]	; (81021f4 <xPortStartScheduler+0x134>)
 8102180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8102182:	4b1c      	ldr	r3, [pc, #112]	; (81021f4 <xPortStartScheduler+0x134>)
 8102184:	681b      	ldr	r3, [r3, #0]
 8102186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 810218a:	4a1a      	ldr	r2, [pc, #104]	; (81021f4 <xPortStartScheduler+0x134>)
 810218c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810218e:	687b      	ldr	r3, [r7, #4]
 8102190:	b2da      	uxtb	r2, r3
 8102192:	697b      	ldr	r3, [r7, #20]
 8102194:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8102196:	4b18      	ldr	r3, [pc, #96]	; (81021f8 <xPortStartScheduler+0x138>)
 8102198:	681b      	ldr	r3, [r3, #0]
 810219a:	4a17      	ldr	r2, [pc, #92]	; (81021f8 <xPortStartScheduler+0x138>)
 810219c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81021a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 81021a2:	4b15      	ldr	r3, [pc, #84]	; (81021f8 <xPortStartScheduler+0x138>)
 81021a4:	681b      	ldr	r3, [r3, #0]
 81021a6:	4a14      	ldr	r2, [pc, #80]	; (81021f8 <xPortStartScheduler+0x138>)
 81021a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 81021ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 81021ae:	f000 f8dd 	bl	810236c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 81021b2:	4b12      	ldr	r3, [pc, #72]	; (81021fc <xPortStartScheduler+0x13c>)
 81021b4:	2200      	movs	r2, #0
 81021b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 81021b8:	f000 f8fc 	bl	81023b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 81021bc:	4b10      	ldr	r3, [pc, #64]	; (8102200 <xPortStartScheduler+0x140>)
 81021be:	681b      	ldr	r3, [r3, #0]
 81021c0:	4a0f      	ldr	r2, [pc, #60]	; (8102200 <xPortStartScheduler+0x140>)
 81021c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 81021c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 81021c8:	f7ff ff66 	bl	8102098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 81021cc:	f001 f9fa 	bl	81035c4 <vTaskSwitchContext>
	prvTaskExitError();
 81021d0:	f7ff ff1e 	bl	8102010 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81021d4:	2300      	movs	r3, #0
}
 81021d6:	4618      	mov	r0, r3
 81021d8:	3718      	adds	r7, #24
 81021da:	46bd      	mov	sp, r7
 81021dc:	bd80      	pop	{r7, pc}
 81021de:	bf00      	nop
 81021e0:	e000ed00 	.word	0xe000ed00
 81021e4:	410fc271 	.word	0x410fc271
 81021e8:	410fc270 	.word	0x410fc270
 81021ec:	e000e400 	.word	0xe000e400
 81021f0:	10004484 	.word	0x10004484
 81021f4:	10004488 	.word	0x10004488
 81021f8:	e000ed20 	.word	0xe000ed20
 81021fc:	10000010 	.word	0x10000010
 8102200:	e000ef34 	.word	0xe000ef34

08102204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8102204:	b480      	push	{r7}
 8102206:	b083      	sub	sp, #12
 8102208:	af00      	add	r7, sp, #0
	__asm volatile
 810220a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810220e:	f383 8811 	msr	BASEPRI, r3
 8102212:	f3bf 8f6f 	isb	sy
 8102216:	f3bf 8f4f 	dsb	sy
 810221a:	607b      	str	r3, [r7, #4]
}
 810221c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810221e:	4b0f      	ldr	r3, [pc, #60]	; (810225c <vPortEnterCritical+0x58>)
 8102220:	681b      	ldr	r3, [r3, #0]
 8102222:	3301      	adds	r3, #1
 8102224:	4a0d      	ldr	r2, [pc, #52]	; (810225c <vPortEnterCritical+0x58>)
 8102226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8102228:	4b0c      	ldr	r3, [pc, #48]	; (810225c <vPortEnterCritical+0x58>)
 810222a:	681b      	ldr	r3, [r3, #0]
 810222c:	2b01      	cmp	r3, #1
 810222e:	d10f      	bne.n	8102250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8102230:	4b0b      	ldr	r3, [pc, #44]	; (8102260 <vPortEnterCritical+0x5c>)
 8102232:	681b      	ldr	r3, [r3, #0]
 8102234:	b2db      	uxtb	r3, r3
 8102236:	2b00      	cmp	r3, #0
 8102238:	d00a      	beq.n	8102250 <vPortEnterCritical+0x4c>
	__asm volatile
 810223a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810223e:	f383 8811 	msr	BASEPRI, r3
 8102242:	f3bf 8f6f 	isb	sy
 8102246:	f3bf 8f4f 	dsb	sy
 810224a:	603b      	str	r3, [r7, #0]
}
 810224c:	bf00      	nop
 810224e:	e7fe      	b.n	810224e <vPortEnterCritical+0x4a>
	}
}
 8102250:	bf00      	nop
 8102252:	370c      	adds	r7, #12
 8102254:	46bd      	mov	sp, r7
 8102256:	f85d 7b04 	ldr.w	r7, [sp], #4
 810225a:	4770      	bx	lr
 810225c:	10000010 	.word	0x10000010
 8102260:	e000ed04 	.word	0xe000ed04

08102264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8102264:	b480      	push	{r7}
 8102266:	b083      	sub	sp, #12
 8102268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810226a:	4b12      	ldr	r3, [pc, #72]	; (81022b4 <vPortExitCritical+0x50>)
 810226c:	681b      	ldr	r3, [r3, #0]
 810226e:	2b00      	cmp	r3, #0
 8102270:	d10a      	bne.n	8102288 <vPortExitCritical+0x24>
	__asm volatile
 8102272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102276:	f383 8811 	msr	BASEPRI, r3
 810227a:	f3bf 8f6f 	isb	sy
 810227e:	f3bf 8f4f 	dsb	sy
 8102282:	607b      	str	r3, [r7, #4]
}
 8102284:	bf00      	nop
 8102286:	e7fe      	b.n	8102286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8102288:	4b0a      	ldr	r3, [pc, #40]	; (81022b4 <vPortExitCritical+0x50>)
 810228a:	681b      	ldr	r3, [r3, #0]
 810228c:	3b01      	subs	r3, #1
 810228e:	4a09      	ldr	r2, [pc, #36]	; (81022b4 <vPortExitCritical+0x50>)
 8102290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8102292:	4b08      	ldr	r3, [pc, #32]	; (81022b4 <vPortExitCritical+0x50>)
 8102294:	681b      	ldr	r3, [r3, #0]
 8102296:	2b00      	cmp	r3, #0
 8102298:	d105      	bne.n	81022a6 <vPortExitCritical+0x42>
 810229a:	2300      	movs	r3, #0
 810229c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810229e:	683b      	ldr	r3, [r7, #0]
 81022a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 81022a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 81022a6:	bf00      	nop
 81022a8:	370c      	adds	r7, #12
 81022aa:	46bd      	mov	sp, r7
 81022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022b0:	4770      	bx	lr
 81022b2:	bf00      	nop
 81022b4:	10000010 	.word	0x10000010
	...

081022c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81022c0:	f3ef 8009 	mrs	r0, PSP
 81022c4:	f3bf 8f6f 	isb	sy
 81022c8:	4b15      	ldr	r3, [pc, #84]	; (8102320 <pxCurrentTCBConst>)
 81022ca:	681a      	ldr	r2, [r3, #0]
 81022cc:	f01e 0f10 	tst.w	lr, #16
 81022d0:	bf08      	it	eq
 81022d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81022d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81022da:	6010      	str	r0, [r2, #0]
 81022dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 81022e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 81022e4:	f380 8811 	msr	BASEPRI, r0
 81022e8:	f3bf 8f4f 	dsb	sy
 81022ec:	f3bf 8f6f 	isb	sy
 81022f0:	f001 f968 	bl	81035c4 <vTaskSwitchContext>
 81022f4:	f04f 0000 	mov.w	r0, #0
 81022f8:	f380 8811 	msr	BASEPRI, r0
 81022fc:	bc09      	pop	{r0, r3}
 81022fe:	6819      	ldr	r1, [r3, #0]
 8102300:	6808      	ldr	r0, [r1, #0]
 8102302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8102306:	f01e 0f10 	tst.w	lr, #16
 810230a:	bf08      	it	eq
 810230c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8102310:	f380 8809 	msr	PSP, r0
 8102314:	f3bf 8f6f 	isb	sy
 8102318:	4770      	bx	lr
 810231a:	bf00      	nop
 810231c:	f3af 8000 	nop.w

08102320 <pxCurrentTCBConst>:
 8102320:	100044cc 	.word	0x100044cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8102324:	bf00      	nop
 8102326:	bf00      	nop

08102328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8102328:	b580      	push	{r7, lr}
 810232a:	b082      	sub	sp, #8
 810232c:	af00      	add	r7, sp, #0
	__asm volatile
 810232e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102332:	f383 8811 	msr	BASEPRI, r3
 8102336:	f3bf 8f6f 	isb	sy
 810233a:	f3bf 8f4f 	dsb	sy
 810233e:	607b      	str	r3, [r7, #4]
}
 8102340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8102342:	f001 f885 	bl	8103450 <xTaskIncrementTick>
 8102346:	4603      	mov	r3, r0
 8102348:	2b00      	cmp	r3, #0
 810234a:	d003      	beq.n	8102354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810234c:	4b06      	ldr	r3, [pc, #24]	; (8102368 <xPortSysTickHandler+0x40>)
 810234e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102352:	601a      	str	r2, [r3, #0]
 8102354:	2300      	movs	r3, #0
 8102356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8102358:	683b      	ldr	r3, [r7, #0]
 810235a:	f383 8811 	msr	BASEPRI, r3
}
 810235e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8102360:	bf00      	nop
 8102362:	3708      	adds	r7, #8
 8102364:	46bd      	mov	sp, r7
 8102366:	bd80      	pop	{r7, pc}
 8102368:	e000ed04 	.word	0xe000ed04

0810236c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810236c:	b480      	push	{r7}
 810236e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8102370:	4b0b      	ldr	r3, [pc, #44]	; (81023a0 <vPortSetupTimerInterrupt+0x34>)
 8102372:	2200      	movs	r2, #0
 8102374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8102376:	4b0b      	ldr	r3, [pc, #44]	; (81023a4 <vPortSetupTimerInterrupt+0x38>)
 8102378:	2200      	movs	r2, #0
 810237a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810237c:	4b0a      	ldr	r3, [pc, #40]	; (81023a8 <vPortSetupTimerInterrupt+0x3c>)
 810237e:	681b      	ldr	r3, [r3, #0]
 8102380:	4a0a      	ldr	r2, [pc, #40]	; (81023ac <vPortSetupTimerInterrupt+0x40>)
 8102382:	fba2 2303 	umull	r2, r3, r2, r3
 8102386:	099b      	lsrs	r3, r3, #6
 8102388:	4a09      	ldr	r2, [pc, #36]	; (81023b0 <vPortSetupTimerInterrupt+0x44>)
 810238a:	3b01      	subs	r3, #1
 810238c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810238e:	4b04      	ldr	r3, [pc, #16]	; (81023a0 <vPortSetupTimerInterrupt+0x34>)
 8102390:	2207      	movs	r2, #7
 8102392:	601a      	str	r2, [r3, #0]
}
 8102394:	bf00      	nop
 8102396:	46bd      	mov	sp, r7
 8102398:	f85d 7b04 	ldr.w	r7, [sp], #4
 810239c:	4770      	bx	lr
 810239e:	bf00      	nop
 81023a0:	e000e010 	.word	0xe000e010
 81023a4:	e000e018 	.word	0xe000e018
 81023a8:	10000004 	.word	0x10000004
 81023ac:	10624dd3 	.word	0x10624dd3
 81023b0:	e000e014 	.word	0xe000e014

081023b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 81023b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 81023c4 <vPortEnableVFP+0x10>
 81023b8:	6801      	ldr	r1, [r0, #0]
 81023ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81023be:	6001      	str	r1, [r0, #0]
 81023c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 81023c2:	bf00      	nop
 81023c4:	e000ed88 	.word	0xe000ed88

081023c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 81023c8:	b480      	push	{r7}
 81023ca:	b085      	sub	sp, #20
 81023cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 81023ce:	f3ef 8305 	mrs	r3, IPSR
 81023d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 81023d4:	68fb      	ldr	r3, [r7, #12]
 81023d6:	2b0f      	cmp	r3, #15
 81023d8:	d914      	bls.n	8102404 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 81023da:	4a17      	ldr	r2, [pc, #92]	; (8102438 <vPortValidateInterruptPriority+0x70>)
 81023dc:	68fb      	ldr	r3, [r7, #12]
 81023de:	4413      	add	r3, r2
 81023e0:	781b      	ldrb	r3, [r3, #0]
 81023e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 81023e4:	4b15      	ldr	r3, [pc, #84]	; (810243c <vPortValidateInterruptPriority+0x74>)
 81023e6:	781b      	ldrb	r3, [r3, #0]
 81023e8:	7afa      	ldrb	r2, [r7, #11]
 81023ea:	429a      	cmp	r2, r3
 81023ec:	d20a      	bcs.n	8102404 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 81023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 81023f2:	f383 8811 	msr	BASEPRI, r3
 81023f6:	f3bf 8f6f 	isb	sy
 81023fa:	f3bf 8f4f 	dsb	sy
 81023fe:	607b      	str	r3, [r7, #4]
}
 8102400:	bf00      	nop
 8102402:	e7fe      	b.n	8102402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8102404:	4b0e      	ldr	r3, [pc, #56]	; (8102440 <vPortValidateInterruptPriority+0x78>)
 8102406:	681b      	ldr	r3, [r3, #0]
 8102408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 810240c:	4b0d      	ldr	r3, [pc, #52]	; (8102444 <vPortValidateInterruptPriority+0x7c>)
 810240e:	681b      	ldr	r3, [r3, #0]
 8102410:	429a      	cmp	r2, r3
 8102412:	d90a      	bls.n	810242a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8102414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102418:	f383 8811 	msr	BASEPRI, r3
 810241c:	f3bf 8f6f 	isb	sy
 8102420:	f3bf 8f4f 	dsb	sy
 8102424:	603b      	str	r3, [r7, #0]
}
 8102426:	bf00      	nop
 8102428:	e7fe      	b.n	8102428 <vPortValidateInterruptPriority+0x60>
	}
 810242a:	bf00      	nop
 810242c:	3714      	adds	r7, #20
 810242e:	46bd      	mov	sp, r7
 8102430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102434:	4770      	bx	lr
 8102436:	bf00      	nop
 8102438:	e000e3f0 	.word	0xe000e3f0
 810243c:	10004484 	.word	0x10004484
 8102440:	e000ed0c 	.word	0xe000ed0c
 8102444:	10004488 	.word	0x10004488

08102448 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8102448:	b580      	push	{r7, lr}
 810244a:	b084      	sub	sp, #16
 810244c:	af00      	add	r7, sp, #0
 810244e:	6078      	str	r0, [r7, #4]
 8102450:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8102452:	687b      	ldr	r3, [r7, #4]
 8102454:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8102456:	68fb      	ldr	r3, [r7, #12]
 8102458:	2b00      	cmp	r3, #0
 810245a:	d10a      	bne.n	8102472 <xQueueGenericReset+0x2a>
	__asm volatile
 810245c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102460:	f383 8811 	msr	BASEPRI, r3
 8102464:	f3bf 8f6f 	isb	sy
 8102468:	f3bf 8f4f 	dsb	sy
 810246c:	60bb      	str	r3, [r7, #8]
}
 810246e:	bf00      	nop
 8102470:	e7fe      	b.n	8102470 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8102472:	f7ff fec7 	bl	8102204 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8102476:	68fb      	ldr	r3, [r7, #12]
 8102478:	681a      	ldr	r2, [r3, #0]
 810247a:	68fb      	ldr	r3, [r7, #12]
 810247c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810247e:	68f9      	ldr	r1, [r7, #12]
 8102480:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8102482:	fb01 f303 	mul.w	r3, r1, r3
 8102486:	441a      	add	r2, r3
 8102488:	68fb      	ldr	r3, [r7, #12]
 810248a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810248c:	68fb      	ldr	r3, [r7, #12]
 810248e:	2200      	movs	r2, #0
 8102490:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8102492:	68fb      	ldr	r3, [r7, #12]
 8102494:	681a      	ldr	r2, [r3, #0]
 8102496:	68fb      	ldr	r3, [r7, #12]
 8102498:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810249a:	68fb      	ldr	r3, [r7, #12]
 810249c:	681a      	ldr	r2, [r3, #0]
 810249e:	68fb      	ldr	r3, [r7, #12]
 81024a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81024a2:	3b01      	subs	r3, #1
 81024a4:	68f9      	ldr	r1, [r7, #12]
 81024a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 81024a8:	fb01 f303 	mul.w	r3, r1, r3
 81024ac:	441a      	add	r2, r3
 81024ae:	68fb      	ldr	r3, [r7, #12]
 81024b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 81024b2:	68fb      	ldr	r3, [r7, #12]
 81024b4:	22ff      	movs	r2, #255	; 0xff
 81024b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 81024ba:	68fb      	ldr	r3, [r7, #12]
 81024bc:	22ff      	movs	r2, #255	; 0xff
 81024be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 81024c2:	683b      	ldr	r3, [r7, #0]
 81024c4:	2b00      	cmp	r3, #0
 81024c6:	d114      	bne.n	81024f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81024c8:	68fb      	ldr	r3, [r7, #12]
 81024ca:	691b      	ldr	r3, [r3, #16]
 81024cc:	2b00      	cmp	r3, #0
 81024ce:	d01a      	beq.n	8102506 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81024d0:	68fb      	ldr	r3, [r7, #12]
 81024d2:	3310      	adds	r3, #16
 81024d4:	4618      	mov	r0, r3
 81024d6:	f001 f929 	bl	810372c <xTaskRemoveFromEventList>
 81024da:	4603      	mov	r3, r0
 81024dc:	2b00      	cmp	r3, #0
 81024de:	d012      	beq.n	8102506 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 81024e0:	4b0c      	ldr	r3, [pc, #48]	; (8102514 <xQueueGenericReset+0xcc>)
 81024e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81024e6:	601a      	str	r2, [r3, #0]
 81024e8:	f3bf 8f4f 	dsb	sy
 81024ec:	f3bf 8f6f 	isb	sy
 81024f0:	e009      	b.n	8102506 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 81024f2:	68fb      	ldr	r3, [r7, #12]
 81024f4:	3310      	adds	r3, #16
 81024f6:	4618      	mov	r0, r3
 81024f8:	f7ff fca2 	bl	8101e40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 81024fc:	68fb      	ldr	r3, [r7, #12]
 81024fe:	3324      	adds	r3, #36	; 0x24
 8102500:	4618      	mov	r0, r3
 8102502:	f7ff fc9d 	bl	8101e40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8102506:	f7ff fead 	bl	8102264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810250a:	2301      	movs	r3, #1
}
 810250c:	4618      	mov	r0, r3
 810250e:	3710      	adds	r7, #16
 8102510:	46bd      	mov	sp, r7
 8102512:	bd80      	pop	{r7, pc}
 8102514:	e000ed04 	.word	0xe000ed04

08102518 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8102518:	b580      	push	{r7, lr}
 810251a:	b08e      	sub	sp, #56	; 0x38
 810251c:	af02      	add	r7, sp, #8
 810251e:	60f8      	str	r0, [r7, #12]
 8102520:	60b9      	str	r1, [r7, #8]
 8102522:	607a      	str	r2, [r7, #4]
 8102524:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8102526:	68fb      	ldr	r3, [r7, #12]
 8102528:	2b00      	cmp	r3, #0
 810252a:	d10a      	bne.n	8102542 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 810252c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102530:	f383 8811 	msr	BASEPRI, r3
 8102534:	f3bf 8f6f 	isb	sy
 8102538:	f3bf 8f4f 	dsb	sy
 810253c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810253e:	bf00      	nop
 8102540:	e7fe      	b.n	8102540 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8102542:	683b      	ldr	r3, [r7, #0]
 8102544:	2b00      	cmp	r3, #0
 8102546:	d10a      	bne.n	810255e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8102548:	f04f 0350 	mov.w	r3, #80	; 0x50
 810254c:	f383 8811 	msr	BASEPRI, r3
 8102550:	f3bf 8f6f 	isb	sy
 8102554:	f3bf 8f4f 	dsb	sy
 8102558:	627b      	str	r3, [r7, #36]	; 0x24
}
 810255a:	bf00      	nop
 810255c:	e7fe      	b.n	810255c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810255e:	687b      	ldr	r3, [r7, #4]
 8102560:	2b00      	cmp	r3, #0
 8102562:	d002      	beq.n	810256a <xQueueGenericCreateStatic+0x52>
 8102564:	68bb      	ldr	r3, [r7, #8]
 8102566:	2b00      	cmp	r3, #0
 8102568:	d001      	beq.n	810256e <xQueueGenericCreateStatic+0x56>
 810256a:	2301      	movs	r3, #1
 810256c:	e000      	b.n	8102570 <xQueueGenericCreateStatic+0x58>
 810256e:	2300      	movs	r3, #0
 8102570:	2b00      	cmp	r3, #0
 8102572:	d10a      	bne.n	810258a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8102574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102578:	f383 8811 	msr	BASEPRI, r3
 810257c:	f3bf 8f6f 	isb	sy
 8102580:	f3bf 8f4f 	dsb	sy
 8102584:	623b      	str	r3, [r7, #32]
}
 8102586:	bf00      	nop
 8102588:	e7fe      	b.n	8102588 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810258a:	687b      	ldr	r3, [r7, #4]
 810258c:	2b00      	cmp	r3, #0
 810258e:	d102      	bne.n	8102596 <xQueueGenericCreateStatic+0x7e>
 8102590:	68bb      	ldr	r3, [r7, #8]
 8102592:	2b00      	cmp	r3, #0
 8102594:	d101      	bne.n	810259a <xQueueGenericCreateStatic+0x82>
 8102596:	2301      	movs	r3, #1
 8102598:	e000      	b.n	810259c <xQueueGenericCreateStatic+0x84>
 810259a:	2300      	movs	r3, #0
 810259c:	2b00      	cmp	r3, #0
 810259e:	d10a      	bne.n	81025b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 81025a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81025a4:	f383 8811 	msr	BASEPRI, r3
 81025a8:	f3bf 8f6f 	isb	sy
 81025ac:	f3bf 8f4f 	dsb	sy
 81025b0:	61fb      	str	r3, [r7, #28]
}
 81025b2:	bf00      	nop
 81025b4:	e7fe      	b.n	81025b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 81025b6:	2350      	movs	r3, #80	; 0x50
 81025b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 81025ba:	697b      	ldr	r3, [r7, #20]
 81025bc:	2b50      	cmp	r3, #80	; 0x50
 81025be:	d00a      	beq.n	81025d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 81025c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81025c4:	f383 8811 	msr	BASEPRI, r3
 81025c8:	f3bf 8f6f 	isb	sy
 81025cc:	f3bf 8f4f 	dsb	sy
 81025d0:	61bb      	str	r3, [r7, #24]
}
 81025d2:	bf00      	nop
 81025d4:	e7fe      	b.n	81025d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 81025d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81025d8:	683b      	ldr	r3, [r7, #0]
 81025da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 81025dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81025de:	2b00      	cmp	r3, #0
 81025e0:	d00d      	beq.n	81025fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 81025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81025e4:	2201      	movs	r2, #1
 81025e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 81025ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 81025ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81025f0:	9300      	str	r3, [sp, #0]
 81025f2:	4613      	mov	r3, r2
 81025f4:	687a      	ldr	r2, [r7, #4]
 81025f6:	68b9      	ldr	r1, [r7, #8]
 81025f8:	68f8      	ldr	r0, [r7, #12]
 81025fa:	f000 f805 	bl	8102608 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 81025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8102600:	4618      	mov	r0, r3
 8102602:	3730      	adds	r7, #48	; 0x30
 8102604:	46bd      	mov	sp, r7
 8102606:	bd80      	pop	{r7, pc}

08102608 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8102608:	b580      	push	{r7, lr}
 810260a:	b084      	sub	sp, #16
 810260c:	af00      	add	r7, sp, #0
 810260e:	60f8      	str	r0, [r7, #12]
 8102610:	60b9      	str	r1, [r7, #8]
 8102612:	607a      	str	r2, [r7, #4]
 8102614:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8102616:	68bb      	ldr	r3, [r7, #8]
 8102618:	2b00      	cmp	r3, #0
 810261a:	d103      	bne.n	8102624 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810261c:	69bb      	ldr	r3, [r7, #24]
 810261e:	69ba      	ldr	r2, [r7, #24]
 8102620:	601a      	str	r2, [r3, #0]
 8102622:	e002      	b.n	810262a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8102624:	69bb      	ldr	r3, [r7, #24]
 8102626:	687a      	ldr	r2, [r7, #4]
 8102628:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810262a:	69bb      	ldr	r3, [r7, #24]
 810262c:	68fa      	ldr	r2, [r7, #12]
 810262e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8102630:	69bb      	ldr	r3, [r7, #24]
 8102632:	68ba      	ldr	r2, [r7, #8]
 8102634:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8102636:	2101      	movs	r1, #1
 8102638:	69b8      	ldr	r0, [r7, #24]
 810263a:	f7ff ff05 	bl	8102448 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810263e:	69bb      	ldr	r3, [r7, #24]
 8102640:	78fa      	ldrb	r2, [r7, #3]
 8102642:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8102646:	bf00      	nop
 8102648:	3710      	adds	r7, #16
 810264a:	46bd      	mov	sp, r7
 810264c:	bd80      	pop	{r7, pc}
	...

08102650 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8102650:	b580      	push	{r7, lr}
 8102652:	b08e      	sub	sp, #56	; 0x38
 8102654:	af00      	add	r7, sp, #0
 8102656:	60f8      	str	r0, [r7, #12]
 8102658:	60b9      	str	r1, [r7, #8]
 810265a:	607a      	str	r2, [r7, #4]
 810265c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810265e:	2300      	movs	r3, #0
 8102660:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8102662:	68fb      	ldr	r3, [r7, #12]
 8102664:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8102666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102668:	2b00      	cmp	r3, #0
 810266a:	d10a      	bne.n	8102682 <xQueueGenericSend+0x32>
	__asm volatile
 810266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102670:	f383 8811 	msr	BASEPRI, r3
 8102674:	f3bf 8f6f 	isb	sy
 8102678:	f3bf 8f4f 	dsb	sy
 810267c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810267e:	bf00      	nop
 8102680:	e7fe      	b.n	8102680 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8102682:	68bb      	ldr	r3, [r7, #8]
 8102684:	2b00      	cmp	r3, #0
 8102686:	d103      	bne.n	8102690 <xQueueGenericSend+0x40>
 8102688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810268c:	2b00      	cmp	r3, #0
 810268e:	d101      	bne.n	8102694 <xQueueGenericSend+0x44>
 8102690:	2301      	movs	r3, #1
 8102692:	e000      	b.n	8102696 <xQueueGenericSend+0x46>
 8102694:	2300      	movs	r3, #0
 8102696:	2b00      	cmp	r3, #0
 8102698:	d10a      	bne.n	81026b0 <xQueueGenericSend+0x60>
	__asm volatile
 810269a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810269e:	f383 8811 	msr	BASEPRI, r3
 81026a2:	f3bf 8f6f 	isb	sy
 81026a6:	f3bf 8f4f 	dsb	sy
 81026aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 81026ac:	bf00      	nop
 81026ae:	e7fe      	b.n	81026ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81026b0:	683b      	ldr	r3, [r7, #0]
 81026b2:	2b02      	cmp	r3, #2
 81026b4:	d103      	bne.n	81026be <xQueueGenericSend+0x6e>
 81026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81026b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81026ba:	2b01      	cmp	r3, #1
 81026bc:	d101      	bne.n	81026c2 <xQueueGenericSend+0x72>
 81026be:	2301      	movs	r3, #1
 81026c0:	e000      	b.n	81026c4 <xQueueGenericSend+0x74>
 81026c2:	2300      	movs	r3, #0
 81026c4:	2b00      	cmp	r3, #0
 81026c6:	d10a      	bne.n	81026de <xQueueGenericSend+0x8e>
	__asm volatile
 81026c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81026cc:	f383 8811 	msr	BASEPRI, r3
 81026d0:	f3bf 8f6f 	isb	sy
 81026d4:	f3bf 8f4f 	dsb	sy
 81026d8:	623b      	str	r3, [r7, #32]
}
 81026da:	bf00      	nop
 81026dc:	e7fe      	b.n	81026dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81026de:	f001 f9e7 	bl	8103ab0 <xTaskGetSchedulerState>
 81026e2:	4603      	mov	r3, r0
 81026e4:	2b00      	cmp	r3, #0
 81026e6:	d102      	bne.n	81026ee <xQueueGenericSend+0x9e>
 81026e8:	687b      	ldr	r3, [r7, #4]
 81026ea:	2b00      	cmp	r3, #0
 81026ec:	d101      	bne.n	81026f2 <xQueueGenericSend+0xa2>
 81026ee:	2301      	movs	r3, #1
 81026f0:	e000      	b.n	81026f4 <xQueueGenericSend+0xa4>
 81026f2:	2300      	movs	r3, #0
 81026f4:	2b00      	cmp	r3, #0
 81026f6:	d10a      	bne.n	810270e <xQueueGenericSend+0xbe>
	__asm volatile
 81026f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81026fc:	f383 8811 	msr	BASEPRI, r3
 8102700:	f3bf 8f6f 	isb	sy
 8102704:	f3bf 8f4f 	dsb	sy
 8102708:	61fb      	str	r3, [r7, #28]
}
 810270a:	bf00      	nop
 810270c:	e7fe      	b.n	810270c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810270e:	f7ff fd79 	bl	8102204 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8102712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8102716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810271a:	429a      	cmp	r2, r3
 810271c:	d302      	bcc.n	8102724 <xQueueGenericSend+0xd4>
 810271e:	683b      	ldr	r3, [r7, #0]
 8102720:	2b02      	cmp	r3, #2
 8102722:	d129      	bne.n	8102778 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8102724:	683a      	ldr	r2, [r7, #0]
 8102726:	68b9      	ldr	r1, [r7, #8]
 8102728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810272a:	f000 fa0b 	bl	8102b44 <prvCopyDataToQueue>
 810272e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8102730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102734:	2b00      	cmp	r3, #0
 8102736:	d010      	beq.n	810275a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810273a:	3324      	adds	r3, #36	; 0x24
 810273c:	4618      	mov	r0, r3
 810273e:	f000 fff5 	bl	810372c <xTaskRemoveFromEventList>
 8102742:	4603      	mov	r3, r0
 8102744:	2b00      	cmp	r3, #0
 8102746:	d013      	beq.n	8102770 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8102748:	4b3f      	ldr	r3, [pc, #252]	; (8102848 <xQueueGenericSend+0x1f8>)
 810274a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810274e:	601a      	str	r2, [r3, #0]
 8102750:	f3bf 8f4f 	dsb	sy
 8102754:	f3bf 8f6f 	isb	sy
 8102758:	e00a      	b.n	8102770 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810275c:	2b00      	cmp	r3, #0
 810275e:	d007      	beq.n	8102770 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8102760:	4b39      	ldr	r3, [pc, #228]	; (8102848 <xQueueGenericSend+0x1f8>)
 8102762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102766:	601a      	str	r2, [r3, #0]
 8102768:	f3bf 8f4f 	dsb	sy
 810276c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8102770:	f7ff fd78 	bl	8102264 <vPortExitCritical>
				return pdPASS;
 8102774:	2301      	movs	r3, #1
 8102776:	e063      	b.n	8102840 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8102778:	687b      	ldr	r3, [r7, #4]
 810277a:	2b00      	cmp	r3, #0
 810277c:	d103      	bne.n	8102786 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810277e:	f7ff fd71 	bl	8102264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8102782:	2300      	movs	r3, #0
 8102784:	e05c      	b.n	8102840 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8102786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102788:	2b00      	cmp	r3, #0
 810278a:	d106      	bne.n	810279a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810278c:	f107 0314 	add.w	r3, r7, #20
 8102790:	4618      	mov	r0, r3
 8102792:	f001 f82f 	bl	81037f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8102796:	2301      	movs	r3, #1
 8102798:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810279a:	f7ff fd63 	bl	8102264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810279e:	f000 fd9b 	bl	81032d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81027a2:	f7ff fd2f 	bl	8102204 <vPortEnterCritical>
 81027a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81027a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81027ac:	b25b      	sxtb	r3, r3
 81027ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 81027b2:	d103      	bne.n	81027bc <xQueueGenericSend+0x16c>
 81027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81027b6:	2200      	movs	r2, #0
 81027b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81027be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81027c2:	b25b      	sxtb	r3, r3
 81027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81027c8:	d103      	bne.n	81027d2 <xQueueGenericSend+0x182>
 81027ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81027cc:	2200      	movs	r2, #0
 81027ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81027d2:	f7ff fd47 	bl	8102264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81027d6:	1d3a      	adds	r2, r7, #4
 81027d8:	f107 0314 	add.w	r3, r7, #20
 81027dc:	4611      	mov	r1, r2
 81027de:	4618      	mov	r0, r3
 81027e0:	f001 f81e 	bl	8103820 <xTaskCheckForTimeOut>
 81027e4:	4603      	mov	r3, r0
 81027e6:	2b00      	cmp	r3, #0
 81027e8:	d124      	bne.n	8102834 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 81027ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81027ec:	f000 faa2 	bl	8102d34 <prvIsQueueFull>
 81027f0:	4603      	mov	r3, r0
 81027f2:	2b00      	cmp	r3, #0
 81027f4:	d018      	beq.n	8102828 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 81027f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81027f8:	3310      	adds	r3, #16
 81027fa:	687a      	ldr	r2, [r7, #4]
 81027fc:	4611      	mov	r1, r2
 81027fe:	4618      	mov	r0, r3
 8102800:	f000 ff44 	bl	810368c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8102804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8102806:	f000 fa2d 	bl	8102c64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810280a:	f000 fd73 	bl	81032f4 <xTaskResumeAll>
 810280e:	4603      	mov	r3, r0
 8102810:	2b00      	cmp	r3, #0
 8102812:	f47f af7c 	bne.w	810270e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8102816:	4b0c      	ldr	r3, [pc, #48]	; (8102848 <xQueueGenericSend+0x1f8>)
 8102818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810281c:	601a      	str	r2, [r3, #0]
 810281e:	f3bf 8f4f 	dsb	sy
 8102822:	f3bf 8f6f 	isb	sy
 8102826:	e772      	b.n	810270e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8102828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810282a:	f000 fa1b 	bl	8102c64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810282e:	f000 fd61 	bl	81032f4 <xTaskResumeAll>
 8102832:	e76c      	b.n	810270e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8102834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8102836:	f000 fa15 	bl	8102c64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810283a:	f000 fd5b 	bl	81032f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810283e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8102840:	4618      	mov	r0, r3
 8102842:	3738      	adds	r7, #56	; 0x38
 8102844:	46bd      	mov	sp, r7
 8102846:	bd80      	pop	{r7, pc}
 8102848:	e000ed04 	.word	0xe000ed04

0810284c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810284c:	b580      	push	{r7, lr}
 810284e:	b090      	sub	sp, #64	; 0x40
 8102850:	af00      	add	r7, sp, #0
 8102852:	60f8      	str	r0, [r7, #12]
 8102854:	60b9      	str	r1, [r7, #8]
 8102856:	607a      	str	r2, [r7, #4]
 8102858:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810285a:	68fb      	ldr	r3, [r7, #12]
 810285c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 810285e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102860:	2b00      	cmp	r3, #0
 8102862:	d10a      	bne.n	810287a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8102864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102868:	f383 8811 	msr	BASEPRI, r3
 810286c:	f3bf 8f6f 	isb	sy
 8102870:	f3bf 8f4f 	dsb	sy
 8102874:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8102876:	bf00      	nop
 8102878:	e7fe      	b.n	8102878 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810287a:	68bb      	ldr	r3, [r7, #8]
 810287c:	2b00      	cmp	r3, #0
 810287e:	d103      	bne.n	8102888 <xQueueGenericSendFromISR+0x3c>
 8102880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102884:	2b00      	cmp	r3, #0
 8102886:	d101      	bne.n	810288c <xQueueGenericSendFromISR+0x40>
 8102888:	2301      	movs	r3, #1
 810288a:	e000      	b.n	810288e <xQueueGenericSendFromISR+0x42>
 810288c:	2300      	movs	r3, #0
 810288e:	2b00      	cmp	r3, #0
 8102890:	d10a      	bne.n	81028a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8102892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102896:	f383 8811 	msr	BASEPRI, r3
 810289a:	f3bf 8f6f 	isb	sy
 810289e:	f3bf 8f4f 	dsb	sy
 81028a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 81028a4:	bf00      	nop
 81028a6:	e7fe      	b.n	81028a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81028a8:	683b      	ldr	r3, [r7, #0]
 81028aa:	2b02      	cmp	r3, #2
 81028ac:	d103      	bne.n	81028b6 <xQueueGenericSendFromISR+0x6a>
 81028ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81028b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81028b2:	2b01      	cmp	r3, #1
 81028b4:	d101      	bne.n	81028ba <xQueueGenericSendFromISR+0x6e>
 81028b6:	2301      	movs	r3, #1
 81028b8:	e000      	b.n	81028bc <xQueueGenericSendFromISR+0x70>
 81028ba:	2300      	movs	r3, #0
 81028bc:	2b00      	cmp	r3, #0
 81028be:	d10a      	bne.n	81028d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 81028c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81028c4:	f383 8811 	msr	BASEPRI, r3
 81028c8:	f3bf 8f6f 	isb	sy
 81028cc:	f3bf 8f4f 	dsb	sy
 81028d0:	623b      	str	r3, [r7, #32]
}
 81028d2:	bf00      	nop
 81028d4:	e7fe      	b.n	81028d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81028d6:	f7ff fd77 	bl	81023c8 <vPortValidateInterruptPriority>
	__asm volatile
 81028da:	f3ef 8211 	mrs	r2, BASEPRI
 81028de:	f04f 0350 	mov.w	r3, #80	; 0x50
 81028e2:	f383 8811 	msr	BASEPRI, r3
 81028e6:	f3bf 8f6f 	isb	sy
 81028ea:	f3bf 8f4f 	dsb	sy
 81028ee:	61fa      	str	r2, [r7, #28]
 81028f0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 81028f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81028f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81028f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81028f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81028fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81028fe:	429a      	cmp	r2, r3
 8102900:	d302      	bcc.n	8102908 <xQueueGenericSendFromISR+0xbc>
 8102902:	683b      	ldr	r3, [r7, #0]
 8102904:	2b02      	cmp	r3, #2
 8102906:	d12f      	bne.n	8102968 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8102908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810290a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810290e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102916:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8102918:	683a      	ldr	r2, [r7, #0]
 810291a:	68b9      	ldr	r1, [r7, #8]
 810291c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 810291e:	f000 f911 	bl	8102b44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8102922:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8102926:	f1b3 3fff 	cmp.w	r3, #4294967295
 810292a:	d112      	bne.n	8102952 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810292c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102930:	2b00      	cmp	r3, #0
 8102932:	d016      	beq.n	8102962 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102936:	3324      	adds	r3, #36	; 0x24
 8102938:	4618      	mov	r0, r3
 810293a:	f000 fef7 	bl	810372c <xTaskRemoveFromEventList>
 810293e:	4603      	mov	r3, r0
 8102940:	2b00      	cmp	r3, #0
 8102942:	d00e      	beq.n	8102962 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8102944:	687b      	ldr	r3, [r7, #4]
 8102946:	2b00      	cmp	r3, #0
 8102948:	d00b      	beq.n	8102962 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810294a:	687b      	ldr	r3, [r7, #4]
 810294c:	2201      	movs	r2, #1
 810294e:	601a      	str	r2, [r3, #0]
 8102950:	e007      	b.n	8102962 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8102952:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8102956:	3301      	adds	r3, #1
 8102958:	b2db      	uxtb	r3, r3
 810295a:	b25a      	sxtb	r2, r3
 810295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810295e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8102962:	2301      	movs	r3, #1
 8102964:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8102966:	e001      	b.n	810296c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8102968:	2300      	movs	r3, #0
 810296a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810296c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810296e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8102970:	697b      	ldr	r3, [r7, #20]
 8102972:	f383 8811 	msr	BASEPRI, r3
}
 8102976:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8102978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810297a:	4618      	mov	r0, r3
 810297c:	3740      	adds	r7, #64	; 0x40
 810297e:	46bd      	mov	sp, r7
 8102980:	bd80      	pop	{r7, pc}
	...

08102984 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8102984:	b580      	push	{r7, lr}
 8102986:	b08c      	sub	sp, #48	; 0x30
 8102988:	af00      	add	r7, sp, #0
 810298a:	60f8      	str	r0, [r7, #12]
 810298c:	60b9      	str	r1, [r7, #8]
 810298e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8102990:	2300      	movs	r3, #0
 8102992:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8102994:	68fb      	ldr	r3, [r7, #12]
 8102996:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8102998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810299a:	2b00      	cmp	r3, #0
 810299c:	d10a      	bne.n	81029b4 <xQueueReceive+0x30>
	__asm volatile
 810299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 81029a2:	f383 8811 	msr	BASEPRI, r3
 81029a6:	f3bf 8f6f 	isb	sy
 81029aa:	f3bf 8f4f 	dsb	sy
 81029ae:	623b      	str	r3, [r7, #32]
}
 81029b0:	bf00      	nop
 81029b2:	e7fe      	b.n	81029b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81029b4:	68bb      	ldr	r3, [r7, #8]
 81029b6:	2b00      	cmp	r3, #0
 81029b8:	d103      	bne.n	81029c2 <xQueueReceive+0x3e>
 81029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81029be:	2b00      	cmp	r3, #0
 81029c0:	d101      	bne.n	81029c6 <xQueueReceive+0x42>
 81029c2:	2301      	movs	r3, #1
 81029c4:	e000      	b.n	81029c8 <xQueueReceive+0x44>
 81029c6:	2300      	movs	r3, #0
 81029c8:	2b00      	cmp	r3, #0
 81029ca:	d10a      	bne.n	81029e2 <xQueueReceive+0x5e>
	__asm volatile
 81029cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81029d0:	f383 8811 	msr	BASEPRI, r3
 81029d4:	f3bf 8f6f 	isb	sy
 81029d8:	f3bf 8f4f 	dsb	sy
 81029dc:	61fb      	str	r3, [r7, #28]
}
 81029de:	bf00      	nop
 81029e0:	e7fe      	b.n	81029e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81029e2:	f001 f865 	bl	8103ab0 <xTaskGetSchedulerState>
 81029e6:	4603      	mov	r3, r0
 81029e8:	2b00      	cmp	r3, #0
 81029ea:	d102      	bne.n	81029f2 <xQueueReceive+0x6e>
 81029ec:	687b      	ldr	r3, [r7, #4]
 81029ee:	2b00      	cmp	r3, #0
 81029f0:	d101      	bne.n	81029f6 <xQueueReceive+0x72>
 81029f2:	2301      	movs	r3, #1
 81029f4:	e000      	b.n	81029f8 <xQueueReceive+0x74>
 81029f6:	2300      	movs	r3, #0
 81029f8:	2b00      	cmp	r3, #0
 81029fa:	d10a      	bne.n	8102a12 <xQueueReceive+0x8e>
	__asm volatile
 81029fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102a00:	f383 8811 	msr	BASEPRI, r3
 8102a04:	f3bf 8f6f 	isb	sy
 8102a08:	f3bf 8f4f 	dsb	sy
 8102a0c:	61bb      	str	r3, [r7, #24]
}
 8102a0e:	bf00      	nop
 8102a10:	e7fe      	b.n	8102a10 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8102a12:	f7ff fbf7 	bl	8102204 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102a1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8102a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102a1e:	2b00      	cmp	r3, #0
 8102a20:	d01f      	beq.n	8102a62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8102a22:	68b9      	ldr	r1, [r7, #8]
 8102a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102a26:	f000 f8f7 	bl	8102c18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8102a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102a2c:	1e5a      	subs	r2, r3, #1
 8102a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102a30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8102a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102a34:	691b      	ldr	r3, [r3, #16]
 8102a36:	2b00      	cmp	r3, #0
 8102a38:	d00f      	beq.n	8102a5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8102a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102a3c:	3310      	adds	r3, #16
 8102a3e:	4618      	mov	r0, r3
 8102a40:	f000 fe74 	bl	810372c <xTaskRemoveFromEventList>
 8102a44:	4603      	mov	r3, r0
 8102a46:	2b00      	cmp	r3, #0
 8102a48:	d007      	beq.n	8102a5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8102a4a:	4b3d      	ldr	r3, [pc, #244]	; (8102b40 <xQueueReceive+0x1bc>)
 8102a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102a50:	601a      	str	r2, [r3, #0]
 8102a52:	f3bf 8f4f 	dsb	sy
 8102a56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8102a5a:	f7ff fc03 	bl	8102264 <vPortExitCritical>
				return pdPASS;
 8102a5e:	2301      	movs	r3, #1
 8102a60:	e069      	b.n	8102b36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8102a62:	687b      	ldr	r3, [r7, #4]
 8102a64:	2b00      	cmp	r3, #0
 8102a66:	d103      	bne.n	8102a70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8102a68:	f7ff fbfc 	bl	8102264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8102a6c:	2300      	movs	r3, #0
 8102a6e:	e062      	b.n	8102b36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8102a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102a72:	2b00      	cmp	r3, #0
 8102a74:	d106      	bne.n	8102a84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8102a76:	f107 0310 	add.w	r3, r7, #16
 8102a7a:	4618      	mov	r0, r3
 8102a7c:	f000 feba 	bl	81037f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8102a80:	2301      	movs	r3, #1
 8102a82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8102a84:	f7ff fbee 	bl	8102264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8102a88:	f000 fc26 	bl	81032d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8102a8c:	f7ff fbba 	bl	8102204 <vPortEnterCritical>
 8102a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102a92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8102a96:	b25b      	sxtb	r3, r3
 8102a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102a9c:	d103      	bne.n	8102aa6 <xQueueReceive+0x122>
 8102a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102aa0:	2200      	movs	r2, #0
 8102aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8102aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102aac:	b25b      	sxtb	r3, r3
 8102aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102ab2:	d103      	bne.n	8102abc <xQueueReceive+0x138>
 8102ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102ab6:	2200      	movs	r2, #0
 8102ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8102abc:	f7ff fbd2 	bl	8102264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8102ac0:	1d3a      	adds	r2, r7, #4
 8102ac2:	f107 0310 	add.w	r3, r7, #16
 8102ac6:	4611      	mov	r1, r2
 8102ac8:	4618      	mov	r0, r3
 8102aca:	f000 fea9 	bl	8103820 <xTaskCheckForTimeOut>
 8102ace:	4603      	mov	r3, r0
 8102ad0:	2b00      	cmp	r3, #0
 8102ad2:	d123      	bne.n	8102b1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8102ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102ad6:	f000 f917 	bl	8102d08 <prvIsQueueEmpty>
 8102ada:	4603      	mov	r3, r0
 8102adc:	2b00      	cmp	r3, #0
 8102ade:	d017      	beq.n	8102b10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8102ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102ae2:	3324      	adds	r3, #36	; 0x24
 8102ae4:	687a      	ldr	r2, [r7, #4]
 8102ae6:	4611      	mov	r1, r2
 8102ae8:	4618      	mov	r0, r3
 8102aea:	f000 fdcf 	bl	810368c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8102aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102af0:	f000 f8b8 	bl	8102c64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8102af4:	f000 fbfe 	bl	81032f4 <xTaskResumeAll>
 8102af8:	4603      	mov	r3, r0
 8102afa:	2b00      	cmp	r3, #0
 8102afc:	d189      	bne.n	8102a12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8102afe:	4b10      	ldr	r3, [pc, #64]	; (8102b40 <xQueueReceive+0x1bc>)
 8102b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102b04:	601a      	str	r2, [r3, #0]
 8102b06:	f3bf 8f4f 	dsb	sy
 8102b0a:	f3bf 8f6f 	isb	sy
 8102b0e:	e780      	b.n	8102a12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8102b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102b12:	f000 f8a7 	bl	8102c64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8102b16:	f000 fbed 	bl	81032f4 <xTaskResumeAll>
 8102b1a:	e77a      	b.n	8102a12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8102b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102b1e:	f000 f8a1 	bl	8102c64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8102b22:	f000 fbe7 	bl	81032f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8102b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102b28:	f000 f8ee 	bl	8102d08 <prvIsQueueEmpty>
 8102b2c:	4603      	mov	r3, r0
 8102b2e:	2b00      	cmp	r3, #0
 8102b30:	f43f af6f 	beq.w	8102a12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8102b34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8102b36:	4618      	mov	r0, r3
 8102b38:	3730      	adds	r7, #48	; 0x30
 8102b3a:	46bd      	mov	sp, r7
 8102b3c:	bd80      	pop	{r7, pc}
 8102b3e:	bf00      	nop
 8102b40:	e000ed04 	.word	0xe000ed04

08102b44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8102b44:	b580      	push	{r7, lr}
 8102b46:	b086      	sub	sp, #24
 8102b48:	af00      	add	r7, sp, #0
 8102b4a:	60f8      	str	r0, [r7, #12]
 8102b4c:	60b9      	str	r1, [r7, #8]
 8102b4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8102b50:	2300      	movs	r3, #0
 8102b52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102b54:	68fb      	ldr	r3, [r7, #12]
 8102b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102b58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8102b5a:	68fb      	ldr	r3, [r7, #12]
 8102b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102b5e:	2b00      	cmp	r3, #0
 8102b60:	d10d      	bne.n	8102b7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8102b62:	68fb      	ldr	r3, [r7, #12]
 8102b64:	681b      	ldr	r3, [r3, #0]
 8102b66:	2b00      	cmp	r3, #0
 8102b68:	d14d      	bne.n	8102c06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8102b6a:	68fb      	ldr	r3, [r7, #12]
 8102b6c:	689b      	ldr	r3, [r3, #8]
 8102b6e:	4618      	mov	r0, r3
 8102b70:	f000 ffbc 	bl	8103aec <xTaskPriorityDisinherit>
 8102b74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8102b76:	68fb      	ldr	r3, [r7, #12]
 8102b78:	2200      	movs	r2, #0
 8102b7a:	609a      	str	r2, [r3, #8]
 8102b7c:	e043      	b.n	8102c06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8102b7e:	687b      	ldr	r3, [r7, #4]
 8102b80:	2b00      	cmp	r3, #0
 8102b82:	d119      	bne.n	8102bb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8102b84:	68fb      	ldr	r3, [r7, #12]
 8102b86:	6858      	ldr	r0, [r3, #4]
 8102b88:	68fb      	ldr	r3, [r7, #12]
 8102b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102b8c:	461a      	mov	r2, r3
 8102b8e:	68b9      	ldr	r1, [r7, #8]
 8102b90:	f001 fbe2 	bl	8104358 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8102b94:	68fb      	ldr	r3, [r7, #12]
 8102b96:	685a      	ldr	r2, [r3, #4]
 8102b98:	68fb      	ldr	r3, [r7, #12]
 8102b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102b9c:	441a      	add	r2, r3
 8102b9e:	68fb      	ldr	r3, [r7, #12]
 8102ba0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8102ba2:	68fb      	ldr	r3, [r7, #12]
 8102ba4:	685a      	ldr	r2, [r3, #4]
 8102ba6:	68fb      	ldr	r3, [r7, #12]
 8102ba8:	689b      	ldr	r3, [r3, #8]
 8102baa:	429a      	cmp	r2, r3
 8102bac:	d32b      	bcc.n	8102c06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8102bae:	68fb      	ldr	r3, [r7, #12]
 8102bb0:	681a      	ldr	r2, [r3, #0]
 8102bb2:	68fb      	ldr	r3, [r7, #12]
 8102bb4:	605a      	str	r2, [r3, #4]
 8102bb6:	e026      	b.n	8102c06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8102bb8:	68fb      	ldr	r3, [r7, #12]
 8102bba:	68d8      	ldr	r0, [r3, #12]
 8102bbc:	68fb      	ldr	r3, [r7, #12]
 8102bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102bc0:	461a      	mov	r2, r3
 8102bc2:	68b9      	ldr	r1, [r7, #8]
 8102bc4:	f001 fbc8 	bl	8104358 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8102bc8:	68fb      	ldr	r3, [r7, #12]
 8102bca:	68da      	ldr	r2, [r3, #12]
 8102bcc:	68fb      	ldr	r3, [r7, #12]
 8102bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102bd0:	425b      	negs	r3, r3
 8102bd2:	441a      	add	r2, r3
 8102bd4:	68fb      	ldr	r3, [r7, #12]
 8102bd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8102bd8:	68fb      	ldr	r3, [r7, #12]
 8102bda:	68da      	ldr	r2, [r3, #12]
 8102bdc:	68fb      	ldr	r3, [r7, #12]
 8102bde:	681b      	ldr	r3, [r3, #0]
 8102be0:	429a      	cmp	r2, r3
 8102be2:	d207      	bcs.n	8102bf4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8102be4:	68fb      	ldr	r3, [r7, #12]
 8102be6:	689a      	ldr	r2, [r3, #8]
 8102be8:	68fb      	ldr	r3, [r7, #12]
 8102bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102bec:	425b      	negs	r3, r3
 8102bee:	441a      	add	r2, r3
 8102bf0:	68fb      	ldr	r3, [r7, #12]
 8102bf2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8102bf4:	687b      	ldr	r3, [r7, #4]
 8102bf6:	2b02      	cmp	r3, #2
 8102bf8:	d105      	bne.n	8102c06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8102bfa:	693b      	ldr	r3, [r7, #16]
 8102bfc:	2b00      	cmp	r3, #0
 8102bfe:	d002      	beq.n	8102c06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8102c00:	693b      	ldr	r3, [r7, #16]
 8102c02:	3b01      	subs	r3, #1
 8102c04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8102c06:	693b      	ldr	r3, [r7, #16]
 8102c08:	1c5a      	adds	r2, r3, #1
 8102c0a:	68fb      	ldr	r3, [r7, #12]
 8102c0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8102c0e:	697b      	ldr	r3, [r7, #20]
}
 8102c10:	4618      	mov	r0, r3
 8102c12:	3718      	adds	r7, #24
 8102c14:	46bd      	mov	sp, r7
 8102c16:	bd80      	pop	{r7, pc}

08102c18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8102c18:	b580      	push	{r7, lr}
 8102c1a:	b082      	sub	sp, #8
 8102c1c:	af00      	add	r7, sp, #0
 8102c1e:	6078      	str	r0, [r7, #4]
 8102c20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8102c22:	687b      	ldr	r3, [r7, #4]
 8102c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102c26:	2b00      	cmp	r3, #0
 8102c28:	d018      	beq.n	8102c5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8102c2a:	687b      	ldr	r3, [r7, #4]
 8102c2c:	68da      	ldr	r2, [r3, #12]
 8102c2e:	687b      	ldr	r3, [r7, #4]
 8102c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102c32:	441a      	add	r2, r3
 8102c34:	687b      	ldr	r3, [r7, #4]
 8102c36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8102c38:	687b      	ldr	r3, [r7, #4]
 8102c3a:	68da      	ldr	r2, [r3, #12]
 8102c3c:	687b      	ldr	r3, [r7, #4]
 8102c3e:	689b      	ldr	r3, [r3, #8]
 8102c40:	429a      	cmp	r2, r3
 8102c42:	d303      	bcc.n	8102c4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	681a      	ldr	r2, [r3, #0]
 8102c48:	687b      	ldr	r3, [r7, #4]
 8102c4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8102c4c:	687b      	ldr	r3, [r7, #4]
 8102c4e:	68d9      	ldr	r1, [r3, #12]
 8102c50:	687b      	ldr	r3, [r7, #4]
 8102c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102c54:	461a      	mov	r2, r3
 8102c56:	6838      	ldr	r0, [r7, #0]
 8102c58:	f001 fb7e 	bl	8104358 <memcpy>
	}
}
 8102c5c:	bf00      	nop
 8102c5e:	3708      	adds	r7, #8
 8102c60:	46bd      	mov	sp, r7
 8102c62:	bd80      	pop	{r7, pc}

08102c64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8102c64:	b580      	push	{r7, lr}
 8102c66:	b084      	sub	sp, #16
 8102c68:	af00      	add	r7, sp, #0
 8102c6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8102c6c:	f7ff faca 	bl	8102204 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8102c70:	687b      	ldr	r3, [r7, #4]
 8102c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102c76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8102c78:	e011      	b.n	8102c9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8102c7a:	687b      	ldr	r3, [r7, #4]
 8102c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102c7e:	2b00      	cmp	r3, #0
 8102c80:	d012      	beq.n	8102ca8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102c82:	687b      	ldr	r3, [r7, #4]
 8102c84:	3324      	adds	r3, #36	; 0x24
 8102c86:	4618      	mov	r0, r3
 8102c88:	f000 fd50 	bl	810372c <xTaskRemoveFromEventList>
 8102c8c:	4603      	mov	r3, r0
 8102c8e:	2b00      	cmp	r3, #0
 8102c90:	d001      	beq.n	8102c96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8102c92:	f000 fe27 	bl	81038e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8102c96:	7bfb      	ldrb	r3, [r7, #15]
 8102c98:	3b01      	subs	r3, #1
 8102c9a:	b2db      	uxtb	r3, r3
 8102c9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8102c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102ca2:	2b00      	cmp	r3, #0
 8102ca4:	dce9      	bgt.n	8102c7a <prvUnlockQueue+0x16>
 8102ca6:	e000      	b.n	8102caa <prvUnlockQueue+0x46>
					break;
 8102ca8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8102caa:	687b      	ldr	r3, [r7, #4]
 8102cac:	22ff      	movs	r2, #255	; 0xff
 8102cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8102cb2:	f7ff fad7 	bl	8102264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8102cb6:	f7ff faa5 	bl	8102204 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8102cba:	687b      	ldr	r3, [r7, #4]
 8102cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8102cc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8102cc2:	e011      	b.n	8102ce8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8102cc4:	687b      	ldr	r3, [r7, #4]
 8102cc6:	691b      	ldr	r3, [r3, #16]
 8102cc8:	2b00      	cmp	r3, #0
 8102cca:	d012      	beq.n	8102cf2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8102ccc:	687b      	ldr	r3, [r7, #4]
 8102cce:	3310      	adds	r3, #16
 8102cd0:	4618      	mov	r0, r3
 8102cd2:	f000 fd2b 	bl	810372c <xTaskRemoveFromEventList>
 8102cd6:	4603      	mov	r3, r0
 8102cd8:	2b00      	cmp	r3, #0
 8102cda:	d001      	beq.n	8102ce0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8102cdc:	f000 fe02 	bl	81038e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8102ce0:	7bbb      	ldrb	r3, [r7, #14]
 8102ce2:	3b01      	subs	r3, #1
 8102ce4:	b2db      	uxtb	r3, r3
 8102ce6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8102ce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8102cec:	2b00      	cmp	r3, #0
 8102cee:	dce9      	bgt.n	8102cc4 <prvUnlockQueue+0x60>
 8102cf0:	e000      	b.n	8102cf4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8102cf2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8102cf4:	687b      	ldr	r3, [r7, #4]
 8102cf6:	22ff      	movs	r2, #255	; 0xff
 8102cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8102cfc:	f7ff fab2 	bl	8102264 <vPortExitCritical>
}
 8102d00:	bf00      	nop
 8102d02:	3710      	adds	r7, #16
 8102d04:	46bd      	mov	sp, r7
 8102d06:	bd80      	pop	{r7, pc}

08102d08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8102d08:	b580      	push	{r7, lr}
 8102d0a:	b084      	sub	sp, #16
 8102d0c:	af00      	add	r7, sp, #0
 8102d0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8102d10:	f7ff fa78 	bl	8102204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102d18:	2b00      	cmp	r3, #0
 8102d1a:	d102      	bne.n	8102d22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8102d1c:	2301      	movs	r3, #1
 8102d1e:	60fb      	str	r3, [r7, #12]
 8102d20:	e001      	b.n	8102d26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8102d22:	2300      	movs	r3, #0
 8102d24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8102d26:	f7ff fa9d 	bl	8102264 <vPortExitCritical>

	return xReturn;
 8102d2a:	68fb      	ldr	r3, [r7, #12]
}
 8102d2c:	4618      	mov	r0, r3
 8102d2e:	3710      	adds	r7, #16
 8102d30:	46bd      	mov	sp, r7
 8102d32:	bd80      	pop	{r7, pc}

08102d34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8102d34:	b580      	push	{r7, lr}
 8102d36:	b084      	sub	sp, #16
 8102d38:	af00      	add	r7, sp, #0
 8102d3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8102d3c:	f7ff fa62 	bl	8102204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8102d40:	687b      	ldr	r3, [r7, #4]
 8102d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8102d44:	687b      	ldr	r3, [r7, #4]
 8102d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102d48:	429a      	cmp	r2, r3
 8102d4a:	d102      	bne.n	8102d52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8102d4c:	2301      	movs	r3, #1
 8102d4e:	60fb      	str	r3, [r7, #12]
 8102d50:	e001      	b.n	8102d56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8102d52:	2300      	movs	r3, #0
 8102d54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8102d56:	f7ff fa85 	bl	8102264 <vPortExitCritical>

	return xReturn;
 8102d5a:	68fb      	ldr	r3, [r7, #12]
}
 8102d5c:	4618      	mov	r0, r3
 8102d5e:	3710      	adds	r7, #16
 8102d60:	46bd      	mov	sp, r7
 8102d62:	bd80      	pop	{r7, pc}

08102d64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8102d64:	b480      	push	{r7}
 8102d66:	b085      	sub	sp, #20
 8102d68:	af00      	add	r7, sp, #0
 8102d6a:	6078      	str	r0, [r7, #4]
 8102d6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8102d6e:	2300      	movs	r3, #0
 8102d70:	60fb      	str	r3, [r7, #12]
 8102d72:	e014      	b.n	8102d9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8102d74:	4a0f      	ldr	r2, [pc, #60]	; (8102db4 <vQueueAddToRegistry+0x50>)
 8102d76:	68fb      	ldr	r3, [r7, #12]
 8102d78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8102d7c:	2b00      	cmp	r3, #0
 8102d7e:	d10b      	bne.n	8102d98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8102d80:	490c      	ldr	r1, [pc, #48]	; (8102db4 <vQueueAddToRegistry+0x50>)
 8102d82:	68fb      	ldr	r3, [r7, #12]
 8102d84:	683a      	ldr	r2, [r7, #0]
 8102d86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8102d8a:	4a0a      	ldr	r2, [pc, #40]	; (8102db4 <vQueueAddToRegistry+0x50>)
 8102d8c:	68fb      	ldr	r3, [r7, #12]
 8102d8e:	00db      	lsls	r3, r3, #3
 8102d90:	4413      	add	r3, r2
 8102d92:	687a      	ldr	r2, [r7, #4]
 8102d94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8102d96:	e006      	b.n	8102da6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8102d98:	68fb      	ldr	r3, [r7, #12]
 8102d9a:	3301      	adds	r3, #1
 8102d9c:	60fb      	str	r3, [r7, #12]
 8102d9e:	68fb      	ldr	r3, [r7, #12]
 8102da0:	2b07      	cmp	r3, #7
 8102da2:	d9e7      	bls.n	8102d74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8102da4:	bf00      	nop
 8102da6:	bf00      	nop
 8102da8:	3714      	adds	r7, #20
 8102daa:	46bd      	mov	sp, r7
 8102dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102db0:	4770      	bx	lr
 8102db2:	bf00      	nop
 8102db4:	1000448c 	.word	0x1000448c

08102db8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8102db8:	b580      	push	{r7, lr}
 8102dba:	b086      	sub	sp, #24
 8102dbc:	af00      	add	r7, sp, #0
 8102dbe:	60f8      	str	r0, [r7, #12]
 8102dc0:	60b9      	str	r1, [r7, #8]
 8102dc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8102dc4:	68fb      	ldr	r3, [r7, #12]
 8102dc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8102dc8:	f7ff fa1c 	bl	8102204 <vPortEnterCritical>
 8102dcc:	697b      	ldr	r3, [r7, #20]
 8102dce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8102dd2:	b25b      	sxtb	r3, r3
 8102dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102dd8:	d103      	bne.n	8102de2 <vQueueWaitForMessageRestricted+0x2a>
 8102dda:	697b      	ldr	r3, [r7, #20]
 8102ddc:	2200      	movs	r2, #0
 8102dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8102de2:	697b      	ldr	r3, [r7, #20]
 8102de4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102de8:	b25b      	sxtb	r3, r3
 8102dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102dee:	d103      	bne.n	8102df8 <vQueueWaitForMessageRestricted+0x40>
 8102df0:	697b      	ldr	r3, [r7, #20]
 8102df2:	2200      	movs	r2, #0
 8102df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8102df8:	f7ff fa34 	bl	8102264 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8102dfc:	697b      	ldr	r3, [r7, #20]
 8102dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102e00:	2b00      	cmp	r3, #0
 8102e02:	d106      	bne.n	8102e12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8102e04:	697b      	ldr	r3, [r7, #20]
 8102e06:	3324      	adds	r3, #36	; 0x24
 8102e08:	687a      	ldr	r2, [r7, #4]
 8102e0a:	68b9      	ldr	r1, [r7, #8]
 8102e0c:	4618      	mov	r0, r3
 8102e0e:	f000 fc61 	bl	81036d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8102e12:	6978      	ldr	r0, [r7, #20]
 8102e14:	f7ff ff26 	bl	8102c64 <prvUnlockQueue>
	}
 8102e18:	bf00      	nop
 8102e1a:	3718      	adds	r7, #24
 8102e1c:	46bd      	mov	sp, r7
 8102e1e:	bd80      	pop	{r7, pc}

08102e20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8102e20:	b580      	push	{r7, lr}
 8102e22:	b08e      	sub	sp, #56	; 0x38
 8102e24:	af04      	add	r7, sp, #16
 8102e26:	60f8      	str	r0, [r7, #12]
 8102e28:	60b9      	str	r1, [r7, #8]
 8102e2a:	607a      	str	r2, [r7, #4]
 8102e2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8102e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102e30:	2b00      	cmp	r3, #0
 8102e32:	d10a      	bne.n	8102e4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8102e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102e38:	f383 8811 	msr	BASEPRI, r3
 8102e3c:	f3bf 8f6f 	isb	sy
 8102e40:	f3bf 8f4f 	dsb	sy
 8102e44:	623b      	str	r3, [r7, #32]
}
 8102e46:	bf00      	nop
 8102e48:	e7fe      	b.n	8102e48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8102e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102e4c:	2b00      	cmp	r3, #0
 8102e4e:	d10a      	bne.n	8102e66 <xTaskCreateStatic+0x46>
	__asm volatile
 8102e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102e54:	f383 8811 	msr	BASEPRI, r3
 8102e58:	f3bf 8f6f 	isb	sy
 8102e5c:	f3bf 8f4f 	dsb	sy
 8102e60:	61fb      	str	r3, [r7, #28]
}
 8102e62:	bf00      	nop
 8102e64:	e7fe      	b.n	8102e64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8102e66:	23bc      	movs	r3, #188	; 0xbc
 8102e68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8102e6a:	693b      	ldr	r3, [r7, #16]
 8102e6c:	2bbc      	cmp	r3, #188	; 0xbc
 8102e6e:	d00a      	beq.n	8102e86 <xTaskCreateStatic+0x66>
	__asm volatile
 8102e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102e74:	f383 8811 	msr	BASEPRI, r3
 8102e78:	f3bf 8f6f 	isb	sy
 8102e7c:	f3bf 8f4f 	dsb	sy
 8102e80:	61bb      	str	r3, [r7, #24]
}
 8102e82:	bf00      	nop
 8102e84:	e7fe      	b.n	8102e84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8102e86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8102e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102e8a:	2b00      	cmp	r3, #0
 8102e8c:	d01e      	beq.n	8102ecc <xTaskCreateStatic+0xac>
 8102e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102e90:	2b00      	cmp	r3, #0
 8102e92:	d01b      	beq.n	8102ecc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8102e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102e96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8102e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102e9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8102e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102ea0:	2202      	movs	r2, #2
 8102ea2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8102ea6:	2300      	movs	r3, #0
 8102ea8:	9303      	str	r3, [sp, #12]
 8102eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102eac:	9302      	str	r3, [sp, #8]
 8102eae:	f107 0314 	add.w	r3, r7, #20
 8102eb2:	9301      	str	r3, [sp, #4]
 8102eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102eb6:	9300      	str	r3, [sp, #0]
 8102eb8:	683b      	ldr	r3, [r7, #0]
 8102eba:	687a      	ldr	r2, [r7, #4]
 8102ebc:	68b9      	ldr	r1, [r7, #8]
 8102ebe:	68f8      	ldr	r0, [r7, #12]
 8102ec0:	f000 f850 	bl	8102f64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8102ec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8102ec6:	f000 f8f3 	bl	81030b0 <prvAddNewTaskToReadyList>
 8102eca:	e001      	b.n	8102ed0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8102ecc:	2300      	movs	r3, #0
 8102ece:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8102ed0:	697b      	ldr	r3, [r7, #20]
	}
 8102ed2:	4618      	mov	r0, r3
 8102ed4:	3728      	adds	r7, #40	; 0x28
 8102ed6:	46bd      	mov	sp, r7
 8102ed8:	bd80      	pop	{r7, pc}

08102eda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8102eda:	b580      	push	{r7, lr}
 8102edc:	b08c      	sub	sp, #48	; 0x30
 8102ede:	af04      	add	r7, sp, #16
 8102ee0:	60f8      	str	r0, [r7, #12]
 8102ee2:	60b9      	str	r1, [r7, #8]
 8102ee4:	603b      	str	r3, [r7, #0]
 8102ee6:	4613      	mov	r3, r2
 8102ee8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8102eea:	88fb      	ldrh	r3, [r7, #6]
 8102eec:	009b      	lsls	r3, r3, #2
 8102eee:	4618      	mov	r0, r3
 8102ef0:	f7fe fdbc 	bl	8101a6c <pvPortMalloc>
 8102ef4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8102ef6:	697b      	ldr	r3, [r7, #20]
 8102ef8:	2b00      	cmp	r3, #0
 8102efa:	d00e      	beq.n	8102f1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8102efc:	20bc      	movs	r0, #188	; 0xbc
 8102efe:	f7fe fdb5 	bl	8101a6c <pvPortMalloc>
 8102f02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8102f04:	69fb      	ldr	r3, [r7, #28]
 8102f06:	2b00      	cmp	r3, #0
 8102f08:	d003      	beq.n	8102f12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8102f0a:	69fb      	ldr	r3, [r7, #28]
 8102f0c:	697a      	ldr	r2, [r7, #20]
 8102f0e:	631a      	str	r2, [r3, #48]	; 0x30
 8102f10:	e005      	b.n	8102f1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8102f12:	6978      	ldr	r0, [r7, #20]
 8102f14:	f7fe fe76 	bl	8101c04 <vPortFree>
 8102f18:	e001      	b.n	8102f1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8102f1a:	2300      	movs	r3, #0
 8102f1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8102f1e:	69fb      	ldr	r3, [r7, #28]
 8102f20:	2b00      	cmp	r3, #0
 8102f22:	d017      	beq.n	8102f54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8102f24:	69fb      	ldr	r3, [r7, #28]
 8102f26:	2200      	movs	r2, #0
 8102f28:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8102f2c:	88fa      	ldrh	r2, [r7, #6]
 8102f2e:	2300      	movs	r3, #0
 8102f30:	9303      	str	r3, [sp, #12]
 8102f32:	69fb      	ldr	r3, [r7, #28]
 8102f34:	9302      	str	r3, [sp, #8]
 8102f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102f38:	9301      	str	r3, [sp, #4]
 8102f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102f3c:	9300      	str	r3, [sp, #0]
 8102f3e:	683b      	ldr	r3, [r7, #0]
 8102f40:	68b9      	ldr	r1, [r7, #8]
 8102f42:	68f8      	ldr	r0, [r7, #12]
 8102f44:	f000 f80e 	bl	8102f64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8102f48:	69f8      	ldr	r0, [r7, #28]
 8102f4a:	f000 f8b1 	bl	81030b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8102f4e:	2301      	movs	r3, #1
 8102f50:	61bb      	str	r3, [r7, #24]
 8102f52:	e002      	b.n	8102f5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8102f54:	f04f 33ff 	mov.w	r3, #4294967295
 8102f58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8102f5a:	69bb      	ldr	r3, [r7, #24]
	}
 8102f5c:	4618      	mov	r0, r3
 8102f5e:	3720      	adds	r7, #32
 8102f60:	46bd      	mov	sp, r7
 8102f62:	bd80      	pop	{r7, pc}

08102f64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8102f64:	b580      	push	{r7, lr}
 8102f66:	b088      	sub	sp, #32
 8102f68:	af00      	add	r7, sp, #0
 8102f6a:	60f8      	str	r0, [r7, #12]
 8102f6c:	60b9      	str	r1, [r7, #8]
 8102f6e:	607a      	str	r2, [r7, #4]
 8102f70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8102f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102f74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8102f76:	687b      	ldr	r3, [r7, #4]
 8102f78:	009b      	lsls	r3, r3, #2
 8102f7a:	461a      	mov	r2, r3
 8102f7c:	21a5      	movs	r1, #165	; 0xa5
 8102f7e:	f001 f9f9 	bl	8104374 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8102f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8102f8c:	3b01      	subs	r3, #1
 8102f8e:	009b      	lsls	r3, r3, #2
 8102f90:	4413      	add	r3, r2
 8102f92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8102f94:	69bb      	ldr	r3, [r7, #24]
 8102f96:	f023 0307 	bic.w	r3, r3, #7
 8102f9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8102f9c:	69bb      	ldr	r3, [r7, #24]
 8102f9e:	f003 0307 	and.w	r3, r3, #7
 8102fa2:	2b00      	cmp	r3, #0
 8102fa4:	d00a      	beq.n	8102fbc <prvInitialiseNewTask+0x58>
	__asm volatile
 8102fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102faa:	f383 8811 	msr	BASEPRI, r3
 8102fae:	f3bf 8f6f 	isb	sy
 8102fb2:	f3bf 8f4f 	dsb	sy
 8102fb6:	617b      	str	r3, [r7, #20]
}
 8102fb8:	bf00      	nop
 8102fba:	e7fe      	b.n	8102fba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8102fbc:	68bb      	ldr	r3, [r7, #8]
 8102fbe:	2b00      	cmp	r3, #0
 8102fc0:	d01f      	beq.n	8103002 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8102fc2:	2300      	movs	r3, #0
 8102fc4:	61fb      	str	r3, [r7, #28]
 8102fc6:	e012      	b.n	8102fee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8102fc8:	68ba      	ldr	r2, [r7, #8]
 8102fca:	69fb      	ldr	r3, [r7, #28]
 8102fcc:	4413      	add	r3, r2
 8102fce:	7819      	ldrb	r1, [r3, #0]
 8102fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8102fd2:	69fb      	ldr	r3, [r7, #28]
 8102fd4:	4413      	add	r3, r2
 8102fd6:	3334      	adds	r3, #52	; 0x34
 8102fd8:	460a      	mov	r2, r1
 8102fda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8102fdc:	68ba      	ldr	r2, [r7, #8]
 8102fde:	69fb      	ldr	r3, [r7, #28]
 8102fe0:	4413      	add	r3, r2
 8102fe2:	781b      	ldrb	r3, [r3, #0]
 8102fe4:	2b00      	cmp	r3, #0
 8102fe6:	d006      	beq.n	8102ff6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8102fe8:	69fb      	ldr	r3, [r7, #28]
 8102fea:	3301      	adds	r3, #1
 8102fec:	61fb      	str	r3, [r7, #28]
 8102fee:	69fb      	ldr	r3, [r7, #28]
 8102ff0:	2b0f      	cmp	r3, #15
 8102ff2:	d9e9      	bls.n	8102fc8 <prvInitialiseNewTask+0x64>
 8102ff4:	e000      	b.n	8102ff8 <prvInitialiseNewTask+0x94>
			{
				break;
 8102ff6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8102ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102ffa:	2200      	movs	r2, #0
 8102ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8103000:	e003      	b.n	810300a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8103002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103004:	2200      	movs	r2, #0
 8103006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810300c:	2b37      	cmp	r3, #55	; 0x37
 810300e:	d901      	bls.n	8103014 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8103010:	2337      	movs	r3, #55	; 0x37
 8103012:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8103014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8103018:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810301c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810301e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8103020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103022:	2200      	movs	r2, #0
 8103024:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8103026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103028:	3304      	adds	r3, #4
 810302a:	4618      	mov	r0, r3
 810302c:	f7fe ff28 	bl	8101e80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8103030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103032:	3318      	adds	r3, #24
 8103034:	4618      	mov	r0, r3
 8103036:	f7fe ff23 	bl	8101e80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810303c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810303e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103042:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8103046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103048:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810304c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810304e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8103050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103052:	2200      	movs	r2, #0
 8103054:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8103058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810305a:	2200      	movs	r2, #0
 810305c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8103060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103062:	3354      	adds	r3, #84	; 0x54
 8103064:	2260      	movs	r2, #96	; 0x60
 8103066:	2100      	movs	r1, #0
 8103068:	4618      	mov	r0, r3
 810306a:	f001 f983 	bl	8104374 <memset>
 810306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103070:	4a0c      	ldr	r2, [pc, #48]	; (81030a4 <prvInitialiseNewTask+0x140>)
 8103072:	659a      	str	r2, [r3, #88]	; 0x58
 8103074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103076:	4a0c      	ldr	r2, [pc, #48]	; (81030a8 <prvInitialiseNewTask+0x144>)
 8103078:	65da      	str	r2, [r3, #92]	; 0x5c
 810307a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810307c:	4a0b      	ldr	r2, [pc, #44]	; (81030ac <prvInitialiseNewTask+0x148>)
 810307e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8103080:	683a      	ldr	r2, [r7, #0]
 8103082:	68f9      	ldr	r1, [r7, #12]
 8103084:	69b8      	ldr	r0, [r7, #24]
 8103086:	f7fe ff8f 	bl	8101fa8 <pxPortInitialiseStack>
 810308a:	4602      	mov	r2, r0
 810308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810308e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8103090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103092:	2b00      	cmp	r3, #0
 8103094:	d002      	beq.n	810309c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8103096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810309a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810309c:	bf00      	nop
 810309e:	3720      	adds	r7, #32
 81030a0:	46bd      	mov	sp, r7
 81030a2:	bd80      	pop	{r7, pc}
 81030a4:	08104598 	.word	0x08104598
 81030a8:	081045b8 	.word	0x081045b8
 81030ac:	08104578 	.word	0x08104578

081030b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 81030b0:	b580      	push	{r7, lr}
 81030b2:	b082      	sub	sp, #8
 81030b4:	af00      	add	r7, sp, #0
 81030b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 81030b8:	f7ff f8a4 	bl	8102204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 81030bc:	4b2d      	ldr	r3, [pc, #180]	; (8103174 <prvAddNewTaskToReadyList+0xc4>)
 81030be:	681b      	ldr	r3, [r3, #0]
 81030c0:	3301      	adds	r3, #1
 81030c2:	4a2c      	ldr	r2, [pc, #176]	; (8103174 <prvAddNewTaskToReadyList+0xc4>)
 81030c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 81030c6:	4b2c      	ldr	r3, [pc, #176]	; (8103178 <prvAddNewTaskToReadyList+0xc8>)
 81030c8:	681b      	ldr	r3, [r3, #0]
 81030ca:	2b00      	cmp	r3, #0
 81030cc:	d109      	bne.n	81030e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 81030ce:	4a2a      	ldr	r2, [pc, #168]	; (8103178 <prvAddNewTaskToReadyList+0xc8>)
 81030d0:	687b      	ldr	r3, [r7, #4]
 81030d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 81030d4:	4b27      	ldr	r3, [pc, #156]	; (8103174 <prvAddNewTaskToReadyList+0xc4>)
 81030d6:	681b      	ldr	r3, [r3, #0]
 81030d8:	2b01      	cmp	r3, #1
 81030da:	d110      	bne.n	81030fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 81030dc:	f000 fc26 	bl	810392c <prvInitialiseTaskLists>
 81030e0:	e00d      	b.n	81030fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 81030e2:	4b26      	ldr	r3, [pc, #152]	; (810317c <prvAddNewTaskToReadyList+0xcc>)
 81030e4:	681b      	ldr	r3, [r3, #0]
 81030e6:	2b00      	cmp	r3, #0
 81030e8:	d109      	bne.n	81030fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 81030ea:	4b23      	ldr	r3, [pc, #140]	; (8103178 <prvAddNewTaskToReadyList+0xc8>)
 81030ec:	681b      	ldr	r3, [r3, #0]
 81030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81030f0:	687b      	ldr	r3, [r7, #4]
 81030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81030f4:	429a      	cmp	r2, r3
 81030f6:	d802      	bhi.n	81030fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 81030f8:	4a1f      	ldr	r2, [pc, #124]	; (8103178 <prvAddNewTaskToReadyList+0xc8>)
 81030fa:	687b      	ldr	r3, [r7, #4]
 81030fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 81030fe:	4b20      	ldr	r3, [pc, #128]	; (8103180 <prvAddNewTaskToReadyList+0xd0>)
 8103100:	681b      	ldr	r3, [r3, #0]
 8103102:	3301      	adds	r3, #1
 8103104:	4a1e      	ldr	r2, [pc, #120]	; (8103180 <prvAddNewTaskToReadyList+0xd0>)
 8103106:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8103108:	4b1d      	ldr	r3, [pc, #116]	; (8103180 <prvAddNewTaskToReadyList+0xd0>)
 810310a:	681a      	ldr	r2, [r3, #0]
 810310c:	687b      	ldr	r3, [r7, #4]
 810310e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8103110:	687b      	ldr	r3, [r7, #4]
 8103112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103114:	4b1b      	ldr	r3, [pc, #108]	; (8103184 <prvAddNewTaskToReadyList+0xd4>)
 8103116:	681b      	ldr	r3, [r3, #0]
 8103118:	429a      	cmp	r2, r3
 810311a:	d903      	bls.n	8103124 <prvAddNewTaskToReadyList+0x74>
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103120:	4a18      	ldr	r2, [pc, #96]	; (8103184 <prvAddNewTaskToReadyList+0xd4>)
 8103122:	6013      	str	r3, [r2, #0]
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103128:	4613      	mov	r3, r2
 810312a:	009b      	lsls	r3, r3, #2
 810312c:	4413      	add	r3, r2
 810312e:	009b      	lsls	r3, r3, #2
 8103130:	4a15      	ldr	r2, [pc, #84]	; (8103188 <prvAddNewTaskToReadyList+0xd8>)
 8103132:	441a      	add	r2, r3
 8103134:	687b      	ldr	r3, [r7, #4]
 8103136:	3304      	adds	r3, #4
 8103138:	4619      	mov	r1, r3
 810313a:	4610      	mov	r0, r2
 810313c:	f7fe fead 	bl	8101e9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8103140:	f7ff f890 	bl	8102264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8103144:	4b0d      	ldr	r3, [pc, #52]	; (810317c <prvAddNewTaskToReadyList+0xcc>)
 8103146:	681b      	ldr	r3, [r3, #0]
 8103148:	2b00      	cmp	r3, #0
 810314a:	d00e      	beq.n	810316a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810314c:	4b0a      	ldr	r3, [pc, #40]	; (8103178 <prvAddNewTaskToReadyList+0xc8>)
 810314e:	681b      	ldr	r3, [r3, #0]
 8103150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103156:	429a      	cmp	r2, r3
 8103158:	d207      	bcs.n	810316a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810315a:	4b0c      	ldr	r3, [pc, #48]	; (810318c <prvAddNewTaskToReadyList+0xdc>)
 810315c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103160:	601a      	str	r2, [r3, #0]
 8103162:	f3bf 8f4f 	dsb	sy
 8103166:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810316a:	bf00      	nop
 810316c:	3708      	adds	r7, #8
 810316e:	46bd      	mov	sp, r7
 8103170:	bd80      	pop	{r7, pc}
 8103172:	bf00      	nop
 8103174:	100049a0 	.word	0x100049a0
 8103178:	100044cc 	.word	0x100044cc
 810317c:	100049ac 	.word	0x100049ac
 8103180:	100049bc 	.word	0x100049bc
 8103184:	100049a8 	.word	0x100049a8
 8103188:	100044d0 	.word	0x100044d0
 810318c:	e000ed04 	.word	0xe000ed04

08103190 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8103190:	b580      	push	{r7, lr}
 8103192:	b084      	sub	sp, #16
 8103194:	af00      	add	r7, sp, #0
 8103196:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8103198:	2300      	movs	r3, #0
 810319a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810319c:	687b      	ldr	r3, [r7, #4]
 810319e:	2b00      	cmp	r3, #0
 81031a0:	d017      	beq.n	81031d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 81031a2:	4b13      	ldr	r3, [pc, #76]	; (81031f0 <vTaskDelay+0x60>)
 81031a4:	681b      	ldr	r3, [r3, #0]
 81031a6:	2b00      	cmp	r3, #0
 81031a8:	d00a      	beq.n	81031c0 <vTaskDelay+0x30>
	__asm volatile
 81031aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 81031ae:	f383 8811 	msr	BASEPRI, r3
 81031b2:	f3bf 8f6f 	isb	sy
 81031b6:	f3bf 8f4f 	dsb	sy
 81031ba:	60bb      	str	r3, [r7, #8]
}
 81031bc:	bf00      	nop
 81031be:	e7fe      	b.n	81031be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 81031c0:	f000 f88a 	bl	81032d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 81031c4:	2100      	movs	r1, #0
 81031c6:	6878      	ldr	r0, [r7, #4]
 81031c8:	f000 fcfe 	bl	8103bc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 81031cc:	f000 f892 	bl	81032f4 <xTaskResumeAll>
 81031d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 81031d2:	68fb      	ldr	r3, [r7, #12]
 81031d4:	2b00      	cmp	r3, #0
 81031d6:	d107      	bne.n	81031e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 81031d8:	4b06      	ldr	r3, [pc, #24]	; (81031f4 <vTaskDelay+0x64>)
 81031da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81031de:	601a      	str	r2, [r3, #0]
 81031e0:	f3bf 8f4f 	dsb	sy
 81031e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 81031e8:	bf00      	nop
 81031ea:	3710      	adds	r7, #16
 81031ec:	46bd      	mov	sp, r7
 81031ee:	bd80      	pop	{r7, pc}
 81031f0:	100049c8 	.word	0x100049c8
 81031f4:	e000ed04 	.word	0xe000ed04

081031f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 81031f8:	b580      	push	{r7, lr}
 81031fa:	b08a      	sub	sp, #40	; 0x28
 81031fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 81031fe:	2300      	movs	r3, #0
 8103200:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8103202:	2300      	movs	r3, #0
 8103204:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8103206:	463a      	mov	r2, r7
 8103208:	1d39      	adds	r1, r7, #4
 810320a:	f107 0308 	add.w	r3, r7, #8
 810320e:	4618      	mov	r0, r3
 8103210:	f7fe fbf8 	bl	8101a04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8103214:	6839      	ldr	r1, [r7, #0]
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	68ba      	ldr	r2, [r7, #8]
 810321a:	9202      	str	r2, [sp, #8]
 810321c:	9301      	str	r3, [sp, #4]
 810321e:	2300      	movs	r3, #0
 8103220:	9300      	str	r3, [sp, #0]
 8103222:	2300      	movs	r3, #0
 8103224:	460a      	mov	r2, r1
 8103226:	4924      	ldr	r1, [pc, #144]	; (81032b8 <vTaskStartScheduler+0xc0>)
 8103228:	4824      	ldr	r0, [pc, #144]	; (81032bc <vTaskStartScheduler+0xc4>)
 810322a:	f7ff fdf9 	bl	8102e20 <xTaskCreateStatic>
 810322e:	4603      	mov	r3, r0
 8103230:	4a23      	ldr	r2, [pc, #140]	; (81032c0 <vTaskStartScheduler+0xc8>)
 8103232:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8103234:	4b22      	ldr	r3, [pc, #136]	; (81032c0 <vTaskStartScheduler+0xc8>)
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	2b00      	cmp	r3, #0
 810323a:	d002      	beq.n	8103242 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810323c:	2301      	movs	r3, #1
 810323e:	617b      	str	r3, [r7, #20]
 8103240:	e001      	b.n	8103246 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8103242:	2300      	movs	r3, #0
 8103244:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8103246:	697b      	ldr	r3, [r7, #20]
 8103248:	2b01      	cmp	r3, #1
 810324a:	d102      	bne.n	8103252 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810324c:	f000 fd10 	bl	8103c70 <xTimerCreateTimerTask>
 8103250:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8103252:	697b      	ldr	r3, [r7, #20]
 8103254:	2b01      	cmp	r3, #1
 8103256:	d11b      	bne.n	8103290 <vTaskStartScheduler+0x98>
	__asm volatile
 8103258:	f04f 0350 	mov.w	r3, #80	; 0x50
 810325c:	f383 8811 	msr	BASEPRI, r3
 8103260:	f3bf 8f6f 	isb	sy
 8103264:	f3bf 8f4f 	dsb	sy
 8103268:	613b      	str	r3, [r7, #16]
}
 810326a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810326c:	4b15      	ldr	r3, [pc, #84]	; (81032c4 <vTaskStartScheduler+0xcc>)
 810326e:	681b      	ldr	r3, [r3, #0]
 8103270:	3354      	adds	r3, #84	; 0x54
 8103272:	4a15      	ldr	r2, [pc, #84]	; (81032c8 <vTaskStartScheduler+0xd0>)
 8103274:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8103276:	4b15      	ldr	r3, [pc, #84]	; (81032cc <vTaskStartScheduler+0xd4>)
 8103278:	f04f 32ff 	mov.w	r2, #4294967295
 810327c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810327e:	4b14      	ldr	r3, [pc, #80]	; (81032d0 <vTaskStartScheduler+0xd8>)
 8103280:	2201      	movs	r2, #1
 8103282:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8103284:	4b13      	ldr	r3, [pc, #76]	; (81032d4 <vTaskStartScheduler+0xdc>)
 8103286:	2200      	movs	r2, #0
 8103288:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810328a:	f7fe ff19 	bl	81020c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810328e:	e00e      	b.n	81032ae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8103290:	697b      	ldr	r3, [r7, #20]
 8103292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103296:	d10a      	bne.n	81032ae <vTaskStartScheduler+0xb6>
	__asm volatile
 8103298:	f04f 0350 	mov.w	r3, #80	; 0x50
 810329c:	f383 8811 	msr	BASEPRI, r3
 81032a0:	f3bf 8f6f 	isb	sy
 81032a4:	f3bf 8f4f 	dsb	sy
 81032a8:	60fb      	str	r3, [r7, #12]
}
 81032aa:	bf00      	nop
 81032ac:	e7fe      	b.n	81032ac <vTaskStartScheduler+0xb4>
}
 81032ae:	bf00      	nop
 81032b0:	3718      	adds	r7, #24
 81032b2:	46bd      	mov	sp, r7
 81032b4:	bd80      	pop	{r7, pc}
 81032b6:	bf00      	nop
 81032b8:	0810452c 	.word	0x0810452c
 81032bc:	081038fd 	.word	0x081038fd
 81032c0:	100049c4 	.word	0x100049c4
 81032c4:	100044cc 	.word	0x100044cc
 81032c8:	10000014 	.word	0x10000014
 81032cc:	100049c0 	.word	0x100049c0
 81032d0:	100049ac 	.word	0x100049ac
 81032d4:	100049a4 	.word	0x100049a4

081032d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 81032d8:	b480      	push	{r7}
 81032da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 81032dc:	4b04      	ldr	r3, [pc, #16]	; (81032f0 <vTaskSuspendAll+0x18>)
 81032de:	681b      	ldr	r3, [r3, #0]
 81032e0:	3301      	adds	r3, #1
 81032e2:	4a03      	ldr	r2, [pc, #12]	; (81032f0 <vTaskSuspendAll+0x18>)
 81032e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 81032e6:	bf00      	nop
 81032e8:	46bd      	mov	sp, r7
 81032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032ee:	4770      	bx	lr
 81032f0:	100049c8 	.word	0x100049c8

081032f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 81032f4:	b580      	push	{r7, lr}
 81032f6:	b084      	sub	sp, #16
 81032f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 81032fa:	2300      	movs	r3, #0
 81032fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 81032fe:	2300      	movs	r3, #0
 8103300:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8103302:	4b42      	ldr	r3, [pc, #264]	; (810340c <xTaskResumeAll+0x118>)
 8103304:	681b      	ldr	r3, [r3, #0]
 8103306:	2b00      	cmp	r3, #0
 8103308:	d10a      	bne.n	8103320 <xTaskResumeAll+0x2c>
	__asm volatile
 810330a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810330e:	f383 8811 	msr	BASEPRI, r3
 8103312:	f3bf 8f6f 	isb	sy
 8103316:	f3bf 8f4f 	dsb	sy
 810331a:	603b      	str	r3, [r7, #0]
}
 810331c:	bf00      	nop
 810331e:	e7fe      	b.n	810331e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8103320:	f7fe ff70 	bl	8102204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8103324:	4b39      	ldr	r3, [pc, #228]	; (810340c <xTaskResumeAll+0x118>)
 8103326:	681b      	ldr	r3, [r3, #0]
 8103328:	3b01      	subs	r3, #1
 810332a:	4a38      	ldr	r2, [pc, #224]	; (810340c <xTaskResumeAll+0x118>)
 810332c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810332e:	4b37      	ldr	r3, [pc, #220]	; (810340c <xTaskResumeAll+0x118>)
 8103330:	681b      	ldr	r3, [r3, #0]
 8103332:	2b00      	cmp	r3, #0
 8103334:	d162      	bne.n	81033fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8103336:	4b36      	ldr	r3, [pc, #216]	; (8103410 <xTaskResumeAll+0x11c>)
 8103338:	681b      	ldr	r3, [r3, #0]
 810333a:	2b00      	cmp	r3, #0
 810333c:	d05e      	beq.n	81033fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810333e:	e02f      	b.n	81033a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103340:	4b34      	ldr	r3, [pc, #208]	; (8103414 <xTaskResumeAll+0x120>)
 8103342:	68db      	ldr	r3, [r3, #12]
 8103344:	68db      	ldr	r3, [r3, #12]
 8103346:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8103348:	68fb      	ldr	r3, [r7, #12]
 810334a:	3318      	adds	r3, #24
 810334c:	4618      	mov	r0, r3
 810334e:	f7fe fe01 	bl	8101f54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8103352:	68fb      	ldr	r3, [r7, #12]
 8103354:	3304      	adds	r3, #4
 8103356:	4618      	mov	r0, r3
 8103358:	f7fe fdfc 	bl	8101f54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810335c:	68fb      	ldr	r3, [r7, #12]
 810335e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103360:	4b2d      	ldr	r3, [pc, #180]	; (8103418 <xTaskResumeAll+0x124>)
 8103362:	681b      	ldr	r3, [r3, #0]
 8103364:	429a      	cmp	r2, r3
 8103366:	d903      	bls.n	8103370 <xTaskResumeAll+0x7c>
 8103368:	68fb      	ldr	r3, [r7, #12]
 810336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810336c:	4a2a      	ldr	r2, [pc, #168]	; (8103418 <xTaskResumeAll+0x124>)
 810336e:	6013      	str	r3, [r2, #0]
 8103370:	68fb      	ldr	r3, [r7, #12]
 8103372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103374:	4613      	mov	r3, r2
 8103376:	009b      	lsls	r3, r3, #2
 8103378:	4413      	add	r3, r2
 810337a:	009b      	lsls	r3, r3, #2
 810337c:	4a27      	ldr	r2, [pc, #156]	; (810341c <xTaskResumeAll+0x128>)
 810337e:	441a      	add	r2, r3
 8103380:	68fb      	ldr	r3, [r7, #12]
 8103382:	3304      	adds	r3, #4
 8103384:	4619      	mov	r1, r3
 8103386:	4610      	mov	r0, r2
 8103388:	f7fe fd87 	bl	8101e9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810338c:	68fb      	ldr	r3, [r7, #12]
 810338e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103390:	4b23      	ldr	r3, [pc, #140]	; (8103420 <xTaskResumeAll+0x12c>)
 8103392:	681b      	ldr	r3, [r3, #0]
 8103394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103396:	429a      	cmp	r2, r3
 8103398:	d302      	bcc.n	81033a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 810339a:	4b22      	ldr	r3, [pc, #136]	; (8103424 <xTaskResumeAll+0x130>)
 810339c:	2201      	movs	r2, #1
 810339e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81033a0:	4b1c      	ldr	r3, [pc, #112]	; (8103414 <xTaskResumeAll+0x120>)
 81033a2:	681b      	ldr	r3, [r3, #0]
 81033a4:	2b00      	cmp	r3, #0
 81033a6:	d1cb      	bne.n	8103340 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 81033a8:	68fb      	ldr	r3, [r7, #12]
 81033aa:	2b00      	cmp	r3, #0
 81033ac:	d001      	beq.n	81033b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 81033ae:	f000 fb5f 	bl	8103a70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 81033b2:	4b1d      	ldr	r3, [pc, #116]	; (8103428 <xTaskResumeAll+0x134>)
 81033b4:	681b      	ldr	r3, [r3, #0]
 81033b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 81033b8:	687b      	ldr	r3, [r7, #4]
 81033ba:	2b00      	cmp	r3, #0
 81033bc:	d010      	beq.n	81033e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 81033be:	f000 f847 	bl	8103450 <xTaskIncrementTick>
 81033c2:	4603      	mov	r3, r0
 81033c4:	2b00      	cmp	r3, #0
 81033c6:	d002      	beq.n	81033ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 81033c8:	4b16      	ldr	r3, [pc, #88]	; (8103424 <xTaskResumeAll+0x130>)
 81033ca:	2201      	movs	r2, #1
 81033cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 81033ce:	687b      	ldr	r3, [r7, #4]
 81033d0:	3b01      	subs	r3, #1
 81033d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	2b00      	cmp	r3, #0
 81033d8:	d1f1      	bne.n	81033be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 81033da:	4b13      	ldr	r3, [pc, #76]	; (8103428 <xTaskResumeAll+0x134>)
 81033dc:	2200      	movs	r2, #0
 81033de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 81033e0:	4b10      	ldr	r3, [pc, #64]	; (8103424 <xTaskResumeAll+0x130>)
 81033e2:	681b      	ldr	r3, [r3, #0]
 81033e4:	2b00      	cmp	r3, #0
 81033e6:	d009      	beq.n	81033fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 81033e8:	2301      	movs	r3, #1
 81033ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 81033ec:	4b0f      	ldr	r3, [pc, #60]	; (810342c <xTaskResumeAll+0x138>)
 81033ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81033f2:	601a      	str	r2, [r3, #0]
 81033f4:	f3bf 8f4f 	dsb	sy
 81033f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81033fc:	f7fe ff32 	bl	8102264 <vPortExitCritical>

	return xAlreadyYielded;
 8103400:	68bb      	ldr	r3, [r7, #8]
}
 8103402:	4618      	mov	r0, r3
 8103404:	3710      	adds	r7, #16
 8103406:	46bd      	mov	sp, r7
 8103408:	bd80      	pop	{r7, pc}
 810340a:	bf00      	nop
 810340c:	100049c8 	.word	0x100049c8
 8103410:	100049a0 	.word	0x100049a0
 8103414:	10004960 	.word	0x10004960
 8103418:	100049a8 	.word	0x100049a8
 810341c:	100044d0 	.word	0x100044d0
 8103420:	100044cc 	.word	0x100044cc
 8103424:	100049b4 	.word	0x100049b4
 8103428:	100049b0 	.word	0x100049b0
 810342c:	e000ed04 	.word	0xe000ed04

08103430 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8103430:	b480      	push	{r7}
 8103432:	b083      	sub	sp, #12
 8103434:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8103436:	4b05      	ldr	r3, [pc, #20]	; (810344c <xTaskGetTickCount+0x1c>)
 8103438:	681b      	ldr	r3, [r3, #0]
 810343a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810343c:	687b      	ldr	r3, [r7, #4]
}
 810343e:	4618      	mov	r0, r3
 8103440:	370c      	adds	r7, #12
 8103442:	46bd      	mov	sp, r7
 8103444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103448:	4770      	bx	lr
 810344a:	bf00      	nop
 810344c:	100049a4 	.word	0x100049a4

08103450 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8103450:	b580      	push	{r7, lr}
 8103452:	b086      	sub	sp, #24
 8103454:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8103456:	2300      	movs	r3, #0
 8103458:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810345a:	4b4f      	ldr	r3, [pc, #316]	; (8103598 <xTaskIncrementTick+0x148>)
 810345c:	681b      	ldr	r3, [r3, #0]
 810345e:	2b00      	cmp	r3, #0
 8103460:	f040 808f 	bne.w	8103582 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8103464:	4b4d      	ldr	r3, [pc, #308]	; (810359c <xTaskIncrementTick+0x14c>)
 8103466:	681b      	ldr	r3, [r3, #0]
 8103468:	3301      	adds	r3, #1
 810346a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810346c:	4a4b      	ldr	r2, [pc, #300]	; (810359c <xTaskIncrementTick+0x14c>)
 810346e:	693b      	ldr	r3, [r7, #16]
 8103470:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8103472:	693b      	ldr	r3, [r7, #16]
 8103474:	2b00      	cmp	r3, #0
 8103476:	d120      	bne.n	81034ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8103478:	4b49      	ldr	r3, [pc, #292]	; (81035a0 <xTaskIncrementTick+0x150>)
 810347a:	681b      	ldr	r3, [r3, #0]
 810347c:	681b      	ldr	r3, [r3, #0]
 810347e:	2b00      	cmp	r3, #0
 8103480:	d00a      	beq.n	8103498 <xTaskIncrementTick+0x48>
	__asm volatile
 8103482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103486:	f383 8811 	msr	BASEPRI, r3
 810348a:	f3bf 8f6f 	isb	sy
 810348e:	f3bf 8f4f 	dsb	sy
 8103492:	603b      	str	r3, [r7, #0]
}
 8103494:	bf00      	nop
 8103496:	e7fe      	b.n	8103496 <xTaskIncrementTick+0x46>
 8103498:	4b41      	ldr	r3, [pc, #260]	; (81035a0 <xTaskIncrementTick+0x150>)
 810349a:	681b      	ldr	r3, [r3, #0]
 810349c:	60fb      	str	r3, [r7, #12]
 810349e:	4b41      	ldr	r3, [pc, #260]	; (81035a4 <xTaskIncrementTick+0x154>)
 81034a0:	681b      	ldr	r3, [r3, #0]
 81034a2:	4a3f      	ldr	r2, [pc, #252]	; (81035a0 <xTaskIncrementTick+0x150>)
 81034a4:	6013      	str	r3, [r2, #0]
 81034a6:	4a3f      	ldr	r2, [pc, #252]	; (81035a4 <xTaskIncrementTick+0x154>)
 81034a8:	68fb      	ldr	r3, [r7, #12]
 81034aa:	6013      	str	r3, [r2, #0]
 81034ac:	4b3e      	ldr	r3, [pc, #248]	; (81035a8 <xTaskIncrementTick+0x158>)
 81034ae:	681b      	ldr	r3, [r3, #0]
 81034b0:	3301      	adds	r3, #1
 81034b2:	4a3d      	ldr	r2, [pc, #244]	; (81035a8 <xTaskIncrementTick+0x158>)
 81034b4:	6013      	str	r3, [r2, #0]
 81034b6:	f000 fadb 	bl	8103a70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 81034ba:	4b3c      	ldr	r3, [pc, #240]	; (81035ac <xTaskIncrementTick+0x15c>)
 81034bc:	681b      	ldr	r3, [r3, #0]
 81034be:	693a      	ldr	r2, [r7, #16]
 81034c0:	429a      	cmp	r2, r3
 81034c2:	d349      	bcc.n	8103558 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81034c4:	4b36      	ldr	r3, [pc, #216]	; (81035a0 <xTaskIncrementTick+0x150>)
 81034c6:	681b      	ldr	r3, [r3, #0]
 81034c8:	681b      	ldr	r3, [r3, #0]
 81034ca:	2b00      	cmp	r3, #0
 81034cc:	d104      	bne.n	81034d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81034ce:	4b37      	ldr	r3, [pc, #220]	; (81035ac <xTaskIncrementTick+0x15c>)
 81034d0:	f04f 32ff 	mov.w	r2, #4294967295
 81034d4:	601a      	str	r2, [r3, #0]
					break;
 81034d6:	e03f      	b.n	8103558 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81034d8:	4b31      	ldr	r3, [pc, #196]	; (81035a0 <xTaskIncrementTick+0x150>)
 81034da:	681b      	ldr	r3, [r3, #0]
 81034dc:	68db      	ldr	r3, [r3, #12]
 81034de:	68db      	ldr	r3, [r3, #12]
 81034e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 81034e2:	68bb      	ldr	r3, [r7, #8]
 81034e4:	685b      	ldr	r3, [r3, #4]
 81034e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 81034e8:	693a      	ldr	r2, [r7, #16]
 81034ea:	687b      	ldr	r3, [r7, #4]
 81034ec:	429a      	cmp	r2, r3
 81034ee:	d203      	bcs.n	81034f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 81034f0:	4a2e      	ldr	r2, [pc, #184]	; (81035ac <xTaskIncrementTick+0x15c>)
 81034f2:	687b      	ldr	r3, [r7, #4]
 81034f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 81034f6:	e02f      	b.n	8103558 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81034f8:	68bb      	ldr	r3, [r7, #8]
 81034fa:	3304      	adds	r3, #4
 81034fc:	4618      	mov	r0, r3
 81034fe:	f7fe fd29 	bl	8101f54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8103502:	68bb      	ldr	r3, [r7, #8]
 8103504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103506:	2b00      	cmp	r3, #0
 8103508:	d004      	beq.n	8103514 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810350a:	68bb      	ldr	r3, [r7, #8]
 810350c:	3318      	adds	r3, #24
 810350e:	4618      	mov	r0, r3
 8103510:	f7fe fd20 	bl	8101f54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8103514:	68bb      	ldr	r3, [r7, #8]
 8103516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103518:	4b25      	ldr	r3, [pc, #148]	; (81035b0 <xTaskIncrementTick+0x160>)
 810351a:	681b      	ldr	r3, [r3, #0]
 810351c:	429a      	cmp	r2, r3
 810351e:	d903      	bls.n	8103528 <xTaskIncrementTick+0xd8>
 8103520:	68bb      	ldr	r3, [r7, #8]
 8103522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103524:	4a22      	ldr	r2, [pc, #136]	; (81035b0 <xTaskIncrementTick+0x160>)
 8103526:	6013      	str	r3, [r2, #0]
 8103528:	68bb      	ldr	r3, [r7, #8]
 810352a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810352c:	4613      	mov	r3, r2
 810352e:	009b      	lsls	r3, r3, #2
 8103530:	4413      	add	r3, r2
 8103532:	009b      	lsls	r3, r3, #2
 8103534:	4a1f      	ldr	r2, [pc, #124]	; (81035b4 <xTaskIncrementTick+0x164>)
 8103536:	441a      	add	r2, r3
 8103538:	68bb      	ldr	r3, [r7, #8]
 810353a:	3304      	adds	r3, #4
 810353c:	4619      	mov	r1, r3
 810353e:	4610      	mov	r0, r2
 8103540:	f7fe fcab 	bl	8101e9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8103544:	68bb      	ldr	r3, [r7, #8]
 8103546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103548:	4b1b      	ldr	r3, [pc, #108]	; (81035b8 <xTaskIncrementTick+0x168>)
 810354a:	681b      	ldr	r3, [r3, #0]
 810354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810354e:	429a      	cmp	r2, r3
 8103550:	d3b8      	bcc.n	81034c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8103552:	2301      	movs	r3, #1
 8103554:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8103556:	e7b5      	b.n	81034c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8103558:	4b17      	ldr	r3, [pc, #92]	; (81035b8 <xTaskIncrementTick+0x168>)
 810355a:	681b      	ldr	r3, [r3, #0]
 810355c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810355e:	4915      	ldr	r1, [pc, #84]	; (81035b4 <xTaskIncrementTick+0x164>)
 8103560:	4613      	mov	r3, r2
 8103562:	009b      	lsls	r3, r3, #2
 8103564:	4413      	add	r3, r2
 8103566:	009b      	lsls	r3, r3, #2
 8103568:	440b      	add	r3, r1
 810356a:	681b      	ldr	r3, [r3, #0]
 810356c:	2b01      	cmp	r3, #1
 810356e:	d901      	bls.n	8103574 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8103570:	2301      	movs	r3, #1
 8103572:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8103574:	4b11      	ldr	r3, [pc, #68]	; (81035bc <xTaskIncrementTick+0x16c>)
 8103576:	681b      	ldr	r3, [r3, #0]
 8103578:	2b00      	cmp	r3, #0
 810357a:	d007      	beq.n	810358c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 810357c:	2301      	movs	r3, #1
 810357e:	617b      	str	r3, [r7, #20]
 8103580:	e004      	b.n	810358c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8103582:	4b0f      	ldr	r3, [pc, #60]	; (81035c0 <xTaskIncrementTick+0x170>)
 8103584:	681b      	ldr	r3, [r3, #0]
 8103586:	3301      	adds	r3, #1
 8103588:	4a0d      	ldr	r2, [pc, #52]	; (81035c0 <xTaskIncrementTick+0x170>)
 810358a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810358c:	697b      	ldr	r3, [r7, #20]
}
 810358e:	4618      	mov	r0, r3
 8103590:	3718      	adds	r7, #24
 8103592:	46bd      	mov	sp, r7
 8103594:	bd80      	pop	{r7, pc}
 8103596:	bf00      	nop
 8103598:	100049c8 	.word	0x100049c8
 810359c:	100049a4 	.word	0x100049a4
 81035a0:	10004958 	.word	0x10004958
 81035a4:	1000495c 	.word	0x1000495c
 81035a8:	100049b8 	.word	0x100049b8
 81035ac:	100049c0 	.word	0x100049c0
 81035b0:	100049a8 	.word	0x100049a8
 81035b4:	100044d0 	.word	0x100044d0
 81035b8:	100044cc 	.word	0x100044cc
 81035bc:	100049b4 	.word	0x100049b4
 81035c0:	100049b0 	.word	0x100049b0

081035c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 81035c4:	b480      	push	{r7}
 81035c6:	b085      	sub	sp, #20
 81035c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 81035ca:	4b2a      	ldr	r3, [pc, #168]	; (8103674 <vTaskSwitchContext+0xb0>)
 81035cc:	681b      	ldr	r3, [r3, #0]
 81035ce:	2b00      	cmp	r3, #0
 81035d0:	d003      	beq.n	81035da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 81035d2:	4b29      	ldr	r3, [pc, #164]	; (8103678 <vTaskSwitchContext+0xb4>)
 81035d4:	2201      	movs	r2, #1
 81035d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 81035d8:	e046      	b.n	8103668 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 81035da:	4b27      	ldr	r3, [pc, #156]	; (8103678 <vTaskSwitchContext+0xb4>)
 81035dc:	2200      	movs	r2, #0
 81035de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81035e0:	4b26      	ldr	r3, [pc, #152]	; (810367c <vTaskSwitchContext+0xb8>)
 81035e2:	681b      	ldr	r3, [r3, #0]
 81035e4:	60fb      	str	r3, [r7, #12]
 81035e6:	e010      	b.n	810360a <vTaskSwitchContext+0x46>
 81035e8:	68fb      	ldr	r3, [r7, #12]
 81035ea:	2b00      	cmp	r3, #0
 81035ec:	d10a      	bne.n	8103604 <vTaskSwitchContext+0x40>
	__asm volatile
 81035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 81035f2:	f383 8811 	msr	BASEPRI, r3
 81035f6:	f3bf 8f6f 	isb	sy
 81035fa:	f3bf 8f4f 	dsb	sy
 81035fe:	607b      	str	r3, [r7, #4]
}
 8103600:	bf00      	nop
 8103602:	e7fe      	b.n	8103602 <vTaskSwitchContext+0x3e>
 8103604:	68fb      	ldr	r3, [r7, #12]
 8103606:	3b01      	subs	r3, #1
 8103608:	60fb      	str	r3, [r7, #12]
 810360a:	491d      	ldr	r1, [pc, #116]	; (8103680 <vTaskSwitchContext+0xbc>)
 810360c:	68fa      	ldr	r2, [r7, #12]
 810360e:	4613      	mov	r3, r2
 8103610:	009b      	lsls	r3, r3, #2
 8103612:	4413      	add	r3, r2
 8103614:	009b      	lsls	r3, r3, #2
 8103616:	440b      	add	r3, r1
 8103618:	681b      	ldr	r3, [r3, #0]
 810361a:	2b00      	cmp	r3, #0
 810361c:	d0e4      	beq.n	81035e8 <vTaskSwitchContext+0x24>
 810361e:	68fa      	ldr	r2, [r7, #12]
 8103620:	4613      	mov	r3, r2
 8103622:	009b      	lsls	r3, r3, #2
 8103624:	4413      	add	r3, r2
 8103626:	009b      	lsls	r3, r3, #2
 8103628:	4a15      	ldr	r2, [pc, #84]	; (8103680 <vTaskSwitchContext+0xbc>)
 810362a:	4413      	add	r3, r2
 810362c:	60bb      	str	r3, [r7, #8]
 810362e:	68bb      	ldr	r3, [r7, #8]
 8103630:	685b      	ldr	r3, [r3, #4]
 8103632:	685a      	ldr	r2, [r3, #4]
 8103634:	68bb      	ldr	r3, [r7, #8]
 8103636:	605a      	str	r2, [r3, #4]
 8103638:	68bb      	ldr	r3, [r7, #8]
 810363a:	685a      	ldr	r2, [r3, #4]
 810363c:	68bb      	ldr	r3, [r7, #8]
 810363e:	3308      	adds	r3, #8
 8103640:	429a      	cmp	r2, r3
 8103642:	d104      	bne.n	810364e <vTaskSwitchContext+0x8a>
 8103644:	68bb      	ldr	r3, [r7, #8]
 8103646:	685b      	ldr	r3, [r3, #4]
 8103648:	685a      	ldr	r2, [r3, #4]
 810364a:	68bb      	ldr	r3, [r7, #8]
 810364c:	605a      	str	r2, [r3, #4]
 810364e:	68bb      	ldr	r3, [r7, #8]
 8103650:	685b      	ldr	r3, [r3, #4]
 8103652:	68db      	ldr	r3, [r3, #12]
 8103654:	4a0b      	ldr	r2, [pc, #44]	; (8103684 <vTaskSwitchContext+0xc0>)
 8103656:	6013      	str	r3, [r2, #0]
 8103658:	4a08      	ldr	r2, [pc, #32]	; (810367c <vTaskSwitchContext+0xb8>)
 810365a:	68fb      	ldr	r3, [r7, #12]
 810365c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810365e:	4b09      	ldr	r3, [pc, #36]	; (8103684 <vTaskSwitchContext+0xc0>)
 8103660:	681b      	ldr	r3, [r3, #0]
 8103662:	3354      	adds	r3, #84	; 0x54
 8103664:	4a08      	ldr	r2, [pc, #32]	; (8103688 <vTaskSwitchContext+0xc4>)
 8103666:	6013      	str	r3, [r2, #0]
}
 8103668:	bf00      	nop
 810366a:	3714      	adds	r7, #20
 810366c:	46bd      	mov	sp, r7
 810366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103672:	4770      	bx	lr
 8103674:	100049c8 	.word	0x100049c8
 8103678:	100049b4 	.word	0x100049b4
 810367c:	100049a8 	.word	0x100049a8
 8103680:	100044d0 	.word	0x100044d0
 8103684:	100044cc 	.word	0x100044cc
 8103688:	10000014 	.word	0x10000014

0810368c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810368c:	b580      	push	{r7, lr}
 810368e:	b084      	sub	sp, #16
 8103690:	af00      	add	r7, sp, #0
 8103692:	6078      	str	r0, [r7, #4]
 8103694:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8103696:	687b      	ldr	r3, [r7, #4]
 8103698:	2b00      	cmp	r3, #0
 810369a:	d10a      	bne.n	81036b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 810369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 81036a0:	f383 8811 	msr	BASEPRI, r3
 81036a4:	f3bf 8f6f 	isb	sy
 81036a8:	f3bf 8f4f 	dsb	sy
 81036ac:	60fb      	str	r3, [r7, #12]
}
 81036ae:	bf00      	nop
 81036b0:	e7fe      	b.n	81036b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 81036b2:	4b07      	ldr	r3, [pc, #28]	; (81036d0 <vTaskPlaceOnEventList+0x44>)
 81036b4:	681b      	ldr	r3, [r3, #0]
 81036b6:	3318      	adds	r3, #24
 81036b8:	4619      	mov	r1, r3
 81036ba:	6878      	ldr	r0, [r7, #4]
 81036bc:	f7fe fc11 	bl	8101ee2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 81036c0:	2101      	movs	r1, #1
 81036c2:	6838      	ldr	r0, [r7, #0]
 81036c4:	f000 fa80 	bl	8103bc8 <prvAddCurrentTaskToDelayedList>
}
 81036c8:	bf00      	nop
 81036ca:	3710      	adds	r7, #16
 81036cc:	46bd      	mov	sp, r7
 81036ce:	bd80      	pop	{r7, pc}
 81036d0:	100044cc 	.word	0x100044cc

081036d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81036d4:	b580      	push	{r7, lr}
 81036d6:	b086      	sub	sp, #24
 81036d8:	af00      	add	r7, sp, #0
 81036da:	60f8      	str	r0, [r7, #12]
 81036dc:	60b9      	str	r1, [r7, #8]
 81036de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 81036e0:	68fb      	ldr	r3, [r7, #12]
 81036e2:	2b00      	cmp	r3, #0
 81036e4:	d10a      	bne.n	81036fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 81036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81036ea:	f383 8811 	msr	BASEPRI, r3
 81036ee:	f3bf 8f6f 	isb	sy
 81036f2:	f3bf 8f4f 	dsb	sy
 81036f6:	617b      	str	r3, [r7, #20]
}
 81036f8:	bf00      	nop
 81036fa:	e7fe      	b.n	81036fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 81036fc:	4b0a      	ldr	r3, [pc, #40]	; (8103728 <vTaskPlaceOnEventListRestricted+0x54>)
 81036fe:	681b      	ldr	r3, [r3, #0]
 8103700:	3318      	adds	r3, #24
 8103702:	4619      	mov	r1, r3
 8103704:	68f8      	ldr	r0, [r7, #12]
 8103706:	f7fe fbc8 	bl	8101e9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810370a:	687b      	ldr	r3, [r7, #4]
 810370c:	2b00      	cmp	r3, #0
 810370e:	d002      	beq.n	8103716 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8103710:	f04f 33ff 	mov.w	r3, #4294967295
 8103714:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8103716:	6879      	ldr	r1, [r7, #4]
 8103718:	68b8      	ldr	r0, [r7, #8]
 810371a:	f000 fa55 	bl	8103bc8 <prvAddCurrentTaskToDelayedList>
	}
 810371e:	bf00      	nop
 8103720:	3718      	adds	r7, #24
 8103722:	46bd      	mov	sp, r7
 8103724:	bd80      	pop	{r7, pc}
 8103726:	bf00      	nop
 8103728:	100044cc 	.word	0x100044cc

0810372c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810372c:	b580      	push	{r7, lr}
 810372e:	b086      	sub	sp, #24
 8103730:	af00      	add	r7, sp, #0
 8103732:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103734:	687b      	ldr	r3, [r7, #4]
 8103736:	68db      	ldr	r3, [r3, #12]
 8103738:	68db      	ldr	r3, [r3, #12]
 810373a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810373c:	693b      	ldr	r3, [r7, #16]
 810373e:	2b00      	cmp	r3, #0
 8103740:	d10a      	bne.n	8103758 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8103742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103746:	f383 8811 	msr	BASEPRI, r3
 810374a:	f3bf 8f6f 	isb	sy
 810374e:	f3bf 8f4f 	dsb	sy
 8103752:	60fb      	str	r3, [r7, #12]
}
 8103754:	bf00      	nop
 8103756:	e7fe      	b.n	8103756 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8103758:	693b      	ldr	r3, [r7, #16]
 810375a:	3318      	adds	r3, #24
 810375c:	4618      	mov	r0, r3
 810375e:	f7fe fbf9 	bl	8101f54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8103762:	4b1e      	ldr	r3, [pc, #120]	; (81037dc <xTaskRemoveFromEventList+0xb0>)
 8103764:	681b      	ldr	r3, [r3, #0]
 8103766:	2b00      	cmp	r3, #0
 8103768:	d11d      	bne.n	81037a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810376a:	693b      	ldr	r3, [r7, #16]
 810376c:	3304      	adds	r3, #4
 810376e:	4618      	mov	r0, r3
 8103770:	f7fe fbf0 	bl	8101f54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8103774:	693b      	ldr	r3, [r7, #16]
 8103776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103778:	4b19      	ldr	r3, [pc, #100]	; (81037e0 <xTaskRemoveFromEventList+0xb4>)
 810377a:	681b      	ldr	r3, [r3, #0]
 810377c:	429a      	cmp	r2, r3
 810377e:	d903      	bls.n	8103788 <xTaskRemoveFromEventList+0x5c>
 8103780:	693b      	ldr	r3, [r7, #16]
 8103782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103784:	4a16      	ldr	r2, [pc, #88]	; (81037e0 <xTaskRemoveFromEventList+0xb4>)
 8103786:	6013      	str	r3, [r2, #0]
 8103788:	693b      	ldr	r3, [r7, #16]
 810378a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810378c:	4613      	mov	r3, r2
 810378e:	009b      	lsls	r3, r3, #2
 8103790:	4413      	add	r3, r2
 8103792:	009b      	lsls	r3, r3, #2
 8103794:	4a13      	ldr	r2, [pc, #76]	; (81037e4 <xTaskRemoveFromEventList+0xb8>)
 8103796:	441a      	add	r2, r3
 8103798:	693b      	ldr	r3, [r7, #16]
 810379a:	3304      	adds	r3, #4
 810379c:	4619      	mov	r1, r3
 810379e:	4610      	mov	r0, r2
 81037a0:	f7fe fb7b 	bl	8101e9a <vListInsertEnd>
 81037a4:	e005      	b.n	81037b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 81037a6:	693b      	ldr	r3, [r7, #16]
 81037a8:	3318      	adds	r3, #24
 81037aa:	4619      	mov	r1, r3
 81037ac:	480e      	ldr	r0, [pc, #56]	; (81037e8 <xTaskRemoveFromEventList+0xbc>)
 81037ae:	f7fe fb74 	bl	8101e9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 81037b2:	693b      	ldr	r3, [r7, #16]
 81037b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81037b6:	4b0d      	ldr	r3, [pc, #52]	; (81037ec <xTaskRemoveFromEventList+0xc0>)
 81037b8:	681b      	ldr	r3, [r3, #0]
 81037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037bc:	429a      	cmp	r2, r3
 81037be:	d905      	bls.n	81037cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 81037c0:	2301      	movs	r3, #1
 81037c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 81037c4:	4b0a      	ldr	r3, [pc, #40]	; (81037f0 <xTaskRemoveFromEventList+0xc4>)
 81037c6:	2201      	movs	r2, #1
 81037c8:	601a      	str	r2, [r3, #0]
 81037ca:	e001      	b.n	81037d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 81037cc:	2300      	movs	r3, #0
 81037ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 81037d0:	697b      	ldr	r3, [r7, #20]
}
 81037d2:	4618      	mov	r0, r3
 81037d4:	3718      	adds	r7, #24
 81037d6:	46bd      	mov	sp, r7
 81037d8:	bd80      	pop	{r7, pc}
 81037da:	bf00      	nop
 81037dc:	100049c8 	.word	0x100049c8
 81037e0:	100049a8 	.word	0x100049a8
 81037e4:	100044d0 	.word	0x100044d0
 81037e8:	10004960 	.word	0x10004960
 81037ec:	100044cc 	.word	0x100044cc
 81037f0:	100049b4 	.word	0x100049b4

081037f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 81037f4:	b480      	push	{r7}
 81037f6:	b083      	sub	sp, #12
 81037f8:	af00      	add	r7, sp, #0
 81037fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 81037fc:	4b06      	ldr	r3, [pc, #24]	; (8103818 <vTaskInternalSetTimeOutState+0x24>)
 81037fe:	681a      	ldr	r2, [r3, #0]
 8103800:	687b      	ldr	r3, [r7, #4]
 8103802:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8103804:	4b05      	ldr	r3, [pc, #20]	; (810381c <vTaskInternalSetTimeOutState+0x28>)
 8103806:	681a      	ldr	r2, [r3, #0]
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	605a      	str	r2, [r3, #4]
}
 810380c:	bf00      	nop
 810380e:	370c      	adds	r7, #12
 8103810:	46bd      	mov	sp, r7
 8103812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103816:	4770      	bx	lr
 8103818:	100049b8 	.word	0x100049b8
 810381c:	100049a4 	.word	0x100049a4

08103820 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8103820:	b580      	push	{r7, lr}
 8103822:	b088      	sub	sp, #32
 8103824:	af00      	add	r7, sp, #0
 8103826:	6078      	str	r0, [r7, #4]
 8103828:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810382a:	687b      	ldr	r3, [r7, #4]
 810382c:	2b00      	cmp	r3, #0
 810382e:	d10a      	bne.n	8103846 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8103830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103834:	f383 8811 	msr	BASEPRI, r3
 8103838:	f3bf 8f6f 	isb	sy
 810383c:	f3bf 8f4f 	dsb	sy
 8103840:	613b      	str	r3, [r7, #16]
}
 8103842:	bf00      	nop
 8103844:	e7fe      	b.n	8103844 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8103846:	683b      	ldr	r3, [r7, #0]
 8103848:	2b00      	cmp	r3, #0
 810384a:	d10a      	bne.n	8103862 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 810384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103850:	f383 8811 	msr	BASEPRI, r3
 8103854:	f3bf 8f6f 	isb	sy
 8103858:	f3bf 8f4f 	dsb	sy
 810385c:	60fb      	str	r3, [r7, #12]
}
 810385e:	bf00      	nop
 8103860:	e7fe      	b.n	8103860 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8103862:	f7fe fccf 	bl	8102204 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8103866:	4b1d      	ldr	r3, [pc, #116]	; (81038dc <xTaskCheckForTimeOut+0xbc>)
 8103868:	681b      	ldr	r3, [r3, #0]
 810386a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	685b      	ldr	r3, [r3, #4]
 8103870:	69ba      	ldr	r2, [r7, #24]
 8103872:	1ad3      	subs	r3, r2, r3
 8103874:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8103876:	683b      	ldr	r3, [r7, #0]
 8103878:	681b      	ldr	r3, [r3, #0]
 810387a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810387e:	d102      	bne.n	8103886 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8103880:	2300      	movs	r3, #0
 8103882:	61fb      	str	r3, [r7, #28]
 8103884:	e023      	b.n	81038ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8103886:	687b      	ldr	r3, [r7, #4]
 8103888:	681a      	ldr	r2, [r3, #0]
 810388a:	4b15      	ldr	r3, [pc, #84]	; (81038e0 <xTaskCheckForTimeOut+0xc0>)
 810388c:	681b      	ldr	r3, [r3, #0]
 810388e:	429a      	cmp	r2, r3
 8103890:	d007      	beq.n	81038a2 <xTaskCheckForTimeOut+0x82>
 8103892:	687b      	ldr	r3, [r7, #4]
 8103894:	685b      	ldr	r3, [r3, #4]
 8103896:	69ba      	ldr	r2, [r7, #24]
 8103898:	429a      	cmp	r2, r3
 810389a:	d302      	bcc.n	81038a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810389c:	2301      	movs	r3, #1
 810389e:	61fb      	str	r3, [r7, #28]
 81038a0:	e015      	b.n	81038ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 81038a2:	683b      	ldr	r3, [r7, #0]
 81038a4:	681b      	ldr	r3, [r3, #0]
 81038a6:	697a      	ldr	r2, [r7, #20]
 81038a8:	429a      	cmp	r2, r3
 81038aa:	d20b      	bcs.n	81038c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 81038ac:	683b      	ldr	r3, [r7, #0]
 81038ae:	681a      	ldr	r2, [r3, #0]
 81038b0:	697b      	ldr	r3, [r7, #20]
 81038b2:	1ad2      	subs	r2, r2, r3
 81038b4:	683b      	ldr	r3, [r7, #0]
 81038b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 81038b8:	6878      	ldr	r0, [r7, #4]
 81038ba:	f7ff ff9b 	bl	81037f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 81038be:	2300      	movs	r3, #0
 81038c0:	61fb      	str	r3, [r7, #28]
 81038c2:	e004      	b.n	81038ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 81038c4:	683b      	ldr	r3, [r7, #0]
 81038c6:	2200      	movs	r2, #0
 81038c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 81038ca:	2301      	movs	r3, #1
 81038cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 81038ce:	f7fe fcc9 	bl	8102264 <vPortExitCritical>

	return xReturn;
 81038d2:	69fb      	ldr	r3, [r7, #28]
}
 81038d4:	4618      	mov	r0, r3
 81038d6:	3720      	adds	r7, #32
 81038d8:	46bd      	mov	sp, r7
 81038da:	bd80      	pop	{r7, pc}
 81038dc:	100049a4 	.word	0x100049a4
 81038e0:	100049b8 	.word	0x100049b8

081038e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 81038e4:	b480      	push	{r7}
 81038e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 81038e8:	4b03      	ldr	r3, [pc, #12]	; (81038f8 <vTaskMissedYield+0x14>)
 81038ea:	2201      	movs	r2, #1
 81038ec:	601a      	str	r2, [r3, #0]
}
 81038ee:	bf00      	nop
 81038f0:	46bd      	mov	sp, r7
 81038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038f6:	4770      	bx	lr
 81038f8:	100049b4 	.word	0x100049b4

081038fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 81038fc:	b580      	push	{r7, lr}
 81038fe:	b082      	sub	sp, #8
 8103900:	af00      	add	r7, sp, #0
 8103902:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8103904:	f000 f852 	bl	81039ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8103908:	4b06      	ldr	r3, [pc, #24]	; (8103924 <prvIdleTask+0x28>)
 810390a:	681b      	ldr	r3, [r3, #0]
 810390c:	2b01      	cmp	r3, #1
 810390e:	d9f9      	bls.n	8103904 <prvIdleTask+0x8>
			{
				taskYIELD();
 8103910:	4b05      	ldr	r3, [pc, #20]	; (8103928 <prvIdleTask+0x2c>)
 8103912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103916:	601a      	str	r2, [r3, #0]
 8103918:	f3bf 8f4f 	dsb	sy
 810391c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8103920:	e7f0      	b.n	8103904 <prvIdleTask+0x8>
 8103922:	bf00      	nop
 8103924:	100044d0 	.word	0x100044d0
 8103928:	e000ed04 	.word	0xe000ed04

0810392c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810392c:	b580      	push	{r7, lr}
 810392e:	b082      	sub	sp, #8
 8103930:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8103932:	2300      	movs	r3, #0
 8103934:	607b      	str	r3, [r7, #4]
 8103936:	e00c      	b.n	8103952 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8103938:	687a      	ldr	r2, [r7, #4]
 810393a:	4613      	mov	r3, r2
 810393c:	009b      	lsls	r3, r3, #2
 810393e:	4413      	add	r3, r2
 8103940:	009b      	lsls	r3, r3, #2
 8103942:	4a12      	ldr	r2, [pc, #72]	; (810398c <prvInitialiseTaskLists+0x60>)
 8103944:	4413      	add	r3, r2
 8103946:	4618      	mov	r0, r3
 8103948:	f7fe fa7a 	bl	8101e40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810394c:	687b      	ldr	r3, [r7, #4]
 810394e:	3301      	adds	r3, #1
 8103950:	607b      	str	r3, [r7, #4]
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	2b37      	cmp	r3, #55	; 0x37
 8103956:	d9ef      	bls.n	8103938 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8103958:	480d      	ldr	r0, [pc, #52]	; (8103990 <prvInitialiseTaskLists+0x64>)
 810395a:	f7fe fa71 	bl	8101e40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810395e:	480d      	ldr	r0, [pc, #52]	; (8103994 <prvInitialiseTaskLists+0x68>)
 8103960:	f7fe fa6e 	bl	8101e40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8103964:	480c      	ldr	r0, [pc, #48]	; (8103998 <prvInitialiseTaskLists+0x6c>)
 8103966:	f7fe fa6b 	bl	8101e40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810396a:	480c      	ldr	r0, [pc, #48]	; (810399c <prvInitialiseTaskLists+0x70>)
 810396c:	f7fe fa68 	bl	8101e40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8103970:	480b      	ldr	r0, [pc, #44]	; (81039a0 <prvInitialiseTaskLists+0x74>)
 8103972:	f7fe fa65 	bl	8101e40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8103976:	4b0b      	ldr	r3, [pc, #44]	; (81039a4 <prvInitialiseTaskLists+0x78>)
 8103978:	4a05      	ldr	r2, [pc, #20]	; (8103990 <prvInitialiseTaskLists+0x64>)
 810397a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810397c:	4b0a      	ldr	r3, [pc, #40]	; (81039a8 <prvInitialiseTaskLists+0x7c>)
 810397e:	4a05      	ldr	r2, [pc, #20]	; (8103994 <prvInitialiseTaskLists+0x68>)
 8103980:	601a      	str	r2, [r3, #0]
}
 8103982:	bf00      	nop
 8103984:	3708      	adds	r7, #8
 8103986:	46bd      	mov	sp, r7
 8103988:	bd80      	pop	{r7, pc}
 810398a:	bf00      	nop
 810398c:	100044d0 	.word	0x100044d0
 8103990:	10004930 	.word	0x10004930
 8103994:	10004944 	.word	0x10004944
 8103998:	10004960 	.word	0x10004960
 810399c:	10004974 	.word	0x10004974
 81039a0:	1000498c 	.word	0x1000498c
 81039a4:	10004958 	.word	0x10004958
 81039a8:	1000495c 	.word	0x1000495c

081039ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 81039ac:	b580      	push	{r7, lr}
 81039ae:	b082      	sub	sp, #8
 81039b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81039b2:	e019      	b.n	81039e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 81039b4:	f7fe fc26 	bl	8102204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81039b8:	4b10      	ldr	r3, [pc, #64]	; (81039fc <prvCheckTasksWaitingTermination+0x50>)
 81039ba:	68db      	ldr	r3, [r3, #12]
 81039bc:	68db      	ldr	r3, [r3, #12]
 81039be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	3304      	adds	r3, #4
 81039c4:	4618      	mov	r0, r3
 81039c6:	f7fe fac5 	bl	8101f54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 81039ca:	4b0d      	ldr	r3, [pc, #52]	; (8103a00 <prvCheckTasksWaitingTermination+0x54>)
 81039cc:	681b      	ldr	r3, [r3, #0]
 81039ce:	3b01      	subs	r3, #1
 81039d0:	4a0b      	ldr	r2, [pc, #44]	; (8103a00 <prvCheckTasksWaitingTermination+0x54>)
 81039d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 81039d4:	4b0b      	ldr	r3, [pc, #44]	; (8103a04 <prvCheckTasksWaitingTermination+0x58>)
 81039d6:	681b      	ldr	r3, [r3, #0]
 81039d8:	3b01      	subs	r3, #1
 81039da:	4a0a      	ldr	r2, [pc, #40]	; (8103a04 <prvCheckTasksWaitingTermination+0x58>)
 81039dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 81039de:	f7fe fc41 	bl	8102264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 81039e2:	6878      	ldr	r0, [r7, #4]
 81039e4:	f000 f810 	bl	8103a08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81039e8:	4b06      	ldr	r3, [pc, #24]	; (8103a04 <prvCheckTasksWaitingTermination+0x58>)
 81039ea:	681b      	ldr	r3, [r3, #0]
 81039ec:	2b00      	cmp	r3, #0
 81039ee:	d1e1      	bne.n	81039b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 81039f0:	bf00      	nop
 81039f2:	bf00      	nop
 81039f4:	3708      	adds	r7, #8
 81039f6:	46bd      	mov	sp, r7
 81039f8:	bd80      	pop	{r7, pc}
 81039fa:	bf00      	nop
 81039fc:	10004974 	.word	0x10004974
 8103a00:	100049a0 	.word	0x100049a0
 8103a04:	10004988 	.word	0x10004988

08103a08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8103a08:	b580      	push	{r7, lr}
 8103a0a:	b084      	sub	sp, #16
 8103a0c:	af00      	add	r7, sp, #0
 8103a0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8103a10:	687b      	ldr	r3, [r7, #4]
 8103a12:	3354      	adds	r3, #84	; 0x54
 8103a14:	4618      	mov	r0, r3
 8103a16:	f000 fcc3 	bl	81043a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8103a1a:	687b      	ldr	r3, [r7, #4]
 8103a1c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8103a20:	2b00      	cmp	r3, #0
 8103a22:	d108      	bne.n	8103a36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8103a24:	687b      	ldr	r3, [r7, #4]
 8103a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103a28:	4618      	mov	r0, r3
 8103a2a:	f7fe f8eb 	bl	8101c04 <vPortFree>
				vPortFree( pxTCB );
 8103a2e:	6878      	ldr	r0, [r7, #4]
 8103a30:	f7fe f8e8 	bl	8101c04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8103a34:	e018      	b.n	8103a68 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8103a36:	687b      	ldr	r3, [r7, #4]
 8103a38:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8103a3c:	2b01      	cmp	r3, #1
 8103a3e:	d103      	bne.n	8103a48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8103a40:	6878      	ldr	r0, [r7, #4]
 8103a42:	f7fe f8df 	bl	8101c04 <vPortFree>
	}
 8103a46:	e00f      	b.n	8103a68 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8103a48:	687b      	ldr	r3, [r7, #4]
 8103a4a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8103a4e:	2b02      	cmp	r3, #2
 8103a50:	d00a      	beq.n	8103a68 <prvDeleteTCB+0x60>
	__asm volatile
 8103a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103a56:	f383 8811 	msr	BASEPRI, r3
 8103a5a:	f3bf 8f6f 	isb	sy
 8103a5e:	f3bf 8f4f 	dsb	sy
 8103a62:	60fb      	str	r3, [r7, #12]
}
 8103a64:	bf00      	nop
 8103a66:	e7fe      	b.n	8103a66 <prvDeleteTCB+0x5e>
	}
 8103a68:	bf00      	nop
 8103a6a:	3710      	adds	r7, #16
 8103a6c:	46bd      	mov	sp, r7
 8103a6e:	bd80      	pop	{r7, pc}

08103a70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8103a70:	b480      	push	{r7}
 8103a72:	b083      	sub	sp, #12
 8103a74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8103a76:	4b0c      	ldr	r3, [pc, #48]	; (8103aa8 <prvResetNextTaskUnblockTime+0x38>)
 8103a78:	681b      	ldr	r3, [r3, #0]
 8103a7a:	681b      	ldr	r3, [r3, #0]
 8103a7c:	2b00      	cmp	r3, #0
 8103a7e:	d104      	bne.n	8103a8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8103a80:	4b0a      	ldr	r3, [pc, #40]	; (8103aac <prvResetNextTaskUnblockTime+0x3c>)
 8103a82:	f04f 32ff 	mov.w	r2, #4294967295
 8103a86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8103a88:	e008      	b.n	8103a9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103a8a:	4b07      	ldr	r3, [pc, #28]	; (8103aa8 <prvResetNextTaskUnblockTime+0x38>)
 8103a8c:	681b      	ldr	r3, [r3, #0]
 8103a8e:	68db      	ldr	r3, [r3, #12]
 8103a90:	68db      	ldr	r3, [r3, #12]
 8103a92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	685b      	ldr	r3, [r3, #4]
 8103a98:	4a04      	ldr	r2, [pc, #16]	; (8103aac <prvResetNextTaskUnblockTime+0x3c>)
 8103a9a:	6013      	str	r3, [r2, #0]
}
 8103a9c:	bf00      	nop
 8103a9e:	370c      	adds	r7, #12
 8103aa0:	46bd      	mov	sp, r7
 8103aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103aa6:	4770      	bx	lr
 8103aa8:	10004958 	.word	0x10004958
 8103aac:	100049c0 	.word	0x100049c0

08103ab0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8103ab0:	b480      	push	{r7}
 8103ab2:	b083      	sub	sp, #12
 8103ab4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8103ab6:	4b0b      	ldr	r3, [pc, #44]	; (8103ae4 <xTaskGetSchedulerState+0x34>)
 8103ab8:	681b      	ldr	r3, [r3, #0]
 8103aba:	2b00      	cmp	r3, #0
 8103abc:	d102      	bne.n	8103ac4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8103abe:	2301      	movs	r3, #1
 8103ac0:	607b      	str	r3, [r7, #4]
 8103ac2:	e008      	b.n	8103ad6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8103ac4:	4b08      	ldr	r3, [pc, #32]	; (8103ae8 <xTaskGetSchedulerState+0x38>)
 8103ac6:	681b      	ldr	r3, [r3, #0]
 8103ac8:	2b00      	cmp	r3, #0
 8103aca:	d102      	bne.n	8103ad2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8103acc:	2302      	movs	r3, #2
 8103ace:	607b      	str	r3, [r7, #4]
 8103ad0:	e001      	b.n	8103ad6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8103ad2:	2300      	movs	r3, #0
 8103ad4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8103ad6:	687b      	ldr	r3, [r7, #4]
	}
 8103ad8:	4618      	mov	r0, r3
 8103ada:	370c      	adds	r7, #12
 8103adc:	46bd      	mov	sp, r7
 8103ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ae2:	4770      	bx	lr
 8103ae4:	100049ac 	.word	0x100049ac
 8103ae8:	100049c8 	.word	0x100049c8

08103aec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8103aec:	b580      	push	{r7, lr}
 8103aee:	b086      	sub	sp, #24
 8103af0:	af00      	add	r7, sp, #0
 8103af2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8103af8:	2300      	movs	r3, #0
 8103afa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	2b00      	cmp	r3, #0
 8103b00:	d056      	beq.n	8103bb0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8103b02:	4b2e      	ldr	r3, [pc, #184]	; (8103bbc <xTaskPriorityDisinherit+0xd0>)
 8103b04:	681b      	ldr	r3, [r3, #0]
 8103b06:	693a      	ldr	r2, [r7, #16]
 8103b08:	429a      	cmp	r2, r3
 8103b0a:	d00a      	beq.n	8103b22 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8103b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103b10:	f383 8811 	msr	BASEPRI, r3
 8103b14:	f3bf 8f6f 	isb	sy
 8103b18:	f3bf 8f4f 	dsb	sy
 8103b1c:	60fb      	str	r3, [r7, #12]
}
 8103b1e:	bf00      	nop
 8103b20:	e7fe      	b.n	8103b20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8103b22:	693b      	ldr	r3, [r7, #16]
 8103b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b26:	2b00      	cmp	r3, #0
 8103b28:	d10a      	bne.n	8103b40 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8103b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103b2e:	f383 8811 	msr	BASEPRI, r3
 8103b32:	f3bf 8f6f 	isb	sy
 8103b36:	f3bf 8f4f 	dsb	sy
 8103b3a:	60bb      	str	r3, [r7, #8]
}
 8103b3c:	bf00      	nop
 8103b3e:	e7fe      	b.n	8103b3e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8103b40:	693b      	ldr	r3, [r7, #16]
 8103b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b44:	1e5a      	subs	r2, r3, #1
 8103b46:	693b      	ldr	r3, [r7, #16]
 8103b48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8103b4a:	693b      	ldr	r3, [r7, #16]
 8103b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103b4e:	693b      	ldr	r3, [r7, #16]
 8103b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103b52:	429a      	cmp	r2, r3
 8103b54:	d02c      	beq.n	8103bb0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8103b56:	693b      	ldr	r3, [r7, #16]
 8103b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b5a:	2b00      	cmp	r3, #0
 8103b5c:	d128      	bne.n	8103bb0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8103b5e:	693b      	ldr	r3, [r7, #16]
 8103b60:	3304      	adds	r3, #4
 8103b62:	4618      	mov	r0, r3
 8103b64:	f7fe f9f6 	bl	8101f54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8103b68:	693b      	ldr	r3, [r7, #16]
 8103b6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8103b6c:	693b      	ldr	r3, [r7, #16]
 8103b6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103b70:	693b      	ldr	r3, [r7, #16]
 8103b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8103b78:	693b      	ldr	r3, [r7, #16]
 8103b7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8103b7c:	693b      	ldr	r3, [r7, #16]
 8103b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103b80:	4b0f      	ldr	r3, [pc, #60]	; (8103bc0 <xTaskPriorityDisinherit+0xd4>)
 8103b82:	681b      	ldr	r3, [r3, #0]
 8103b84:	429a      	cmp	r2, r3
 8103b86:	d903      	bls.n	8103b90 <xTaskPriorityDisinherit+0xa4>
 8103b88:	693b      	ldr	r3, [r7, #16]
 8103b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b8c:	4a0c      	ldr	r2, [pc, #48]	; (8103bc0 <xTaskPriorityDisinherit+0xd4>)
 8103b8e:	6013      	str	r3, [r2, #0]
 8103b90:	693b      	ldr	r3, [r7, #16]
 8103b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103b94:	4613      	mov	r3, r2
 8103b96:	009b      	lsls	r3, r3, #2
 8103b98:	4413      	add	r3, r2
 8103b9a:	009b      	lsls	r3, r3, #2
 8103b9c:	4a09      	ldr	r2, [pc, #36]	; (8103bc4 <xTaskPriorityDisinherit+0xd8>)
 8103b9e:	441a      	add	r2, r3
 8103ba0:	693b      	ldr	r3, [r7, #16]
 8103ba2:	3304      	adds	r3, #4
 8103ba4:	4619      	mov	r1, r3
 8103ba6:	4610      	mov	r0, r2
 8103ba8:	f7fe f977 	bl	8101e9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8103bac:	2301      	movs	r3, #1
 8103bae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8103bb0:	697b      	ldr	r3, [r7, #20]
	}
 8103bb2:	4618      	mov	r0, r3
 8103bb4:	3718      	adds	r7, #24
 8103bb6:	46bd      	mov	sp, r7
 8103bb8:	bd80      	pop	{r7, pc}
 8103bba:	bf00      	nop
 8103bbc:	100044cc 	.word	0x100044cc
 8103bc0:	100049a8 	.word	0x100049a8
 8103bc4:	100044d0 	.word	0x100044d0

08103bc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8103bc8:	b580      	push	{r7, lr}
 8103bca:	b084      	sub	sp, #16
 8103bcc:	af00      	add	r7, sp, #0
 8103bce:	6078      	str	r0, [r7, #4]
 8103bd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8103bd2:	4b21      	ldr	r3, [pc, #132]	; (8103c58 <prvAddCurrentTaskToDelayedList+0x90>)
 8103bd4:	681b      	ldr	r3, [r3, #0]
 8103bd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8103bd8:	4b20      	ldr	r3, [pc, #128]	; (8103c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8103bda:	681b      	ldr	r3, [r3, #0]
 8103bdc:	3304      	adds	r3, #4
 8103bde:	4618      	mov	r0, r3
 8103be0:	f7fe f9b8 	bl	8101f54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8103be4:	687b      	ldr	r3, [r7, #4]
 8103be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103bea:	d10a      	bne.n	8103c02 <prvAddCurrentTaskToDelayedList+0x3a>
 8103bec:	683b      	ldr	r3, [r7, #0]
 8103bee:	2b00      	cmp	r3, #0
 8103bf0:	d007      	beq.n	8103c02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8103bf2:	4b1a      	ldr	r3, [pc, #104]	; (8103c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8103bf4:	681b      	ldr	r3, [r3, #0]
 8103bf6:	3304      	adds	r3, #4
 8103bf8:	4619      	mov	r1, r3
 8103bfa:	4819      	ldr	r0, [pc, #100]	; (8103c60 <prvAddCurrentTaskToDelayedList+0x98>)
 8103bfc:	f7fe f94d 	bl	8101e9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8103c00:	e026      	b.n	8103c50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8103c02:	68fa      	ldr	r2, [r7, #12]
 8103c04:	687b      	ldr	r3, [r7, #4]
 8103c06:	4413      	add	r3, r2
 8103c08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8103c0a:	4b14      	ldr	r3, [pc, #80]	; (8103c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8103c0c:	681b      	ldr	r3, [r3, #0]
 8103c0e:	68ba      	ldr	r2, [r7, #8]
 8103c10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8103c12:	68ba      	ldr	r2, [r7, #8]
 8103c14:	68fb      	ldr	r3, [r7, #12]
 8103c16:	429a      	cmp	r2, r3
 8103c18:	d209      	bcs.n	8103c2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8103c1a:	4b12      	ldr	r3, [pc, #72]	; (8103c64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8103c1c:	681a      	ldr	r2, [r3, #0]
 8103c1e:	4b0f      	ldr	r3, [pc, #60]	; (8103c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8103c20:	681b      	ldr	r3, [r3, #0]
 8103c22:	3304      	adds	r3, #4
 8103c24:	4619      	mov	r1, r3
 8103c26:	4610      	mov	r0, r2
 8103c28:	f7fe f95b 	bl	8101ee2 <vListInsert>
}
 8103c2c:	e010      	b.n	8103c50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8103c2e:	4b0e      	ldr	r3, [pc, #56]	; (8103c68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8103c30:	681a      	ldr	r2, [r3, #0]
 8103c32:	4b0a      	ldr	r3, [pc, #40]	; (8103c5c <prvAddCurrentTaskToDelayedList+0x94>)
 8103c34:	681b      	ldr	r3, [r3, #0]
 8103c36:	3304      	adds	r3, #4
 8103c38:	4619      	mov	r1, r3
 8103c3a:	4610      	mov	r0, r2
 8103c3c:	f7fe f951 	bl	8101ee2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8103c40:	4b0a      	ldr	r3, [pc, #40]	; (8103c6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8103c42:	681b      	ldr	r3, [r3, #0]
 8103c44:	68ba      	ldr	r2, [r7, #8]
 8103c46:	429a      	cmp	r2, r3
 8103c48:	d202      	bcs.n	8103c50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8103c4a:	4a08      	ldr	r2, [pc, #32]	; (8103c6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8103c4c:	68bb      	ldr	r3, [r7, #8]
 8103c4e:	6013      	str	r3, [r2, #0]
}
 8103c50:	bf00      	nop
 8103c52:	3710      	adds	r7, #16
 8103c54:	46bd      	mov	sp, r7
 8103c56:	bd80      	pop	{r7, pc}
 8103c58:	100049a4 	.word	0x100049a4
 8103c5c:	100044cc 	.word	0x100044cc
 8103c60:	1000498c 	.word	0x1000498c
 8103c64:	1000495c 	.word	0x1000495c
 8103c68:	10004958 	.word	0x10004958
 8103c6c:	100049c0 	.word	0x100049c0

08103c70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8103c70:	b580      	push	{r7, lr}
 8103c72:	b08a      	sub	sp, #40	; 0x28
 8103c74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8103c76:	2300      	movs	r3, #0
 8103c78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8103c7a:	f000 fb07 	bl	810428c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8103c7e:	4b1c      	ldr	r3, [pc, #112]	; (8103cf0 <xTimerCreateTimerTask+0x80>)
 8103c80:	681b      	ldr	r3, [r3, #0]
 8103c82:	2b00      	cmp	r3, #0
 8103c84:	d021      	beq.n	8103cca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8103c86:	2300      	movs	r3, #0
 8103c88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8103c8a:	2300      	movs	r3, #0
 8103c8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8103c8e:	1d3a      	adds	r2, r7, #4
 8103c90:	f107 0108 	add.w	r1, r7, #8
 8103c94:	f107 030c 	add.w	r3, r7, #12
 8103c98:	4618      	mov	r0, r3
 8103c9a:	f7fd fecd 	bl	8101a38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8103c9e:	6879      	ldr	r1, [r7, #4]
 8103ca0:	68bb      	ldr	r3, [r7, #8]
 8103ca2:	68fa      	ldr	r2, [r7, #12]
 8103ca4:	9202      	str	r2, [sp, #8]
 8103ca6:	9301      	str	r3, [sp, #4]
 8103ca8:	2302      	movs	r3, #2
 8103caa:	9300      	str	r3, [sp, #0]
 8103cac:	2300      	movs	r3, #0
 8103cae:	460a      	mov	r2, r1
 8103cb0:	4910      	ldr	r1, [pc, #64]	; (8103cf4 <xTimerCreateTimerTask+0x84>)
 8103cb2:	4811      	ldr	r0, [pc, #68]	; (8103cf8 <xTimerCreateTimerTask+0x88>)
 8103cb4:	f7ff f8b4 	bl	8102e20 <xTaskCreateStatic>
 8103cb8:	4603      	mov	r3, r0
 8103cba:	4a10      	ldr	r2, [pc, #64]	; (8103cfc <xTimerCreateTimerTask+0x8c>)
 8103cbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8103cbe:	4b0f      	ldr	r3, [pc, #60]	; (8103cfc <xTimerCreateTimerTask+0x8c>)
 8103cc0:	681b      	ldr	r3, [r3, #0]
 8103cc2:	2b00      	cmp	r3, #0
 8103cc4:	d001      	beq.n	8103cca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8103cc6:	2301      	movs	r3, #1
 8103cc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8103cca:	697b      	ldr	r3, [r7, #20]
 8103ccc:	2b00      	cmp	r3, #0
 8103cce:	d10a      	bne.n	8103ce6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8103cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103cd4:	f383 8811 	msr	BASEPRI, r3
 8103cd8:	f3bf 8f6f 	isb	sy
 8103cdc:	f3bf 8f4f 	dsb	sy
 8103ce0:	613b      	str	r3, [r7, #16]
}
 8103ce2:	bf00      	nop
 8103ce4:	e7fe      	b.n	8103ce4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8103ce6:	697b      	ldr	r3, [r7, #20]
}
 8103ce8:	4618      	mov	r0, r3
 8103cea:	3718      	adds	r7, #24
 8103cec:	46bd      	mov	sp, r7
 8103cee:	bd80      	pop	{r7, pc}
 8103cf0:	100049fc 	.word	0x100049fc
 8103cf4:	08104534 	.word	0x08104534
 8103cf8:	08103e35 	.word	0x08103e35
 8103cfc:	10004a00 	.word	0x10004a00

08103d00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8103d00:	b580      	push	{r7, lr}
 8103d02:	b08a      	sub	sp, #40	; 0x28
 8103d04:	af00      	add	r7, sp, #0
 8103d06:	60f8      	str	r0, [r7, #12]
 8103d08:	60b9      	str	r1, [r7, #8]
 8103d0a:	607a      	str	r2, [r7, #4]
 8103d0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8103d0e:	2300      	movs	r3, #0
 8103d10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8103d12:	68fb      	ldr	r3, [r7, #12]
 8103d14:	2b00      	cmp	r3, #0
 8103d16:	d10a      	bne.n	8103d2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8103d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103d1c:	f383 8811 	msr	BASEPRI, r3
 8103d20:	f3bf 8f6f 	isb	sy
 8103d24:	f3bf 8f4f 	dsb	sy
 8103d28:	623b      	str	r3, [r7, #32]
}
 8103d2a:	bf00      	nop
 8103d2c:	e7fe      	b.n	8103d2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8103d2e:	4b1a      	ldr	r3, [pc, #104]	; (8103d98 <xTimerGenericCommand+0x98>)
 8103d30:	681b      	ldr	r3, [r3, #0]
 8103d32:	2b00      	cmp	r3, #0
 8103d34:	d02a      	beq.n	8103d8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8103d36:	68bb      	ldr	r3, [r7, #8]
 8103d38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8103d3a:	687b      	ldr	r3, [r7, #4]
 8103d3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8103d3e:	68fb      	ldr	r3, [r7, #12]
 8103d40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8103d42:	68bb      	ldr	r3, [r7, #8]
 8103d44:	2b05      	cmp	r3, #5
 8103d46:	dc18      	bgt.n	8103d7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8103d48:	f7ff feb2 	bl	8103ab0 <xTaskGetSchedulerState>
 8103d4c:	4603      	mov	r3, r0
 8103d4e:	2b02      	cmp	r3, #2
 8103d50:	d109      	bne.n	8103d66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8103d52:	4b11      	ldr	r3, [pc, #68]	; (8103d98 <xTimerGenericCommand+0x98>)
 8103d54:	6818      	ldr	r0, [r3, #0]
 8103d56:	f107 0110 	add.w	r1, r7, #16
 8103d5a:	2300      	movs	r3, #0
 8103d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8103d5e:	f7fe fc77 	bl	8102650 <xQueueGenericSend>
 8103d62:	6278      	str	r0, [r7, #36]	; 0x24
 8103d64:	e012      	b.n	8103d8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8103d66:	4b0c      	ldr	r3, [pc, #48]	; (8103d98 <xTimerGenericCommand+0x98>)
 8103d68:	6818      	ldr	r0, [r3, #0]
 8103d6a:	f107 0110 	add.w	r1, r7, #16
 8103d6e:	2300      	movs	r3, #0
 8103d70:	2200      	movs	r2, #0
 8103d72:	f7fe fc6d 	bl	8102650 <xQueueGenericSend>
 8103d76:	6278      	str	r0, [r7, #36]	; 0x24
 8103d78:	e008      	b.n	8103d8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8103d7a:	4b07      	ldr	r3, [pc, #28]	; (8103d98 <xTimerGenericCommand+0x98>)
 8103d7c:	6818      	ldr	r0, [r3, #0]
 8103d7e:	f107 0110 	add.w	r1, r7, #16
 8103d82:	2300      	movs	r3, #0
 8103d84:	683a      	ldr	r2, [r7, #0]
 8103d86:	f7fe fd61 	bl	810284c <xQueueGenericSendFromISR>
 8103d8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8103d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8103d8e:	4618      	mov	r0, r3
 8103d90:	3728      	adds	r7, #40	; 0x28
 8103d92:	46bd      	mov	sp, r7
 8103d94:	bd80      	pop	{r7, pc}
 8103d96:	bf00      	nop
 8103d98:	100049fc 	.word	0x100049fc

08103d9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8103d9c:	b580      	push	{r7, lr}
 8103d9e:	b088      	sub	sp, #32
 8103da0:	af02      	add	r7, sp, #8
 8103da2:	6078      	str	r0, [r7, #4]
 8103da4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103da6:	4b22      	ldr	r3, [pc, #136]	; (8103e30 <prvProcessExpiredTimer+0x94>)
 8103da8:	681b      	ldr	r3, [r3, #0]
 8103daa:	68db      	ldr	r3, [r3, #12]
 8103dac:	68db      	ldr	r3, [r3, #12]
 8103dae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8103db0:	697b      	ldr	r3, [r7, #20]
 8103db2:	3304      	adds	r3, #4
 8103db4:	4618      	mov	r0, r3
 8103db6:	f7fe f8cd 	bl	8101f54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8103dba:	697b      	ldr	r3, [r7, #20]
 8103dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8103dc0:	f003 0304 	and.w	r3, r3, #4
 8103dc4:	2b00      	cmp	r3, #0
 8103dc6:	d022      	beq.n	8103e0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8103dc8:	697b      	ldr	r3, [r7, #20]
 8103dca:	699a      	ldr	r2, [r3, #24]
 8103dcc:	687b      	ldr	r3, [r7, #4]
 8103dce:	18d1      	adds	r1, r2, r3
 8103dd0:	687b      	ldr	r3, [r7, #4]
 8103dd2:	683a      	ldr	r2, [r7, #0]
 8103dd4:	6978      	ldr	r0, [r7, #20]
 8103dd6:	f000 f8d1 	bl	8103f7c <prvInsertTimerInActiveList>
 8103dda:	4603      	mov	r3, r0
 8103ddc:	2b00      	cmp	r3, #0
 8103dde:	d01f      	beq.n	8103e20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8103de0:	2300      	movs	r3, #0
 8103de2:	9300      	str	r3, [sp, #0]
 8103de4:	2300      	movs	r3, #0
 8103de6:	687a      	ldr	r2, [r7, #4]
 8103de8:	2100      	movs	r1, #0
 8103dea:	6978      	ldr	r0, [r7, #20]
 8103dec:	f7ff ff88 	bl	8103d00 <xTimerGenericCommand>
 8103df0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8103df2:	693b      	ldr	r3, [r7, #16]
 8103df4:	2b00      	cmp	r3, #0
 8103df6:	d113      	bne.n	8103e20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8103df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103dfc:	f383 8811 	msr	BASEPRI, r3
 8103e00:	f3bf 8f6f 	isb	sy
 8103e04:	f3bf 8f4f 	dsb	sy
 8103e08:	60fb      	str	r3, [r7, #12]
}
 8103e0a:	bf00      	nop
 8103e0c:	e7fe      	b.n	8103e0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8103e0e:	697b      	ldr	r3, [r7, #20]
 8103e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8103e14:	f023 0301 	bic.w	r3, r3, #1
 8103e18:	b2da      	uxtb	r2, r3
 8103e1a:	697b      	ldr	r3, [r7, #20]
 8103e1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8103e20:	697b      	ldr	r3, [r7, #20]
 8103e22:	6a1b      	ldr	r3, [r3, #32]
 8103e24:	6978      	ldr	r0, [r7, #20]
 8103e26:	4798      	blx	r3
}
 8103e28:	bf00      	nop
 8103e2a:	3718      	adds	r7, #24
 8103e2c:	46bd      	mov	sp, r7
 8103e2e:	bd80      	pop	{r7, pc}
 8103e30:	100049f4 	.word	0x100049f4

08103e34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8103e34:	b580      	push	{r7, lr}
 8103e36:	b084      	sub	sp, #16
 8103e38:	af00      	add	r7, sp, #0
 8103e3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8103e3c:	f107 0308 	add.w	r3, r7, #8
 8103e40:	4618      	mov	r0, r3
 8103e42:	f000 f857 	bl	8103ef4 <prvGetNextExpireTime>
 8103e46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8103e48:	68bb      	ldr	r3, [r7, #8]
 8103e4a:	4619      	mov	r1, r3
 8103e4c:	68f8      	ldr	r0, [r7, #12]
 8103e4e:	f000 f803 	bl	8103e58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8103e52:	f000 f8d5 	bl	8104000 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8103e56:	e7f1      	b.n	8103e3c <prvTimerTask+0x8>

08103e58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8103e58:	b580      	push	{r7, lr}
 8103e5a:	b084      	sub	sp, #16
 8103e5c:	af00      	add	r7, sp, #0
 8103e5e:	6078      	str	r0, [r7, #4]
 8103e60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8103e62:	f7ff fa39 	bl	81032d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8103e66:	f107 0308 	add.w	r3, r7, #8
 8103e6a:	4618      	mov	r0, r3
 8103e6c:	f000 f866 	bl	8103f3c <prvSampleTimeNow>
 8103e70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8103e72:	68bb      	ldr	r3, [r7, #8]
 8103e74:	2b00      	cmp	r3, #0
 8103e76:	d130      	bne.n	8103eda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8103e78:	683b      	ldr	r3, [r7, #0]
 8103e7a:	2b00      	cmp	r3, #0
 8103e7c:	d10a      	bne.n	8103e94 <prvProcessTimerOrBlockTask+0x3c>
 8103e7e:	687a      	ldr	r2, [r7, #4]
 8103e80:	68fb      	ldr	r3, [r7, #12]
 8103e82:	429a      	cmp	r2, r3
 8103e84:	d806      	bhi.n	8103e94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8103e86:	f7ff fa35 	bl	81032f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8103e8a:	68f9      	ldr	r1, [r7, #12]
 8103e8c:	6878      	ldr	r0, [r7, #4]
 8103e8e:	f7ff ff85 	bl	8103d9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8103e92:	e024      	b.n	8103ede <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8103e94:	683b      	ldr	r3, [r7, #0]
 8103e96:	2b00      	cmp	r3, #0
 8103e98:	d008      	beq.n	8103eac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8103e9a:	4b13      	ldr	r3, [pc, #76]	; (8103ee8 <prvProcessTimerOrBlockTask+0x90>)
 8103e9c:	681b      	ldr	r3, [r3, #0]
 8103e9e:	681b      	ldr	r3, [r3, #0]
 8103ea0:	2b00      	cmp	r3, #0
 8103ea2:	d101      	bne.n	8103ea8 <prvProcessTimerOrBlockTask+0x50>
 8103ea4:	2301      	movs	r3, #1
 8103ea6:	e000      	b.n	8103eaa <prvProcessTimerOrBlockTask+0x52>
 8103ea8:	2300      	movs	r3, #0
 8103eaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8103eac:	4b0f      	ldr	r3, [pc, #60]	; (8103eec <prvProcessTimerOrBlockTask+0x94>)
 8103eae:	6818      	ldr	r0, [r3, #0]
 8103eb0:	687a      	ldr	r2, [r7, #4]
 8103eb2:	68fb      	ldr	r3, [r7, #12]
 8103eb4:	1ad3      	subs	r3, r2, r3
 8103eb6:	683a      	ldr	r2, [r7, #0]
 8103eb8:	4619      	mov	r1, r3
 8103eba:	f7fe ff7d 	bl	8102db8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8103ebe:	f7ff fa19 	bl	81032f4 <xTaskResumeAll>
 8103ec2:	4603      	mov	r3, r0
 8103ec4:	2b00      	cmp	r3, #0
 8103ec6:	d10a      	bne.n	8103ede <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8103ec8:	4b09      	ldr	r3, [pc, #36]	; (8103ef0 <prvProcessTimerOrBlockTask+0x98>)
 8103eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103ece:	601a      	str	r2, [r3, #0]
 8103ed0:	f3bf 8f4f 	dsb	sy
 8103ed4:	f3bf 8f6f 	isb	sy
}
 8103ed8:	e001      	b.n	8103ede <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8103eda:	f7ff fa0b 	bl	81032f4 <xTaskResumeAll>
}
 8103ede:	bf00      	nop
 8103ee0:	3710      	adds	r7, #16
 8103ee2:	46bd      	mov	sp, r7
 8103ee4:	bd80      	pop	{r7, pc}
 8103ee6:	bf00      	nop
 8103ee8:	100049f8 	.word	0x100049f8
 8103eec:	100049fc 	.word	0x100049fc
 8103ef0:	e000ed04 	.word	0xe000ed04

08103ef4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8103ef4:	b480      	push	{r7}
 8103ef6:	b085      	sub	sp, #20
 8103ef8:	af00      	add	r7, sp, #0
 8103efa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8103efc:	4b0e      	ldr	r3, [pc, #56]	; (8103f38 <prvGetNextExpireTime+0x44>)
 8103efe:	681b      	ldr	r3, [r3, #0]
 8103f00:	681b      	ldr	r3, [r3, #0]
 8103f02:	2b00      	cmp	r3, #0
 8103f04:	d101      	bne.n	8103f0a <prvGetNextExpireTime+0x16>
 8103f06:	2201      	movs	r2, #1
 8103f08:	e000      	b.n	8103f0c <prvGetNextExpireTime+0x18>
 8103f0a:	2200      	movs	r2, #0
 8103f0c:	687b      	ldr	r3, [r7, #4]
 8103f0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8103f10:	687b      	ldr	r3, [r7, #4]
 8103f12:	681b      	ldr	r3, [r3, #0]
 8103f14:	2b00      	cmp	r3, #0
 8103f16:	d105      	bne.n	8103f24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8103f18:	4b07      	ldr	r3, [pc, #28]	; (8103f38 <prvGetNextExpireTime+0x44>)
 8103f1a:	681b      	ldr	r3, [r3, #0]
 8103f1c:	68db      	ldr	r3, [r3, #12]
 8103f1e:	681b      	ldr	r3, [r3, #0]
 8103f20:	60fb      	str	r3, [r7, #12]
 8103f22:	e001      	b.n	8103f28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8103f24:	2300      	movs	r3, #0
 8103f26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8103f28:	68fb      	ldr	r3, [r7, #12]
}
 8103f2a:	4618      	mov	r0, r3
 8103f2c:	3714      	adds	r7, #20
 8103f2e:	46bd      	mov	sp, r7
 8103f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f34:	4770      	bx	lr
 8103f36:	bf00      	nop
 8103f38:	100049f4 	.word	0x100049f4

08103f3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8103f3c:	b580      	push	{r7, lr}
 8103f3e:	b084      	sub	sp, #16
 8103f40:	af00      	add	r7, sp, #0
 8103f42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8103f44:	f7ff fa74 	bl	8103430 <xTaskGetTickCount>
 8103f48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8103f4a:	4b0b      	ldr	r3, [pc, #44]	; (8103f78 <prvSampleTimeNow+0x3c>)
 8103f4c:	681b      	ldr	r3, [r3, #0]
 8103f4e:	68fa      	ldr	r2, [r7, #12]
 8103f50:	429a      	cmp	r2, r3
 8103f52:	d205      	bcs.n	8103f60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8103f54:	f000 f936 	bl	81041c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	2201      	movs	r2, #1
 8103f5c:	601a      	str	r2, [r3, #0]
 8103f5e:	e002      	b.n	8103f66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8103f60:	687b      	ldr	r3, [r7, #4]
 8103f62:	2200      	movs	r2, #0
 8103f64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8103f66:	4a04      	ldr	r2, [pc, #16]	; (8103f78 <prvSampleTimeNow+0x3c>)
 8103f68:	68fb      	ldr	r3, [r7, #12]
 8103f6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8103f6c:	68fb      	ldr	r3, [r7, #12]
}
 8103f6e:	4618      	mov	r0, r3
 8103f70:	3710      	adds	r7, #16
 8103f72:	46bd      	mov	sp, r7
 8103f74:	bd80      	pop	{r7, pc}
 8103f76:	bf00      	nop
 8103f78:	10004a04 	.word	0x10004a04

08103f7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8103f7c:	b580      	push	{r7, lr}
 8103f7e:	b086      	sub	sp, #24
 8103f80:	af00      	add	r7, sp, #0
 8103f82:	60f8      	str	r0, [r7, #12]
 8103f84:	60b9      	str	r1, [r7, #8]
 8103f86:	607a      	str	r2, [r7, #4]
 8103f88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8103f8a:	2300      	movs	r3, #0
 8103f8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8103f8e:	68fb      	ldr	r3, [r7, #12]
 8103f90:	68ba      	ldr	r2, [r7, #8]
 8103f92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8103f94:	68fb      	ldr	r3, [r7, #12]
 8103f96:	68fa      	ldr	r2, [r7, #12]
 8103f98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8103f9a:	68ba      	ldr	r2, [r7, #8]
 8103f9c:	687b      	ldr	r3, [r7, #4]
 8103f9e:	429a      	cmp	r2, r3
 8103fa0:	d812      	bhi.n	8103fc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103fa2:	687a      	ldr	r2, [r7, #4]
 8103fa4:	683b      	ldr	r3, [r7, #0]
 8103fa6:	1ad2      	subs	r2, r2, r3
 8103fa8:	68fb      	ldr	r3, [r7, #12]
 8103faa:	699b      	ldr	r3, [r3, #24]
 8103fac:	429a      	cmp	r2, r3
 8103fae:	d302      	bcc.n	8103fb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8103fb0:	2301      	movs	r3, #1
 8103fb2:	617b      	str	r3, [r7, #20]
 8103fb4:	e01b      	b.n	8103fee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8103fb6:	4b10      	ldr	r3, [pc, #64]	; (8103ff8 <prvInsertTimerInActiveList+0x7c>)
 8103fb8:	681a      	ldr	r2, [r3, #0]
 8103fba:	68fb      	ldr	r3, [r7, #12]
 8103fbc:	3304      	adds	r3, #4
 8103fbe:	4619      	mov	r1, r3
 8103fc0:	4610      	mov	r0, r2
 8103fc2:	f7fd ff8e 	bl	8101ee2 <vListInsert>
 8103fc6:	e012      	b.n	8103fee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8103fc8:	687a      	ldr	r2, [r7, #4]
 8103fca:	683b      	ldr	r3, [r7, #0]
 8103fcc:	429a      	cmp	r2, r3
 8103fce:	d206      	bcs.n	8103fde <prvInsertTimerInActiveList+0x62>
 8103fd0:	68ba      	ldr	r2, [r7, #8]
 8103fd2:	683b      	ldr	r3, [r7, #0]
 8103fd4:	429a      	cmp	r2, r3
 8103fd6:	d302      	bcc.n	8103fde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8103fd8:	2301      	movs	r3, #1
 8103fda:	617b      	str	r3, [r7, #20]
 8103fdc:	e007      	b.n	8103fee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8103fde:	4b07      	ldr	r3, [pc, #28]	; (8103ffc <prvInsertTimerInActiveList+0x80>)
 8103fe0:	681a      	ldr	r2, [r3, #0]
 8103fe2:	68fb      	ldr	r3, [r7, #12]
 8103fe4:	3304      	adds	r3, #4
 8103fe6:	4619      	mov	r1, r3
 8103fe8:	4610      	mov	r0, r2
 8103fea:	f7fd ff7a 	bl	8101ee2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8103fee:	697b      	ldr	r3, [r7, #20]
}
 8103ff0:	4618      	mov	r0, r3
 8103ff2:	3718      	adds	r7, #24
 8103ff4:	46bd      	mov	sp, r7
 8103ff6:	bd80      	pop	{r7, pc}
 8103ff8:	100049f8 	.word	0x100049f8
 8103ffc:	100049f4 	.word	0x100049f4

08104000 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8104000:	b580      	push	{r7, lr}
 8104002:	b08e      	sub	sp, #56	; 0x38
 8104004:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8104006:	e0ca      	b.n	810419e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8104008:	687b      	ldr	r3, [r7, #4]
 810400a:	2b00      	cmp	r3, #0
 810400c:	da18      	bge.n	8104040 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810400e:	1d3b      	adds	r3, r7, #4
 8104010:	3304      	adds	r3, #4
 8104012:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8104014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104016:	2b00      	cmp	r3, #0
 8104018:	d10a      	bne.n	8104030 <prvProcessReceivedCommands+0x30>
	__asm volatile
 810401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810401e:	f383 8811 	msr	BASEPRI, r3
 8104022:	f3bf 8f6f 	isb	sy
 8104026:	f3bf 8f4f 	dsb	sy
 810402a:	61fb      	str	r3, [r7, #28]
}
 810402c:	bf00      	nop
 810402e:	e7fe      	b.n	810402e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8104030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104032:	681b      	ldr	r3, [r3, #0]
 8104034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8104036:	6850      	ldr	r0, [r2, #4]
 8104038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810403a:	6892      	ldr	r2, [r2, #8]
 810403c:	4611      	mov	r1, r2
 810403e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	2b00      	cmp	r3, #0
 8104044:	f2c0 80aa 	blt.w	810419c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8104048:	68fb      	ldr	r3, [r7, #12]
 810404a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810404e:	695b      	ldr	r3, [r3, #20]
 8104050:	2b00      	cmp	r3, #0
 8104052:	d004      	beq.n	810405e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8104054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104056:	3304      	adds	r3, #4
 8104058:	4618      	mov	r0, r3
 810405a:	f7fd ff7b 	bl	8101f54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810405e:	463b      	mov	r3, r7
 8104060:	4618      	mov	r0, r3
 8104062:	f7ff ff6b 	bl	8103f3c <prvSampleTimeNow>
 8104066:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8104068:	687b      	ldr	r3, [r7, #4]
 810406a:	2b09      	cmp	r3, #9
 810406c:	f200 8097 	bhi.w	810419e <prvProcessReceivedCommands+0x19e>
 8104070:	a201      	add	r2, pc, #4	; (adr r2, 8104078 <prvProcessReceivedCommands+0x78>)
 8104072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104076:	bf00      	nop
 8104078:	081040a1 	.word	0x081040a1
 810407c:	081040a1 	.word	0x081040a1
 8104080:	081040a1 	.word	0x081040a1
 8104084:	08104115 	.word	0x08104115
 8104088:	08104129 	.word	0x08104129
 810408c:	08104173 	.word	0x08104173
 8104090:	081040a1 	.word	0x081040a1
 8104094:	081040a1 	.word	0x081040a1
 8104098:	08104115 	.word	0x08104115
 810409c:	08104129 	.word	0x08104129
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81040a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81040a6:	f043 0301 	orr.w	r3, r3, #1
 81040aa:	b2da      	uxtb	r2, r3
 81040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81040ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 81040b2:	68ba      	ldr	r2, [r7, #8]
 81040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81040b6:	699b      	ldr	r3, [r3, #24]
 81040b8:	18d1      	adds	r1, r2, r3
 81040ba:	68bb      	ldr	r3, [r7, #8]
 81040bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81040be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81040c0:	f7ff ff5c 	bl	8103f7c <prvInsertTimerInActiveList>
 81040c4:	4603      	mov	r3, r0
 81040c6:	2b00      	cmp	r3, #0
 81040c8:	d069      	beq.n	810419e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81040ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81040cc:	6a1b      	ldr	r3, [r3, #32]
 81040ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81040d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81040d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81040d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81040d8:	f003 0304 	and.w	r3, r3, #4
 81040dc:	2b00      	cmp	r3, #0
 81040de:	d05e      	beq.n	810419e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 81040e0:	68ba      	ldr	r2, [r7, #8]
 81040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81040e4:	699b      	ldr	r3, [r3, #24]
 81040e6:	441a      	add	r2, r3
 81040e8:	2300      	movs	r3, #0
 81040ea:	9300      	str	r3, [sp, #0]
 81040ec:	2300      	movs	r3, #0
 81040ee:	2100      	movs	r1, #0
 81040f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81040f2:	f7ff fe05 	bl	8103d00 <xTimerGenericCommand>
 81040f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81040f8:	6a3b      	ldr	r3, [r7, #32]
 81040fa:	2b00      	cmp	r3, #0
 81040fc:	d14f      	bne.n	810419e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 81040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104102:	f383 8811 	msr	BASEPRI, r3
 8104106:	f3bf 8f6f 	isb	sy
 810410a:	f3bf 8f4f 	dsb	sy
 810410e:	61bb      	str	r3, [r7, #24]
}
 8104110:	bf00      	nop
 8104112:	e7fe      	b.n	8104112 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8104114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810411a:	f023 0301 	bic.w	r3, r3, #1
 810411e:	b2da      	uxtb	r2, r3
 8104120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8104126:	e03a      	b.n	810419e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8104128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810412a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810412e:	f043 0301 	orr.w	r3, r3, #1
 8104132:	b2da      	uxtb	r2, r3
 8104134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104136:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810413a:	68ba      	ldr	r2, [r7, #8]
 810413c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810413e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8104140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104142:	699b      	ldr	r3, [r3, #24]
 8104144:	2b00      	cmp	r3, #0
 8104146:	d10a      	bne.n	810415e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8104148:	f04f 0350 	mov.w	r3, #80	; 0x50
 810414c:	f383 8811 	msr	BASEPRI, r3
 8104150:	f3bf 8f6f 	isb	sy
 8104154:	f3bf 8f4f 	dsb	sy
 8104158:	617b      	str	r3, [r7, #20]
}
 810415a:	bf00      	nop
 810415c:	e7fe      	b.n	810415c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104160:	699a      	ldr	r2, [r3, #24]
 8104162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104164:	18d1      	adds	r1, r2, r3
 8104166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810416a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810416c:	f7ff ff06 	bl	8103f7c <prvInsertTimerInActiveList>
					break;
 8104170:	e015      	b.n	810419e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8104172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104174:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8104178:	f003 0302 	and.w	r3, r3, #2
 810417c:	2b00      	cmp	r3, #0
 810417e:	d103      	bne.n	8104188 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8104180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104182:	f7fd fd3f 	bl	8101c04 <vPortFree>
 8104186:	e00a      	b.n	810419e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8104188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810418a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810418e:	f023 0301 	bic.w	r3, r3, #1
 8104192:	b2da      	uxtb	r2, r3
 8104194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810419a:	e000      	b.n	810419e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 810419c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810419e:	4b08      	ldr	r3, [pc, #32]	; (81041c0 <prvProcessReceivedCommands+0x1c0>)
 81041a0:	681b      	ldr	r3, [r3, #0]
 81041a2:	1d39      	adds	r1, r7, #4
 81041a4:	2200      	movs	r2, #0
 81041a6:	4618      	mov	r0, r3
 81041a8:	f7fe fbec 	bl	8102984 <xQueueReceive>
 81041ac:	4603      	mov	r3, r0
 81041ae:	2b00      	cmp	r3, #0
 81041b0:	f47f af2a 	bne.w	8104008 <prvProcessReceivedCommands+0x8>
	}
}
 81041b4:	bf00      	nop
 81041b6:	bf00      	nop
 81041b8:	3730      	adds	r7, #48	; 0x30
 81041ba:	46bd      	mov	sp, r7
 81041bc:	bd80      	pop	{r7, pc}
 81041be:	bf00      	nop
 81041c0:	100049fc 	.word	0x100049fc

081041c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 81041c4:	b580      	push	{r7, lr}
 81041c6:	b088      	sub	sp, #32
 81041c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81041ca:	e048      	b.n	810425e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81041cc:	4b2d      	ldr	r3, [pc, #180]	; (8104284 <prvSwitchTimerLists+0xc0>)
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	68db      	ldr	r3, [r3, #12]
 81041d2:	681b      	ldr	r3, [r3, #0]
 81041d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81041d6:	4b2b      	ldr	r3, [pc, #172]	; (8104284 <prvSwitchTimerLists+0xc0>)
 81041d8:	681b      	ldr	r3, [r3, #0]
 81041da:	68db      	ldr	r3, [r3, #12]
 81041dc:	68db      	ldr	r3, [r3, #12]
 81041de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81041e0:	68fb      	ldr	r3, [r7, #12]
 81041e2:	3304      	adds	r3, #4
 81041e4:	4618      	mov	r0, r3
 81041e6:	f7fd feb5 	bl	8101f54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81041ea:	68fb      	ldr	r3, [r7, #12]
 81041ec:	6a1b      	ldr	r3, [r3, #32]
 81041ee:	68f8      	ldr	r0, [r7, #12]
 81041f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81041f2:	68fb      	ldr	r3, [r7, #12]
 81041f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81041f8:	f003 0304 	and.w	r3, r3, #4
 81041fc:	2b00      	cmp	r3, #0
 81041fe:	d02e      	beq.n	810425e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8104200:	68fb      	ldr	r3, [r7, #12]
 8104202:	699b      	ldr	r3, [r3, #24]
 8104204:	693a      	ldr	r2, [r7, #16]
 8104206:	4413      	add	r3, r2
 8104208:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810420a:	68ba      	ldr	r2, [r7, #8]
 810420c:	693b      	ldr	r3, [r7, #16]
 810420e:	429a      	cmp	r2, r3
 8104210:	d90e      	bls.n	8104230 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8104212:	68fb      	ldr	r3, [r7, #12]
 8104214:	68ba      	ldr	r2, [r7, #8]
 8104216:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8104218:	68fb      	ldr	r3, [r7, #12]
 810421a:	68fa      	ldr	r2, [r7, #12]
 810421c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810421e:	4b19      	ldr	r3, [pc, #100]	; (8104284 <prvSwitchTimerLists+0xc0>)
 8104220:	681a      	ldr	r2, [r3, #0]
 8104222:	68fb      	ldr	r3, [r7, #12]
 8104224:	3304      	adds	r3, #4
 8104226:	4619      	mov	r1, r3
 8104228:	4610      	mov	r0, r2
 810422a:	f7fd fe5a 	bl	8101ee2 <vListInsert>
 810422e:	e016      	b.n	810425e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8104230:	2300      	movs	r3, #0
 8104232:	9300      	str	r3, [sp, #0]
 8104234:	2300      	movs	r3, #0
 8104236:	693a      	ldr	r2, [r7, #16]
 8104238:	2100      	movs	r1, #0
 810423a:	68f8      	ldr	r0, [r7, #12]
 810423c:	f7ff fd60 	bl	8103d00 <xTimerGenericCommand>
 8104240:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8104242:	687b      	ldr	r3, [r7, #4]
 8104244:	2b00      	cmp	r3, #0
 8104246:	d10a      	bne.n	810425e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8104248:	f04f 0350 	mov.w	r3, #80	; 0x50
 810424c:	f383 8811 	msr	BASEPRI, r3
 8104250:	f3bf 8f6f 	isb	sy
 8104254:	f3bf 8f4f 	dsb	sy
 8104258:	603b      	str	r3, [r7, #0]
}
 810425a:	bf00      	nop
 810425c:	e7fe      	b.n	810425c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810425e:	4b09      	ldr	r3, [pc, #36]	; (8104284 <prvSwitchTimerLists+0xc0>)
 8104260:	681b      	ldr	r3, [r3, #0]
 8104262:	681b      	ldr	r3, [r3, #0]
 8104264:	2b00      	cmp	r3, #0
 8104266:	d1b1      	bne.n	81041cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8104268:	4b06      	ldr	r3, [pc, #24]	; (8104284 <prvSwitchTimerLists+0xc0>)
 810426a:	681b      	ldr	r3, [r3, #0]
 810426c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810426e:	4b06      	ldr	r3, [pc, #24]	; (8104288 <prvSwitchTimerLists+0xc4>)
 8104270:	681b      	ldr	r3, [r3, #0]
 8104272:	4a04      	ldr	r2, [pc, #16]	; (8104284 <prvSwitchTimerLists+0xc0>)
 8104274:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8104276:	4a04      	ldr	r2, [pc, #16]	; (8104288 <prvSwitchTimerLists+0xc4>)
 8104278:	697b      	ldr	r3, [r7, #20]
 810427a:	6013      	str	r3, [r2, #0]
}
 810427c:	bf00      	nop
 810427e:	3718      	adds	r7, #24
 8104280:	46bd      	mov	sp, r7
 8104282:	bd80      	pop	{r7, pc}
 8104284:	100049f4 	.word	0x100049f4
 8104288:	100049f8 	.word	0x100049f8

0810428c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810428c:	b580      	push	{r7, lr}
 810428e:	b082      	sub	sp, #8
 8104290:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8104292:	f7fd ffb7 	bl	8102204 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8104296:	4b15      	ldr	r3, [pc, #84]	; (81042ec <prvCheckForValidListAndQueue+0x60>)
 8104298:	681b      	ldr	r3, [r3, #0]
 810429a:	2b00      	cmp	r3, #0
 810429c:	d120      	bne.n	81042e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810429e:	4814      	ldr	r0, [pc, #80]	; (81042f0 <prvCheckForValidListAndQueue+0x64>)
 81042a0:	f7fd fdce 	bl	8101e40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 81042a4:	4813      	ldr	r0, [pc, #76]	; (81042f4 <prvCheckForValidListAndQueue+0x68>)
 81042a6:	f7fd fdcb 	bl	8101e40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 81042aa:	4b13      	ldr	r3, [pc, #76]	; (81042f8 <prvCheckForValidListAndQueue+0x6c>)
 81042ac:	4a10      	ldr	r2, [pc, #64]	; (81042f0 <prvCheckForValidListAndQueue+0x64>)
 81042ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 81042b0:	4b12      	ldr	r3, [pc, #72]	; (81042fc <prvCheckForValidListAndQueue+0x70>)
 81042b2:	4a10      	ldr	r2, [pc, #64]	; (81042f4 <prvCheckForValidListAndQueue+0x68>)
 81042b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 81042b6:	2300      	movs	r3, #0
 81042b8:	9300      	str	r3, [sp, #0]
 81042ba:	4b11      	ldr	r3, [pc, #68]	; (8104300 <prvCheckForValidListAndQueue+0x74>)
 81042bc:	4a11      	ldr	r2, [pc, #68]	; (8104304 <prvCheckForValidListAndQueue+0x78>)
 81042be:	2110      	movs	r1, #16
 81042c0:	200a      	movs	r0, #10
 81042c2:	f7fe f929 	bl	8102518 <xQueueGenericCreateStatic>
 81042c6:	4603      	mov	r3, r0
 81042c8:	4a08      	ldr	r2, [pc, #32]	; (81042ec <prvCheckForValidListAndQueue+0x60>)
 81042ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 81042cc:	4b07      	ldr	r3, [pc, #28]	; (81042ec <prvCheckForValidListAndQueue+0x60>)
 81042ce:	681b      	ldr	r3, [r3, #0]
 81042d0:	2b00      	cmp	r3, #0
 81042d2:	d005      	beq.n	81042e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 81042d4:	4b05      	ldr	r3, [pc, #20]	; (81042ec <prvCheckForValidListAndQueue+0x60>)
 81042d6:	681b      	ldr	r3, [r3, #0]
 81042d8:	490b      	ldr	r1, [pc, #44]	; (8104308 <prvCheckForValidListAndQueue+0x7c>)
 81042da:	4618      	mov	r0, r3
 81042dc:	f7fe fd42 	bl	8102d64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81042e0:	f7fd ffc0 	bl	8102264 <vPortExitCritical>
}
 81042e4:	bf00      	nop
 81042e6:	46bd      	mov	sp, r7
 81042e8:	bd80      	pop	{r7, pc}
 81042ea:	bf00      	nop
 81042ec:	100049fc 	.word	0x100049fc
 81042f0:	100049cc 	.word	0x100049cc
 81042f4:	100049e0 	.word	0x100049e0
 81042f8:	100049f4 	.word	0x100049f4
 81042fc:	100049f8 	.word	0x100049f8
 8104300:	10004aa8 	.word	0x10004aa8
 8104304:	10004a08 	.word	0x10004a08
 8104308:	0810453c 	.word	0x0810453c

0810430c <__libc_init_array>:
 810430c:	b570      	push	{r4, r5, r6, lr}
 810430e:	4d0d      	ldr	r5, [pc, #52]	; (8104344 <__libc_init_array+0x38>)
 8104310:	4c0d      	ldr	r4, [pc, #52]	; (8104348 <__libc_init_array+0x3c>)
 8104312:	1b64      	subs	r4, r4, r5
 8104314:	10a4      	asrs	r4, r4, #2
 8104316:	2600      	movs	r6, #0
 8104318:	42a6      	cmp	r6, r4
 810431a:	d109      	bne.n	8104330 <__libc_init_array+0x24>
 810431c:	4d0b      	ldr	r5, [pc, #44]	; (810434c <__libc_init_array+0x40>)
 810431e:	4c0c      	ldr	r4, [pc, #48]	; (8104350 <__libc_init_array+0x44>)
 8104320:	f000 f8f2 	bl	8104508 <_init>
 8104324:	1b64      	subs	r4, r4, r5
 8104326:	10a4      	asrs	r4, r4, #2
 8104328:	2600      	movs	r6, #0
 810432a:	42a6      	cmp	r6, r4
 810432c:	d105      	bne.n	810433a <__libc_init_array+0x2e>
 810432e:	bd70      	pop	{r4, r5, r6, pc}
 8104330:	f855 3b04 	ldr.w	r3, [r5], #4
 8104334:	4798      	blx	r3
 8104336:	3601      	adds	r6, #1
 8104338:	e7ee      	b.n	8104318 <__libc_init_array+0xc>
 810433a:	f855 3b04 	ldr.w	r3, [r5], #4
 810433e:	4798      	blx	r3
 8104340:	3601      	adds	r6, #1
 8104342:	e7f2      	b.n	810432a <__libc_init_array+0x1e>
 8104344:	081045d8 	.word	0x081045d8
 8104348:	081045d8 	.word	0x081045d8
 810434c:	081045d8 	.word	0x081045d8
 8104350:	081045dc 	.word	0x081045dc

08104354 <__retarget_lock_acquire_recursive>:
 8104354:	4770      	bx	lr

08104356 <__retarget_lock_release_recursive>:
 8104356:	4770      	bx	lr

08104358 <memcpy>:
 8104358:	440a      	add	r2, r1
 810435a:	4291      	cmp	r1, r2
 810435c:	f100 33ff 	add.w	r3, r0, #4294967295
 8104360:	d100      	bne.n	8104364 <memcpy+0xc>
 8104362:	4770      	bx	lr
 8104364:	b510      	push	{r4, lr}
 8104366:	f811 4b01 	ldrb.w	r4, [r1], #1
 810436a:	f803 4f01 	strb.w	r4, [r3, #1]!
 810436e:	4291      	cmp	r1, r2
 8104370:	d1f9      	bne.n	8104366 <memcpy+0xe>
 8104372:	bd10      	pop	{r4, pc}

08104374 <memset>:
 8104374:	4402      	add	r2, r0
 8104376:	4603      	mov	r3, r0
 8104378:	4293      	cmp	r3, r2
 810437a:	d100      	bne.n	810437e <memset+0xa>
 810437c:	4770      	bx	lr
 810437e:	f803 1b01 	strb.w	r1, [r3], #1
 8104382:	e7f9      	b.n	8104378 <memset+0x4>

08104384 <cleanup_glue>:
 8104384:	b538      	push	{r3, r4, r5, lr}
 8104386:	460c      	mov	r4, r1
 8104388:	6809      	ldr	r1, [r1, #0]
 810438a:	4605      	mov	r5, r0
 810438c:	b109      	cbz	r1, 8104392 <cleanup_glue+0xe>
 810438e:	f7ff fff9 	bl	8104384 <cleanup_glue>
 8104392:	4621      	mov	r1, r4
 8104394:	4628      	mov	r0, r5
 8104396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810439a:	f000 b869 	b.w	8104470 <_free_r>
	...

081043a0 <_reclaim_reent>:
 81043a0:	4b2c      	ldr	r3, [pc, #176]	; (8104454 <_reclaim_reent+0xb4>)
 81043a2:	681b      	ldr	r3, [r3, #0]
 81043a4:	4283      	cmp	r3, r0
 81043a6:	b570      	push	{r4, r5, r6, lr}
 81043a8:	4604      	mov	r4, r0
 81043aa:	d051      	beq.n	8104450 <_reclaim_reent+0xb0>
 81043ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 81043ae:	b143      	cbz	r3, 81043c2 <_reclaim_reent+0x22>
 81043b0:	68db      	ldr	r3, [r3, #12]
 81043b2:	2b00      	cmp	r3, #0
 81043b4:	d14a      	bne.n	810444c <_reclaim_reent+0xac>
 81043b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81043b8:	6819      	ldr	r1, [r3, #0]
 81043ba:	b111      	cbz	r1, 81043c2 <_reclaim_reent+0x22>
 81043bc:	4620      	mov	r0, r4
 81043be:	f000 f857 	bl	8104470 <_free_r>
 81043c2:	6961      	ldr	r1, [r4, #20]
 81043c4:	b111      	cbz	r1, 81043cc <_reclaim_reent+0x2c>
 81043c6:	4620      	mov	r0, r4
 81043c8:	f000 f852 	bl	8104470 <_free_r>
 81043cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 81043ce:	b111      	cbz	r1, 81043d6 <_reclaim_reent+0x36>
 81043d0:	4620      	mov	r0, r4
 81043d2:	f000 f84d 	bl	8104470 <_free_r>
 81043d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 81043d8:	b111      	cbz	r1, 81043e0 <_reclaim_reent+0x40>
 81043da:	4620      	mov	r0, r4
 81043dc:	f000 f848 	bl	8104470 <_free_r>
 81043e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 81043e2:	b111      	cbz	r1, 81043ea <_reclaim_reent+0x4a>
 81043e4:	4620      	mov	r0, r4
 81043e6:	f000 f843 	bl	8104470 <_free_r>
 81043ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 81043ec:	b111      	cbz	r1, 81043f4 <_reclaim_reent+0x54>
 81043ee:	4620      	mov	r0, r4
 81043f0:	f000 f83e 	bl	8104470 <_free_r>
 81043f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 81043f6:	b111      	cbz	r1, 81043fe <_reclaim_reent+0x5e>
 81043f8:	4620      	mov	r0, r4
 81043fa:	f000 f839 	bl	8104470 <_free_r>
 81043fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8104400:	b111      	cbz	r1, 8104408 <_reclaim_reent+0x68>
 8104402:	4620      	mov	r0, r4
 8104404:	f000 f834 	bl	8104470 <_free_r>
 8104408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810440a:	b111      	cbz	r1, 8104412 <_reclaim_reent+0x72>
 810440c:	4620      	mov	r0, r4
 810440e:	f000 f82f 	bl	8104470 <_free_r>
 8104412:	69a3      	ldr	r3, [r4, #24]
 8104414:	b1e3      	cbz	r3, 8104450 <_reclaim_reent+0xb0>
 8104416:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8104418:	4620      	mov	r0, r4
 810441a:	4798      	blx	r3
 810441c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 810441e:	b1b9      	cbz	r1, 8104450 <_reclaim_reent+0xb0>
 8104420:	4620      	mov	r0, r4
 8104422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8104426:	f7ff bfad 	b.w	8104384 <cleanup_glue>
 810442a:	5949      	ldr	r1, [r1, r5]
 810442c:	b941      	cbnz	r1, 8104440 <_reclaim_reent+0xa0>
 810442e:	3504      	adds	r5, #4
 8104430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8104432:	2d80      	cmp	r5, #128	; 0x80
 8104434:	68d9      	ldr	r1, [r3, #12]
 8104436:	d1f8      	bne.n	810442a <_reclaim_reent+0x8a>
 8104438:	4620      	mov	r0, r4
 810443a:	f000 f819 	bl	8104470 <_free_r>
 810443e:	e7ba      	b.n	81043b6 <_reclaim_reent+0x16>
 8104440:	680e      	ldr	r6, [r1, #0]
 8104442:	4620      	mov	r0, r4
 8104444:	f000 f814 	bl	8104470 <_free_r>
 8104448:	4631      	mov	r1, r6
 810444a:	e7ef      	b.n	810442c <_reclaim_reent+0x8c>
 810444c:	2500      	movs	r5, #0
 810444e:	e7ef      	b.n	8104430 <_reclaim_reent+0x90>
 8104450:	bd70      	pop	{r4, r5, r6, pc}
 8104452:	bf00      	nop
 8104454:	10000014 	.word	0x10000014

08104458 <__malloc_lock>:
 8104458:	4801      	ldr	r0, [pc, #4]	; (8104460 <__malloc_lock+0x8>)
 810445a:	f7ff bf7b 	b.w	8104354 <__retarget_lock_acquire_recursive>
 810445e:	bf00      	nop
 8104460:	10004af8 	.word	0x10004af8

08104464 <__malloc_unlock>:
 8104464:	4801      	ldr	r0, [pc, #4]	; (810446c <__malloc_unlock+0x8>)
 8104466:	f7ff bf76 	b.w	8104356 <__retarget_lock_release_recursive>
 810446a:	bf00      	nop
 810446c:	10004af8 	.word	0x10004af8

08104470 <_free_r>:
 8104470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8104472:	2900      	cmp	r1, #0
 8104474:	d044      	beq.n	8104500 <_free_r+0x90>
 8104476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810447a:	9001      	str	r0, [sp, #4]
 810447c:	2b00      	cmp	r3, #0
 810447e:	f1a1 0404 	sub.w	r4, r1, #4
 8104482:	bfb8      	it	lt
 8104484:	18e4      	addlt	r4, r4, r3
 8104486:	f7ff ffe7 	bl	8104458 <__malloc_lock>
 810448a:	4a1e      	ldr	r2, [pc, #120]	; (8104504 <_free_r+0x94>)
 810448c:	9801      	ldr	r0, [sp, #4]
 810448e:	6813      	ldr	r3, [r2, #0]
 8104490:	b933      	cbnz	r3, 81044a0 <_free_r+0x30>
 8104492:	6063      	str	r3, [r4, #4]
 8104494:	6014      	str	r4, [r2, #0]
 8104496:	b003      	add	sp, #12
 8104498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810449c:	f7ff bfe2 	b.w	8104464 <__malloc_unlock>
 81044a0:	42a3      	cmp	r3, r4
 81044a2:	d908      	bls.n	81044b6 <_free_r+0x46>
 81044a4:	6825      	ldr	r5, [r4, #0]
 81044a6:	1961      	adds	r1, r4, r5
 81044a8:	428b      	cmp	r3, r1
 81044aa:	bf01      	itttt	eq
 81044ac:	6819      	ldreq	r1, [r3, #0]
 81044ae:	685b      	ldreq	r3, [r3, #4]
 81044b0:	1949      	addeq	r1, r1, r5
 81044b2:	6021      	streq	r1, [r4, #0]
 81044b4:	e7ed      	b.n	8104492 <_free_r+0x22>
 81044b6:	461a      	mov	r2, r3
 81044b8:	685b      	ldr	r3, [r3, #4]
 81044ba:	b10b      	cbz	r3, 81044c0 <_free_r+0x50>
 81044bc:	42a3      	cmp	r3, r4
 81044be:	d9fa      	bls.n	81044b6 <_free_r+0x46>
 81044c0:	6811      	ldr	r1, [r2, #0]
 81044c2:	1855      	adds	r5, r2, r1
 81044c4:	42a5      	cmp	r5, r4
 81044c6:	d10b      	bne.n	81044e0 <_free_r+0x70>
 81044c8:	6824      	ldr	r4, [r4, #0]
 81044ca:	4421      	add	r1, r4
 81044cc:	1854      	adds	r4, r2, r1
 81044ce:	42a3      	cmp	r3, r4
 81044d0:	6011      	str	r1, [r2, #0]
 81044d2:	d1e0      	bne.n	8104496 <_free_r+0x26>
 81044d4:	681c      	ldr	r4, [r3, #0]
 81044d6:	685b      	ldr	r3, [r3, #4]
 81044d8:	6053      	str	r3, [r2, #4]
 81044da:	4421      	add	r1, r4
 81044dc:	6011      	str	r1, [r2, #0]
 81044de:	e7da      	b.n	8104496 <_free_r+0x26>
 81044e0:	d902      	bls.n	81044e8 <_free_r+0x78>
 81044e2:	230c      	movs	r3, #12
 81044e4:	6003      	str	r3, [r0, #0]
 81044e6:	e7d6      	b.n	8104496 <_free_r+0x26>
 81044e8:	6825      	ldr	r5, [r4, #0]
 81044ea:	1961      	adds	r1, r4, r5
 81044ec:	428b      	cmp	r3, r1
 81044ee:	bf04      	itt	eq
 81044f0:	6819      	ldreq	r1, [r3, #0]
 81044f2:	685b      	ldreq	r3, [r3, #4]
 81044f4:	6063      	str	r3, [r4, #4]
 81044f6:	bf04      	itt	eq
 81044f8:	1949      	addeq	r1, r1, r5
 81044fa:	6021      	streq	r1, [r4, #0]
 81044fc:	6054      	str	r4, [r2, #4]
 81044fe:	e7ca      	b.n	8104496 <_free_r+0x26>
 8104500:	b003      	add	sp, #12
 8104502:	bd30      	pop	{r4, r5, pc}
 8104504:	10004afc 	.word	0x10004afc

08104508 <_init>:
 8104508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810450a:	bf00      	nop
 810450c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810450e:	bc08      	pop	{r3}
 8104510:	469e      	mov	lr, r3
 8104512:	4770      	bx	lr

08104514 <_fini>:
 8104514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104516:	bf00      	nop
 8104518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810451a:	bc08      	pop	{r3}
 810451c:	469e      	mov	lr, r3
 810451e:	4770      	bx	lr
