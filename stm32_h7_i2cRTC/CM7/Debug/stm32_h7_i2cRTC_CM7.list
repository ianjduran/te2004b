
stm32_h7_i2cRTC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08006d78  08006d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e84  08006e84  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006e84  08006e84  00016e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e8c  08006e8c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e8c  08006e8c  00016e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e90  08006e90  00016e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08006e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  24000074  08006f08  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000184  08006f08  00020184  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015493  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a2  00000000  00000000  00035535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00037cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  00038bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a5cf  00000000  00000000  000399d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014953  00000000  00000000  00073f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017a7c4  00000000  00000000  000888f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002030b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000458c  00000000  00000000  00203108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006d60 	.word	0x08006d60

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08006d60 	.word	0x08006d60

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <decToBcd>:
/**
 * @brief  Returns BCD Value of a Decimal Number
 * @param  val integer
 * @retval None
 */
uint8_t decToBcd(int val) {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	return (uint8_t) ((val / 10 * 16) + (val % 10));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <decToBcd+0x48>)
 80007bc:	fb82 1203 	smull	r1, r2, r2, r3
 80007c0:	1092      	asrs	r2, r2, #2
 80007c2:	17db      	asrs	r3, r3, #31
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	011b      	lsls	r3, r3, #4
 80007ca:	b2d8      	uxtb	r0, r3
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <decToBcd+0x48>)
 80007d0:	fb83 1302 	smull	r1, r3, r3, r2
 80007d4:	1099      	asrs	r1, r3, #2
 80007d6:	17d3      	asrs	r3, r2, #31
 80007d8:	1ac9      	subs	r1, r1, r3
 80007da:	460b      	mov	r3, r1
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	440b      	add	r3, r1
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	1ad1      	subs	r1, r2, r3
 80007e4:	b2cb      	uxtb	r3, r1
 80007e6:	4403      	add	r3, r0
 80007e8:	b2db      	uxtb	r3, r3
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	66666667 	.word	0x66666667

080007fc <bcdToDec>:
/**
 * @brief  Convert binary coded decimal to normal decimal numbers
 * @param  None
 * @retval None
 */
int bcdToDec(uint8_t val) {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
	return (int) ((val / 16 * 10) + (val % 16));
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	091b      	lsrs	r3, r3, #4
 800080a:	b2db      	uxtb	r3, r3
 800080c:	461a      	mov	r2, r3
 800080e:	4613      	mov	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	4413      	add	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	461a      	mov	r2, r3
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	f003 030f 	and.w	r3, r3, #15
 800081e:	4413      	add	r3, r2
}
 8000820:	4618      	mov	r0, r3
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <SetTime>:
  * @param  day current day 1-30
  * @param  month current month 1-12
  * @param  year current year 0-99 with offset 2000
  */
void SetTime(uint16_t RTC_ADDR, uint8_t sec, uint8_t min, uint8_t hour,
		uint8_t day, uint8_t month, uint8_t year) {
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af04      	add	r7, sp, #16
 8000832:	4604      	mov	r4, r0
 8000834:	4608      	mov	r0, r1
 8000836:	4611      	mov	r1, r2
 8000838:	461a      	mov	r2, r3
 800083a:	4623      	mov	r3, r4
 800083c:	80fb      	strh	r3, [r7, #6]
 800083e:	4603      	mov	r3, r0
 8000840:	717b      	strb	r3, [r7, #5]
 8000842:	460b      	mov	r3, r1
 8000844:	713b      	strb	r3, [r7, #4]
 8000846:	4613      	mov	r3, r2
 8000848:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[7];
	buff[0] = decToBcd(sec);
 800084a:	797b      	ldrb	r3, [r7, #5]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ffaf 	bl	80007b0 <decToBcd>
 8000852:	4603      	mov	r3, r0
 8000854:	723b      	strb	r3, [r7, #8]
	buff[1] = decToBcd(min);
 8000856:	793b      	ldrb	r3, [r7, #4]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ffa9 	bl	80007b0 <decToBcd>
 800085e:	4603      	mov	r3, r0
 8000860:	727b      	strb	r3, [r7, #9]
	buff[2] = decToBcd(hour);
 8000862:	78fb      	ldrb	r3, [r7, #3]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ffa3 	bl	80007b0 <decToBcd>
 800086a:	4603      	mov	r3, r0
 800086c:	72bb      	strb	r3, [r7, #10]
	buff[4] = decToBcd(day);
 800086e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff9c 	bl	80007b0 <decToBcd>
 8000878:	4603      	mov	r3, r0
 800087a:	733b      	strb	r3, [r7, #12]
	buff[5] = decToBcd(month);
 800087c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff95 	bl	80007b0 <decToBcd>
 8000886:	4603      	mov	r3, r0
 8000888:	737b      	strb	r3, [r7, #13]
	buff[6] = decToBcd(year);
 800088a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ff8e 	bl	80007b0 <decToBcd>
 8000894:	4603      	mov	r3, r0
 8000896:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c4, RTC_ADDR << 1, 0x00, I2C_MEMADD_SIZE_8BIT, &buff,
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	b299      	uxth	r1, r3
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	9302      	str	r3, [sp, #8]
 80008a4:	2307      	movs	r3, #7
 80008a6:	9301      	str	r3, [sp, #4]
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2301      	movs	r3, #1
 80008b0:	2200      	movs	r2, #0
 80008b2:	4803      	ldr	r0, [pc, #12]	; (80008c0 <SetTime+0x94>)
 80008b4:	f001 f8a6 	bl	8001a04 <HAL_I2C_Mem_Write>
			sizeof(buff), HAL_MAX_DELAY);

}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd90      	pop	{r4, r7, pc}
 80008c0:	24000090 	.word	0x24000090

080008c4 <printCurrentTime>:
/**
  * @brief  Prints formatted time given a buffer
  * @param  Buffer that contains bcd time values from seconds to year
  * @param  Size size  of the buffer
  */
void printCurrentTime(uint8_t buff[], uint16_t Size){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af04      	add	r7, sp, #16
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	807b      	strh	r3, [r7, #2]
	if(Size!=7) return;
 80008d0:	887b      	ldrh	r3, [r7, #2]
 80008d2:	2b07      	cmp	r3, #7
 80008d4:	d138      	bne.n	8000948 <printCurrentTime+0x84>
	int sec = bcdToDec(buff[0]);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff8e 	bl	80007fc <bcdToDec>
 80008e0:	61f8      	str	r0, [r7, #28]
	int min = bcdToDec(buff[1]);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3301      	adds	r3, #1
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff87 	bl	80007fc <bcdToDec>
 80008ee:	61b8      	str	r0, [r7, #24]
	int hour = bcdToDec(buff[2]);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3302      	adds	r3, #2
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff80 	bl	80007fc <bcdToDec>
 80008fc:	6178      	str	r0, [r7, #20]
	int day = bcdToDec(buff[4]);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3304      	adds	r3, #4
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff79 	bl	80007fc <bcdToDec>
 800090a:	6138      	str	r0, [r7, #16]
	int month = bcdToDec(buff[5]);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3305      	adds	r3, #5
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ff72 	bl	80007fc <bcdToDec>
 8000918:	60f8      	str	r0, [r7, #12]
	int year = 2000+bcdToDec(buff[6]);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3306      	adds	r3, #6
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff6b 	bl	80007fc <bcdToDec>
 8000926:	4603      	mov	r3, r0
 8000928:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800092c:	60bb      	str	r3, [r7, #8]
	printf("Elapsed time: %02d-%02d-%02d %02d:%02d:%02d \n\r", month, day, year, hour, min, sec);
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	9302      	str	r3, [sp, #8]
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	68f9      	ldr	r1, [r7, #12]
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <printCurrentTime+0x8c>)
 8000942:	f005 fa7f 	bl	8005e44 <iprintf>
 8000946:	e000      	b.n	800094a <printCurrentTime+0x86>
	if(Size!=7) return;
 8000948:	bf00      	nop
}
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	08006d78 	.word	0x08006d78

08000954 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af04      	add	r7, sp, #16
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800095a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800095e:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000960:	bf00      	nop
 8000962:	4b39      	ldr	r3, [pc, #228]	; (8000a48 <main+0xf4>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800096a:	2b00      	cmp	r3, #0
 800096c:	d004      	beq.n	8000978 <main+0x24>
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	1e5a      	subs	r2, r3, #1
 8000972:	617a      	str	r2, [r7, #20]
 8000974:	2b00      	cmp	r3, #0
 8000976:	dcf4      	bgt.n	8000962 <main+0xe>
		;
	if (timeout < 0) {
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	2b00      	cmp	r3, #0
 800097c:	da01      	bge.n	8000982 <main+0x2e>
		Error_Handler();
 800097e:	f000 fa03 	bl	8000d88 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000982:	f000 fbf7 	bl	8001174 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000986:	f000 f867 	bl	8000a58 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800098a:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <main+0xf4>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000990:	4a2d      	ldr	r2, [pc, #180]	; (8000a48 <main+0xf4>)
 8000992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099a:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <main+0xf4>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f000 ff6d 	bl	8001888 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 80009ae:	2100      	movs	r1, #0
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 ff83 	bl	80018bc <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80009b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009ba:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 80009bc:	bf00      	nop
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <main+0xf4>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d104      	bne.n	80009d4 <main+0x80>
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	1e5a      	subs	r2, r3, #1
 80009ce:	617a      	str	r2, [r7, #20]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	dcf4      	bgt.n	80009be <main+0x6a>
		;
	if (timeout < 0) {
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	da01      	bge.n	80009de <main+0x8a>
		Error_Handler();
 80009da:	f000 f9d5 	bl	8000d88 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009de:	f000 f941 	bl	8000c64 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80009e2:	f000 f8f3 	bl	8000bcc <MX_USART3_UART_Init>
	MX_I2C4_Init();
 80009e6:	f000 f8b1 	bl	8000b4c <MX_I2C4_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	uint16_t RTC_ADDR = 0b1101000;
 80009ea:	2368      	movs	r3, #104	; 0x68
 80009ec:	827b      	strh	r3, [r7, #18]
	uint8_t curr_time[7];

	SetTime(RTC_ADDR, 0, 28, 18, 7, 10, 22);
 80009ee:	8a78      	ldrh	r0, [r7, #18]
 80009f0:	2316      	movs	r3, #22
 80009f2:	9302      	str	r3, [sp, #8]
 80009f4:	230a      	movs	r3, #10
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	2307      	movs	r3, #7
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2312      	movs	r3, #18
 80009fe:	221c      	movs	r2, #28
 8000a00:	2100      	movs	r1, #0
 8000a02:	f7ff ff13 	bl	800082c <SetTime>
	printf("TIME SET\n\r");
 8000a06:	4811      	ldr	r0, [pc, #68]	; (8000a4c <main+0xf8>)
 8000a08:	f005 fa1c 	bl	8005e44 <iprintf>
	while (1) {

//
		HAL_I2C_Mem_Read(&hi2c4, RTC_ADDR << 1, 0x00, I2C_MEMADD_SIZE_8BIT,
 8000a0c:	8a7b      	ldrh	r3, [r7, #18]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	b299      	uxth	r1, r3
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	9302      	str	r3, [sp, #8]
 8000a18:	2307      	movs	r3, #7
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	2301      	movs	r3, #1
 8000a24:	2200      	movs	r2, #0
 8000a26:	480a      	ldr	r0, [pc, #40]	; (8000a50 <main+0xfc>)
 8000a28:	f001 f900 	bl	8001c2c <HAL_I2C_Mem_Read>
				&curr_time, sizeof(curr_time), HAL_MAX_DELAY);

		printCurrentTime(curr_time, sizeof(curr_time));
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	2107      	movs	r1, #7
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff46 	bl	80008c4 <printCurrentTime>
//		uint8_t data = 0x03;
//		HAL_I2C_Mem_Write(&hi2c4, RTC_ADDR << 1, 0x01, I2C_MEMADD_SIZE_8BIT, &data,
//					1, HAL_MAX_DELAY);
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a38:	2101      	movs	r1, #1
 8000a3a:	4806      	ldr	r0, [pc, #24]	; (8000a54 <main+0x100>)
 8000a3c:	f000 ff09 	bl	8001852 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000a40:	2064      	movs	r0, #100	; 0x64
 8000a42:	f000 fc29 	bl	8001298 <HAL_Delay>
		HAL_I2C_Mem_Read(&hi2c4, RTC_ADDR << 1, 0x00, I2C_MEMADD_SIZE_8BIT,
 8000a46:	e7e1      	b.n	8000a0c <main+0xb8>
 8000a48:	58024400 	.word	0x58024400
 8000a4c:	08006da8 	.word	0x08006da8
 8000a50:	24000090 	.word	0x24000090
 8000a54:	58020400 	.word	0x58020400

08000a58 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b09c      	sub	sp, #112	; 0x70
 8000a5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	224c      	movs	r2, #76	; 0x4c
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f005 f9e4 	bl	8005e34 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2220      	movs	r2, #32
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f005 f9de 	bl	8005e34 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a78:	2004      	movs	r0, #4
 8000a7a:	f001 fd2f 	bl	80024dc <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <SystemClock_Config+0xec>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	4a2f      	ldr	r2, [pc, #188]	; (8000b44 <SystemClock_Config+0xec>)
 8000a88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a8c:	6193      	str	r3, [r2, #24]
 8000a8e:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <SystemClock_Config+0xec>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <SystemClock_Config+0xf0>)
 8000a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9c:	4a2a      	ldr	r2, [pc, #168]	; (8000b48 <SystemClock_Config+0xf0>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <SystemClock_Config+0xf0>)
 8000aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000ab0:	bf00      	nop
 8000ab2:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <SystemClock_Config+0xec>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000abe:	d1f8      	bne.n	8000ab2 <SystemClock_Config+0x5a>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ac4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aca:	2302      	movs	r3, #2
 8000acc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 240;
 8000ad6:	23f0      	movs	r3, #240	; 0xf0
 8000ad8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000ae6:	2308      	movs	r3, #8
 8000ae8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 fd4a 	bl	8002590 <HAL_RCC_OscConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0xae>
		Error_Handler();
 8000b02:	f000 f941 	bl	8000d88 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b06:	233f      	movs	r3, #63	; 0x3f
 8000b08:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b12:	2308      	movs	r3, #8
 8000b14:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b16:	2340      	movs	r3, #64	; 0x40
 8000b18:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b1a:	2340      	movs	r3, #64	; 0x40
 8000b1c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b22:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b24:	2340      	movs	r3, #64	; 0x40
 8000b26:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f002 f95d 	bl	8002dec <HAL_RCC_ClockConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0xe4>
		Error_Handler();
 8000b38:	f000 f926 	bl	8000d88 <Error_Handler>
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	3770      	adds	r7, #112	; 0x70
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	58024800 	.word	0x58024800
 8000b48:	58000400 	.word	0x58000400

08000b4c <MX_I2C4_Init>:
/**
 * @brief I2C4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C4_Init(void) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C4_Init 0 */

	/* USER CODE BEGIN I2C4_Init 1 */

	/* USER CODE END I2C4_Init 1 */
	hi2c4.Instance = I2C4;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_I2C4_Init+0x74>)
 8000b52:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <MX_I2C4_Init+0x78>)
 8000b54:	601a      	str	r2, [r3, #0]
	hi2c4.Init.Timing = 0x307075B1;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_I2C4_Init+0x74>)
 8000b58:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <MX_I2C4_Init+0x7c>)
 8000b5a:	605a      	str	r2, [r3, #4]
	hi2c4.Init.OwnAddress1 = 0;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_I2C4_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <MX_I2C4_Init+0x74>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	60da      	str	r2, [r3, #12]
	hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b68:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <MX_I2C4_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
	hi2c4.Init.OwnAddress2 = 0;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_I2C4_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
	hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_I2C4_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_I2C4_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_I2C4_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8000b86:	480e      	ldr	r0, [pc, #56]	; (8000bc0 <MX_I2C4_Init+0x74>)
 8000b88:	f000 feac 	bl	80018e4 <HAL_I2C_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_I2C4_Init+0x4a>
		Error_Handler();
 8000b92:	f000 f8f9 	bl	8000d88 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE)
 8000b96:	2100      	movs	r1, #0
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <MX_I2C4_Init+0x74>)
 8000b9a:	f001 fc07 	bl	80023ac <HAL_I2CEx_ConfigAnalogFilter>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_I2C4_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000ba4:	f000 f8f0 	bl	8000d88 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_I2C4_Init+0x74>)
 8000bac:	f001 fc49 	bl	8002442 <HAL_I2CEx_ConfigDigitalFilter>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_I2C4_Init+0x6e>
		Error_Handler();
 8000bb6:	f000 f8e7 	bl	8000d88 <Error_Handler>
	}
	/* USER CODE BEGIN I2C4_Init 2 */

	/* USER CODE END I2C4_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	24000090 	.word	0x24000090
 8000bc4:	58001c00 	.word	0x58001c00
 8000bc8:	307075b1 	.word	0x307075b1

08000bcc <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bd2:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <MX_USART3_UART_Init+0x94>)
 8000bd4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000c14:	4811      	ldr	r0, [pc, #68]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c16:	f003 ffdd 	bl	8004bd4 <HAL_UART_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_USART3_UART_Init+0x58>
		Error_Handler();
 8000c20:	f000 f8b2 	bl	8000d88 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3,
 8000c24:	2100      	movs	r1, #0
 8000c26:	480d      	ldr	r0, [pc, #52]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c28:	f005 f810 	bl	8005c4c <HAL_UARTEx_SetTxFifoThreshold>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART3_UART_Init+0x6a>
	UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
		Error_Handler();
 8000c32:	f000 f8a9 	bl	8000d88 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3,
 8000c36:	2100      	movs	r1, #0
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c3a:	f005 f845 	bl	8005cc8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART3_UART_Init+0x7c>
	UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
		Error_Handler();
 8000c44:	f000 f8a0 	bl	8000d88 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c4a:	f004 ffc6 	bl	8005bda <HAL_UARTEx_DisableFifoMode>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 8000c54:	f000 f898 	bl	8000d88 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	240000dc 	.word	0x240000dc
 8000c60:	40004800 	.word	0x40004800

08000c64 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	; 0x30
 8000c68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	4b40      	ldr	r3, [pc, #256]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	4a3e      	ldr	r2, [pc, #248]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8a:	4b3c      	ldr	r3, [pc, #240]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
 8000c96:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c98:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	4a37      	ldr	r2, [pc, #220]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca8:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	4b31      	ldr	r3, [pc, #196]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	4a2f      	ldr	r2, [pc, #188]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000cbe:	f043 0302 	orr.w	r3, r3, #2
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000cdc:	f043 0320 	orr.w	r3, r3, #32
 8000ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce4:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cea:	f003 0320 	and.w	r3, r3, #32
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf2:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	4a20      	ldr	r2, [pc, #128]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000cfa:	f043 0308 	orr.w	r3, r3, #8
 8000cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d02:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d08:	f003 0308 	and.w	r3, r3, #8
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_GPIO_Init+0x118>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d34:	4812      	ldr	r0, [pc, #72]	; (8000d80 <MX_GPIO_Init+0x11c>)
 8000d36:	f000 fd73 	bl	8001820 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480d      	ldr	r0, [pc, #52]	; (8000d84 <MX_GPIO_Init+0x120>)
 8000d50:	f000 fbb6 	bl	80014c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD2_Pin;
 8000d54:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d58:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_GPIO_Init+0x11c>)
 8000d6e:	f000 fba7 	bl	80014c0 <HAL_GPIO_Init>

}
 8000d72:	bf00      	nop
 8000d74:	3730      	adds	r7, #48	; 0x30
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	58024400 	.word	0x58024400
 8000d80:	58020400 	.word	0x58020400
 8000d84:	58020800 	.word	0x58020800

08000d88 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d90:	e7fe      	b.n	8000d90 <Error_Handler+0x8>
	...

08000d94 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d9c:	1d39      	adds	r1, r7, #4
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	2201      	movs	r2, #1
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <__io_putchar+0x20>)
 8000da6:	f003 ff65 	bl	8004c74 <HAL_UART_Transmit>
  return ch;
 8000daa:	687b      	ldr	r3, [r7, #4]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	240000dc 	.word	0x240000dc

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_MspInit+0x30>)
 8000dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dc4:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <HAL_MspInit+0x30>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_MspInit+0x30>)
 8000dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	58024400 	.word	0x58024400

08000dec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0b8      	sub	sp, #224	; 0xe0
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	22bc      	movs	r2, #188	; 0xbc
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f005 f811 	bl	8005e34 <memset>
  if(hi2c->Instance==I2C4)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a25      	ldr	r2, [pc, #148]	; (8000eac <HAL_I2C_MspInit+0xc0>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d142      	bne.n	8000ea2 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f002 fb6a 	bl	8003504 <HAL_RCCEx_PeriphCLKConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e36:	f7ff ffa7 	bl	8000d88 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_I2C_MspInit+0xc4>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <HAL_I2C_MspInit+0xc4>)
 8000e42:	f043 0320 	orr.w	r3, r3, #32
 8000e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_I2C_MspInit+0xc4>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	f003 0320 	and.w	r3, r3, #32
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e58:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e60:	2312      	movs	r3, #18
 8000e62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e72:	2304      	movs	r3, #4
 8000e74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <HAL_I2C_MspInit+0xc8>)
 8000e80:	f000 fb1e 	bl	80014c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_I2C_MspInit+0xc4>)
 8000e86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e8a:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <HAL_I2C_MspInit+0xc4>)
 8000e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_I2C_MspInit+0xc4>)
 8000e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	37e0      	adds	r7, #224	; 0xe0
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	58001c00 	.word	0x58001c00
 8000eb0:	58024400 	.word	0x58024400
 8000eb4:	58021400 	.word	0x58021400

08000eb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0b8      	sub	sp, #224	; 0xe0
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	22bc      	movs	r2, #188	; 0xbc
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f004 ffab 	bl	8005e34 <memset>
  if(huart->Instance==USART3)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <HAL_UART_MspInit+0xc0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d142      	bne.n	8000f6e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f002 fb04 	bl	8003504 <HAL_RCCEx_PeriphCLKConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f02:	f7ff ff41 	bl	8000d88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <HAL_UART_MspInit+0xc4>)
 8000f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f0c:	4a1b      	ldr	r2, [pc, #108]	; (8000f7c <HAL_UART_MspInit+0xc4>)
 8000f0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_UART_MspInit+0xc4>)
 8000f18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_UART_MspInit+0xc4>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <HAL_UART_MspInit+0xc4>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_UART_MspInit+0xc4>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f5c:	2307      	movs	r3, #7
 8000f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <HAL_UART_MspInit+0xc8>)
 8000f6a:	f000 faa9 	bl	80014c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	37e0      	adds	r7, #224	; 0xe0
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40004800 	.word	0x40004800
 8000f7c:	58024400 	.word	0x58024400
 8000f80:	58020c00 	.word	0x58020c00

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd0:	f000 f942 	bl	8001258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	e00a      	b.n	8001000 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fea:	f3af 8000 	nop.w
 8000fee:	4601      	mov	r1, r0
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	b2ca      	uxtb	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbf0      	blt.n	8000fea <_read+0x12>
	}

return len;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	e009      	b.n	8001038 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	60ba      	str	r2, [r7, #8]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff feb1 	bl	8000d94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3301      	adds	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	dbf1      	blt.n	8001024 <_write+0x12>
	}
	return len;
 8001040:	687b      	ldr	r3, [r7, #4]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <_close>:

int _close(int file)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	return -1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001072:	605a      	str	r2, [r3, #4]
	return 0;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_isatty>:

int _isatty(int file)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
	return 1;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
	return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	; (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f004 fe7c 	bl	8005de0 <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <_sbrk+0x64>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	24080000 	.word	0x24080000
 8001114:	00000400 	.word	0x00000400
 8001118:	2400016c 	.word	0x2400016c
 800111c:	24000188 	.word	0x24000188

08001120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001124:	f7ff faae 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001128:	480c      	ldr	r0, [pc, #48]	; (800115c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800112a:	490d      	ldr	r1, [pc, #52]	; (8001160 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001140:	4c0a      	ldr	r4, [pc, #40]	; (800116c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114e:	f004 fe4d 	bl	8005dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001152:	f7ff fbff 	bl	8000954 <main>
  bx  lr
 8001156:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001158:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800115c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001160:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001164:	08006e94 	.word	0x08006e94
  ldr r2, =_sbss
 8001168:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 800116c:	24000184 	.word	0x24000184

08001170 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC3_IRQHandler>
	...

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117a:	2003      	movs	r0, #3
 800117c:	f000 f96e 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001180:	f001 ffea 	bl	8003158 <HAL_RCC_GetSysClockFreq>
 8001184:	4602      	mov	r2, r0
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_Init+0x68>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	0a1b      	lsrs	r3, r3, #8
 800118c:	f003 030f 	and.w	r3, r3, #15
 8001190:	4913      	ldr	r1, [pc, #76]	; (80011e0 <HAL_Init+0x6c>)
 8001192:	5ccb      	ldrb	r3, [r1, r3]
 8001194:	f003 031f 	and.w	r3, r3, #31
 8001198:	fa22 f303 	lsr.w	r3, r2, r3
 800119c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <HAL_Init+0x68>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <HAL_Init+0x6c>)
 80011a8:	5cd3      	ldrb	r3, [r2, r3]
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	fa22 f303 	lsr.w	r3, r2, r3
 80011b4:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <HAL_Init+0x70>)
 80011b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011b8:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <HAL_Init+0x74>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011be:	200f      	movs	r0, #15
 80011c0:	f000 f814 	bl	80011ec <HAL_InitTick>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e002      	b.n	80011d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011ce:	f7ff fdf3 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	58024400 	.word	0x58024400
 80011e0:	08006db4 	.word	0x08006db4
 80011e4:	24000004 	.word	0x24000004
 80011e8:	24000000 	.word	0x24000000

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_InitTick+0x60>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e021      	b.n	8001244 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <HAL_InitTick+0x64>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_InitTick+0x60>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f945 	bl	80014a6 <HAL_SYSTICK_Config>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00e      	b.n	8001244 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d80a      	bhi.n	8001242 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f000 f91d 	bl	8001472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001238:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_InitTick+0x68>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e000      	b.n	8001244 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2400000c 	.word	0x2400000c
 8001250:	24000000 	.word	0x24000000
 8001254:	24000008 	.word	0x24000008

08001258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x20>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_IncTick+0x24>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_IncTick+0x24>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	2400000c 	.word	0x2400000c
 800127c:	24000170 	.word	0x24000170

08001280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <HAL_GetTick+0x14>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	24000170 	.word	0x24000170

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff ffee 	bl	8001280 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_Delay+0x44>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffde 	bl	8001280 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	2400000c 	.word	0x2400000c

080012e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <HAL_GetREVID+0x14>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	0c1b      	lsrs	r3, r3, #16
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	5c001000 	.word	0x5c001000

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <__NVIC_SetPriorityGrouping+0x40>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <__NVIC_SetPriorityGrouping+0x44>)
 8001322:	4313      	orrs	r3, r2
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <__NVIC_SetPriorityGrouping+0x40>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00
 800133c:	05fa0000 	.word	0x05fa0000

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	; (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	; (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	; 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001428:	d301      	bcc.n	800142e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142a:	2301      	movs	r3, #1
 800142c:	e00f      	b.n	800144e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <SysTick_Config+0x40>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001436:	210f      	movs	r1, #15
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f7ff ff8e 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <SysTick_Config+0x40>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SysTick_Config+0x40>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff47 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001480:	f7ff ff5e 	bl	8001340 <__NVIC_GetPriorityGrouping>
 8001484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff ff90 	bl	80013b0 <NVIC_EncodePriority>
 8001490:	4602      	mov	r2, r0
 8001492:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff5f 	bl	800135c <__NVIC_SetPriority>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffb2 	bl	8001418 <SysTick_Config>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014ce:	4b89      	ldr	r3, [pc, #548]	; (80016f4 <HAL_GPIO_Init+0x234>)
 80014d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014d2:	e194      	b.n	80017fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2101      	movs	r1, #1
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	fa01 f303 	lsl.w	r3, r1, r3
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 8186 	beq.w	80017f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d005      	beq.n	8001504 <HAL_GPIO_Init+0x44>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d130      	bne.n	8001566 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800153a:	2201      	movs	r2, #1
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	091b      	lsrs	r3, r3, #4
 8001550:	f003 0201 	and.w	r2, r3, #1
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b03      	cmp	r3, #3
 8001570:	d017      	beq.n	80015a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	2203      	movs	r2, #3
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d123      	bne.n	80015f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	08da      	lsrs	r2, r3, #3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3208      	adds	r2, #8
 80015b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	220f      	movs	r2, #15
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	691a      	ldr	r2, [r3, #16]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	08da      	lsrs	r2, r3, #3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3208      	adds	r2, #8
 80015f0:	69b9      	ldr	r1, [r7, #24]
 80015f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0203 	and.w	r2, r3, #3
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 80e0 	beq.w	80017f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001638:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <HAL_GPIO_Init+0x238>)
 800163a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800163e:	4a2e      	ldr	r2, [pc, #184]	; (80016f8 <HAL_GPIO_Init+0x238>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001648:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <HAL_GPIO_Init+0x238>)
 800164a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001656:	4a29      	ldr	r2, [pc, #164]	; (80016fc <HAL_GPIO_Init+0x23c>)
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	3302      	adds	r3, #2
 800165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	220f      	movs	r2, #15
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a20      	ldr	r2, [pc, #128]	; (8001700 <HAL_GPIO_Init+0x240>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d052      	beq.n	8001728 <HAL_GPIO_Init+0x268>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <HAL_GPIO_Init+0x244>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d031      	beq.n	80016ee <HAL_GPIO_Init+0x22e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <HAL_GPIO_Init+0x248>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d02b      	beq.n	80016ea <HAL_GPIO_Init+0x22a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a1d      	ldr	r2, [pc, #116]	; (800170c <HAL_GPIO_Init+0x24c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d025      	beq.n	80016e6 <HAL_GPIO_Init+0x226>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <HAL_GPIO_Init+0x250>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01f      	beq.n	80016e2 <HAL_GPIO_Init+0x222>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a1b      	ldr	r2, [pc, #108]	; (8001714 <HAL_GPIO_Init+0x254>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d019      	beq.n	80016de <HAL_GPIO_Init+0x21e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <HAL_GPIO_Init+0x258>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d013      	beq.n	80016da <HAL_GPIO_Init+0x21a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a19      	ldr	r2, [pc, #100]	; (800171c <HAL_GPIO_Init+0x25c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d00d      	beq.n	80016d6 <HAL_GPIO_Init+0x216>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a18      	ldr	r2, [pc, #96]	; (8001720 <HAL_GPIO_Init+0x260>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d007      	beq.n	80016d2 <HAL_GPIO_Init+0x212>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a17      	ldr	r2, [pc, #92]	; (8001724 <HAL_GPIO_Init+0x264>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d101      	bne.n	80016ce <HAL_GPIO_Init+0x20e>
 80016ca:	2309      	movs	r3, #9
 80016cc:	e02d      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016ce:	230a      	movs	r3, #10
 80016d0:	e02b      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016d2:	2308      	movs	r3, #8
 80016d4:	e029      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016d6:	2307      	movs	r3, #7
 80016d8:	e027      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016da:	2306      	movs	r3, #6
 80016dc:	e025      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016de:	2305      	movs	r3, #5
 80016e0:	e023      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016e2:	2304      	movs	r3, #4
 80016e4:	e021      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016e6:	2303      	movs	r3, #3
 80016e8:	e01f      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e01d      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e01b      	b.n	800172a <HAL_GPIO_Init+0x26a>
 80016f2:	bf00      	nop
 80016f4:	58000080 	.word	0x58000080
 80016f8:	58024400 	.word	0x58024400
 80016fc:	58000400 	.word	0x58000400
 8001700:	58020000 	.word	0x58020000
 8001704:	58020400 	.word	0x58020400
 8001708:	58020800 	.word	0x58020800
 800170c:	58020c00 	.word	0x58020c00
 8001710:	58021000 	.word	0x58021000
 8001714:	58021400 	.word	0x58021400
 8001718:	58021800 	.word	0x58021800
 800171c:	58021c00 	.word	0x58021c00
 8001720:	58022000 	.word	0x58022000
 8001724:	58022400 	.word	0x58022400
 8001728:	2300      	movs	r3, #0
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	f002 0203 	and.w	r2, r2, #3
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	4093      	lsls	r3, r2
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800173a:	4938      	ldr	r1, [pc, #224]	; (800181c <HAL_GPIO_Init+0x35c>)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800176e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800179c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	3301      	adds	r3, #1
 80017fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa22 f303 	lsr.w	r3, r2, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	f47f ae63 	bne.w	80014d4 <HAL_GPIO_Init+0x14>
  }
}
 800180e:	bf00      	nop
 8001810:	bf00      	nop
 8001812:	3724      	adds	r7, #36	; 0x24
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	58000400 	.word	0x58000400

08001820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
 800182c:	4613      	mov	r3, r2
 800182e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001830:	787b      	ldrb	r3, [r7, #1]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001836:	887a      	ldrh	r2, [r7, #2]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800183c:	e003      	b.n	8001846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	041a      	lsls	r2, r3, #16
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	619a      	str	r2, [r3, #24]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001852:	b480      	push	{r7}
 8001854:	b085      	sub	sp, #20
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001864:	887a      	ldrh	r2, [r7, #2]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4013      	ands	r3, r2
 800186a:	041a      	lsls	r2, r3, #16
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43d9      	mvns	r1, r3
 8001870:	887b      	ldrh	r3, [r7, #2]
 8001872:	400b      	ands	r3, r1
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	619a      	str	r2, [r3, #24]
}
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001890:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_HSEM_FastTake+0x2c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3320      	adds	r3, #32
 8001896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189a:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_HSEM_FastTake+0x30>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d101      	bne.n	80018a4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e000      	b.n	80018a6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	58026400 	.word	0x58026400
 80018b8:	80000300 	.word	0x80000300

080018bc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80018c6:	4906      	ldr	r1, [pc, #24]	; (80018e0 <HAL_HSEM_Release+0x24>)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	58026400 	.word	0x58026400

080018e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e07f      	b.n	80019f6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fa6e 	bl	8000dec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2224      	movs	r2, #36	; 0x24
 8001914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001934:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001944:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d107      	bne.n	800195e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	e006      	b.n	800196c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800196a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d104      	bne.n	800197e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800197c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_I2C_Init+0x11c>)
 800198a:	430b      	orrs	r3, r1
 800198c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800199c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69d9      	ldr	r1, [r3, #28]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1a      	ldr	r2, [r3, #32]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0201 	orr.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2220      	movs	r2, #32
 80019e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	02008000 	.word	0x02008000

08001a04 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	4608      	mov	r0, r1
 8001a0e:	4611      	mov	r1, r2
 8001a10:	461a      	mov	r2, r3
 8001a12:	4603      	mov	r3, r0
 8001a14:	817b      	strh	r3, [r7, #10]
 8001a16:	460b      	mov	r3, r1
 8001a18:	813b      	strh	r3, [r7, #8]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b20      	cmp	r3, #32
 8001a28:	f040 80f9 	bne.w	8001c1e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <HAL_I2C_Mem_Write+0x34>
 8001a32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d105      	bne.n	8001a44 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a3e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0ed      	b.n	8001c20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_I2C_Mem_Write+0x4e>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e0e6      	b.n	8001c20 <HAL_I2C_Mem_Write+0x21c>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a5a:	f7ff fc11 	bl	8001280 <HAL_GetTick>
 8001a5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2319      	movs	r3, #25
 8001a66:	2201      	movs	r2, #1
 8001a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 fac3 	bl	8001ff8 <I2C_WaitOnFlagUntilTimeout>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0d1      	b.n	8001c20 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2221      	movs	r2, #33	; 0x21
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2240      	movs	r2, #64	; 0x40
 8001a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a3a      	ldr	r2, [r7, #32]
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001aa4:	88f8      	ldrh	r0, [r7, #6]
 8001aa6:	893a      	ldrh	r2, [r7, #8]
 8001aa8:	8979      	ldrh	r1, [r7, #10]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 f9d3 	bl	8001e60 <I2C_RequestMemoryWrite>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0a9      	b.n	8001c20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	2bff      	cmp	r3, #255	; 0xff
 8001ad4:	d90e      	bls.n	8001af4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	22ff      	movs	r2, #255	; 0xff
 8001ada:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	8979      	ldrh	r1, [r7, #10]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 fc2b 	bl	8002348 <I2C_TransferConfig>
 8001af2:	e00f      	b.n	8001b14 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	8979      	ldrh	r1, [r7, #10]
 8001b06:	2300      	movs	r3, #0
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 fc1a 	bl	8002348 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 faad 	bl	8002078 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e07b      	b.n	8001c20 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d034      	beq.n	8001bcc <HAL_I2C_Mem_Write+0x1c8>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d130      	bne.n	8001bcc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b70:	2200      	movs	r2, #0
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 fa3f 	bl	8001ff8 <I2C_WaitOnFlagUntilTimeout>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e04d      	b.n	8001c20 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2bff      	cmp	r3, #255	; 0xff
 8001b8c:	d90e      	bls.n	8001bac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	22ff      	movs	r2, #255	; 0xff
 8001b92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	8979      	ldrh	r1, [r7, #10]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 fbcf 	bl	8002348 <I2C_TransferConfig>
 8001baa:	e00f      	b.n	8001bcc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	8979      	ldrh	r1, [r7, #10]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 fbbe 	bl	8002348 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d19e      	bne.n	8001b14 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 fa8c 	bl	80020f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e01a      	b.n	8001c20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_I2C_Mem_Write+0x224>)
 8001bfe:	400b      	ands	r3, r1
 8001c00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2220      	movs	r2, #32
 8001c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001c1e:	2302      	movs	r3, #2
  }
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	fe00e800 	.word	0xfe00e800

08001c2c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	4608      	mov	r0, r1
 8001c36:	4611      	mov	r1, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	817b      	strh	r3, [r7, #10]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	813b      	strh	r3, [r7, #8]
 8001c42:	4613      	mov	r3, r2
 8001c44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	f040 80fd 	bne.w	8001e4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <HAL_I2C_Mem_Read+0x34>
 8001c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0f1      	b.n	8001e50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_I2C_Mem_Read+0x4e>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e0ea      	b.n	8001e50 <HAL_I2C_Mem_Read+0x224>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c82:	f7ff fafd 	bl	8001280 <HAL_GetTick>
 8001c86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2319      	movs	r3, #25
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 f9af 	bl	8001ff8 <I2C_WaitOnFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0d5      	b.n	8001e50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2222      	movs	r2, #34	; 0x22
 8001ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2240      	movs	r2, #64	; 0x40
 8001cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a3a      	ldr	r2, [r7, #32]
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ccc:	88f8      	ldrh	r0, [r7, #6]
 8001cce:	893a      	ldrh	r2, [r7, #8]
 8001cd0:	8979      	ldrh	r1, [r7, #10]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	4603      	mov	r3, r0
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f913 	bl	8001f08 <I2C_RequestMemoryRead>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0ad      	b.n	8001e50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	2bff      	cmp	r3, #255	; 0xff
 8001cfc:	d90e      	bls.n	8001d1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	22ff      	movs	r2, #255	; 0xff
 8001d02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	8979      	ldrh	r1, [r7, #10]
 8001d0c:	4b52      	ldr	r3, [pc, #328]	; (8001e58 <HAL_I2C_Mem_Read+0x22c>)
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 fb17 	bl	8002348 <I2C_TransferConfig>
 8001d1a:	e00f      	b.n	8001d3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	8979      	ldrh	r1, [r7, #10]
 8001d2e:	4b4a      	ldr	r3, [pc, #296]	; (8001e58 <HAL_I2C_Mem_Read+0x22c>)
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 fb06 	bl	8002348 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d42:	2200      	movs	r2, #0
 8001d44:	2104      	movs	r1, #4
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f956 	bl	8001ff8 <I2C_WaitOnFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e07c      	b.n	8001e50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d034      	beq.n	8001dfc <HAL_I2C_Mem_Read+0x1d0>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d130      	bne.n	8001dfc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da0:	2200      	movs	r2, #0
 8001da2:	2180      	movs	r1, #128	; 0x80
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f927 	bl	8001ff8 <I2C_WaitOnFlagUntilTimeout>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e04d      	b.n	8001e50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2bff      	cmp	r3, #255	; 0xff
 8001dbc:	d90e      	bls.n	8001ddc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	22ff      	movs	r2, #255	; 0xff
 8001dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	8979      	ldrh	r1, [r7, #10]
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 fab7 	bl	8002348 <I2C_TransferConfig>
 8001dda:	e00f      	b.n	8001dfc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	8979      	ldrh	r1, [r7, #10]
 8001dee:	2300      	movs	r3, #0
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 faa6 	bl	8002348 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d19a      	bne.n	8001d3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 f974 	bl	80020f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e01a      	b.n	8001e50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_I2C_Mem_Read+0x230>)
 8001e2e:	400b      	ands	r3, r1
 8001e30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2220      	movs	r2, #32
 8001e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001e4e:	2302      	movs	r3, #2
  }
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	80002400 	.word	0x80002400
 8001e5c:	fe00e800 	.word	0xfe00e800

08001e60 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	4608      	mov	r0, r1
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4603      	mov	r3, r0
 8001e70:	817b      	strh	r3, [r7, #10]
 8001e72:	460b      	mov	r3, r1
 8001e74:	813b      	strh	r3, [r7, #8]
 8001e76:	4613      	mov	r3, r2
 8001e78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	8979      	ldrh	r1, [r7, #10]
 8001e80:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <I2C_RequestMemoryWrite+0xa4>)
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 fa5d 	bl	8002348 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	69b9      	ldr	r1, [r7, #24]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f8f0 	bl	8002078 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e02c      	b.n	8001efc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea8:	893b      	ldrh	r3, [r7, #8]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	629a      	str	r2, [r3, #40]	; 0x28
 8001eb2:	e015      	b.n	8001ee0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001eb4:	893b      	ldrh	r3, [r7, #8]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	69b9      	ldr	r1, [r7, #24]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f8d6 	bl	8002078 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e012      	b.n	8001efc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ed6:	893b      	ldrh	r3, [r7, #8]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2180      	movs	r1, #128	; 0x80
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 f884 	bl	8001ff8 <I2C_WaitOnFlagUntilTimeout>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	80002000 	.word	0x80002000

08001f08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	4608      	mov	r0, r1
 8001f12:	4611      	mov	r1, r2
 8001f14:	461a      	mov	r2, r3
 8001f16:	4603      	mov	r3, r0
 8001f18:	817b      	strh	r3, [r7, #10]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	813b      	strh	r3, [r7, #8]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	8979      	ldrh	r1, [r7, #10]
 8001f28:	4b20      	ldr	r3, [pc, #128]	; (8001fac <I2C_RequestMemoryRead+0xa4>)
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 fa0a 	bl	8002348 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	69b9      	ldr	r1, [r7, #24]
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f89d 	bl	8002078 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e02c      	b.n	8001fa2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d105      	bne.n	8001f5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f4e:	893b      	ldrh	r3, [r7, #8]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	629a      	str	r2, [r3, #40]	; 0x28
 8001f58:	e015      	b.n	8001f86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f5a:	893b      	ldrh	r3, [r7, #8]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	69b9      	ldr	r1, [r7, #24]
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f883 	bl	8002078 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e012      	b.n	8001fa2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f7c:	893b      	ldrh	r3, [r7, #8]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2140      	movs	r1, #64	; 0x40
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 f831 	bl	8001ff8 <I2C_WaitOnFlagUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	80002000 	.word	0x80002000

08001fb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d103      	bne.n	8001fce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d007      	beq.n	8001fec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	619a      	str	r2, [r3, #24]
  }
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002008:	e022      	b.n	8002050 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d01e      	beq.n	8002050 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002012:	f7ff f935 	bl	8001280 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d302      	bcc.n	8002028 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d113      	bne.n	8002050 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	f043 0220 	orr.w	r2, r3, #32
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e00f      	b.n	8002070 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	4013      	ands	r3, r2
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	429a      	cmp	r2, r3
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	429a      	cmp	r2, r3
 800206c:	d0cd      	beq.n	800200a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002084:	e02c      	b.n	80020e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f870 	bl	8002170 <I2C_IsErrorOccurred>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e02a      	b.n	80020f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d01e      	beq.n	80020e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a2:	f7ff f8ed 	bl	8001280 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d302      	bcc.n	80020b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d113      	bne.n	80020e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020bc:	f043 0220 	orr.w	r2, r3, #32
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e007      	b.n	80020f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d1cb      	bne.n	8002086 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002104:	e028      	b.n	8002158 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f830 	bl	8002170 <I2C_IsErrorOccurred>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e026      	b.n	8002168 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211a:	f7ff f8b1 	bl	8001280 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	429a      	cmp	r2, r3
 8002128:	d302      	bcc.n	8002130 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d113      	bne.n	8002158 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	f043 0220 	orr.w	r2, r3, #32
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e007      	b.n	8002168 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b20      	cmp	r3, #32
 8002164:	d1cf      	bne.n	8002106 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b00      	cmp	r3, #0
 800219a:	d075      	beq.n	8002288 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2210      	movs	r2, #16
 80021a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021a4:	e056      	b.n	8002254 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d052      	beq.n	8002254 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021ae:	f7ff f867 	bl	8001280 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d302      	bcc.n	80021c4 <I2C_IsErrorOccurred+0x54>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d147      	bne.n	8002254 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021e6:	d12e      	bne.n	8002246 <I2C_IsErrorOccurred+0xd6>
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021ee:	d02a      	beq.n	8002246 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80021f0:	7cfb      	ldrb	r3, [r7, #19]
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	d027      	beq.n	8002246 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002204:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002206:	f7ff f83b 	bl	8001280 <HAL_GetTick>
 800220a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800220c:	e01b      	b.n	8002246 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800220e:	f7ff f837 	bl	8001280 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b19      	cmp	r3, #25
 800221a:	d914      	bls.n	8002246 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002220:	f043 0220 	orr.w	r2, r3, #32
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2220      	movs	r2, #32
 800222c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	2b20      	cmp	r3, #32
 8002252:	d1dc      	bne.n	800220e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b20      	cmp	r3, #32
 8002260:	d003      	beq.n	800226a <I2C_IsErrorOccurred+0xfa>
 8002262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002266:	2b00      	cmp	r3, #0
 8002268:	d09d      	beq.n	80021a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800226a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800226e:	2b00      	cmp	r3, #0
 8002270:	d103      	bne.n	800227a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2220      	movs	r2, #32
 8002278:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	f043 0304 	orr.w	r3, r3, #4
 8002280:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00b      	beq.n	80022b2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00b      	beq.n	80022d4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	f043 0308 	orr.w	r3, r3, #8
 80022c2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80022f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d01c      	beq.n	8002338 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f7ff fe56 	bl	8001fb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <I2C_IsErrorOccurred+0x1d4>)
 8002310:	400b      	ands	r3, r1
 8002312:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	431a      	orrs	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800233c:	4618      	mov	r0, r3
 800233e:	3728      	adds	r7, #40	; 0x28
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	fe00e800 	.word	0xfe00e800

08002348 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	607b      	str	r3, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	817b      	strh	r3, [r7, #10]
 8002356:	4613      	mov	r3, r2
 8002358:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800235a:	897b      	ldrh	r3, [r7, #10]
 800235c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002360:	7a7b      	ldrb	r3, [r7, #9]
 8002362:	041b      	lsls	r3, r3, #16
 8002364:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002368:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	4313      	orrs	r3, r2
 8002372:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002376:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	0d5b      	lsrs	r3, r3, #21
 8002382:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <I2C_TransferConfig+0x60>)
 8002388:	430b      	orrs	r3, r1
 800238a:	43db      	mvns	r3, r3
 800238c:	ea02 0103 	and.w	r1, r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	03ff63ff 	.word	0x03ff63ff

080023ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b20      	cmp	r3, #32
 80023c0:	d138      	bne.n	8002434 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e032      	b.n	8002436 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2224      	movs	r2, #36	; 0x24
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6819      	ldr	r1, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e000      	b.n	8002436 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002434:	2302      	movs	r3, #2
  }
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002442:	b480      	push	{r7}
 8002444:	b085      	sub	sp, #20
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b20      	cmp	r3, #32
 8002456:	d139      	bne.n	80024cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002462:	2302      	movs	r3, #2
 8002464:	e033      	b.n	80024ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2224      	movs	r2, #36	; 0x24
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0201 	bic.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002494:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e000      	b.n	80024ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024cc:	2302      	movs	r3, #2
  }
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80024e4:	4b29      	ldr	r3, [pc, #164]	; (800258c <HAL_PWREx_ConfigSupply+0xb0>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	2b06      	cmp	r3, #6
 80024ee:	d00a      	beq.n	8002506 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024f0:	4b26      	ldr	r3, [pc, #152]	; (800258c <HAL_PWREx_ConfigSupply+0xb0>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d001      	beq.n	8002502 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e040      	b.n	8002584 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e03e      	b.n	8002584 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002506:	4b21      	ldr	r3, [pc, #132]	; (800258c <HAL_PWREx_ConfigSupply+0xb0>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800250e:	491f      	ldr	r1, [pc, #124]	; (800258c <HAL_PWREx_ConfigSupply+0xb0>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4313      	orrs	r3, r2
 8002514:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002516:	f7fe feb3 	bl	8001280 <HAL_GetTick>
 800251a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800251c:	e009      	b.n	8002532 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800251e:	f7fe feaf 	bl	8001280 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800252c:	d901      	bls.n	8002532 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e028      	b.n	8002584 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002532:	4b16      	ldr	r3, [pc, #88]	; (800258c <HAL_PWREx_ConfigSupply+0xb0>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800253a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800253e:	d1ee      	bne.n	800251e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b1e      	cmp	r3, #30
 8002544:	d008      	beq.n	8002558 <HAL_PWREx_ConfigSupply+0x7c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b2e      	cmp	r3, #46	; 0x2e
 800254a:	d005      	beq.n	8002558 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b1d      	cmp	r3, #29
 8002550:	d002      	beq.n	8002558 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b2d      	cmp	r3, #45	; 0x2d
 8002556:	d114      	bne.n	8002582 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002558:	f7fe fe92 	bl	8001280 <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800255e:	e009      	b.n	8002574 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002560:	f7fe fe8e 	bl	8001280 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800256e:	d901      	bls.n	8002574 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e007      	b.n	8002584 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_PWREx_ConfigSupply+0xb0>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002580:	d1ee      	bne.n	8002560 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	58024800 	.word	0x58024800

08002590 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08c      	sub	sp, #48	; 0x30
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d102      	bne.n	80025a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	f000 bc1d 	b.w	8002dde <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 8087 	beq.w	80026c0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025b2:	4b99      	ldr	r3, [pc, #612]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025bc:	4b96      	ldr	r3, [pc, #600]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c4:	2b10      	cmp	r3, #16
 80025c6:	d007      	beq.n	80025d8 <HAL_RCC_OscConfig+0x48>
 80025c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ca:	2b18      	cmp	r3, #24
 80025cc:	d110      	bne.n	80025f0 <HAL_RCC_OscConfig+0x60>
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d10b      	bne.n	80025f0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	4b8f      	ldr	r3, [pc, #572]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d06c      	beq.n	80026be <HAL_RCC_OscConfig+0x12e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d168      	bne.n	80026be <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e3f6      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f8:	d106      	bne.n	8002608 <HAL_RCC_OscConfig+0x78>
 80025fa:	4b87      	ldr	r3, [pc, #540]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a86      	ldr	r2, [pc, #536]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e02e      	b.n	8002666 <HAL_RCC_OscConfig+0xd6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10c      	bne.n	800262a <HAL_RCC_OscConfig+0x9a>
 8002610:	4b81      	ldr	r3, [pc, #516]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a80      	ldr	r2, [pc, #512]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 8002616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b7e      	ldr	r3, [pc, #504]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a7d      	ldr	r2, [pc, #500]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 8002622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	e01d      	b.n	8002666 <HAL_RCC_OscConfig+0xd6>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002632:	d10c      	bne.n	800264e <HAL_RCC_OscConfig+0xbe>
 8002634:	4b78      	ldr	r3, [pc, #480]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a77      	ldr	r2, [pc, #476]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 800263a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b75      	ldr	r3, [pc, #468]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a74      	ldr	r2, [pc, #464]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 8002646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	e00b      	b.n	8002666 <HAL_RCC_OscConfig+0xd6>
 800264e:	4b72      	ldr	r3, [pc, #456]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a71      	ldr	r2, [pc, #452]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 8002654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	4b6f      	ldr	r3, [pc, #444]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a6e      	ldr	r2, [pc, #440]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 8002660:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002664:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d013      	beq.n	8002696 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7fe fe07 	bl	8001280 <HAL_GetTick>
 8002672:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002676:	f7fe fe03 	bl	8001280 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b64      	cmp	r3, #100	; 0x64
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e3aa      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002688:	4b63      	ldr	r3, [pc, #396]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0xe6>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002696:	f7fe fdf3 	bl	8001280 <HAL_GetTick>
 800269a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800269e:	f7fe fdef 	bl	8001280 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b64      	cmp	r3, #100	; 0x64
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e396      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026b0:	4b59      	ldr	r3, [pc, #356]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f0      	bne.n	800269e <HAL_RCC_OscConfig+0x10e>
 80026bc:	e000      	b.n	80026c0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80cb 	beq.w	8002864 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ce:	4b52      	ldr	r3, [pc, #328]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026d6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026d8:	4b4f      	ldr	r3, [pc, #316]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d007      	beq.n	80026f4 <HAL_RCC_OscConfig+0x164>
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	2b18      	cmp	r3, #24
 80026e8:	d156      	bne.n	8002798 <HAL_RCC_OscConfig+0x208>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d151      	bne.n	8002798 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f4:	4b48      	ldr	r3, [pc, #288]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_OscConfig+0x17c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e368      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800270c:	4b42      	ldr	r3, [pc, #264]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 0219 	bic.w	r2, r3, #25
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	493f      	ldr	r1, [pc, #252]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800271e:	f7fe fdaf 	bl	8001280 <HAL_GetTick>
 8002722:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002726:	f7fe fdab 	bl	8001280 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e352      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002738:	4b37      	ldr	r3, [pc, #220]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002744:	f7fe fdcc 	bl	80012e0 <HAL_GetREVID>
 8002748:	4603      	mov	r3, r0
 800274a:	f241 0203 	movw	r2, #4099	; 0x1003
 800274e:	4293      	cmp	r3, r2
 8002750:	d817      	bhi.n	8002782 <HAL_RCC_OscConfig+0x1f2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b40      	cmp	r3, #64	; 0x40
 8002758:	d108      	bne.n	800276c <HAL_RCC_OscConfig+0x1dc>
 800275a:	4b2f      	ldr	r3, [pc, #188]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002762:	4a2d      	ldr	r2, [pc, #180]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 8002764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002768:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800276a:	e07b      	b.n	8002864 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276c:	4b2a      	ldr	r3, [pc, #168]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	031b      	lsls	r3, r3, #12
 800277a:	4927      	ldr	r1, [pc, #156]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002780:	e070      	b.n	8002864 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002782:	4b25      	ldr	r3, [pc, #148]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	061b      	lsls	r3, r3, #24
 8002790:	4921      	ldr	r1, [pc, #132]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 8002792:	4313      	orrs	r3, r2
 8002794:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002796:	e065      	b.n	8002864 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d048      	beq.n	8002832 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f023 0219 	bic.w	r2, r3, #25
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	491a      	ldr	r1, [pc, #104]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7fe fd65 	bl	8001280 <HAL_GetTick>
 80027b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ba:	f7fe fd61 	bl	8001280 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e308      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d8:	f7fe fd82 	bl	80012e0 <HAL_GetREVID>
 80027dc:	4603      	mov	r3, r0
 80027de:	f241 0203 	movw	r2, #4099	; 0x1003
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d81a      	bhi.n	800281c <HAL_RCC_OscConfig+0x28c>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b40      	cmp	r3, #64	; 0x40
 80027ec:	d108      	bne.n	8002800 <HAL_RCC_OscConfig+0x270>
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027f6:	4a08      	ldr	r2, [pc, #32]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fc:	6053      	str	r3, [r2, #4]
 80027fe:	e031      	b.n	8002864 <HAL_RCC_OscConfig+0x2d4>
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	031b      	lsls	r3, r3, #12
 800280e:	4902      	ldr	r1, [pc, #8]	; (8002818 <HAL_RCC_OscConfig+0x288>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
 8002814:	e026      	b.n	8002864 <HAL_RCC_OscConfig+0x2d4>
 8002816:	bf00      	nop
 8002818:	58024400 	.word	0x58024400
 800281c:	4b9a      	ldr	r3, [pc, #616]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	061b      	lsls	r3, r3, #24
 800282a:	4997      	ldr	r1, [pc, #604]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
 8002830:	e018      	b.n	8002864 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002832:	4b95      	ldr	r3, [pc, #596]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a94      	ldr	r2, [pc, #592]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283e:	f7fe fd1f 	bl	8001280 <HAL_GetTick>
 8002842:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002846:	f7fe fd1b 	bl	8001280 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e2c2      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002858:	4b8b      	ldr	r3, [pc, #556]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f0      	bne.n	8002846 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80a9 	beq.w	80029c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002872:	4b85      	ldr	r3, [pc, #532]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800287a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800287c:	4b82      	ldr	r3, [pc, #520]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2b08      	cmp	r3, #8
 8002886:	d007      	beq.n	8002898 <HAL_RCC_OscConfig+0x308>
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b18      	cmp	r3, #24
 800288c:	d13a      	bne.n	8002904 <HAL_RCC_OscConfig+0x374>
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d135      	bne.n	8002904 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002898:	4b7b      	ldr	r3, [pc, #492]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_OscConfig+0x320>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	2b80      	cmp	r3, #128	; 0x80
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e296      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028b0:	f7fe fd16 	bl	80012e0 <HAL_GetREVID>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d817      	bhi.n	80028ee <HAL_RCC_OscConfig+0x35e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	2b20      	cmp	r3, #32
 80028c4:	d108      	bne.n	80028d8 <HAL_RCC_OscConfig+0x348>
 80028c6:	4b70      	ldr	r3, [pc, #448]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028ce:	4a6e      	ldr	r2, [pc, #440]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 80028d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028d6:	e075      	b.n	80029c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028d8:	4b6b      	ldr	r3, [pc, #428]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	069b      	lsls	r3, r3, #26
 80028e6:	4968      	ldr	r1, [pc, #416]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028ec:	e06a      	b.n	80029c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ee:	4b66      	ldr	r3, [pc, #408]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	061b      	lsls	r3, r3, #24
 80028fc:	4962      	ldr	r1, [pc, #392]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002902:	e05f      	b.n	80029c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d042      	beq.n	8002992 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800290c:	4b5e      	ldr	r3, [pc, #376]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a5d      	ldr	r2, [pc, #372]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fcb2 	bl	8001280 <HAL_GetTick>
 800291c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002920:	f7fe fcae 	bl	8001280 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e255      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002932:	4b55      	ldr	r3, [pc, #340]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800293e:	f7fe fccf 	bl	80012e0 <HAL_GetREVID>
 8002942:	4603      	mov	r3, r0
 8002944:	f241 0203 	movw	r2, #4099	; 0x1003
 8002948:	4293      	cmp	r3, r2
 800294a:	d817      	bhi.n	800297c <HAL_RCC_OscConfig+0x3ec>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	2b20      	cmp	r3, #32
 8002952:	d108      	bne.n	8002966 <HAL_RCC_OscConfig+0x3d6>
 8002954:	4b4c      	ldr	r3, [pc, #304]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800295c:	4a4a      	ldr	r2, [pc, #296]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 800295e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002962:	6053      	str	r3, [r2, #4]
 8002964:	e02e      	b.n	80029c4 <HAL_RCC_OscConfig+0x434>
 8002966:	4b48      	ldr	r3, [pc, #288]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	069b      	lsls	r3, r3, #26
 8002974:	4944      	ldr	r1, [pc, #272]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002976:	4313      	orrs	r3, r2
 8002978:	604b      	str	r3, [r1, #4]
 800297a:	e023      	b.n	80029c4 <HAL_RCC_OscConfig+0x434>
 800297c:	4b42      	ldr	r3, [pc, #264]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	061b      	lsls	r3, r3, #24
 800298a:	493f      	ldr	r1, [pc, #252]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 800298c:	4313      	orrs	r3, r2
 800298e:	60cb      	str	r3, [r1, #12]
 8002990:	e018      	b.n	80029c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002992:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a3c      	ldr	r2, [pc, #240]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800299c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299e:	f7fe fc6f 	bl	8001280 <HAL_GetTick>
 80029a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80029a6:	f7fe fc6b 	bl	8001280 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e212      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029b8:	4b33      	ldr	r3, [pc, #204]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f0      	bne.n	80029a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d036      	beq.n	8002a3e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d019      	beq.n	8002a0c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d8:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 80029da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029dc:	4a2a      	ldr	r2, [pc, #168]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7fe fc4c 	bl	8001280 <HAL_GetTick>
 80029e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ec:	f7fe fc48 	bl	8001280 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e1ef      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x45c>
 8002a0a:	e018      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a10:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7fe fc32 	bl	8001280 <HAL_GetTick>
 8002a1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a20:	f7fe fc2e 	bl	8001280 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e1d5      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d039      	beq.n	8002abe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d01c      	beq.n	8002a8c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002a58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a5e:	f7fe fc0f 	bl	8001280 <HAL_GetTick>
 8002a62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a66:	f7fe fc0b 	bl	8001280 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e1b2      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x4d6>
 8002a84:	e01b      	b.n	8002abe <HAL_RCC_OscConfig+0x52e>
 8002a86:	bf00      	nop
 8002a88:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a8c:	4b9b      	ldr	r3, [pc, #620]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a9a      	ldr	r2, [pc, #616]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a98:	f7fe fbf2 	bl	8001280 <HAL_GetTick>
 8002a9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002aa0:	f7fe fbee 	bl	8001280 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e195      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ab2:	4b92      	ldr	r3, [pc, #584]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8081 	beq.w	8002bce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002acc:	4b8c      	ldr	r3, [pc, #560]	; (8002d00 <HAL_RCC_OscConfig+0x770>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a8b      	ldr	r2, [pc, #556]	; (8002d00 <HAL_RCC_OscConfig+0x770>)
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ad8:	f7fe fbd2 	bl	8001280 <HAL_GetTick>
 8002adc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ae0:	f7fe fbce 	bl	8001280 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	; 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e175      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002af2:	4b83      	ldr	r3, [pc, #524]	; (8002d00 <HAL_RCC_OscConfig+0x770>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d106      	bne.n	8002b14 <HAL_RCC_OscConfig+0x584>
 8002b06:	4b7d      	ldr	r3, [pc, #500]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	4a7c      	ldr	r2, [pc, #496]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6713      	str	r3, [r2, #112]	; 0x70
 8002b12:	e02d      	b.n	8002b70 <HAL_RCC_OscConfig+0x5e0>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10c      	bne.n	8002b36 <HAL_RCC_OscConfig+0x5a6>
 8002b1c:	4b77      	ldr	r3, [pc, #476]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	4a76      	ldr	r2, [pc, #472]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002b22:	f023 0301 	bic.w	r3, r3, #1
 8002b26:	6713      	str	r3, [r2, #112]	; 0x70
 8002b28:	4b74      	ldr	r3, [pc, #464]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2c:	4a73      	ldr	r2, [pc, #460]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002b2e:	f023 0304 	bic.w	r3, r3, #4
 8002b32:	6713      	str	r3, [r2, #112]	; 0x70
 8002b34:	e01c      	b.n	8002b70 <HAL_RCC_OscConfig+0x5e0>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b05      	cmp	r3, #5
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x5c8>
 8002b3e:	4b6f      	ldr	r3, [pc, #444]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	4a6e      	ldr	r2, [pc, #440]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002b44:	f043 0304 	orr.w	r3, r3, #4
 8002b48:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4a:	4b6c      	ldr	r3, [pc, #432]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	4a6b      	ldr	r2, [pc, #428]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6713      	str	r3, [r2, #112]	; 0x70
 8002b56:	e00b      	b.n	8002b70 <HAL_RCC_OscConfig+0x5e0>
 8002b58:	4b68      	ldr	r3, [pc, #416]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	4a67      	ldr	r2, [pc, #412]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002b5e:	f023 0301 	bic.w	r3, r3, #1
 8002b62:	6713      	str	r3, [r2, #112]	; 0x70
 8002b64:	4b65      	ldr	r3, [pc, #404]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	4a64      	ldr	r2, [pc, #400]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002b6a:	f023 0304 	bic.w	r3, r3, #4
 8002b6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d015      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fe fb82 	bl	8001280 <HAL_GetTick>
 8002b7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7fe fb7e 	bl	8001280 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e123      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b96:	4b59      	ldr	r3, [pc, #356]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0ee      	beq.n	8002b80 <HAL_RCC_OscConfig+0x5f0>
 8002ba2:	e014      	b.n	8002bce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe fb6c 	bl	8001280 <HAL_GetTick>
 8002ba8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7fe fb68 	bl	8001280 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e10d      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bc2:	4b4e      	ldr	r3, [pc, #312]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1ee      	bne.n	8002bac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8102 	beq.w	8002ddc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bd8:	4b48      	ldr	r3, [pc, #288]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002be0:	2b18      	cmp	r3, #24
 8002be2:	f000 80bd 	beq.w	8002d60 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	f040 809e 	bne.w	8002d2c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf0:	4b42      	ldr	r3, [pc, #264]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a41      	ldr	r2, [pc, #260]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fb40 	bl	8001280 <HAL_GetTick>
 8002c00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fe fb3c 	bl	8001280 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e0e3      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c16:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c22:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c26:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <HAL_RCC_OscConfig+0x774>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	430a      	orrs	r2, r1
 8002c36:	4931      	ldr	r1, [pc, #196]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	628b      	str	r3, [r1, #40]	; 0x28
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	3b01      	subs	r3, #1
 8002c42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	025b      	lsls	r3, r3, #9
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	3b01      	subs	r3, #1
 8002c58:	041b      	lsls	r3, r3, #16
 8002c5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c64:	3b01      	subs	r3, #1
 8002c66:	061b      	lsls	r3, r3, #24
 8002c68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c6c:	4923      	ldr	r1, [pc, #140]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c72:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c7e:	4b1f      	ldr	r3, [pc, #124]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c82:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <HAL_RCC_OscConfig+0x778>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c8a:	00d2      	lsls	r2, r2, #3
 8002c8c:	491b      	ldr	r1, [pc, #108]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c92:	4b1a      	ldr	r3, [pc, #104]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	f023 020c 	bic.w	r2, r3, #12
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4917      	ldr	r1, [pc, #92]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ca4:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	f023 0202 	bic.w	r2, r3, #2
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb0:	4912      	ldr	r1, [pc, #72]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	4a10      	ldr	r2, [pc, #64]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	4a0d      	ldr	r2, [pc, #52]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <HAL_RCC_OscConfig+0x76c>)
 8002cec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe fac5 	bl	8001280 <HAL_GetTick>
 8002cf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cf8:	e011      	b.n	8002d1e <HAL_RCC_OscConfig+0x78e>
 8002cfa:	bf00      	nop
 8002cfc:	58024400 	.word	0x58024400
 8002d00:	58024800 	.word	0x58024800
 8002d04:	fffffc0c 	.word	0xfffffc0c
 8002d08:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fe fab8 	bl	8001280 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e05f      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d1e:	4b32      	ldr	r3, [pc, #200]	; (8002de8 <HAL_RCC_OscConfig+0x858>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x77c>
 8002d2a:	e057      	b.n	8002ddc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2c:	4b2e      	ldr	r3, [pc, #184]	; (8002de8 <HAL_RCC_OscConfig+0x858>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a2d      	ldr	r2, [pc, #180]	; (8002de8 <HAL_RCC_OscConfig+0x858>)
 8002d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe faa2 	bl	8001280 <HAL_GetTick>
 8002d3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d40:	f7fe fa9e 	bl	8001280 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e045      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d52:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <HAL_RCC_OscConfig+0x858>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x7b0>
 8002d5e:	e03d      	b.n	8002ddc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d60:	4b21      	ldr	r3, [pc, #132]	; (8002de8 <HAL_RCC_OscConfig+0x858>)
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d66:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <HAL_RCC_OscConfig+0x858>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d031      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f003 0203 	and.w	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d12a      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d122      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d11a      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	0a5b      	lsrs	r3, r3, #9
 8002da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d111      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	0c1b      	lsrs	r3, r3, #16
 8002db8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d108      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	0e1b      	lsrs	r3, r3, #24
 8002dca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3730      	adds	r7, #48	; 0x30
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	58024400 	.word	0x58024400

08002dec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e19c      	b.n	800313a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e00:	4b8a      	ldr	r3, [pc, #552]	; (800302c <HAL_RCC_ClockConfig+0x240>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d910      	bls.n	8002e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0e:	4b87      	ldr	r3, [pc, #540]	; (800302c <HAL_RCC_ClockConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 020f 	bic.w	r2, r3, #15
 8002e16:	4985      	ldr	r1, [pc, #532]	; (800302c <HAL_RCC_ClockConfig+0x240>)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1e:	4b83      	ldr	r3, [pc, #524]	; (800302c <HAL_RCC_ClockConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e184      	b.n	800313a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d010      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	4b7b      	ldr	r3, [pc, #492]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d908      	bls.n	8002e5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e4c:	4b78      	ldr	r3, [pc, #480]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	4975      	ldr	r1, [pc, #468]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d010      	beq.n	8002e8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	4b70      	ldr	r3, [pc, #448]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d908      	bls.n	8002e8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e7a:	4b6d      	ldr	r3, [pc, #436]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	496a      	ldr	r1, [pc, #424]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d010      	beq.n	8002eba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	4b64      	ldr	r3, [pc, #400]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d908      	bls.n	8002eba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ea8:	4b61      	ldr	r3, [pc, #388]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	495e      	ldr	r1, [pc, #376]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d010      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	4b59      	ldr	r3, [pc, #356]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d908      	bls.n	8002ee8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ed6:	4b56      	ldr	r3, [pc, #344]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	4953      	ldr	r1, [pc, #332]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d010      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	4b4d      	ldr	r3, [pc, #308]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d908      	bls.n	8002f16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f04:	4b4a      	ldr	r3, [pc, #296]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f023 020f 	bic.w	r2, r3, #15
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4947      	ldr	r1, [pc, #284]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d055      	beq.n	8002fce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f22:	4b43      	ldr	r3, [pc, #268]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	4940      	ldr	r1, [pc, #256]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d107      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f3c:	4b3c      	ldr	r3, [pc, #240]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d121      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0f6      	b.n	800313a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d107      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f54:	4b36      	ldr	r3, [pc, #216]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d115      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0ea      	b.n	800313a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d107      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f6c:	4b30      	ldr	r3, [pc, #192]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d109      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0de      	b.n	800313a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f7c:	4b2c      	ldr	r3, [pc, #176]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0d6      	b.n	800313a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f8c:	4b28      	ldr	r3, [pc, #160]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f023 0207 	bic.w	r2, r3, #7
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4925      	ldr	r1, [pc, #148]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9e:	f7fe f96f 	bl	8001280 <HAL_GetTick>
 8002fa2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa4:	e00a      	b.n	8002fbc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa6:	f7fe f96b 	bl	8001280 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e0be      	b.n	800313a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbc:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d1eb      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d010      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	4b14      	ldr	r3, [pc, #80]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d208      	bcs.n	8002ffc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fea:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f023 020f 	bic.w	r2, r3, #15
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	490e      	ldr	r1, [pc, #56]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCC_ClockConfig+0x240>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d214      	bcs.n	8003034 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <HAL_RCC_ClockConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 020f 	bic.w	r2, r3, #15
 8003012:	4906      	ldr	r1, [pc, #24]	; (800302c <HAL_RCC_ClockConfig+0x240>)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b04      	ldr	r3, [pc, #16]	; (800302c <HAL_RCC_ClockConfig+0x240>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d005      	beq.n	8003034 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e086      	b.n	800313a <HAL_RCC_ClockConfig+0x34e>
 800302c:	52002000 	.word	0x52002000
 8003030:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d010      	beq.n	8003062 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	4b3f      	ldr	r3, [pc, #252]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800304c:	429a      	cmp	r2, r3
 800304e:	d208      	bcs.n	8003062 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003050:	4b3c      	ldr	r3, [pc, #240]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	4939      	ldr	r1, [pc, #228]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 800305e:	4313      	orrs	r3, r2
 8003060:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d010      	beq.n	8003090 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	4b34      	ldr	r3, [pc, #208]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800307a:	429a      	cmp	r2, r3
 800307c:	d208      	bcs.n	8003090 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800307e:	4b31      	ldr	r3, [pc, #196]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	492e      	ldr	r1, [pc, #184]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 800308c:	4313      	orrs	r3, r2
 800308e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	d010      	beq.n	80030be <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699a      	ldr	r2, [r3, #24]
 80030a0:	4b28      	ldr	r3, [pc, #160]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d208      	bcs.n	80030be <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030ac:	4b25      	ldr	r3, [pc, #148]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	4922      	ldr	r1, [pc, #136]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d010      	beq.n	80030ec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69da      	ldr	r2, [r3, #28]
 80030ce:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d208      	bcs.n	80030ec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030da:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	4917      	ldr	r1, [pc, #92]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030ec:	f000 f834 	bl	8003158 <HAL_RCC_GetSysClockFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b14      	ldr	r3, [pc, #80]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	0a1b      	lsrs	r3, r3, #8
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	4912      	ldr	r1, [pc, #72]	; (8003148 <HAL_RCC_ClockConfig+0x35c>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
 8003108:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800310a:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	4a0d      	ldr	r2, [pc, #52]	; (8003148 <HAL_RCC_ClockConfig+0x35c>)
 8003114:	5cd3      	ldrb	r3, [r2, r3]
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
 8003120:	4a0a      	ldr	r2, [pc, #40]	; (800314c <HAL_RCC_ClockConfig+0x360>)
 8003122:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003124:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <HAL_RCC_ClockConfig+0x364>)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <HAL_RCC_ClockConfig+0x368>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe f85c 	bl	80011ec <HAL_InitTick>
 8003134:	4603      	mov	r3, r0
 8003136:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003138:	7bfb      	ldrb	r3, [r7, #15]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	58024400 	.word	0x58024400
 8003148:	08006db4 	.word	0x08006db4
 800314c:	24000004 	.word	0x24000004
 8003150:	24000000 	.word	0x24000000
 8003154:	24000008 	.word	0x24000008

08003158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003158:	b480      	push	{r7}
 800315a:	b089      	sub	sp, #36	; 0x24
 800315c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800315e:	4bb3      	ldr	r3, [pc, #716]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003166:	2b18      	cmp	r3, #24
 8003168:	f200 8155 	bhi.w	8003416 <HAL_RCC_GetSysClockFreq+0x2be>
 800316c:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <HAL_RCC_GetSysClockFreq+0x1c>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	080031d9 	.word	0x080031d9
 8003178:	08003417 	.word	0x08003417
 800317c:	08003417 	.word	0x08003417
 8003180:	08003417 	.word	0x08003417
 8003184:	08003417 	.word	0x08003417
 8003188:	08003417 	.word	0x08003417
 800318c:	08003417 	.word	0x08003417
 8003190:	08003417 	.word	0x08003417
 8003194:	080031ff 	.word	0x080031ff
 8003198:	08003417 	.word	0x08003417
 800319c:	08003417 	.word	0x08003417
 80031a0:	08003417 	.word	0x08003417
 80031a4:	08003417 	.word	0x08003417
 80031a8:	08003417 	.word	0x08003417
 80031ac:	08003417 	.word	0x08003417
 80031b0:	08003417 	.word	0x08003417
 80031b4:	08003205 	.word	0x08003205
 80031b8:	08003417 	.word	0x08003417
 80031bc:	08003417 	.word	0x08003417
 80031c0:	08003417 	.word	0x08003417
 80031c4:	08003417 	.word	0x08003417
 80031c8:	08003417 	.word	0x08003417
 80031cc:	08003417 	.word	0x08003417
 80031d0:	08003417 	.word	0x08003417
 80031d4:	0800320b 	.word	0x0800320b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031d8:	4b94      	ldr	r3, [pc, #592]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d009      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031e4:	4b91      	ldr	r3, [pc, #580]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	08db      	lsrs	r3, r3, #3
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	4a90      	ldr	r2, [pc, #576]	; (8003430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
 80031f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80031f6:	e111      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031f8:	4b8d      	ldr	r3, [pc, #564]	; (8003430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031fa:	61bb      	str	r3, [r7, #24]
    break;
 80031fc:	e10e      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80031fe:	4b8d      	ldr	r3, [pc, #564]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003200:	61bb      	str	r3, [r7, #24]
    break;
 8003202:	e10b      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003204:	4b8c      	ldr	r3, [pc, #560]	; (8003438 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003206:	61bb      	str	r3, [r7, #24]
    break;
 8003208:	e108      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800320a:	4b88      	ldr	r3, [pc, #544]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003214:	4b85      	ldr	r3, [pc, #532]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800321e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003220:	4b82      	ldr	r3, [pc, #520]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800322a:	4b80      	ldr	r3, [pc, #512]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	08db      	lsrs	r3, r3, #3
 8003230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	fb02 f303 	mul.w	r3, r2, r3
 800323a:	ee07 3a90 	vmov	s15, r3
 800323e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003242:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80e1 	beq.w	8003410 <HAL_RCC_GetSysClockFreq+0x2b8>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b02      	cmp	r3, #2
 8003252:	f000 8083 	beq.w	800335c <HAL_RCC_GetSysClockFreq+0x204>
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b02      	cmp	r3, #2
 800325a:	f200 80a1 	bhi.w	80033a0 <HAL_RCC_GetSysClockFreq+0x248>
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0x114>
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d056      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x1c0>
 800326a:	e099      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800326c:	4b6f      	ldr	r3, [pc, #444]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d02d      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003278:	4b6c      	ldr	r3, [pc, #432]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	08db      	lsrs	r3, r3, #3
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	4a6b      	ldr	r2, [pc, #428]	; (8003430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
 8003288:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	ee07 3a90 	vmov	s15, r3
 8003290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	ee07 3a90 	vmov	s15, r3
 800329a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032a2:	4b62      	ldr	r3, [pc, #392]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800343c <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80032d2:	e087      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003440 <HAL_RCC_GetSysClockFreq+0x2e8>
 80032e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e6:	4b51      	ldr	r3, [pc, #324]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800343c <HAL_RCC_GetSysClockFreq+0x2e4>
 80032fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800330a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800330e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003316:	e065      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003322:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003444 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332a:	4b40      	ldr	r3, [pc, #256]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333a:	ed97 6a02 	vldr	s12, [r7, #8]
 800333e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800343c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800334e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800335a:	e043      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003366:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003448 <HAL_RCC_GetSysClockFreq+0x2f0>
 800336a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800336e:	4b2f      	ldr	r3, [pc, #188]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800337e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003382:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800343c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800338a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800338e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800339e:	e021      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003444 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033b2:	4b1e      	ldr	r3, [pc, #120]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800343c <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80033e4:	4b11      	ldr	r3, [pc, #68]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	0a5b      	lsrs	r3, r3, #9
 80033ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ee:	3301      	adds	r3, #1
 80033f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	ee07 3a90 	vmov	s15, r3
 80033f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003408:	ee17 3a90 	vmov	r3, s15
 800340c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800340e:	e005      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	61bb      	str	r3, [r7, #24]
    break;
 8003414:	e002      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003416:	4b07      	ldr	r3, [pc, #28]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003418:	61bb      	str	r3, [r7, #24]
    break;
 800341a:	bf00      	nop
  }

  return sysclockfreq;
 800341c:	69bb      	ldr	r3, [r7, #24]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3724      	adds	r7, #36	; 0x24
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	58024400 	.word	0x58024400
 8003430:	03d09000 	.word	0x03d09000
 8003434:	003d0900 	.word	0x003d0900
 8003438:	007a1200 	.word	0x007a1200
 800343c:	46000000 	.word	0x46000000
 8003440:	4c742400 	.word	0x4c742400
 8003444:	4a742400 	.word	0x4a742400
 8003448:	4af42400 	.word	0x4af42400

0800344c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003452:	f7ff fe81 	bl	8003158 <HAL_RCC_GetSysClockFreq>
 8003456:	4602      	mov	r2, r0
 8003458:	4b10      	ldr	r3, [pc, #64]	; (800349c <HAL_RCC_GetHCLKFreq+0x50>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	0a1b      	lsrs	r3, r3, #8
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	490f      	ldr	r1, [pc, #60]	; (80034a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003464:	5ccb      	ldrb	r3, [r1, r3]
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003470:	4b0a      	ldr	r3, [pc, #40]	; (800349c <HAL_RCC_GetHCLKFreq+0x50>)
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	4a09      	ldr	r2, [pc, #36]	; (80034a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800347a:	5cd3      	ldrb	r3, [r2, r3]
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	fa22 f303 	lsr.w	r3, r2, r3
 8003486:	4a07      	ldr	r2, [pc, #28]	; (80034a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003488:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800348a:	4a07      	ldr	r2, [pc, #28]	; (80034a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003490:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003492:	681b      	ldr	r3, [r3, #0]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	58024400 	.word	0x58024400
 80034a0:	08006db4 	.word	0x08006db4
 80034a4:	24000004 	.word	0x24000004
 80034a8:	24000000 	.word	0x24000000

080034ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80034b0:	f7ff ffcc 	bl	800344c <HAL_RCC_GetHCLKFreq>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	4904      	ldr	r1, [pc, #16]	; (80034d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034c2:	5ccb      	ldrb	r3, [r1, r3]
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	58024400 	.word	0x58024400
 80034d4:	08006db4 	.word	0x08006db4

080034d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80034dc:	f7ff ffb6 	bl	800344c <HAL_RCC_GetHCLKFreq>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	4904      	ldr	r1, [pc, #16]	; (8003500 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034ee:	5ccb      	ldrb	r3, [r1, r3]
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	58024400 	.word	0x58024400
 8003500:	08006db4 	.word	0x08006db4

08003504 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800350c:	2300      	movs	r3, #0
 800350e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003510:	2300      	movs	r3, #0
 8003512:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d03f      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003524:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003528:	d02a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800352a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800352e:	d824      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003530:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003534:	d018      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003536:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800353a:	d81e      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003544:	d007      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003546:	e018      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003548:	4ba3      	ldr	r3, [pc, #652]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	4aa2      	ldr	r2, [pc, #648]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800354e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003552:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003554:	e015      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3304      	adds	r3, #4
 800355a:	2102      	movs	r1, #2
 800355c:	4618      	mov	r0, r3
 800355e:	f001 f9d5 	bl	800490c <RCCEx_PLL2_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003566:	e00c      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3324      	adds	r3, #36	; 0x24
 800356c:	2102      	movs	r1, #2
 800356e:	4618      	mov	r0, r3
 8003570:	f001 fa7e 	bl	8004a70 <RCCEx_PLL3_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003578:	e003      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	75fb      	strb	r3, [r7, #23]
      break;
 800357e:	e000      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003582:	7dfb      	ldrb	r3, [r7, #23]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d109      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003588:	4b93      	ldr	r3, [pc, #588]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800358a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003594:	4990      	ldr	r1, [pc, #576]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003596:	4313      	orrs	r3, r2
 8003598:	650b      	str	r3, [r1, #80]	; 0x50
 800359a:	e001      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359c:	7dfb      	ldrb	r3, [r7, #23]
 800359e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d03d      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d826      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80035b4:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80035b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ba:	bf00      	nop
 80035bc:	080035d1 	.word	0x080035d1
 80035c0:	080035df 	.word	0x080035df
 80035c4:	080035f1 	.word	0x080035f1
 80035c8:	08003609 	.word	0x08003609
 80035cc:	08003609 	.word	0x08003609
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d0:	4b81      	ldr	r3, [pc, #516]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	4a80      	ldr	r2, [pc, #512]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035dc:	e015      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3304      	adds	r3, #4
 80035e2:	2100      	movs	r1, #0
 80035e4:	4618      	mov	r0, r3
 80035e6:	f001 f991 	bl	800490c <RCCEx_PLL2_Config>
 80035ea:	4603      	mov	r3, r0
 80035ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035ee:	e00c      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3324      	adds	r3, #36	; 0x24
 80035f4:	2100      	movs	r1, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 fa3a 	bl	8004a70 <RCCEx_PLL3_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003600:	e003      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
      break;
 8003606:	e000      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800360a:	7dfb      	ldrb	r3, [r7, #23]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003610:	4b71      	ldr	r3, [pc, #452]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003614:	f023 0207 	bic.w	r2, r3, #7
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361c:	496e      	ldr	r1, [pc, #440]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800361e:	4313      	orrs	r3, r2
 8003620:	650b      	str	r3, [r1, #80]	; 0x50
 8003622:	e001      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003630:	2b00      	cmp	r3, #0
 8003632:	d042      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800363c:	d02b      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800363e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003642:	d825      	bhi.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003644:	2bc0      	cmp	r3, #192	; 0xc0
 8003646:	d028      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003648:	2bc0      	cmp	r3, #192	; 0xc0
 800364a:	d821      	bhi.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800364c:	2b80      	cmp	r3, #128	; 0x80
 800364e:	d016      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003650:	2b80      	cmp	r3, #128	; 0x80
 8003652:	d81d      	bhi.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003658:	2b40      	cmp	r3, #64	; 0x40
 800365a:	d007      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800365c:	e018      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800365e:	4b5e      	ldr	r3, [pc, #376]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	4a5d      	ldr	r2, [pc, #372]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003668:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800366a:	e017      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3304      	adds	r3, #4
 8003670:	2100      	movs	r1, #0
 8003672:	4618      	mov	r0, r3
 8003674:	f001 f94a 	bl	800490c <RCCEx_PLL2_Config>
 8003678:	4603      	mov	r3, r0
 800367a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800367c:	e00e      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3324      	adds	r3, #36	; 0x24
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f001 f9f3 	bl	8004a70 <RCCEx_PLL3_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800368e:	e005      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	75fb      	strb	r3, [r7, #23]
      break;
 8003694:	e002      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003696:	bf00      	nop
 8003698:	e000      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800369a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036a2:	4b4d      	ldr	r3, [pc, #308]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	494a      	ldr	r1, [pc, #296]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	650b      	str	r3, [r1, #80]	; 0x50
 80036b4:	e001      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
 80036b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d049      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036d0:	d030      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80036d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036d6:	d82a      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036dc:	d02c      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80036de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036e2:	d824      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e8:	d018      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80036ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ee:	d81e      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80036f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036f8:	d007      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80036fa:	e018      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036fc:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	4a35      	ldr	r2, [pc, #212]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003706:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003708:	e017      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3304      	adds	r3, #4
 800370e:	2100      	movs	r1, #0
 8003710:	4618      	mov	r0, r3
 8003712:	f001 f8fb 	bl	800490c <RCCEx_PLL2_Config>
 8003716:	4603      	mov	r3, r0
 8003718:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800371a:	e00e      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3324      	adds	r3, #36	; 0x24
 8003720:	2100      	movs	r1, #0
 8003722:	4618      	mov	r0, r3
 8003724:	f001 f9a4 	bl	8004a70 <RCCEx_PLL3_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800372c:	e005      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	75fb      	strb	r3, [r7, #23]
      break;
 8003732:	e002      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003734:	bf00      	nop
 8003736:	e000      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800373a:	7dfb      	ldrb	r3, [r7, #23]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003740:	4b25      	ldr	r3, [pc, #148]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800374e:	4922      	ldr	r1, [pc, #136]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003750:	4313      	orrs	r3, r2
 8003752:	658b      	str	r3, [r1, #88]	; 0x58
 8003754:	e001      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003756:	7dfb      	ldrb	r3, [r7, #23]
 8003758:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003762:	2b00      	cmp	r3, #0
 8003764:	d04b      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800376c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003770:	d030      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003772:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003776:	d82a      	bhi.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003778:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800377c:	d02e      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800377e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003782:	d824      	bhi.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003784:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003788:	d018      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800378a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800378e:	d81e      	bhi.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003798:	d007      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800379a:	e018      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800379c:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	4a0d      	ldr	r2, [pc, #52]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037a8:	e019      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 f8ab 	bl	800490c <RCCEx_PLL2_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037ba:	e010      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3324      	adds	r3, #36	; 0x24
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 f954 	bl	8004a70 <RCCEx_PLL3_Config>
 80037c8:	4603      	mov	r3, r0
 80037ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037cc:	e007      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	75fb      	strb	r3, [r7, #23]
      break;
 80037d2:	e004      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80037d4:	bf00      	nop
 80037d6:	e002      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80037d8:	58024400 	.word	0x58024400
      break;
 80037dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037de:	7dfb      	ldrb	r3, [r7, #23]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037e4:	4b99      	ldr	r3, [pc, #612]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037f2:	4996      	ldr	r1, [pc, #600]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	658b      	str	r3, [r1, #88]	; 0x58
 80037f8:	e001      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d032      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380e:	2b30      	cmp	r3, #48	; 0x30
 8003810:	d01c      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003812:	2b30      	cmp	r3, #48	; 0x30
 8003814:	d817      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003816:	2b20      	cmp	r3, #32
 8003818:	d00c      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800381a:	2b20      	cmp	r3, #32
 800381c:	d813      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d016      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003822:	2b10      	cmp	r3, #16
 8003824:	d10f      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003826:	4b89      	ldr	r3, [pc, #548]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	4a88      	ldr	r2, [pc, #544]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800382c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003830:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003832:	e00e      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3304      	adds	r3, #4
 8003838:	2102      	movs	r1, #2
 800383a:	4618      	mov	r0, r3
 800383c:	f001 f866 	bl	800490c <RCCEx_PLL2_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003844:	e005      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	75fb      	strb	r3, [r7, #23]
      break;
 800384a:	e002      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800384c:	bf00      	nop
 800384e:	e000      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003852:	7dfb      	ldrb	r3, [r7, #23]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003858:	4b7c      	ldr	r3, [pc, #496]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800385a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003864:	4979      	ldr	r1, [pc, #484]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003866:	4313      	orrs	r3, r2
 8003868:	64cb      	str	r3, [r1, #76]	; 0x4c
 800386a:	e001      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386c:	7dfb      	ldrb	r3, [r7, #23]
 800386e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d047      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003884:	d030      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003886:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800388a:	d82a      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800388c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003890:	d02c      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003892:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003896:	d824      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800389c:	d018      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800389e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a2:	d81e      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80038a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ac:	d007      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80038ae:	e018      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b0:	4b66      	ldr	r3, [pc, #408]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	4a65      	ldr	r2, [pc, #404]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038bc:	e017      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3304      	adds	r3, #4
 80038c2:	2100      	movs	r1, #0
 80038c4:	4618      	mov	r0, r3
 80038c6:	f001 f821 	bl	800490c <RCCEx_PLL2_Config>
 80038ca:	4603      	mov	r3, r0
 80038cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038ce:	e00e      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3324      	adds	r3, #36	; 0x24
 80038d4:	2100      	movs	r1, #0
 80038d6:	4618      	mov	r0, r3
 80038d8:	f001 f8ca 	bl	8004a70 <RCCEx_PLL3_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038e0:	e005      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	75fb      	strb	r3, [r7, #23]
      break;
 80038e6:	e002      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80038e8:	bf00      	nop
 80038ea:	e000      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80038ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d109      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038f4:	4b55      	ldr	r3, [pc, #340]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003900:	4952      	ldr	r1, [pc, #328]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003902:	4313      	orrs	r3, r2
 8003904:	650b      	str	r3, [r1, #80]	; 0x50
 8003906:	e001      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003908:	7dfb      	ldrb	r3, [r7, #23]
 800390a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d049      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003920:	d02e      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003922:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003926:	d828      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003928:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800392c:	d02a      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800392e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003932:	d822      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003934:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003938:	d026      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800393a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800393e:	d81c      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003944:	d010      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003946:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800394a:	d816      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01d      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003954:	d111      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3304      	adds	r3, #4
 800395a:	2101      	movs	r1, #1
 800395c:	4618      	mov	r0, r3
 800395e:	f000 ffd5 	bl	800490c <RCCEx_PLL2_Config>
 8003962:	4603      	mov	r3, r0
 8003964:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003966:	e012      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3324      	adds	r3, #36	; 0x24
 800396c:	2101      	movs	r1, #1
 800396e:	4618      	mov	r0, r3
 8003970:	f001 f87e 	bl	8004a70 <RCCEx_PLL3_Config>
 8003974:	4603      	mov	r3, r0
 8003976:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003978:	e009      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	75fb      	strb	r3, [r7, #23]
      break;
 800397e:	e006      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003980:	bf00      	nop
 8003982:	e004      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003984:	bf00      	nop
 8003986:	e002      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003988:	bf00      	nop
 800398a:	e000      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800398c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003994:	4b2d      	ldr	r3, [pc, #180]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003998:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a0:	492a      	ldr	r1, [pc, #168]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	650b      	str	r3, [r1, #80]	; 0x50
 80039a6:	e001      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
 80039aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d04d      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c2:	d02e      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80039c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c8:	d828      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ce:	d02a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d4:	d822      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039da:	d026      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80039dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039e0:	d81c      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e6:	d010      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80039e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ec:	d816      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d01d      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80039f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039f6:	d111      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3304      	adds	r3, #4
 80039fc:	2101      	movs	r1, #1
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 ff84 	bl	800490c <RCCEx_PLL2_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a08:	e012      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3324      	adds	r3, #36	; 0x24
 8003a0e:	2101      	movs	r1, #1
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 f82d 	bl	8004a70 <RCCEx_PLL3_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a1a:	e009      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a20:	e006      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a22:	bf00      	nop
 8003a24:	e004      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a26:	bf00      	nop
 8003a28:	e002      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e000      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a44:	4901      	ldr	r1, [pc, #4]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	658b      	str	r3, [r1, #88]	; 0x58
 8003a4a:	e003      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003a4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a50:	7dfb      	ldrb	r3, [r7, #23]
 8003a52:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d02f      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a68:	d00e      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a6e:	d814      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d015      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003a74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a78:	d10f      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7a:	4baf      	ldr	r3, [pc, #700]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	4aae      	ldr	r2, [pc, #696]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a86:	e00c      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 ff3c 	bl	800490c <RCCEx_PLL2_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a98:	e003      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d109      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003aa8:	4ba3      	ldr	r3, [pc, #652]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab4:	49a0      	ldr	r1, [pc, #640]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	650b      	str	r3, [r1, #80]	; 0x50
 8003aba:	e001      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
 8003abe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d032      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d81b      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003ad4:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003b13 	.word	0x08003b13
 8003ae0:	08003aed 	.word	0x08003aed
 8003ae4:	08003afb 	.word	0x08003afb
 8003ae8:	08003b13 	.word	0x08003b13
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aec:	4b92      	ldr	r3, [pc, #584]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	4a91      	ldr	r2, [pc, #580]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003af8:	e00c      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3304      	adds	r3, #4
 8003afe:	2102      	movs	r1, #2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 ff03 	bl	800490c <RCCEx_PLL2_Config>
 8003b06:	4603      	mov	r3, r0
 8003b08:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b0a:	e003      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b10:	e000      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b1a:	4b87      	ldr	r3, [pc, #540]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1e:	f023 0203 	bic.w	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	4984      	ldr	r1, [pc, #528]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b2c:	e001      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
 8003b30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8086 	beq.w	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b40:	4b7e      	ldr	r3, [pc, #504]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a7d      	ldr	r2, [pc, #500]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b4c:	f7fd fb98 	bl	8001280 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b52:	e009      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b54:	f7fd fb94 	bl	8001280 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b64      	cmp	r3, #100	; 0x64
 8003b60:	d902      	bls.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	75fb      	strb	r3, [r7, #23]
        break;
 8003b66:	e005      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b68:	4b74      	ldr	r3, [pc, #464]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0ef      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d166      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b7a:	4b6f      	ldr	r3, [pc, #444]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b84:	4053      	eors	r3, r2
 8003b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d013      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b8e:	4b6a      	ldr	r3, [pc, #424]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b96:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b98:	4b67      	ldr	r3, [pc, #412]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	4a66      	ldr	r2, [pc, #408]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba4:	4b64      	ldr	r3, [pc, #400]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4a63      	ldr	r2, [pc, #396]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bb0:	4a61      	ldr	r2, [pc, #388]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc0:	d115      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc2:	f7fd fb5d 	bl	8001280 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bc8:	e00b      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bca:	f7fd fb59 	bl	8001280 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d902      	bls.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	75fb      	strb	r3, [r7, #23]
            break;
 8003be0:	e005      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003be2:	4b55      	ldr	r3, [pc, #340]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0ed      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003bee:	7dfb      	ldrb	r3, [r7, #23]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d126      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c02:	d10d      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003c04:	4b4c      	ldr	r3, [pc, #304]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c12:	0919      	lsrs	r1, r3, #4
 8003c14:	4b4a      	ldr	r3, [pc, #296]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003c16:	400b      	ands	r3, r1
 8003c18:	4947      	ldr	r1, [pc, #284]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	610b      	str	r3, [r1, #16]
 8003c1e:	e005      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003c20:	4b45      	ldr	r3, [pc, #276]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	4a44      	ldr	r2, [pc, #272]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c2a:	6113      	str	r3, [r2, #16]
 8003c2c:	4b42      	ldr	r3, [pc, #264]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3a:	493f      	ldr	r1, [pc, #252]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	670b      	str	r3, [r1, #112]	; 0x70
 8003c40:	e004      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
 8003c44:	75bb      	strb	r3, [r7, #22]
 8003c46:	e001      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
 8003c4a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8085 	beq.w	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c5e:	2b28      	cmp	r3, #40	; 0x28
 8003c60:	d866      	bhi.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003c62:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c68:	08003d45 	.word	0x08003d45
 8003c6c:	08003d31 	.word	0x08003d31
 8003c70:	08003d31 	.word	0x08003d31
 8003c74:	08003d31 	.word	0x08003d31
 8003c78:	08003d31 	.word	0x08003d31
 8003c7c:	08003d31 	.word	0x08003d31
 8003c80:	08003d31 	.word	0x08003d31
 8003c84:	08003d31 	.word	0x08003d31
 8003c88:	08003d0d 	.word	0x08003d0d
 8003c8c:	08003d31 	.word	0x08003d31
 8003c90:	08003d31 	.word	0x08003d31
 8003c94:	08003d31 	.word	0x08003d31
 8003c98:	08003d31 	.word	0x08003d31
 8003c9c:	08003d31 	.word	0x08003d31
 8003ca0:	08003d31 	.word	0x08003d31
 8003ca4:	08003d31 	.word	0x08003d31
 8003ca8:	08003d1f 	.word	0x08003d1f
 8003cac:	08003d31 	.word	0x08003d31
 8003cb0:	08003d31 	.word	0x08003d31
 8003cb4:	08003d31 	.word	0x08003d31
 8003cb8:	08003d31 	.word	0x08003d31
 8003cbc:	08003d31 	.word	0x08003d31
 8003cc0:	08003d31 	.word	0x08003d31
 8003cc4:	08003d31 	.word	0x08003d31
 8003cc8:	08003d45 	.word	0x08003d45
 8003ccc:	08003d31 	.word	0x08003d31
 8003cd0:	08003d31 	.word	0x08003d31
 8003cd4:	08003d31 	.word	0x08003d31
 8003cd8:	08003d31 	.word	0x08003d31
 8003cdc:	08003d31 	.word	0x08003d31
 8003ce0:	08003d31 	.word	0x08003d31
 8003ce4:	08003d31 	.word	0x08003d31
 8003ce8:	08003d45 	.word	0x08003d45
 8003cec:	08003d31 	.word	0x08003d31
 8003cf0:	08003d31 	.word	0x08003d31
 8003cf4:	08003d31 	.word	0x08003d31
 8003cf8:	08003d31 	.word	0x08003d31
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08003d31 	.word	0x08003d31
 8003d04:	08003d31 	.word	0x08003d31
 8003d08:	08003d45 	.word	0x08003d45
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	2101      	movs	r1, #1
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fdfa 	bl	800490c <RCCEx_PLL2_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d1c:	e013      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3324      	adds	r3, #36	; 0x24
 8003d22:	2101      	movs	r1, #1
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fea3 	bl	8004a70 <RCCEx_PLL3_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d2e:	e00a      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	75fb      	strb	r3, [r7, #23]
      break;
 8003d34:	e007      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d36:	bf00      	nop
 8003d38:	58024400 	.word	0x58024400
 8003d3c:	58024800 	.word	0x58024800
 8003d40:	00ffffcf 	.word	0x00ffffcf
      break;
 8003d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d109      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d4c:	4b96      	ldr	r3, [pc, #600]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d50:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d58:	4993      	ldr	r1, [pc, #588]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	654b      	str	r3, [r1, #84]	; 0x54
 8003d5e:	e001      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d038      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d74:	2b05      	cmp	r3, #5
 8003d76:	d821      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003dc3 	.word	0x08003dc3
 8003d84:	08003d99 	.word	0x08003d99
 8003d88:	08003dab 	.word	0x08003dab
 8003d8c:	08003dc3 	.word	0x08003dc3
 8003d90:	08003dc3 	.word	0x08003dc3
 8003d94:	08003dc3 	.word	0x08003dc3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fdb4 	bl	800490c <RCCEx_PLL2_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003da8:	e00c      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3324      	adds	r3, #36	; 0x24
 8003dae:	2101      	movs	r1, #1
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fe5d 	bl	8004a70 <RCCEx_PLL3_Config>
 8003db6:	4603      	mov	r3, r0
 8003db8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003dba:	e003      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dca:	4b77      	ldr	r3, [pc, #476]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dce:	f023 0207 	bic.w	r2, r3, #7
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd6:	4974      	ldr	r1, [pc, #464]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	654b      	str	r3, [r1, #84]	; 0x54
 8003ddc:	e001      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
 8003de0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d03a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df4:	2b05      	cmp	r3, #5
 8003df6:	d821      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003df8:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e43 	.word	0x08003e43
 8003e04:	08003e19 	.word	0x08003e19
 8003e08:	08003e2b 	.word	0x08003e2b
 8003e0c:	08003e43 	.word	0x08003e43
 8003e10:	08003e43 	.word	0x08003e43
 8003e14:	08003e43 	.word	0x08003e43
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fd74 	bl	800490c <RCCEx_PLL2_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e28:	e00c      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3324      	adds	r3, #36	; 0x24
 8003e2e:	2101      	movs	r1, #1
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fe1d 	bl	8004a70 <RCCEx_PLL3_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e3a:	e003      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e40:	e000      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e44:	7dfb      	ldrb	r3, [r7, #23]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e4a:	4b57      	ldr	r3, [pc, #348]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	f023 0207 	bic.w	r2, r3, #7
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e58:	4953      	ldr	r1, [pc, #332]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	658b      	str	r3, [r1, #88]	; 0x58
 8003e5e:	e001      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d04b      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e7a:	d02e      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e80:	d828      	bhi.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e86:	d02a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8c:	d822      	bhi.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e92:	d026      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003e94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e98:	d81c      	bhi.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e9e:	d010      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea4:	d816      	bhi.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01d      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eae:	d111      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fd28 	bl	800490c <RCCEx_PLL2_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ec0:	e012      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3324      	adds	r3, #36	; 0x24
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fdd1 	bl	8004a70 <RCCEx_PLL3_Config>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ed2:	e009      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed8:	e006      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003eda:	bf00      	nop
 8003edc:	e004      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ede:	bf00      	nop
 8003ee0:	e002      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ee2:	bf00      	nop
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eee:	4b2e      	ldr	r3, [pc, #184]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003efc:	492a      	ldr	r1, [pc, #168]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	654b      	str	r3, [r1, #84]	; 0x54
 8003f02:	e001      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d04d      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f1e:	d02e      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003f20:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f24:	d828      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2a:	d02a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f30:	d822      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f36:	d026      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003f38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f3c:	d81c      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f42:	d010      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f48:	d816      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d01d      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f52:	d111      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fcd6 	bl	800490c <RCCEx_PLL2_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f64:	e012      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3324      	adds	r3, #36	; 0x24
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fd7f 	bl	8004a70 <RCCEx_PLL3_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f76:	e009      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f7c:	e006      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f7e:	bf00      	nop
 8003f80:	e004      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f82:	bf00      	nop
 8003f84:	e002      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f86:	bf00      	nop
 8003f88:	e000      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10c      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f92:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f96:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fa0:	4901      	ldr	r1, [pc, #4]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	658b      	str	r3, [r1, #88]	; 0x58
 8003fa6:	e003      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003fa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
 8003fae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d04b      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fc2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fc6:	d02e      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003fc8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fcc:	d828      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd2:	d02a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd8:	d822      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fda:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fde:	d026      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003fe0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fe4:	d81c      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fea:	d010      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003fec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ff0:	d816      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d01d      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffa:	d111      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3304      	adds	r3, #4
 8004000:	2100      	movs	r1, #0
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fc82 	bl	800490c <RCCEx_PLL2_Config>
 8004008:	4603      	mov	r3, r0
 800400a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800400c:	e012      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3324      	adds	r3, #36	; 0x24
 8004012:	2102      	movs	r1, #2
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fd2b 	bl	8004a70 <RCCEx_PLL3_Config>
 800401a:	4603      	mov	r3, r0
 800401c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800401e:	e009      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	75fb      	strb	r3, [r7, #23]
      break;
 8004024:	e006      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004026:	bf00      	nop
 8004028:	e004      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800402a:	bf00      	nop
 800402c:	e002      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800402e:	bf00      	nop
 8004030:	e000      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800403a:	4b9d      	ldr	r3, [pc, #628]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004048:	4999      	ldr	r1, [pc, #612]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800404a:	4313      	orrs	r3, r2
 800404c:	658b      	str	r3, [r1, #88]	; 0x58
 800404e:	e001      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004050:	7dfb      	ldrb	r3, [r7, #23]
 8004052:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406a:	d10a      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3324      	adds	r3, #36	; 0x24
 8004070:	2102      	movs	r1, #2
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fcfc 	bl	8004a70 <RCCEx_PLL3_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004082:	4b8b      	ldr	r3, [pc, #556]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004090:	4987      	ldr	r1, [pc, #540]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004092:	4313      	orrs	r3, r2
 8004094:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0310 	and.w	r3, r3, #16
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ac:	d10a      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3324      	adds	r3, #36	; 0x24
 80040b2:	2102      	movs	r1, #2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fcdb 	bl	8004a70 <RCCEx_PLL3_Config>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040c4:	4b7a      	ldr	r3, [pc, #488]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d2:	4977      	ldr	r1, [pc, #476]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d034      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ee:	d01d      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80040f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040f4:	d817      	bhi.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80040fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fe:	d009      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004100:	e011      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3304      	adds	r3, #4
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fbff 	bl	800490c <RCCEx_PLL2_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004112:	e00c      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3324      	adds	r3, #36	; 0x24
 8004118:	2102      	movs	r1, #2
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fca8 	bl	8004a70 <RCCEx_PLL3_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004124:	e003      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	75fb      	strb	r3, [r7, #23]
      break;
 800412a:	e000      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800412c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800412e:	7dfb      	ldrb	r3, [r7, #23]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004134:	4b5e      	ldr	r3, [pc, #376]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004138:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004142:	495b      	ldr	r1, [pc, #364]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004144:	4313      	orrs	r3, r2
 8004146:	658b      	str	r3, [r1, #88]	; 0x58
 8004148:	e001      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414a:	7dfb      	ldrb	r3, [r7, #23]
 800414c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d033      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004160:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004164:	d01c      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004166:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800416a:	d816      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800416c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004170:	d003      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004176:	d007      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004178:	e00f      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800417a:	4b4d      	ldr	r3, [pc, #308]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	4a4c      	ldr	r2, [pc, #304]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004184:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004186:	e00c      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3324      	adds	r3, #36	; 0x24
 800418c:	2101      	movs	r1, #1
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fc6e 	bl	8004a70 <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004198:	e003      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
      break;
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80041a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041a8:	4b41      	ldr	r3, [pc, #260]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b6:	493e      	ldr	r1, [pc, #248]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	654b      	str	r3, [r1, #84]	; 0x54
 80041bc:	e001      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d029      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80041d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041da:	d007      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80041dc:	e00f      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041de:	4b34      	ldr	r3, [pc, #208]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	4a33      	ldr	r2, [pc, #204]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041ea:	e00b      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3304      	adds	r3, #4
 80041f0:	2102      	movs	r1, #2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fb8a 	bl	800490c <RCCEx_PLL2_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041fc:	e002      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	75fb      	strb	r3, [r7, #23]
      break;
 8004202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800420a:	4b29      	ldr	r3, [pc, #164]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800420c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004216:	4926      	ldr	r1, [pc, #152]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004218:	4313      	orrs	r3, r2
 800421a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800421c:	e001      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421e:	7dfb      	ldrb	r3, [r7, #23]
 8004220:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3324      	adds	r3, #36	; 0x24
 8004232:	2102      	movs	r1, #2
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fc1b 	bl	8004a70 <RCCEx_PLL3_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d033      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004258:	d017      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800425a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800425e:	d811      	bhi.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004264:	d013      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800426a:	d80b      	bhi.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d010      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004274:	d106      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004276:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	4a0d      	ldr	r2, [pc, #52]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800427c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004280:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004282:	e007      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	75fb      	strb	r3, [r7, #23]
      break;
 8004288:	e004      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800428a:	bf00      	nop
 800428c:	e002      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800428e:	bf00      	nop
 8004290:	e000      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10c      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800429a:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800429c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a6:	4902      	ldr	r1, [pc, #8]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	654b      	str	r3, [r1, #84]	; 0x54
 80042ac:	e004      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80042ae:	bf00      	nop
 80042b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
 80042b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042c4:	4b31      	ldr	r3, [pc, #196]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d0:	492e      	ldr	r1, [pc, #184]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80042e2:	4b2a      	ldr	r3, [pc, #168]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042f0:	4926      	ldr	r1, [pc, #152]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004302:	4b22      	ldr	r3, [pc, #136]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004306:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800430e:	491f      	ldr	r1, [pc, #124]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004310:	4313      	orrs	r3, r2
 8004312:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00d      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004320:	4b1a      	ldr	r3, [pc, #104]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	4a19      	ldr	r2, [pc, #100]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004326:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800432a:	6113      	str	r3, [r2, #16]
 800432c:	4b17      	ldr	r3, [pc, #92]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004336:	4915      	ldr	r1, [pc, #84]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004338:	4313      	orrs	r3, r2
 800433a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	da08      	bge.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004344:	4b11      	ldr	r3, [pc, #68]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004348:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004350:	490e      	ldr	r1, [pc, #56]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004352:	4313      	orrs	r3, r2
 8004354:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d009      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004362:	4b0a      	ldr	r3, [pc, #40]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	4906      	ldr	r1, [pc, #24]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004372:	4313      	orrs	r3, r2
 8004374:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004376:	7dbb      	ldrb	r3, [r7, #22]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800437c:	2300      	movs	r3, #0
 800437e:	e000      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
}
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	58024400 	.word	0x58024400

08004390 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004394:	f7ff f85a 	bl	800344c <HAL_RCC_GetHCLKFreq>
 8004398:	4602      	mov	r2, r0
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	4904      	ldr	r1, [pc, #16]	; (80043b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80043a6:	5ccb      	ldrb	r3, [r1, r3]
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	58024400 	.word	0x58024400
 80043b8:	08006db4 	.word	0x08006db4

080043bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80043bc:	b480      	push	{r7}
 80043be:	b089      	sub	sp, #36	; 0x24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043c4:	4ba1      	ldr	r3, [pc, #644]	; (800464c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c8:	f003 0303 	and.w	r3, r3, #3
 80043cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80043ce:	4b9f      	ldr	r3, [pc, #636]	; (800464c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	0b1b      	lsrs	r3, r3, #12
 80043d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80043da:	4b9c      	ldr	r3, [pc, #624]	; (800464c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80043e6:	4b99      	ldr	r3, [pc, #612]	; (800464c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ea:	08db      	lsrs	r3, r3, #3
 80043ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	fb02 f303 	mul.w	r3, r2, r3
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8111 	beq.w	800462c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2b02      	cmp	r3, #2
 800440e:	f000 8083 	beq.w	8004518 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	2b02      	cmp	r3, #2
 8004416:	f200 80a1 	bhi.w	800455c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d056      	beq.n	80044d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004426:	e099      	b.n	800455c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004428:	4b88      	ldr	r3, [pc, #544]	; (800464c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	d02d      	beq.n	8004490 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004434:	4b85      	ldr	r3, [pc, #532]	; (800464c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	08db      	lsrs	r3, r3, #3
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	4a84      	ldr	r2, [pc, #528]	; (8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004440:	fa22 f303 	lsr.w	r3, r2, r3
 8004444:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	ee07 3a90 	vmov	s15, r3
 800444c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800445e:	4b7b      	ldr	r3, [pc, #492]	; (800464c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004472:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004654 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800447e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800448e:	e087      	b.n	80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004658 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800449e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a2:	4b6a      	ldr	r3, [pc, #424]	; (800464c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004654 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044d2:	e065      	b.n	80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044e6:	4b59      	ldr	r3, [pc, #356]	; (800464c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004654 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800450a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800450e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004512:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004516:	e043      	b.n	80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004522:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800452a:	4b48      	ldr	r3, [pc, #288]	; (800464c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800453a:	ed97 6a03 	vldr	s12, [r7, #12]
 800453e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004654 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800454a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800454e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004556:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800455a:	e021      	b.n	80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004566:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800456a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800456e:	4b37      	ldr	r3, [pc, #220]	; (800464c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800457e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004582:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004654 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800458a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800458e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800459e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80045a0:	4b2a      	ldr	r3, [pc, #168]	; (800464c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	0a5b      	lsrs	r3, r3, #9
 80045a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80045be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045c6:	ee17 2a90 	vmov	r2, s15
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80045ce:	4b1f      	ldr	r3, [pc, #124]	; (800464c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	0c1b      	lsrs	r3, r3, #16
 80045d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045d8:	ee07 3a90 	vmov	s15, r3
 80045dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045f4:	ee17 2a90 	vmov	r2, s15
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80045fc:	4b13      	ldr	r3, [pc, #76]	; (800464c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	0e1b      	lsrs	r3, r3, #24
 8004602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004612:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004616:	edd7 6a07 	vldr	s13, [r7, #28]
 800461a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800461e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004622:	ee17 2a90 	vmov	r2, s15
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800462a:	e008      	b.n	800463e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	609a      	str	r2, [r3, #8]
}
 800463e:	bf00      	nop
 8004640:	3724      	adds	r7, #36	; 0x24
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	58024400 	.word	0x58024400
 8004650:	03d09000 	.word	0x03d09000
 8004654:	46000000 	.word	0x46000000
 8004658:	4c742400 	.word	0x4c742400
 800465c:	4a742400 	.word	0x4a742400
 8004660:	4af42400 	.word	0x4af42400

08004664 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004664:	b480      	push	{r7}
 8004666:	b089      	sub	sp, #36	; 0x24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800466c:	4ba1      	ldr	r3, [pc, #644]	; (80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004676:	4b9f      	ldr	r3, [pc, #636]	; (80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	0d1b      	lsrs	r3, r3, #20
 800467c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004680:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004682:	4b9c      	ldr	r3, [pc, #624]	; (80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	0a1b      	lsrs	r3, r3, #8
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800468e:	4b99      	ldr	r3, [pc, #612]	; (80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	08db      	lsrs	r3, r3, #3
 8004694:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8111 	beq.w	80048d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	f000 8083 	beq.w	80047c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	f200 80a1 	bhi.w	8004804 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d056      	beq.n	800477c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80046ce:	e099      	b.n	8004804 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046d0:	4b88      	ldr	r3, [pc, #544]	; (80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d02d      	beq.n	8004738 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046dc:	4b85      	ldr	r3, [pc, #532]	; (80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	08db      	lsrs	r3, r3, #3
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	4a84      	ldr	r2, [pc, #528]	; (80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80046e8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	ee07 3a90 	vmov	s15, r3
 80046f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004706:	4b7b      	ldr	r3, [pc, #492]	; (80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004716:	ed97 6a03 	vldr	s12, [r7, #12]
 800471a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80048fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800471e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800472a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800472e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004732:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004736:	e087      	b.n	8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004742:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474a:	4b6a      	ldr	r3, [pc, #424]	; (80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475a:	ed97 6a03 	vldr	s12, [r7, #12]
 800475e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80048fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800476e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004776:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800477a:	e065      	b.n	8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004786:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800478a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478e:	4b59      	ldr	r3, [pc, #356]	; (80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479e:	ed97 6a03 	vldr	s12, [r7, #12]
 80047a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80048fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047be:	e043      	b.n	8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80047ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d2:	4b48      	ldr	r3, [pc, #288]	; (80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80048fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004802:	e021      	b.n	8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004816:	4b37      	ldr	r3, [pc, #220]	; (80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004826:	ed97 6a03 	vldr	s12, [r7, #12]
 800482a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80048fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800482e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800483a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004846:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004848:	4b2a      	ldr	r3, [pc, #168]	; (80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	0a5b      	lsrs	r3, r3, #9
 800484e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800485e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004862:	edd7 6a07 	vldr	s13, [r7, #28]
 8004866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800486a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800486e:	ee17 2a90 	vmov	r2, s15
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004876:	4b1f      	ldr	r3, [pc, #124]	; (80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	0c1b      	lsrs	r3, r3, #16
 800487c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004880:	ee07 3a90 	vmov	s15, r3
 8004884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004888:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800488c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004890:	edd7 6a07 	vldr	s13, [r7, #28]
 8004894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800489c:	ee17 2a90 	vmov	r2, s15
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80048a4:	4b13      	ldr	r3, [pc, #76]	; (80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	0e1b      	lsrs	r3, r3, #24
 80048aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048be:	edd7 6a07 	vldr	s13, [r7, #28]
 80048c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ca:	ee17 2a90 	vmov	r2, s15
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80048d2:	e008      	b.n	80048e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	609a      	str	r2, [r3, #8]
}
 80048e6:	bf00      	nop
 80048e8:	3724      	adds	r7, #36	; 0x24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	58024400 	.word	0x58024400
 80048f8:	03d09000 	.word	0x03d09000
 80048fc:	46000000 	.word	0x46000000
 8004900:	4c742400 	.word	0x4c742400
 8004904:	4a742400 	.word	0x4a742400
 8004908:	4af42400 	.word	0x4af42400

0800490c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800491a:	4b53      	ldr	r3, [pc, #332]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b03      	cmp	r3, #3
 8004924:	d101      	bne.n	800492a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e099      	b.n	8004a5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800492a:	4b4f      	ldr	r3, [pc, #316]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a4e      	ldr	r2, [pc, #312]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 8004930:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004936:	f7fc fca3 	bl	8001280 <HAL_GetTick>
 800493a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800493c:	e008      	b.n	8004950 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800493e:	f7fc fc9f 	bl	8001280 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e086      	b.n	8004a5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004950:	4b45      	ldr	r3, [pc, #276]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f0      	bne.n	800493e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800495c:	4b42      	ldr	r3, [pc, #264]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 800495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004960:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	031b      	lsls	r3, r3, #12
 800496a:	493f      	ldr	r1, [pc, #252]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 800496c:	4313      	orrs	r3, r2
 800496e:	628b      	str	r3, [r1, #40]	; 0x28
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	3b01      	subs	r3, #1
 8004976:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	3b01      	subs	r3, #1
 8004980:	025b      	lsls	r3, r3, #9
 8004982:	b29b      	uxth	r3, r3
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	3b01      	subs	r3, #1
 800498c:	041b      	lsls	r3, r3, #16
 800498e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	3b01      	subs	r3, #1
 800499a:	061b      	lsls	r3, r3, #24
 800499c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049a0:	4931      	ldr	r1, [pc, #196]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80049a6:	4b30      	ldr	r3, [pc, #192]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	492d      	ldr	r1, [pc, #180]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80049b8:	4b2b      	ldr	r3, [pc, #172]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	f023 0220 	bic.w	r2, r3, #32
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	4928      	ldr	r1, [pc, #160]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80049ca:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	4a26      	ldr	r2, [pc, #152]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 80049d0:	f023 0310 	bic.w	r3, r3, #16
 80049d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80049d6:	4b24      	ldr	r3, [pc, #144]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 80049d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049da:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <RCCEx_PLL2_Config+0x160>)
 80049dc:	4013      	ands	r3, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	69d2      	ldr	r2, [r2, #28]
 80049e2:	00d2      	lsls	r2, r2, #3
 80049e4:	4920      	ldr	r1, [pc, #128]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80049ea:	4b1f      	ldr	r3, [pc, #124]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	4a1e      	ldr	r2, [pc, #120]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 80049f0:	f043 0310 	orr.w	r3, r3, #16
 80049f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d106      	bne.n	8004a0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80049fc:	4b1a      	ldr	r3, [pc, #104]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	4a19      	ldr	r2, [pc, #100]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 8004a02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a08:	e00f      	b.n	8004a2a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d106      	bne.n	8004a1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a10:	4b15      	ldr	r3, [pc, #84]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	4a14      	ldr	r2, [pc, #80]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 8004a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a1c:	e005      	b.n	8004a2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a1e:	4b12      	ldr	r3, [pc, #72]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	4a11      	ldr	r2, [pc, #68]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 8004a24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a2a:	4b0f      	ldr	r3, [pc, #60]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a0e      	ldr	r2, [pc, #56]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 8004a30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a36:	f7fc fc23 	bl	8001280 <HAL_GetTick>
 8004a3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a3c:	e008      	b.n	8004a50 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a3e:	f7fc fc1f 	bl	8001280 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e006      	b.n	8004a5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a50:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <RCCEx_PLL2_Config+0x15c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	58024400 	.word	0x58024400
 8004a6c:	ffff0007 	.word	0xffff0007

08004a70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a7e:	4b53      	ldr	r3, [pc, #332]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d101      	bne.n	8004a8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e099      	b.n	8004bc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a8e:	4b4f      	ldr	r3, [pc, #316]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a4e      	ldr	r2, [pc, #312]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a9a:	f7fc fbf1 	bl	8001280 <HAL_GetTick>
 8004a9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004aa0:	e008      	b.n	8004ab4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004aa2:	f7fc fbed 	bl	8001280 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e086      	b.n	8004bc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ab4:	4b45      	ldr	r3, [pc, #276]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f0      	bne.n	8004aa2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ac0:	4b42      	ldr	r3, [pc, #264]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	051b      	lsls	r3, r3, #20
 8004ace:	493f      	ldr	r1, [pc, #252]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	628b      	str	r3, [r1, #40]	; 0x28
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	025b      	lsls	r3, r3, #9
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	041b      	lsls	r3, r3, #16
 8004af2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	061b      	lsls	r3, r3, #24
 8004b00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b04:	4931      	ldr	r1, [pc, #196]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b0a:	4b30      	ldr	r3, [pc, #192]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	492d      	ldr	r1, [pc, #180]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b1c:	4b2b      	ldr	r3, [pc, #172]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	4928      	ldr	r1, [pc, #160]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b2e:	4b27      	ldr	r3, [pc, #156]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	4a26      	ldr	r2, [pc, #152]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b3a:	4b24      	ldr	r3, [pc, #144]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b3e:	4b24      	ldr	r3, [pc, #144]	; (8004bd0 <RCCEx_PLL3_Config+0x160>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	69d2      	ldr	r2, [r2, #28]
 8004b46:	00d2      	lsls	r2, r2, #3
 8004b48:	4920      	ldr	r1, [pc, #128]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b4e:	4b1f      	ldr	r3, [pc, #124]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	4a1e      	ldr	r2, [pc, #120]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b60:	4b1a      	ldr	r3, [pc, #104]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	4a19      	ldr	r2, [pc, #100]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b6c:	e00f      	b.n	8004b8e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d106      	bne.n	8004b82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b74:	4b15      	ldr	r3, [pc, #84]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	4a14      	ldr	r2, [pc, #80]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b80:	e005      	b.n	8004b8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	4a11      	ldr	r2, [pc, #68]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b8e:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a0e      	ldr	r2, [pc, #56]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b9a:	f7fc fb71 	bl	8001280 <HAL_GetTick>
 8004b9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ba0:	e008      	b.n	8004bb4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004ba2:	f7fc fb6d 	bl	8001280 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e006      	b.n	8004bc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bb4:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <RCCEx_PLL3_Config+0x15c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0f0      	beq.n	8004ba2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	58024400 	.word	0x58024400
 8004bd0:	ffff0007 	.word	0xffff0007

08004bd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e042      	b.n	8004c6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d106      	bne.n	8004bfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7fc f95d 	bl	8000eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2224      	movs	r2, #36	; 0x24
 8004c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f8c2 	bl	8004da0 <UART_SetConfig>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e022      	b.n	8004c6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fe1e 	bl	8005870 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fea5 	bl	80059b4 <UART_CheckIdleState>
 8004c6a:	4603      	mov	r3, r0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	; 0x28
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	4613      	mov	r3, r2
 8004c82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	f040 8083 	bne.w	8004d96 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <HAL_UART_Transmit+0x28>
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e07b      	b.n	8004d98 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_UART_Transmit+0x3a>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e074      	b.n	8004d98 <HAL_UART_Transmit+0x124>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2221      	movs	r2, #33	; 0x21
 8004cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cc6:	f7fc fadb 	bl	8001280 <HAL_GetTick>
 8004cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	88fa      	ldrh	r2, [r7, #6]
 8004cd0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	88fa      	ldrh	r2, [r7, #6]
 8004cd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce4:	d108      	bne.n	8004cf8 <HAL_UART_Transmit+0x84>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d104      	bne.n	8004cf8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	61bb      	str	r3, [r7, #24]
 8004cf6:	e003      	b.n	8004d00 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004d08:	e02c      	b.n	8004d64 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2200      	movs	r2, #0
 8004d12:	2180      	movs	r1, #128	; 0x80
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 fe98 	bl	8005a4a <UART_WaitOnFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e039      	b.n	8004d98 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10b      	bne.n	8004d42 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	3302      	adds	r3, #2
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	e007      	b.n	8004d52 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	781a      	ldrb	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1cc      	bne.n	8004d0a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2200      	movs	r2, #0
 8004d78:	2140      	movs	r1, #64	; 0x40
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 fe65 	bl	8005a4a <UART_WaitOnFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e006      	b.n	8004d98 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e000      	b.n	8004d98 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004d96:	2302      	movs	r3, #2
  }
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da4:	b092      	sub	sp, #72	; 0x48
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4bbe      	ldr	r3, [pc, #760]	; (80050c8 <UART_SetConfig+0x328>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4ab3      	ldr	r2, [pc, #716]	; (80050cc <UART_SetConfig+0x32c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d004      	beq.n	8004e0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	4baf      	ldr	r3, [pc, #700]	; (80050d0 <UART_SetConfig+0x330>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	6812      	ldr	r2, [r2, #0]
 8004e1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	f023 010f 	bic.w	r1, r3, #15
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4aa6      	ldr	r2, [pc, #664]	; (80050d4 <UART_SetConfig+0x334>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d177      	bne.n	8004f30 <UART_SetConfig+0x190>
 8004e40:	4ba5      	ldr	r3, [pc, #660]	; (80050d8 <UART_SetConfig+0x338>)
 8004e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e48:	2b28      	cmp	r3, #40	; 0x28
 8004e4a:	d86d      	bhi.n	8004f28 <UART_SetConfig+0x188>
 8004e4c:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <UART_SetConfig+0xb4>)
 8004e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e52:	bf00      	nop
 8004e54:	08004ef9 	.word	0x08004ef9
 8004e58:	08004f29 	.word	0x08004f29
 8004e5c:	08004f29 	.word	0x08004f29
 8004e60:	08004f29 	.word	0x08004f29
 8004e64:	08004f29 	.word	0x08004f29
 8004e68:	08004f29 	.word	0x08004f29
 8004e6c:	08004f29 	.word	0x08004f29
 8004e70:	08004f29 	.word	0x08004f29
 8004e74:	08004f01 	.word	0x08004f01
 8004e78:	08004f29 	.word	0x08004f29
 8004e7c:	08004f29 	.word	0x08004f29
 8004e80:	08004f29 	.word	0x08004f29
 8004e84:	08004f29 	.word	0x08004f29
 8004e88:	08004f29 	.word	0x08004f29
 8004e8c:	08004f29 	.word	0x08004f29
 8004e90:	08004f29 	.word	0x08004f29
 8004e94:	08004f09 	.word	0x08004f09
 8004e98:	08004f29 	.word	0x08004f29
 8004e9c:	08004f29 	.word	0x08004f29
 8004ea0:	08004f29 	.word	0x08004f29
 8004ea4:	08004f29 	.word	0x08004f29
 8004ea8:	08004f29 	.word	0x08004f29
 8004eac:	08004f29 	.word	0x08004f29
 8004eb0:	08004f29 	.word	0x08004f29
 8004eb4:	08004f11 	.word	0x08004f11
 8004eb8:	08004f29 	.word	0x08004f29
 8004ebc:	08004f29 	.word	0x08004f29
 8004ec0:	08004f29 	.word	0x08004f29
 8004ec4:	08004f29 	.word	0x08004f29
 8004ec8:	08004f29 	.word	0x08004f29
 8004ecc:	08004f29 	.word	0x08004f29
 8004ed0:	08004f29 	.word	0x08004f29
 8004ed4:	08004f19 	.word	0x08004f19
 8004ed8:	08004f29 	.word	0x08004f29
 8004edc:	08004f29 	.word	0x08004f29
 8004ee0:	08004f29 	.word	0x08004f29
 8004ee4:	08004f29 	.word	0x08004f29
 8004ee8:	08004f29 	.word	0x08004f29
 8004eec:	08004f29 	.word	0x08004f29
 8004ef0:	08004f29 	.word	0x08004f29
 8004ef4:	08004f21 	.word	0x08004f21
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004efe:	e222      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004f00:	2304      	movs	r3, #4
 8004f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f06:	e21e      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004f08:	2308      	movs	r3, #8
 8004f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f0e:	e21a      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004f10:	2310      	movs	r3, #16
 8004f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f16:	e216      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004f18:	2320      	movs	r3, #32
 8004f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f1e:	e212      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004f20:	2340      	movs	r3, #64	; 0x40
 8004f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f26:	e20e      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004f28:	2380      	movs	r3, #128	; 0x80
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f2e:	e20a      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a69      	ldr	r2, [pc, #420]	; (80050dc <UART_SetConfig+0x33c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d130      	bne.n	8004f9c <UART_SetConfig+0x1fc>
 8004f3a:	4b67      	ldr	r3, [pc, #412]	; (80050d8 <UART_SetConfig+0x338>)
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	2b05      	cmp	r3, #5
 8004f44:	d826      	bhi.n	8004f94 <UART_SetConfig+0x1f4>
 8004f46:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <UART_SetConfig+0x1ac>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004f65 	.word	0x08004f65
 8004f50:	08004f6d 	.word	0x08004f6d
 8004f54:	08004f75 	.word	0x08004f75
 8004f58:	08004f7d 	.word	0x08004f7d
 8004f5c:	08004f85 	.word	0x08004f85
 8004f60:	08004f8d 	.word	0x08004f8d
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f6a:	e1ec      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f72:	e1e8      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004f74:	2308      	movs	r3, #8
 8004f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f7a:	e1e4      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f82:	e1e0      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004f84:	2320      	movs	r3, #32
 8004f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f8a:	e1dc      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004f8c:	2340      	movs	r3, #64	; 0x40
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f92:	e1d8      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004f94:	2380      	movs	r3, #128	; 0x80
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9a:	e1d4      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a4f      	ldr	r2, [pc, #316]	; (80050e0 <UART_SetConfig+0x340>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d130      	bne.n	8005008 <UART_SetConfig+0x268>
 8004fa6:	4b4c      	ldr	r3, [pc, #304]	; (80050d8 <UART_SetConfig+0x338>)
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	2b05      	cmp	r3, #5
 8004fb0:	d826      	bhi.n	8005000 <UART_SetConfig+0x260>
 8004fb2:	a201      	add	r2, pc, #4	; (adr r2, 8004fb8 <UART_SetConfig+0x218>)
 8004fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb8:	08004fd1 	.word	0x08004fd1
 8004fbc:	08004fd9 	.word	0x08004fd9
 8004fc0:	08004fe1 	.word	0x08004fe1
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	08004ff1 	.word	0x08004ff1
 8004fcc:	08004ff9 	.word	0x08004ff9
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd6:	e1b6      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fde:	e1b2      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fe6:	e1ae      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fee:	e1aa      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004ff0:	2320      	movs	r3, #32
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ff6:	e1a6      	b.n	8005346 <UART_SetConfig+0x5a6>
 8004ff8:	2340      	movs	r3, #64	; 0x40
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ffe:	e1a2      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005000:	2380      	movs	r3, #128	; 0x80
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005006:	e19e      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a35      	ldr	r2, [pc, #212]	; (80050e4 <UART_SetConfig+0x344>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d130      	bne.n	8005074 <UART_SetConfig+0x2d4>
 8005012:	4b31      	ldr	r3, [pc, #196]	; (80050d8 <UART_SetConfig+0x338>)
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	2b05      	cmp	r3, #5
 800501c:	d826      	bhi.n	800506c <UART_SetConfig+0x2cc>
 800501e:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <UART_SetConfig+0x284>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	0800503d 	.word	0x0800503d
 8005028:	08005045 	.word	0x08005045
 800502c:	0800504d 	.word	0x0800504d
 8005030:	08005055 	.word	0x08005055
 8005034:	0800505d 	.word	0x0800505d
 8005038:	08005065 	.word	0x08005065
 800503c:	2300      	movs	r3, #0
 800503e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005042:	e180      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005044:	2304      	movs	r3, #4
 8005046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800504a:	e17c      	b.n	8005346 <UART_SetConfig+0x5a6>
 800504c:	2308      	movs	r3, #8
 800504e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005052:	e178      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005054:	2310      	movs	r3, #16
 8005056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800505a:	e174      	b.n	8005346 <UART_SetConfig+0x5a6>
 800505c:	2320      	movs	r3, #32
 800505e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005062:	e170      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005064:	2340      	movs	r3, #64	; 0x40
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800506a:	e16c      	b.n	8005346 <UART_SetConfig+0x5a6>
 800506c:	2380      	movs	r3, #128	; 0x80
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005072:	e168      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1b      	ldr	r2, [pc, #108]	; (80050e8 <UART_SetConfig+0x348>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d142      	bne.n	8005104 <UART_SetConfig+0x364>
 800507e:	4b16      	ldr	r3, [pc, #88]	; (80050d8 <UART_SetConfig+0x338>)
 8005080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	2b05      	cmp	r3, #5
 8005088:	d838      	bhi.n	80050fc <UART_SetConfig+0x35c>
 800508a:	a201      	add	r2, pc, #4	; (adr r2, 8005090 <UART_SetConfig+0x2f0>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050a9 	.word	0x080050a9
 8005094:	080050b1 	.word	0x080050b1
 8005098:	080050b9 	.word	0x080050b9
 800509c:	080050c1 	.word	0x080050c1
 80050a0:	080050ed 	.word	0x080050ed
 80050a4:	080050f5 	.word	0x080050f5
 80050a8:	2300      	movs	r3, #0
 80050aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ae:	e14a      	b.n	8005346 <UART_SetConfig+0x5a6>
 80050b0:	2304      	movs	r3, #4
 80050b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b6:	e146      	b.n	8005346 <UART_SetConfig+0x5a6>
 80050b8:	2308      	movs	r3, #8
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050be:	e142      	b.n	8005346 <UART_SetConfig+0x5a6>
 80050c0:	2310      	movs	r3, #16
 80050c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050c6:	e13e      	b.n	8005346 <UART_SetConfig+0x5a6>
 80050c8:	cfff69f3 	.word	0xcfff69f3
 80050cc:	58000c00 	.word	0x58000c00
 80050d0:	11fff4ff 	.word	0x11fff4ff
 80050d4:	40011000 	.word	0x40011000
 80050d8:	58024400 	.word	0x58024400
 80050dc:	40004400 	.word	0x40004400
 80050e0:	40004800 	.word	0x40004800
 80050e4:	40004c00 	.word	0x40004c00
 80050e8:	40005000 	.word	0x40005000
 80050ec:	2320      	movs	r3, #32
 80050ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050f2:	e128      	b.n	8005346 <UART_SetConfig+0x5a6>
 80050f4:	2340      	movs	r3, #64	; 0x40
 80050f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fa:	e124      	b.n	8005346 <UART_SetConfig+0x5a6>
 80050fc:	2380      	movs	r3, #128	; 0x80
 80050fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005102:	e120      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4acb      	ldr	r2, [pc, #812]	; (8005438 <UART_SetConfig+0x698>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d176      	bne.n	80051fc <UART_SetConfig+0x45c>
 800510e:	4bcb      	ldr	r3, [pc, #812]	; (800543c <UART_SetConfig+0x69c>)
 8005110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005116:	2b28      	cmp	r3, #40	; 0x28
 8005118:	d86c      	bhi.n	80051f4 <UART_SetConfig+0x454>
 800511a:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <UART_SetConfig+0x380>)
 800511c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005120:	080051c5 	.word	0x080051c5
 8005124:	080051f5 	.word	0x080051f5
 8005128:	080051f5 	.word	0x080051f5
 800512c:	080051f5 	.word	0x080051f5
 8005130:	080051f5 	.word	0x080051f5
 8005134:	080051f5 	.word	0x080051f5
 8005138:	080051f5 	.word	0x080051f5
 800513c:	080051f5 	.word	0x080051f5
 8005140:	080051cd 	.word	0x080051cd
 8005144:	080051f5 	.word	0x080051f5
 8005148:	080051f5 	.word	0x080051f5
 800514c:	080051f5 	.word	0x080051f5
 8005150:	080051f5 	.word	0x080051f5
 8005154:	080051f5 	.word	0x080051f5
 8005158:	080051f5 	.word	0x080051f5
 800515c:	080051f5 	.word	0x080051f5
 8005160:	080051d5 	.word	0x080051d5
 8005164:	080051f5 	.word	0x080051f5
 8005168:	080051f5 	.word	0x080051f5
 800516c:	080051f5 	.word	0x080051f5
 8005170:	080051f5 	.word	0x080051f5
 8005174:	080051f5 	.word	0x080051f5
 8005178:	080051f5 	.word	0x080051f5
 800517c:	080051f5 	.word	0x080051f5
 8005180:	080051dd 	.word	0x080051dd
 8005184:	080051f5 	.word	0x080051f5
 8005188:	080051f5 	.word	0x080051f5
 800518c:	080051f5 	.word	0x080051f5
 8005190:	080051f5 	.word	0x080051f5
 8005194:	080051f5 	.word	0x080051f5
 8005198:	080051f5 	.word	0x080051f5
 800519c:	080051f5 	.word	0x080051f5
 80051a0:	080051e5 	.word	0x080051e5
 80051a4:	080051f5 	.word	0x080051f5
 80051a8:	080051f5 	.word	0x080051f5
 80051ac:	080051f5 	.word	0x080051f5
 80051b0:	080051f5 	.word	0x080051f5
 80051b4:	080051f5 	.word	0x080051f5
 80051b8:	080051f5 	.word	0x080051f5
 80051bc:	080051f5 	.word	0x080051f5
 80051c0:	080051ed 	.word	0x080051ed
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ca:	e0bc      	b.n	8005346 <UART_SetConfig+0x5a6>
 80051cc:	2304      	movs	r3, #4
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d2:	e0b8      	b.n	8005346 <UART_SetConfig+0x5a6>
 80051d4:	2308      	movs	r3, #8
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051da:	e0b4      	b.n	8005346 <UART_SetConfig+0x5a6>
 80051dc:	2310      	movs	r3, #16
 80051de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e2:	e0b0      	b.n	8005346 <UART_SetConfig+0x5a6>
 80051e4:	2320      	movs	r3, #32
 80051e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ea:	e0ac      	b.n	8005346 <UART_SetConfig+0x5a6>
 80051ec:	2340      	movs	r3, #64	; 0x40
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f2:	e0a8      	b.n	8005346 <UART_SetConfig+0x5a6>
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fa:	e0a4      	b.n	8005346 <UART_SetConfig+0x5a6>
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a8f      	ldr	r2, [pc, #572]	; (8005440 <UART_SetConfig+0x6a0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d130      	bne.n	8005268 <UART_SetConfig+0x4c8>
 8005206:	4b8d      	ldr	r3, [pc, #564]	; (800543c <UART_SetConfig+0x69c>)
 8005208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	2b05      	cmp	r3, #5
 8005210:	d826      	bhi.n	8005260 <UART_SetConfig+0x4c0>
 8005212:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <UART_SetConfig+0x478>)
 8005214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005218:	08005231 	.word	0x08005231
 800521c:	08005239 	.word	0x08005239
 8005220:	08005241 	.word	0x08005241
 8005224:	08005249 	.word	0x08005249
 8005228:	08005251 	.word	0x08005251
 800522c:	08005259 	.word	0x08005259
 8005230:	2300      	movs	r3, #0
 8005232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005236:	e086      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005238:	2304      	movs	r3, #4
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523e:	e082      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005240:	2308      	movs	r3, #8
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005246:	e07e      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005248:	2310      	movs	r3, #16
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524e:	e07a      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005250:	2320      	movs	r3, #32
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005256:	e076      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005258:	2340      	movs	r3, #64	; 0x40
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525e:	e072      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005266:	e06e      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a75      	ldr	r2, [pc, #468]	; (8005444 <UART_SetConfig+0x6a4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d130      	bne.n	80052d4 <UART_SetConfig+0x534>
 8005272:	4b72      	ldr	r3, [pc, #456]	; (800543c <UART_SetConfig+0x69c>)
 8005274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	2b05      	cmp	r3, #5
 800527c:	d826      	bhi.n	80052cc <UART_SetConfig+0x52c>
 800527e:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <UART_SetConfig+0x4e4>)
 8005280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005284:	0800529d 	.word	0x0800529d
 8005288:	080052a5 	.word	0x080052a5
 800528c:	080052ad 	.word	0x080052ad
 8005290:	080052b5 	.word	0x080052b5
 8005294:	080052bd 	.word	0x080052bd
 8005298:	080052c5 	.word	0x080052c5
 800529c:	2300      	movs	r3, #0
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a2:	e050      	b.n	8005346 <UART_SetConfig+0x5a6>
 80052a4:	2304      	movs	r3, #4
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052aa:	e04c      	b.n	8005346 <UART_SetConfig+0x5a6>
 80052ac:	2308      	movs	r3, #8
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b2:	e048      	b.n	8005346 <UART_SetConfig+0x5a6>
 80052b4:	2310      	movs	r3, #16
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ba:	e044      	b.n	8005346 <UART_SetConfig+0x5a6>
 80052bc:	2320      	movs	r3, #32
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c2:	e040      	b.n	8005346 <UART_SetConfig+0x5a6>
 80052c4:	2340      	movs	r3, #64	; 0x40
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ca:	e03c      	b.n	8005346 <UART_SetConfig+0x5a6>
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d2:	e038      	b.n	8005346 <UART_SetConfig+0x5a6>
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a5b      	ldr	r2, [pc, #364]	; (8005448 <UART_SetConfig+0x6a8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d130      	bne.n	8005340 <UART_SetConfig+0x5a0>
 80052de:	4b57      	ldr	r3, [pc, #348]	; (800543c <UART_SetConfig+0x69c>)
 80052e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	2b05      	cmp	r3, #5
 80052e8:	d826      	bhi.n	8005338 <UART_SetConfig+0x598>
 80052ea:	a201      	add	r2, pc, #4	; (adr r2, 80052f0 <UART_SetConfig+0x550>)
 80052ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f0:	08005309 	.word	0x08005309
 80052f4:	08005311 	.word	0x08005311
 80052f8:	08005319 	.word	0x08005319
 80052fc:	08005321 	.word	0x08005321
 8005300:	08005329 	.word	0x08005329
 8005304:	08005331 	.word	0x08005331
 8005308:	2302      	movs	r3, #2
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530e:	e01a      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005310:	2304      	movs	r3, #4
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005316:	e016      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005318:	2308      	movs	r3, #8
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531e:	e012      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005320:	2310      	movs	r3, #16
 8005322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005326:	e00e      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005328:	2320      	movs	r3, #32
 800532a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800532e:	e00a      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005330:	2340      	movs	r3, #64	; 0x40
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005336:	e006      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005338:	2380      	movs	r3, #128	; 0x80
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800533e:	e002      	b.n	8005346 <UART_SetConfig+0x5a6>
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a3f      	ldr	r2, [pc, #252]	; (8005448 <UART_SetConfig+0x6a8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	f040 80f8 	bne.w	8005542 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005352:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005356:	2b20      	cmp	r3, #32
 8005358:	dc46      	bgt.n	80053e8 <UART_SetConfig+0x648>
 800535a:	2b02      	cmp	r3, #2
 800535c:	f2c0 8082 	blt.w	8005464 <UART_SetConfig+0x6c4>
 8005360:	3b02      	subs	r3, #2
 8005362:	2b1e      	cmp	r3, #30
 8005364:	d87e      	bhi.n	8005464 <UART_SetConfig+0x6c4>
 8005366:	a201      	add	r2, pc, #4	; (adr r2, 800536c <UART_SetConfig+0x5cc>)
 8005368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536c:	080053ef 	.word	0x080053ef
 8005370:	08005465 	.word	0x08005465
 8005374:	080053f7 	.word	0x080053f7
 8005378:	08005465 	.word	0x08005465
 800537c:	08005465 	.word	0x08005465
 8005380:	08005465 	.word	0x08005465
 8005384:	08005407 	.word	0x08005407
 8005388:	08005465 	.word	0x08005465
 800538c:	08005465 	.word	0x08005465
 8005390:	08005465 	.word	0x08005465
 8005394:	08005465 	.word	0x08005465
 8005398:	08005465 	.word	0x08005465
 800539c:	08005465 	.word	0x08005465
 80053a0:	08005465 	.word	0x08005465
 80053a4:	08005417 	.word	0x08005417
 80053a8:	08005465 	.word	0x08005465
 80053ac:	08005465 	.word	0x08005465
 80053b0:	08005465 	.word	0x08005465
 80053b4:	08005465 	.word	0x08005465
 80053b8:	08005465 	.word	0x08005465
 80053bc:	08005465 	.word	0x08005465
 80053c0:	08005465 	.word	0x08005465
 80053c4:	08005465 	.word	0x08005465
 80053c8:	08005465 	.word	0x08005465
 80053cc:	08005465 	.word	0x08005465
 80053d0:	08005465 	.word	0x08005465
 80053d4:	08005465 	.word	0x08005465
 80053d8:	08005465 	.word	0x08005465
 80053dc:	08005465 	.word	0x08005465
 80053e0:	08005465 	.word	0x08005465
 80053e4:	08005457 	.word	0x08005457
 80053e8:	2b40      	cmp	r3, #64	; 0x40
 80053ea:	d037      	beq.n	800545c <UART_SetConfig+0x6bc>
 80053ec:	e03a      	b.n	8005464 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80053ee:	f7fe ffcf 	bl	8004390 <HAL_RCCEx_GetD3PCLK1Freq>
 80053f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053f4:	e03c      	b.n	8005470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fe ffde 	bl	80043bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005404:	e034      	b.n	8005470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005406:	f107 0318 	add.w	r3, r7, #24
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff f92a 	bl	8004664 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005414:	e02c      	b.n	8005470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005416:	4b09      	ldr	r3, [pc, #36]	; (800543c <UART_SetConfig+0x69c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b00      	cmp	r3, #0
 8005420:	d016      	beq.n	8005450 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005422:	4b06      	ldr	r3, [pc, #24]	; (800543c <UART_SetConfig+0x69c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	08db      	lsrs	r3, r3, #3
 8005428:	f003 0303 	and.w	r3, r3, #3
 800542c:	4a07      	ldr	r2, [pc, #28]	; (800544c <UART_SetConfig+0x6ac>)
 800542e:	fa22 f303 	lsr.w	r3, r2, r3
 8005432:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005434:	e01c      	b.n	8005470 <UART_SetConfig+0x6d0>
 8005436:	bf00      	nop
 8005438:	40011400 	.word	0x40011400
 800543c:	58024400 	.word	0x58024400
 8005440:	40007800 	.word	0x40007800
 8005444:	40007c00 	.word	0x40007c00
 8005448:	58000c00 	.word	0x58000c00
 800544c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005450:	4b9d      	ldr	r3, [pc, #628]	; (80056c8 <UART_SetConfig+0x928>)
 8005452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005454:	e00c      	b.n	8005470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005456:	4b9d      	ldr	r3, [pc, #628]	; (80056cc <UART_SetConfig+0x92c>)
 8005458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800545a:	e009      	b.n	8005470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800545c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005462:	e005      	b.n	8005470 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800546e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 81de 	beq.w	8005834 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	4a94      	ldr	r2, [pc, #592]	; (80056d0 <UART_SetConfig+0x930>)
 800547e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005482:	461a      	mov	r2, r3
 8005484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005486:	fbb3 f3f2 	udiv	r3, r3, r2
 800548a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	4613      	mov	r3, r2
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	4413      	add	r3, r2
 8005496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005498:	429a      	cmp	r2, r3
 800549a:	d305      	bcc.n	80054a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d903      	bls.n	80054b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80054ae:	e1c1      	b.n	8005834 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b2:	2200      	movs	r2, #0
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	60fa      	str	r2, [r7, #12]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	4a84      	ldr	r2, [pc, #528]	; (80056d0 <UART_SetConfig+0x930>)
 80054be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2200      	movs	r2, #0
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054d2:	f7fa ff55 	bl	8000380 <__aeabi_uldivmod>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4610      	mov	r0, r2
 80054dc:	4619      	mov	r1, r3
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	020b      	lsls	r3, r1, #8
 80054e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054ec:	0202      	lsls	r2, r0, #8
 80054ee:	6979      	ldr	r1, [r7, #20]
 80054f0:	6849      	ldr	r1, [r1, #4]
 80054f2:	0849      	lsrs	r1, r1, #1
 80054f4:	2000      	movs	r0, #0
 80054f6:	460c      	mov	r4, r1
 80054f8:	4605      	mov	r5, r0
 80054fa:	eb12 0804 	adds.w	r8, r2, r4
 80054fe:	eb43 0905 	adc.w	r9, r3, r5
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	469a      	mov	sl, r3
 800550a:	4693      	mov	fp, r2
 800550c:	4652      	mov	r2, sl
 800550e:	465b      	mov	r3, fp
 8005510:	4640      	mov	r0, r8
 8005512:	4649      	mov	r1, r9
 8005514:	f7fa ff34 	bl	8000380 <__aeabi_uldivmod>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4613      	mov	r3, r2
 800551e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005522:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005526:	d308      	bcc.n	800553a <UART_SetConfig+0x79a>
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800552e:	d204      	bcs.n	800553a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005536:	60da      	str	r2, [r3, #12]
 8005538:	e17c      	b.n	8005834 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005540:	e178      	b.n	8005834 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554a:	f040 80c5 	bne.w	80056d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800554e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005552:	2b20      	cmp	r3, #32
 8005554:	dc48      	bgt.n	80055e8 <UART_SetConfig+0x848>
 8005556:	2b00      	cmp	r3, #0
 8005558:	db7b      	blt.n	8005652 <UART_SetConfig+0x8b2>
 800555a:	2b20      	cmp	r3, #32
 800555c:	d879      	bhi.n	8005652 <UART_SetConfig+0x8b2>
 800555e:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <UART_SetConfig+0x7c4>)
 8005560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005564:	080055ef 	.word	0x080055ef
 8005568:	080055f7 	.word	0x080055f7
 800556c:	08005653 	.word	0x08005653
 8005570:	08005653 	.word	0x08005653
 8005574:	080055ff 	.word	0x080055ff
 8005578:	08005653 	.word	0x08005653
 800557c:	08005653 	.word	0x08005653
 8005580:	08005653 	.word	0x08005653
 8005584:	0800560f 	.word	0x0800560f
 8005588:	08005653 	.word	0x08005653
 800558c:	08005653 	.word	0x08005653
 8005590:	08005653 	.word	0x08005653
 8005594:	08005653 	.word	0x08005653
 8005598:	08005653 	.word	0x08005653
 800559c:	08005653 	.word	0x08005653
 80055a0:	08005653 	.word	0x08005653
 80055a4:	0800561f 	.word	0x0800561f
 80055a8:	08005653 	.word	0x08005653
 80055ac:	08005653 	.word	0x08005653
 80055b0:	08005653 	.word	0x08005653
 80055b4:	08005653 	.word	0x08005653
 80055b8:	08005653 	.word	0x08005653
 80055bc:	08005653 	.word	0x08005653
 80055c0:	08005653 	.word	0x08005653
 80055c4:	08005653 	.word	0x08005653
 80055c8:	08005653 	.word	0x08005653
 80055cc:	08005653 	.word	0x08005653
 80055d0:	08005653 	.word	0x08005653
 80055d4:	08005653 	.word	0x08005653
 80055d8:	08005653 	.word	0x08005653
 80055dc:	08005653 	.word	0x08005653
 80055e0:	08005653 	.word	0x08005653
 80055e4:	08005645 	.word	0x08005645
 80055e8:	2b40      	cmp	r3, #64	; 0x40
 80055ea:	d02e      	beq.n	800564a <UART_SetConfig+0x8aa>
 80055ec:	e031      	b.n	8005652 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055ee:	f7fd ff5d 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 80055f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055f4:	e033      	b.n	800565e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055f6:	f7fd ff6f 	bl	80034d8 <HAL_RCC_GetPCLK2Freq>
 80055fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055fc:	e02f      	b.n	800565e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005602:	4618      	mov	r0, r3
 8005604:	f7fe feda 	bl	80043bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800560c:	e027      	b.n	800565e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800560e:	f107 0318 	add.w	r3, r7, #24
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff f826 	bl	8004664 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800561c:	e01f      	b.n	800565e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800561e:	4b2d      	ldr	r3, [pc, #180]	; (80056d4 <UART_SetConfig+0x934>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0320 	and.w	r3, r3, #32
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800562a:	4b2a      	ldr	r3, [pc, #168]	; (80056d4 <UART_SetConfig+0x934>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	08db      	lsrs	r3, r3, #3
 8005630:	f003 0303 	and.w	r3, r3, #3
 8005634:	4a24      	ldr	r2, [pc, #144]	; (80056c8 <UART_SetConfig+0x928>)
 8005636:	fa22 f303 	lsr.w	r3, r2, r3
 800563a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800563c:	e00f      	b.n	800565e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800563e:	4b22      	ldr	r3, [pc, #136]	; (80056c8 <UART_SetConfig+0x928>)
 8005640:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005642:	e00c      	b.n	800565e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005644:	4b21      	ldr	r3, [pc, #132]	; (80056cc <UART_SetConfig+0x92c>)
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005648:	e009      	b.n	800565e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800564a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005650:	e005      	b.n	800565e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800565c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800565e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80e7 	beq.w	8005834 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	4a19      	ldr	r2, [pc, #100]	; (80056d0 <UART_SetConfig+0x930>)
 800566c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005670:	461a      	mov	r2, r3
 8005672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005674:	fbb3 f3f2 	udiv	r3, r3, r2
 8005678:	005a      	lsls	r2, r3, #1
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	085b      	lsrs	r3, r3, #1
 8005680:	441a      	add	r2, r3
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	fbb2 f3f3 	udiv	r3, r2, r3
 800568a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	2b0f      	cmp	r3, #15
 8005690:	d916      	bls.n	80056c0 <UART_SetConfig+0x920>
 8005692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005698:	d212      	bcs.n	80056c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	b29b      	uxth	r3, r3
 800569e:	f023 030f 	bic.w	r3, r3, #15
 80056a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056b2:	4313      	orrs	r3, r2
 80056b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80056bc:	60da      	str	r2, [r3, #12]
 80056be:	e0b9      	b.n	8005834 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80056c6:	e0b5      	b.n	8005834 <UART_SetConfig+0xa94>
 80056c8:	03d09000 	.word	0x03d09000
 80056cc:	003d0900 	.word	0x003d0900
 80056d0:	08006dc4 	.word	0x08006dc4
 80056d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80056d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80056dc:	2b20      	cmp	r3, #32
 80056de:	dc49      	bgt.n	8005774 <UART_SetConfig+0x9d4>
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	db7c      	blt.n	80057de <UART_SetConfig+0xa3e>
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	d87a      	bhi.n	80057de <UART_SetConfig+0xa3e>
 80056e8:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <UART_SetConfig+0x950>)
 80056ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ee:	bf00      	nop
 80056f0:	0800577b 	.word	0x0800577b
 80056f4:	08005783 	.word	0x08005783
 80056f8:	080057df 	.word	0x080057df
 80056fc:	080057df 	.word	0x080057df
 8005700:	0800578b 	.word	0x0800578b
 8005704:	080057df 	.word	0x080057df
 8005708:	080057df 	.word	0x080057df
 800570c:	080057df 	.word	0x080057df
 8005710:	0800579b 	.word	0x0800579b
 8005714:	080057df 	.word	0x080057df
 8005718:	080057df 	.word	0x080057df
 800571c:	080057df 	.word	0x080057df
 8005720:	080057df 	.word	0x080057df
 8005724:	080057df 	.word	0x080057df
 8005728:	080057df 	.word	0x080057df
 800572c:	080057df 	.word	0x080057df
 8005730:	080057ab 	.word	0x080057ab
 8005734:	080057df 	.word	0x080057df
 8005738:	080057df 	.word	0x080057df
 800573c:	080057df 	.word	0x080057df
 8005740:	080057df 	.word	0x080057df
 8005744:	080057df 	.word	0x080057df
 8005748:	080057df 	.word	0x080057df
 800574c:	080057df 	.word	0x080057df
 8005750:	080057df 	.word	0x080057df
 8005754:	080057df 	.word	0x080057df
 8005758:	080057df 	.word	0x080057df
 800575c:	080057df 	.word	0x080057df
 8005760:	080057df 	.word	0x080057df
 8005764:	080057df 	.word	0x080057df
 8005768:	080057df 	.word	0x080057df
 800576c:	080057df 	.word	0x080057df
 8005770:	080057d1 	.word	0x080057d1
 8005774:	2b40      	cmp	r3, #64	; 0x40
 8005776:	d02e      	beq.n	80057d6 <UART_SetConfig+0xa36>
 8005778:	e031      	b.n	80057de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800577a:	f7fd fe97 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 800577e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005780:	e033      	b.n	80057ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005782:	f7fd fea9 	bl	80034d8 <HAL_RCC_GetPCLK2Freq>
 8005786:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005788:	e02f      	b.n	80057ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800578a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800578e:	4618      	mov	r0, r3
 8005790:	f7fe fe14 	bl	80043bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005798:	e027      	b.n	80057ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800579a:	f107 0318 	add.w	r3, r7, #24
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fe ff60 	bl	8004664 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057a8:	e01f      	b.n	80057ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057aa:	4b2d      	ldr	r3, [pc, #180]	; (8005860 <UART_SetConfig+0xac0>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057b6:	4b2a      	ldr	r3, [pc, #168]	; (8005860 <UART_SetConfig+0xac0>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	08db      	lsrs	r3, r3, #3
 80057bc:	f003 0303 	and.w	r3, r3, #3
 80057c0:	4a28      	ldr	r2, [pc, #160]	; (8005864 <UART_SetConfig+0xac4>)
 80057c2:	fa22 f303 	lsr.w	r3, r2, r3
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057c8:	e00f      	b.n	80057ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80057ca:	4b26      	ldr	r3, [pc, #152]	; (8005864 <UART_SetConfig+0xac4>)
 80057cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057ce:	e00c      	b.n	80057ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057d0:	4b25      	ldr	r3, [pc, #148]	; (8005868 <UART_SetConfig+0xac8>)
 80057d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057d4:	e009      	b.n	80057ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057dc:	e005      	b.n	80057ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80057e8:	bf00      	nop
    }

    if (pclk != 0U)
 80057ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d021      	beq.n	8005834 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	4a1d      	ldr	r2, [pc, #116]	; (800586c <UART_SetConfig+0xacc>)
 80057f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057fa:	461a      	mov	r2, r3
 80057fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	085b      	lsrs	r3, r3, #1
 8005808:	441a      	add	r2, r3
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005812:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005816:	2b0f      	cmp	r3, #15
 8005818:	d909      	bls.n	800582e <UART_SetConfig+0xa8e>
 800581a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005820:	d205      	bcs.n	800582e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005824:	b29a      	uxth	r2, r3
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60da      	str	r2, [r3, #12]
 800582c:	e002      	b.n	8005834 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2201      	movs	r2, #1
 8005838:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2201      	movs	r2, #1
 8005840:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2200      	movs	r2, #0
 8005848:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2200      	movs	r2, #0
 800584e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005850:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005854:	4618      	mov	r0, r3
 8005856:	3748      	adds	r7, #72	; 0x48
 8005858:	46bd      	mov	sp, r7
 800585a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800585e:	bf00      	nop
 8005860:	58024400 	.word	0x58024400
 8005864:	03d09000 	.word	0x03d09000
 8005868:	003d0900 	.word	0x003d0900
 800586c:	08006dc4 	.word	0x08006dc4

08005870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00a      	beq.n	800589a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	f003 0310 	and.w	r3, r3, #16
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00a      	beq.n	8005922 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00a      	beq.n	8005944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d01a      	beq.n	8005986 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800596e:	d10a      	bne.n	8005986 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	605a      	str	r2, [r3, #4]
  }
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059c4:	f7fb fc5c 	bl	8001280 <HAL_GetTick>
 80059c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d10e      	bne.n	80059f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f82f 	bl	8005a4a <UART_WaitOnFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e025      	b.n	8005a42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d10e      	bne.n	8005a22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f819 	bl	8005a4a <UART_WaitOnFlagUntilTimeout>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e00f      	b.n	8005a42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b09c      	sub	sp, #112	; 0x70
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	603b      	str	r3, [r7, #0]
 8005a56:	4613      	mov	r3, r2
 8005a58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a5a:	e0a9      	b.n	8005bb0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a62:	f000 80a5 	beq.w	8005bb0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a66:	f7fb fc0b 	bl	8001280 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d302      	bcc.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x32>
 8005a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d140      	bne.n	8005afe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a90:	667b      	str	r3, [r7, #100]	; 0x64
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a9c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005aa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e6      	bne.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3308      	adds	r3, #8
 8005ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac0:	f023 0301 	bic.w	r3, r3, #1
 8005ac4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3308      	adds	r3, #8
 8005acc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ace:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ad0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e5      	bne.n	8005aae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e069      	b.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d051      	beq.n	8005bb0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b1a:	d149      	bne.n	8005bb0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b24:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	e853 3f00 	ldrex	r3, [r3]
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b44:	637b      	str	r3, [r7, #52]	; 0x34
 8005b46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b4c:	e841 2300 	strex	r3, r2, [r1]
 8005b50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e6      	bne.n	8005b26 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	e853 3f00 	ldrex	r3, [r3]
 8005b66:	613b      	str	r3, [r7, #16]
   return(result);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f023 0301 	bic.w	r3, r3, #1
 8005b6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3308      	adds	r3, #8
 8005b76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b78:	623a      	str	r2, [r7, #32]
 8005b7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7c:	69f9      	ldr	r1, [r7, #28]
 8005b7e:	6a3a      	ldr	r2, [r7, #32]
 8005b80:	e841 2300 	strex	r3, r2, [r1]
 8005b84:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e5      	bne.n	8005b58 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e010      	b.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	69da      	ldr	r2, [r3, #28]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	bf0c      	ite	eq
 8005bc0:	2301      	moveq	r3, #1
 8005bc2:	2300      	movne	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	f43f af46 	beq.w	8005a5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3770      	adds	r7, #112	; 0x70
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_UARTEx_DisableFifoMode+0x16>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e027      	b.n	8005c40 <HAL_UARTEx_DisableFifoMode+0x66>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2224      	movs	r2, #36	; 0x24
 8005bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0201 	bic.w	r2, r2, #1
 8005c16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e02d      	b.n	8005cc0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2224      	movs	r2, #36	; 0x24
 8005c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0201 	bic.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f84f 	bl	8005d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e02d      	b.n	8005d3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2224      	movs	r2, #36	; 0x24
 8005cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0201 	bic.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f811 	bl	8005d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d108      	bne.n	8005d66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d64:	e031      	b.n	8005dca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d66:	2310      	movs	r3, #16
 8005d68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d6a:	2310      	movs	r3, #16
 8005d6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	0e5b      	lsrs	r3, r3, #25
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	0f5b      	lsrs	r3, r3, #29
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	f003 0307 	and.w	r3, r3, #7
 8005d8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d8e:	7bbb      	ldrb	r3, [r7, #14]
 8005d90:	7b3a      	ldrb	r2, [r7, #12]
 8005d92:	4911      	ldr	r1, [pc, #68]	; (8005dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8005d94:	5c8a      	ldrb	r2, [r1, r2]
 8005d96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d9a:	7b3a      	ldrb	r2, [r7, #12]
 8005d9c:	490f      	ldr	r1, [pc, #60]	; (8005ddc <UARTEx_SetNbDataToProcess+0x98>)
 8005d9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
 8005dae:	7b7a      	ldrb	r2, [r7, #13]
 8005db0:	4909      	ldr	r1, [pc, #36]	; (8005dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8005db2:	5c8a      	ldrb	r2, [r1, r2]
 8005db4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005db8:	7b7a      	ldrb	r2, [r7, #13]
 8005dba:	4908      	ldr	r1, [pc, #32]	; (8005ddc <UARTEx_SetNbDataToProcess+0x98>)
 8005dbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005dca:	bf00      	nop
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	08006ddc 	.word	0x08006ddc
 8005ddc:	08006de4 	.word	0x08006de4

08005de0 <__errno>:
 8005de0:	4b01      	ldr	r3, [pc, #4]	; (8005de8 <__errno+0x8>)
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	24000010 	.word	0x24000010

08005dec <__libc_init_array>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	4d0d      	ldr	r5, [pc, #52]	; (8005e24 <__libc_init_array+0x38>)
 8005df0:	4c0d      	ldr	r4, [pc, #52]	; (8005e28 <__libc_init_array+0x3c>)
 8005df2:	1b64      	subs	r4, r4, r5
 8005df4:	10a4      	asrs	r4, r4, #2
 8005df6:	2600      	movs	r6, #0
 8005df8:	42a6      	cmp	r6, r4
 8005dfa:	d109      	bne.n	8005e10 <__libc_init_array+0x24>
 8005dfc:	4d0b      	ldr	r5, [pc, #44]	; (8005e2c <__libc_init_array+0x40>)
 8005dfe:	4c0c      	ldr	r4, [pc, #48]	; (8005e30 <__libc_init_array+0x44>)
 8005e00:	f000 ffae 	bl	8006d60 <_init>
 8005e04:	1b64      	subs	r4, r4, r5
 8005e06:	10a4      	asrs	r4, r4, #2
 8005e08:	2600      	movs	r6, #0
 8005e0a:	42a6      	cmp	r6, r4
 8005e0c:	d105      	bne.n	8005e1a <__libc_init_array+0x2e>
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e14:	4798      	blx	r3
 8005e16:	3601      	adds	r6, #1
 8005e18:	e7ee      	b.n	8005df8 <__libc_init_array+0xc>
 8005e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e1e:	4798      	blx	r3
 8005e20:	3601      	adds	r6, #1
 8005e22:	e7f2      	b.n	8005e0a <__libc_init_array+0x1e>
 8005e24:	08006e8c 	.word	0x08006e8c
 8005e28:	08006e8c 	.word	0x08006e8c
 8005e2c:	08006e8c 	.word	0x08006e8c
 8005e30:	08006e90 	.word	0x08006e90

08005e34 <memset>:
 8005e34:	4402      	add	r2, r0
 8005e36:	4603      	mov	r3, r0
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d100      	bne.n	8005e3e <memset+0xa>
 8005e3c:	4770      	bx	lr
 8005e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e42:	e7f9      	b.n	8005e38 <memset+0x4>

08005e44 <iprintf>:
 8005e44:	b40f      	push	{r0, r1, r2, r3}
 8005e46:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <iprintf+0x2c>)
 8005e48:	b513      	push	{r0, r1, r4, lr}
 8005e4a:	681c      	ldr	r4, [r3, #0]
 8005e4c:	b124      	cbz	r4, 8005e58 <iprintf+0x14>
 8005e4e:	69a3      	ldr	r3, [r4, #24]
 8005e50:	b913      	cbnz	r3, 8005e58 <iprintf+0x14>
 8005e52:	4620      	mov	r0, r4
 8005e54:	f000 f866 	bl	8005f24 <__sinit>
 8005e58:	ab05      	add	r3, sp, #20
 8005e5a:	9a04      	ldr	r2, [sp, #16]
 8005e5c:	68a1      	ldr	r1, [r4, #8]
 8005e5e:	9301      	str	r3, [sp, #4]
 8005e60:	4620      	mov	r0, r4
 8005e62:	f000 f9bd 	bl	80061e0 <_vfiprintf_r>
 8005e66:	b002      	add	sp, #8
 8005e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e6c:	b004      	add	sp, #16
 8005e6e:	4770      	bx	lr
 8005e70:	24000010 	.word	0x24000010

08005e74 <std>:
 8005e74:	2300      	movs	r3, #0
 8005e76:	b510      	push	{r4, lr}
 8005e78:	4604      	mov	r4, r0
 8005e7a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e82:	6083      	str	r3, [r0, #8]
 8005e84:	8181      	strh	r1, [r0, #12]
 8005e86:	6643      	str	r3, [r0, #100]	; 0x64
 8005e88:	81c2      	strh	r2, [r0, #14]
 8005e8a:	6183      	str	r3, [r0, #24]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	2208      	movs	r2, #8
 8005e90:	305c      	adds	r0, #92	; 0x5c
 8005e92:	f7ff ffcf 	bl	8005e34 <memset>
 8005e96:	4b05      	ldr	r3, [pc, #20]	; (8005eac <std+0x38>)
 8005e98:	6263      	str	r3, [r4, #36]	; 0x24
 8005e9a:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <std+0x3c>)
 8005e9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e9e:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <std+0x40>)
 8005ea0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ea2:	4b05      	ldr	r3, [pc, #20]	; (8005eb8 <std+0x44>)
 8005ea4:	6224      	str	r4, [r4, #32]
 8005ea6:	6323      	str	r3, [r4, #48]	; 0x30
 8005ea8:	bd10      	pop	{r4, pc}
 8005eaa:	bf00      	nop
 8005eac:	08006789 	.word	0x08006789
 8005eb0:	080067ab 	.word	0x080067ab
 8005eb4:	080067e3 	.word	0x080067e3
 8005eb8:	08006807 	.word	0x08006807

08005ebc <_cleanup_r>:
 8005ebc:	4901      	ldr	r1, [pc, #4]	; (8005ec4 <_cleanup_r+0x8>)
 8005ebe:	f000 b8af 	b.w	8006020 <_fwalk_reent>
 8005ec2:	bf00      	nop
 8005ec4:	08006ae1 	.word	0x08006ae1

08005ec8 <__sfmoreglue>:
 8005ec8:	b570      	push	{r4, r5, r6, lr}
 8005eca:	2268      	movs	r2, #104	; 0x68
 8005ecc:	1e4d      	subs	r5, r1, #1
 8005ece:	4355      	muls	r5, r2
 8005ed0:	460e      	mov	r6, r1
 8005ed2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ed6:	f000 f8e5 	bl	80060a4 <_malloc_r>
 8005eda:	4604      	mov	r4, r0
 8005edc:	b140      	cbz	r0, 8005ef0 <__sfmoreglue+0x28>
 8005ede:	2100      	movs	r1, #0
 8005ee0:	e9c0 1600 	strd	r1, r6, [r0]
 8005ee4:	300c      	adds	r0, #12
 8005ee6:	60a0      	str	r0, [r4, #8]
 8005ee8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005eec:	f7ff ffa2 	bl	8005e34 <memset>
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	bd70      	pop	{r4, r5, r6, pc}

08005ef4 <__sfp_lock_acquire>:
 8005ef4:	4801      	ldr	r0, [pc, #4]	; (8005efc <__sfp_lock_acquire+0x8>)
 8005ef6:	f000 b8b3 	b.w	8006060 <__retarget_lock_acquire_recursive>
 8005efa:	bf00      	nop
 8005efc:	24000175 	.word	0x24000175

08005f00 <__sfp_lock_release>:
 8005f00:	4801      	ldr	r0, [pc, #4]	; (8005f08 <__sfp_lock_release+0x8>)
 8005f02:	f000 b8ae 	b.w	8006062 <__retarget_lock_release_recursive>
 8005f06:	bf00      	nop
 8005f08:	24000175 	.word	0x24000175

08005f0c <__sinit_lock_acquire>:
 8005f0c:	4801      	ldr	r0, [pc, #4]	; (8005f14 <__sinit_lock_acquire+0x8>)
 8005f0e:	f000 b8a7 	b.w	8006060 <__retarget_lock_acquire_recursive>
 8005f12:	bf00      	nop
 8005f14:	24000176 	.word	0x24000176

08005f18 <__sinit_lock_release>:
 8005f18:	4801      	ldr	r0, [pc, #4]	; (8005f20 <__sinit_lock_release+0x8>)
 8005f1a:	f000 b8a2 	b.w	8006062 <__retarget_lock_release_recursive>
 8005f1e:	bf00      	nop
 8005f20:	24000176 	.word	0x24000176

08005f24 <__sinit>:
 8005f24:	b510      	push	{r4, lr}
 8005f26:	4604      	mov	r4, r0
 8005f28:	f7ff fff0 	bl	8005f0c <__sinit_lock_acquire>
 8005f2c:	69a3      	ldr	r3, [r4, #24]
 8005f2e:	b11b      	cbz	r3, 8005f38 <__sinit+0x14>
 8005f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f34:	f7ff bff0 	b.w	8005f18 <__sinit_lock_release>
 8005f38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f3c:	6523      	str	r3, [r4, #80]	; 0x50
 8005f3e:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <__sinit+0x68>)
 8005f40:	4a13      	ldr	r2, [pc, #76]	; (8005f90 <__sinit+0x6c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f46:	42a3      	cmp	r3, r4
 8005f48:	bf04      	itt	eq
 8005f4a:	2301      	moveq	r3, #1
 8005f4c:	61a3      	streq	r3, [r4, #24]
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f000 f820 	bl	8005f94 <__sfp>
 8005f54:	6060      	str	r0, [r4, #4]
 8005f56:	4620      	mov	r0, r4
 8005f58:	f000 f81c 	bl	8005f94 <__sfp>
 8005f5c:	60a0      	str	r0, [r4, #8]
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f000 f818 	bl	8005f94 <__sfp>
 8005f64:	2200      	movs	r2, #0
 8005f66:	60e0      	str	r0, [r4, #12]
 8005f68:	2104      	movs	r1, #4
 8005f6a:	6860      	ldr	r0, [r4, #4]
 8005f6c:	f7ff ff82 	bl	8005e74 <std>
 8005f70:	68a0      	ldr	r0, [r4, #8]
 8005f72:	2201      	movs	r2, #1
 8005f74:	2109      	movs	r1, #9
 8005f76:	f7ff ff7d 	bl	8005e74 <std>
 8005f7a:	68e0      	ldr	r0, [r4, #12]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	2112      	movs	r1, #18
 8005f80:	f7ff ff78 	bl	8005e74 <std>
 8005f84:	2301      	movs	r3, #1
 8005f86:	61a3      	str	r3, [r4, #24]
 8005f88:	e7d2      	b.n	8005f30 <__sinit+0xc>
 8005f8a:	bf00      	nop
 8005f8c:	08006dec 	.word	0x08006dec
 8005f90:	08005ebd 	.word	0x08005ebd

08005f94 <__sfp>:
 8005f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f96:	4607      	mov	r7, r0
 8005f98:	f7ff ffac 	bl	8005ef4 <__sfp_lock_acquire>
 8005f9c:	4b1e      	ldr	r3, [pc, #120]	; (8006018 <__sfp+0x84>)
 8005f9e:	681e      	ldr	r6, [r3, #0]
 8005fa0:	69b3      	ldr	r3, [r6, #24]
 8005fa2:	b913      	cbnz	r3, 8005faa <__sfp+0x16>
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	f7ff ffbd 	bl	8005f24 <__sinit>
 8005faa:	3648      	adds	r6, #72	; 0x48
 8005fac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	d503      	bpl.n	8005fbc <__sfp+0x28>
 8005fb4:	6833      	ldr	r3, [r6, #0]
 8005fb6:	b30b      	cbz	r3, 8005ffc <__sfp+0x68>
 8005fb8:	6836      	ldr	r6, [r6, #0]
 8005fba:	e7f7      	b.n	8005fac <__sfp+0x18>
 8005fbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005fc0:	b9d5      	cbnz	r5, 8005ff8 <__sfp+0x64>
 8005fc2:	4b16      	ldr	r3, [pc, #88]	; (800601c <__sfp+0x88>)
 8005fc4:	60e3      	str	r3, [r4, #12]
 8005fc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fca:	6665      	str	r5, [r4, #100]	; 0x64
 8005fcc:	f000 f847 	bl	800605e <__retarget_lock_init_recursive>
 8005fd0:	f7ff ff96 	bl	8005f00 <__sfp_lock_release>
 8005fd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005fd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005fdc:	6025      	str	r5, [r4, #0]
 8005fde:	61a5      	str	r5, [r4, #24]
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005fe8:	f7ff ff24 	bl	8005e34 <memset>
 8005fec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ff0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ff8:	3468      	adds	r4, #104	; 0x68
 8005ffa:	e7d9      	b.n	8005fb0 <__sfp+0x1c>
 8005ffc:	2104      	movs	r1, #4
 8005ffe:	4638      	mov	r0, r7
 8006000:	f7ff ff62 	bl	8005ec8 <__sfmoreglue>
 8006004:	4604      	mov	r4, r0
 8006006:	6030      	str	r0, [r6, #0]
 8006008:	2800      	cmp	r0, #0
 800600a:	d1d5      	bne.n	8005fb8 <__sfp+0x24>
 800600c:	f7ff ff78 	bl	8005f00 <__sfp_lock_release>
 8006010:	230c      	movs	r3, #12
 8006012:	603b      	str	r3, [r7, #0]
 8006014:	e7ee      	b.n	8005ff4 <__sfp+0x60>
 8006016:	bf00      	nop
 8006018:	08006dec 	.word	0x08006dec
 800601c:	ffff0001 	.word	0xffff0001

08006020 <_fwalk_reent>:
 8006020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006024:	4606      	mov	r6, r0
 8006026:	4688      	mov	r8, r1
 8006028:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800602c:	2700      	movs	r7, #0
 800602e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006032:	f1b9 0901 	subs.w	r9, r9, #1
 8006036:	d505      	bpl.n	8006044 <_fwalk_reent+0x24>
 8006038:	6824      	ldr	r4, [r4, #0]
 800603a:	2c00      	cmp	r4, #0
 800603c:	d1f7      	bne.n	800602e <_fwalk_reent+0xe>
 800603e:	4638      	mov	r0, r7
 8006040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006044:	89ab      	ldrh	r3, [r5, #12]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d907      	bls.n	800605a <_fwalk_reent+0x3a>
 800604a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800604e:	3301      	adds	r3, #1
 8006050:	d003      	beq.n	800605a <_fwalk_reent+0x3a>
 8006052:	4629      	mov	r1, r5
 8006054:	4630      	mov	r0, r6
 8006056:	47c0      	blx	r8
 8006058:	4307      	orrs	r7, r0
 800605a:	3568      	adds	r5, #104	; 0x68
 800605c:	e7e9      	b.n	8006032 <_fwalk_reent+0x12>

0800605e <__retarget_lock_init_recursive>:
 800605e:	4770      	bx	lr

08006060 <__retarget_lock_acquire_recursive>:
 8006060:	4770      	bx	lr

08006062 <__retarget_lock_release_recursive>:
 8006062:	4770      	bx	lr

08006064 <sbrk_aligned>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	4e0e      	ldr	r6, [pc, #56]	; (80060a0 <sbrk_aligned+0x3c>)
 8006068:	460c      	mov	r4, r1
 800606a:	6831      	ldr	r1, [r6, #0]
 800606c:	4605      	mov	r5, r0
 800606e:	b911      	cbnz	r1, 8006076 <sbrk_aligned+0x12>
 8006070:	f000 fb7a 	bl	8006768 <_sbrk_r>
 8006074:	6030      	str	r0, [r6, #0]
 8006076:	4621      	mov	r1, r4
 8006078:	4628      	mov	r0, r5
 800607a:	f000 fb75 	bl	8006768 <_sbrk_r>
 800607e:	1c43      	adds	r3, r0, #1
 8006080:	d00a      	beq.n	8006098 <sbrk_aligned+0x34>
 8006082:	1cc4      	adds	r4, r0, #3
 8006084:	f024 0403 	bic.w	r4, r4, #3
 8006088:	42a0      	cmp	r0, r4
 800608a:	d007      	beq.n	800609c <sbrk_aligned+0x38>
 800608c:	1a21      	subs	r1, r4, r0
 800608e:	4628      	mov	r0, r5
 8006090:	f000 fb6a 	bl	8006768 <_sbrk_r>
 8006094:	3001      	adds	r0, #1
 8006096:	d101      	bne.n	800609c <sbrk_aligned+0x38>
 8006098:	f04f 34ff 	mov.w	r4, #4294967295
 800609c:	4620      	mov	r0, r4
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	2400017c 	.word	0x2400017c

080060a4 <_malloc_r>:
 80060a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a8:	1ccd      	adds	r5, r1, #3
 80060aa:	f025 0503 	bic.w	r5, r5, #3
 80060ae:	3508      	adds	r5, #8
 80060b0:	2d0c      	cmp	r5, #12
 80060b2:	bf38      	it	cc
 80060b4:	250c      	movcc	r5, #12
 80060b6:	2d00      	cmp	r5, #0
 80060b8:	4607      	mov	r7, r0
 80060ba:	db01      	blt.n	80060c0 <_malloc_r+0x1c>
 80060bc:	42a9      	cmp	r1, r5
 80060be:	d905      	bls.n	80060cc <_malloc_r+0x28>
 80060c0:	230c      	movs	r3, #12
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	2600      	movs	r6, #0
 80060c6:	4630      	mov	r0, r6
 80060c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060cc:	4e2e      	ldr	r6, [pc, #184]	; (8006188 <_malloc_r+0xe4>)
 80060ce:	f000 fdbb 	bl	8006c48 <__malloc_lock>
 80060d2:	6833      	ldr	r3, [r6, #0]
 80060d4:	461c      	mov	r4, r3
 80060d6:	bb34      	cbnz	r4, 8006126 <_malloc_r+0x82>
 80060d8:	4629      	mov	r1, r5
 80060da:	4638      	mov	r0, r7
 80060dc:	f7ff ffc2 	bl	8006064 <sbrk_aligned>
 80060e0:	1c43      	adds	r3, r0, #1
 80060e2:	4604      	mov	r4, r0
 80060e4:	d14d      	bne.n	8006182 <_malloc_r+0xde>
 80060e6:	6834      	ldr	r4, [r6, #0]
 80060e8:	4626      	mov	r6, r4
 80060ea:	2e00      	cmp	r6, #0
 80060ec:	d140      	bne.n	8006170 <_malloc_r+0xcc>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	4631      	mov	r1, r6
 80060f2:	4638      	mov	r0, r7
 80060f4:	eb04 0803 	add.w	r8, r4, r3
 80060f8:	f000 fb36 	bl	8006768 <_sbrk_r>
 80060fc:	4580      	cmp	r8, r0
 80060fe:	d13a      	bne.n	8006176 <_malloc_r+0xd2>
 8006100:	6821      	ldr	r1, [r4, #0]
 8006102:	3503      	adds	r5, #3
 8006104:	1a6d      	subs	r5, r5, r1
 8006106:	f025 0503 	bic.w	r5, r5, #3
 800610a:	3508      	adds	r5, #8
 800610c:	2d0c      	cmp	r5, #12
 800610e:	bf38      	it	cc
 8006110:	250c      	movcc	r5, #12
 8006112:	4629      	mov	r1, r5
 8006114:	4638      	mov	r0, r7
 8006116:	f7ff ffa5 	bl	8006064 <sbrk_aligned>
 800611a:	3001      	adds	r0, #1
 800611c:	d02b      	beq.n	8006176 <_malloc_r+0xd2>
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	442b      	add	r3, r5
 8006122:	6023      	str	r3, [r4, #0]
 8006124:	e00e      	b.n	8006144 <_malloc_r+0xa0>
 8006126:	6822      	ldr	r2, [r4, #0]
 8006128:	1b52      	subs	r2, r2, r5
 800612a:	d41e      	bmi.n	800616a <_malloc_r+0xc6>
 800612c:	2a0b      	cmp	r2, #11
 800612e:	d916      	bls.n	800615e <_malloc_r+0xba>
 8006130:	1961      	adds	r1, r4, r5
 8006132:	42a3      	cmp	r3, r4
 8006134:	6025      	str	r5, [r4, #0]
 8006136:	bf18      	it	ne
 8006138:	6059      	strne	r1, [r3, #4]
 800613a:	6863      	ldr	r3, [r4, #4]
 800613c:	bf08      	it	eq
 800613e:	6031      	streq	r1, [r6, #0]
 8006140:	5162      	str	r2, [r4, r5]
 8006142:	604b      	str	r3, [r1, #4]
 8006144:	4638      	mov	r0, r7
 8006146:	f104 060b 	add.w	r6, r4, #11
 800614a:	f000 fd83 	bl	8006c54 <__malloc_unlock>
 800614e:	f026 0607 	bic.w	r6, r6, #7
 8006152:	1d23      	adds	r3, r4, #4
 8006154:	1af2      	subs	r2, r6, r3
 8006156:	d0b6      	beq.n	80060c6 <_malloc_r+0x22>
 8006158:	1b9b      	subs	r3, r3, r6
 800615a:	50a3      	str	r3, [r4, r2]
 800615c:	e7b3      	b.n	80060c6 <_malloc_r+0x22>
 800615e:	6862      	ldr	r2, [r4, #4]
 8006160:	42a3      	cmp	r3, r4
 8006162:	bf0c      	ite	eq
 8006164:	6032      	streq	r2, [r6, #0]
 8006166:	605a      	strne	r2, [r3, #4]
 8006168:	e7ec      	b.n	8006144 <_malloc_r+0xa0>
 800616a:	4623      	mov	r3, r4
 800616c:	6864      	ldr	r4, [r4, #4]
 800616e:	e7b2      	b.n	80060d6 <_malloc_r+0x32>
 8006170:	4634      	mov	r4, r6
 8006172:	6876      	ldr	r6, [r6, #4]
 8006174:	e7b9      	b.n	80060ea <_malloc_r+0x46>
 8006176:	230c      	movs	r3, #12
 8006178:	603b      	str	r3, [r7, #0]
 800617a:	4638      	mov	r0, r7
 800617c:	f000 fd6a 	bl	8006c54 <__malloc_unlock>
 8006180:	e7a1      	b.n	80060c6 <_malloc_r+0x22>
 8006182:	6025      	str	r5, [r4, #0]
 8006184:	e7de      	b.n	8006144 <_malloc_r+0xa0>
 8006186:	bf00      	nop
 8006188:	24000178 	.word	0x24000178

0800618c <__sfputc_r>:
 800618c:	6893      	ldr	r3, [r2, #8]
 800618e:	3b01      	subs	r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	b410      	push	{r4}
 8006194:	6093      	str	r3, [r2, #8]
 8006196:	da08      	bge.n	80061aa <__sfputc_r+0x1e>
 8006198:	6994      	ldr	r4, [r2, #24]
 800619a:	42a3      	cmp	r3, r4
 800619c:	db01      	blt.n	80061a2 <__sfputc_r+0x16>
 800619e:	290a      	cmp	r1, #10
 80061a0:	d103      	bne.n	80061aa <__sfputc_r+0x1e>
 80061a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061a6:	f000 bb33 	b.w	8006810 <__swbuf_r>
 80061aa:	6813      	ldr	r3, [r2, #0]
 80061ac:	1c58      	adds	r0, r3, #1
 80061ae:	6010      	str	r0, [r2, #0]
 80061b0:	7019      	strb	r1, [r3, #0]
 80061b2:	4608      	mov	r0, r1
 80061b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <__sfputs_r>:
 80061ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061bc:	4606      	mov	r6, r0
 80061be:	460f      	mov	r7, r1
 80061c0:	4614      	mov	r4, r2
 80061c2:	18d5      	adds	r5, r2, r3
 80061c4:	42ac      	cmp	r4, r5
 80061c6:	d101      	bne.n	80061cc <__sfputs_r+0x12>
 80061c8:	2000      	movs	r0, #0
 80061ca:	e007      	b.n	80061dc <__sfputs_r+0x22>
 80061cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d0:	463a      	mov	r2, r7
 80061d2:	4630      	mov	r0, r6
 80061d4:	f7ff ffda 	bl	800618c <__sfputc_r>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d1f3      	bne.n	80061c4 <__sfputs_r+0xa>
 80061dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061e0 <_vfiprintf_r>:
 80061e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e4:	460d      	mov	r5, r1
 80061e6:	b09d      	sub	sp, #116	; 0x74
 80061e8:	4614      	mov	r4, r2
 80061ea:	4698      	mov	r8, r3
 80061ec:	4606      	mov	r6, r0
 80061ee:	b118      	cbz	r0, 80061f8 <_vfiprintf_r+0x18>
 80061f0:	6983      	ldr	r3, [r0, #24]
 80061f2:	b90b      	cbnz	r3, 80061f8 <_vfiprintf_r+0x18>
 80061f4:	f7ff fe96 	bl	8005f24 <__sinit>
 80061f8:	4b89      	ldr	r3, [pc, #548]	; (8006420 <_vfiprintf_r+0x240>)
 80061fa:	429d      	cmp	r5, r3
 80061fc:	d11b      	bne.n	8006236 <_vfiprintf_r+0x56>
 80061fe:	6875      	ldr	r5, [r6, #4]
 8006200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006202:	07d9      	lsls	r1, r3, #31
 8006204:	d405      	bmi.n	8006212 <_vfiprintf_r+0x32>
 8006206:	89ab      	ldrh	r3, [r5, #12]
 8006208:	059a      	lsls	r2, r3, #22
 800620a:	d402      	bmi.n	8006212 <_vfiprintf_r+0x32>
 800620c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800620e:	f7ff ff27 	bl	8006060 <__retarget_lock_acquire_recursive>
 8006212:	89ab      	ldrh	r3, [r5, #12]
 8006214:	071b      	lsls	r3, r3, #28
 8006216:	d501      	bpl.n	800621c <_vfiprintf_r+0x3c>
 8006218:	692b      	ldr	r3, [r5, #16]
 800621a:	b9eb      	cbnz	r3, 8006258 <_vfiprintf_r+0x78>
 800621c:	4629      	mov	r1, r5
 800621e:	4630      	mov	r0, r6
 8006220:	f000 fb5a 	bl	80068d8 <__swsetup_r>
 8006224:	b1c0      	cbz	r0, 8006258 <_vfiprintf_r+0x78>
 8006226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006228:	07dc      	lsls	r4, r3, #31
 800622a:	d50e      	bpl.n	800624a <_vfiprintf_r+0x6a>
 800622c:	f04f 30ff 	mov.w	r0, #4294967295
 8006230:	b01d      	add	sp, #116	; 0x74
 8006232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006236:	4b7b      	ldr	r3, [pc, #492]	; (8006424 <_vfiprintf_r+0x244>)
 8006238:	429d      	cmp	r5, r3
 800623a:	d101      	bne.n	8006240 <_vfiprintf_r+0x60>
 800623c:	68b5      	ldr	r5, [r6, #8]
 800623e:	e7df      	b.n	8006200 <_vfiprintf_r+0x20>
 8006240:	4b79      	ldr	r3, [pc, #484]	; (8006428 <_vfiprintf_r+0x248>)
 8006242:	429d      	cmp	r5, r3
 8006244:	bf08      	it	eq
 8006246:	68f5      	ldreq	r5, [r6, #12]
 8006248:	e7da      	b.n	8006200 <_vfiprintf_r+0x20>
 800624a:	89ab      	ldrh	r3, [r5, #12]
 800624c:	0598      	lsls	r0, r3, #22
 800624e:	d4ed      	bmi.n	800622c <_vfiprintf_r+0x4c>
 8006250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006252:	f7ff ff06 	bl	8006062 <__retarget_lock_release_recursive>
 8006256:	e7e9      	b.n	800622c <_vfiprintf_r+0x4c>
 8006258:	2300      	movs	r3, #0
 800625a:	9309      	str	r3, [sp, #36]	; 0x24
 800625c:	2320      	movs	r3, #32
 800625e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006262:	f8cd 800c 	str.w	r8, [sp, #12]
 8006266:	2330      	movs	r3, #48	; 0x30
 8006268:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800642c <_vfiprintf_r+0x24c>
 800626c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006270:	f04f 0901 	mov.w	r9, #1
 8006274:	4623      	mov	r3, r4
 8006276:	469a      	mov	sl, r3
 8006278:	f813 2b01 	ldrb.w	r2, [r3], #1
 800627c:	b10a      	cbz	r2, 8006282 <_vfiprintf_r+0xa2>
 800627e:	2a25      	cmp	r2, #37	; 0x25
 8006280:	d1f9      	bne.n	8006276 <_vfiprintf_r+0x96>
 8006282:	ebba 0b04 	subs.w	fp, sl, r4
 8006286:	d00b      	beq.n	80062a0 <_vfiprintf_r+0xc0>
 8006288:	465b      	mov	r3, fp
 800628a:	4622      	mov	r2, r4
 800628c:	4629      	mov	r1, r5
 800628e:	4630      	mov	r0, r6
 8006290:	f7ff ff93 	bl	80061ba <__sfputs_r>
 8006294:	3001      	adds	r0, #1
 8006296:	f000 80aa 	beq.w	80063ee <_vfiprintf_r+0x20e>
 800629a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800629c:	445a      	add	r2, fp
 800629e:	9209      	str	r2, [sp, #36]	; 0x24
 80062a0:	f89a 3000 	ldrb.w	r3, [sl]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 80a2 	beq.w	80063ee <_vfiprintf_r+0x20e>
 80062aa:	2300      	movs	r3, #0
 80062ac:	f04f 32ff 	mov.w	r2, #4294967295
 80062b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062b4:	f10a 0a01 	add.w	sl, sl, #1
 80062b8:	9304      	str	r3, [sp, #16]
 80062ba:	9307      	str	r3, [sp, #28]
 80062bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062c0:	931a      	str	r3, [sp, #104]	; 0x68
 80062c2:	4654      	mov	r4, sl
 80062c4:	2205      	movs	r2, #5
 80062c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ca:	4858      	ldr	r0, [pc, #352]	; (800642c <_vfiprintf_r+0x24c>)
 80062cc:	f7fa f808 	bl	80002e0 <memchr>
 80062d0:	9a04      	ldr	r2, [sp, #16]
 80062d2:	b9d8      	cbnz	r0, 800630c <_vfiprintf_r+0x12c>
 80062d4:	06d1      	lsls	r1, r2, #27
 80062d6:	bf44      	itt	mi
 80062d8:	2320      	movmi	r3, #32
 80062da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062de:	0713      	lsls	r3, r2, #28
 80062e0:	bf44      	itt	mi
 80062e2:	232b      	movmi	r3, #43	; 0x2b
 80062e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062e8:	f89a 3000 	ldrb.w	r3, [sl]
 80062ec:	2b2a      	cmp	r3, #42	; 0x2a
 80062ee:	d015      	beq.n	800631c <_vfiprintf_r+0x13c>
 80062f0:	9a07      	ldr	r2, [sp, #28]
 80062f2:	4654      	mov	r4, sl
 80062f4:	2000      	movs	r0, #0
 80062f6:	f04f 0c0a 	mov.w	ip, #10
 80062fa:	4621      	mov	r1, r4
 80062fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006300:	3b30      	subs	r3, #48	; 0x30
 8006302:	2b09      	cmp	r3, #9
 8006304:	d94e      	bls.n	80063a4 <_vfiprintf_r+0x1c4>
 8006306:	b1b0      	cbz	r0, 8006336 <_vfiprintf_r+0x156>
 8006308:	9207      	str	r2, [sp, #28]
 800630a:	e014      	b.n	8006336 <_vfiprintf_r+0x156>
 800630c:	eba0 0308 	sub.w	r3, r0, r8
 8006310:	fa09 f303 	lsl.w	r3, r9, r3
 8006314:	4313      	orrs	r3, r2
 8006316:	9304      	str	r3, [sp, #16]
 8006318:	46a2      	mov	sl, r4
 800631a:	e7d2      	b.n	80062c2 <_vfiprintf_r+0xe2>
 800631c:	9b03      	ldr	r3, [sp, #12]
 800631e:	1d19      	adds	r1, r3, #4
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	9103      	str	r1, [sp, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	bfbb      	ittet	lt
 8006328:	425b      	neglt	r3, r3
 800632a:	f042 0202 	orrlt.w	r2, r2, #2
 800632e:	9307      	strge	r3, [sp, #28]
 8006330:	9307      	strlt	r3, [sp, #28]
 8006332:	bfb8      	it	lt
 8006334:	9204      	strlt	r2, [sp, #16]
 8006336:	7823      	ldrb	r3, [r4, #0]
 8006338:	2b2e      	cmp	r3, #46	; 0x2e
 800633a:	d10c      	bne.n	8006356 <_vfiprintf_r+0x176>
 800633c:	7863      	ldrb	r3, [r4, #1]
 800633e:	2b2a      	cmp	r3, #42	; 0x2a
 8006340:	d135      	bne.n	80063ae <_vfiprintf_r+0x1ce>
 8006342:	9b03      	ldr	r3, [sp, #12]
 8006344:	1d1a      	adds	r2, r3, #4
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	9203      	str	r2, [sp, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	bfb8      	it	lt
 800634e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006352:	3402      	adds	r4, #2
 8006354:	9305      	str	r3, [sp, #20]
 8006356:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800643c <_vfiprintf_r+0x25c>
 800635a:	7821      	ldrb	r1, [r4, #0]
 800635c:	2203      	movs	r2, #3
 800635e:	4650      	mov	r0, sl
 8006360:	f7f9 ffbe 	bl	80002e0 <memchr>
 8006364:	b140      	cbz	r0, 8006378 <_vfiprintf_r+0x198>
 8006366:	2340      	movs	r3, #64	; 0x40
 8006368:	eba0 000a 	sub.w	r0, r0, sl
 800636c:	fa03 f000 	lsl.w	r0, r3, r0
 8006370:	9b04      	ldr	r3, [sp, #16]
 8006372:	4303      	orrs	r3, r0
 8006374:	3401      	adds	r4, #1
 8006376:	9304      	str	r3, [sp, #16]
 8006378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800637c:	482c      	ldr	r0, [pc, #176]	; (8006430 <_vfiprintf_r+0x250>)
 800637e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006382:	2206      	movs	r2, #6
 8006384:	f7f9 ffac 	bl	80002e0 <memchr>
 8006388:	2800      	cmp	r0, #0
 800638a:	d03f      	beq.n	800640c <_vfiprintf_r+0x22c>
 800638c:	4b29      	ldr	r3, [pc, #164]	; (8006434 <_vfiprintf_r+0x254>)
 800638e:	bb1b      	cbnz	r3, 80063d8 <_vfiprintf_r+0x1f8>
 8006390:	9b03      	ldr	r3, [sp, #12]
 8006392:	3307      	adds	r3, #7
 8006394:	f023 0307 	bic.w	r3, r3, #7
 8006398:	3308      	adds	r3, #8
 800639a:	9303      	str	r3, [sp, #12]
 800639c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800639e:	443b      	add	r3, r7
 80063a0:	9309      	str	r3, [sp, #36]	; 0x24
 80063a2:	e767      	b.n	8006274 <_vfiprintf_r+0x94>
 80063a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80063a8:	460c      	mov	r4, r1
 80063aa:	2001      	movs	r0, #1
 80063ac:	e7a5      	b.n	80062fa <_vfiprintf_r+0x11a>
 80063ae:	2300      	movs	r3, #0
 80063b0:	3401      	adds	r4, #1
 80063b2:	9305      	str	r3, [sp, #20]
 80063b4:	4619      	mov	r1, r3
 80063b6:	f04f 0c0a 	mov.w	ip, #10
 80063ba:	4620      	mov	r0, r4
 80063bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063c0:	3a30      	subs	r2, #48	; 0x30
 80063c2:	2a09      	cmp	r2, #9
 80063c4:	d903      	bls.n	80063ce <_vfiprintf_r+0x1ee>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0c5      	beq.n	8006356 <_vfiprintf_r+0x176>
 80063ca:	9105      	str	r1, [sp, #20]
 80063cc:	e7c3      	b.n	8006356 <_vfiprintf_r+0x176>
 80063ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80063d2:	4604      	mov	r4, r0
 80063d4:	2301      	movs	r3, #1
 80063d6:	e7f0      	b.n	80063ba <_vfiprintf_r+0x1da>
 80063d8:	ab03      	add	r3, sp, #12
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	462a      	mov	r2, r5
 80063de:	4b16      	ldr	r3, [pc, #88]	; (8006438 <_vfiprintf_r+0x258>)
 80063e0:	a904      	add	r1, sp, #16
 80063e2:	4630      	mov	r0, r6
 80063e4:	f3af 8000 	nop.w
 80063e8:	4607      	mov	r7, r0
 80063ea:	1c78      	adds	r0, r7, #1
 80063ec:	d1d6      	bne.n	800639c <_vfiprintf_r+0x1bc>
 80063ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063f0:	07d9      	lsls	r1, r3, #31
 80063f2:	d405      	bmi.n	8006400 <_vfiprintf_r+0x220>
 80063f4:	89ab      	ldrh	r3, [r5, #12]
 80063f6:	059a      	lsls	r2, r3, #22
 80063f8:	d402      	bmi.n	8006400 <_vfiprintf_r+0x220>
 80063fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063fc:	f7ff fe31 	bl	8006062 <__retarget_lock_release_recursive>
 8006400:	89ab      	ldrh	r3, [r5, #12]
 8006402:	065b      	lsls	r3, r3, #25
 8006404:	f53f af12 	bmi.w	800622c <_vfiprintf_r+0x4c>
 8006408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800640a:	e711      	b.n	8006230 <_vfiprintf_r+0x50>
 800640c:	ab03      	add	r3, sp, #12
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	462a      	mov	r2, r5
 8006412:	4b09      	ldr	r3, [pc, #36]	; (8006438 <_vfiprintf_r+0x258>)
 8006414:	a904      	add	r1, sp, #16
 8006416:	4630      	mov	r0, r6
 8006418:	f000 f880 	bl	800651c <_printf_i>
 800641c:	e7e4      	b.n	80063e8 <_vfiprintf_r+0x208>
 800641e:	bf00      	nop
 8006420:	08006e10 	.word	0x08006e10
 8006424:	08006e30 	.word	0x08006e30
 8006428:	08006df0 	.word	0x08006df0
 800642c:	08006e50 	.word	0x08006e50
 8006430:	08006e5a 	.word	0x08006e5a
 8006434:	00000000 	.word	0x00000000
 8006438:	080061bb 	.word	0x080061bb
 800643c:	08006e56 	.word	0x08006e56

08006440 <_printf_common>:
 8006440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006444:	4616      	mov	r6, r2
 8006446:	4699      	mov	r9, r3
 8006448:	688a      	ldr	r2, [r1, #8]
 800644a:	690b      	ldr	r3, [r1, #16]
 800644c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006450:	4293      	cmp	r3, r2
 8006452:	bfb8      	it	lt
 8006454:	4613      	movlt	r3, r2
 8006456:	6033      	str	r3, [r6, #0]
 8006458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800645c:	4607      	mov	r7, r0
 800645e:	460c      	mov	r4, r1
 8006460:	b10a      	cbz	r2, 8006466 <_printf_common+0x26>
 8006462:	3301      	adds	r3, #1
 8006464:	6033      	str	r3, [r6, #0]
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	0699      	lsls	r1, r3, #26
 800646a:	bf42      	ittt	mi
 800646c:	6833      	ldrmi	r3, [r6, #0]
 800646e:	3302      	addmi	r3, #2
 8006470:	6033      	strmi	r3, [r6, #0]
 8006472:	6825      	ldr	r5, [r4, #0]
 8006474:	f015 0506 	ands.w	r5, r5, #6
 8006478:	d106      	bne.n	8006488 <_printf_common+0x48>
 800647a:	f104 0a19 	add.w	sl, r4, #25
 800647e:	68e3      	ldr	r3, [r4, #12]
 8006480:	6832      	ldr	r2, [r6, #0]
 8006482:	1a9b      	subs	r3, r3, r2
 8006484:	42ab      	cmp	r3, r5
 8006486:	dc26      	bgt.n	80064d6 <_printf_common+0x96>
 8006488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800648c:	1e13      	subs	r3, r2, #0
 800648e:	6822      	ldr	r2, [r4, #0]
 8006490:	bf18      	it	ne
 8006492:	2301      	movne	r3, #1
 8006494:	0692      	lsls	r2, r2, #26
 8006496:	d42b      	bmi.n	80064f0 <_printf_common+0xb0>
 8006498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800649c:	4649      	mov	r1, r9
 800649e:	4638      	mov	r0, r7
 80064a0:	47c0      	blx	r8
 80064a2:	3001      	adds	r0, #1
 80064a4:	d01e      	beq.n	80064e4 <_printf_common+0xa4>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	68e5      	ldr	r5, [r4, #12]
 80064aa:	6832      	ldr	r2, [r6, #0]
 80064ac:	f003 0306 	and.w	r3, r3, #6
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	bf08      	it	eq
 80064b4:	1aad      	subeq	r5, r5, r2
 80064b6:	68a3      	ldr	r3, [r4, #8]
 80064b8:	6922      	ldr	r2, [r4, #16]
 80064ba:	bf0c      	ite	eq
 80064bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064c0:	2500      	movne	r5, #0
 80064c2:	4293      	cmp	r3, r2
 80064c4:	bfc4      	itt	gt
 80064c6:	1a9b      	subgt	r3, r3, r2
 80064c8:	18ed      	addgt	r5, r5, r3
 80064ca:	2600      	movs	r6, #0
 80064cc:	341a      	adds	r4, #26
 80064ce:	42b5      	cmp	r5, r6
 80064d0:	d11a      	bne.n	8006508 <_printf_common+0xc8>
 80064d2:	2000      	movs	r0, #0
 80064d4:	e008      	b.n	80064e8 <_printf_common+0xa8>
 80064d6:	2301      	movs	r3, #1
 80064d8:	4652      	mov	r2, sl
 80064da:	4649      	mov	r1, r9
 80064dc:	4638      	mov	r0, r7
 80064de:	47c0      	blx	r8
 80064e0:	3001      	adds	r0, #1
 80064e2:	d103      	bne.n	80064ec <_printf_common+0xac>
 80064e4:	f04f 30ff 	mov.w	r0, #4294967295
 80064e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ec:	3501      	adds	r5, #1
 80064ee:	e7c6      	b.n	800647e <_printf_common+0x3e>
 80064f0:	18e1      	adds	r1, r4, r3
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	2030      	movs	r0, #48	; 0x30
 80064f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064fa:	4422      	add	r2, r4
 80064fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006504:	3302      	adds	r3, #2
 8006506:	e7c7      	b.n	8006498 <_printf_common+0x58>
 8006508:	2301      	movs	r3, #1
 800650a:	4622      	mov	r2, r4
 800650c:	4649      	mov	r1, r9
 800650e:	4638      	mov	r0, r7
 8006510:	47c0      	blx	r8
 8006512:	3001      	adds	r0, #1
 8006514:	d0e6      	beq.n	80064e4 <_printf_common+0xa4>
 8006516:	3601      	adds	r6, #1
 8006518:	e7d9      	b.n	80064ce <_printf_common+0x8e>
	...

0800651c <_printf_i>:
 800651c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006520:	7e0f      	ldrb	r7, [r1, #24]
 8006522:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006524:	2f78      	cmp	r7, #120	; 0x78
 8006526:	4691      	mov	r9, r2
 8006528:	4680      	mov	r8, r0
 800652a:	460c      	mov	r4, r1
 800652c:	469a      	mov	sl, r3
 800652e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006532:	d807      	bhi.n	8006544 <_printf_i+0x28>
 8006534:	2f62      	cmp	r7, #98	; 0x62
 8006536:	d80a      	bhi.n	800654e <_printf_i+0x32>
 8006538:	2f00      	cmp	r7, #0
 800653a:	f000 80d8 	beq.w	80066ee <_printf_i+0x1d2>
 800653e:	2f58      	cmp	r7, #88	; 0x58
 8006540:	f000 80a3 	beq.w	800668a <_printf_i+0x16e>
 8006544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800654c:	e03a      	b.n	80065c4 <_printf_i+0xa8>
 800654e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006552:	2b15      	cmp	r3, #21
 8006554:	d8f6      	bhi.n	8006544 <_printf_i+0x28>
 8006556:	a101      	add	r1, pc, #4	; (adr r1, 800655c <_printf_i+0x40>)
 8006558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800655c:	080065b5 	.word	0x080065b5
 8006560:	080065c9 	.word	0x080065c9
 8006564:	08006545 	.word	0x08006545
 8006568:	08006545 	.word	0x08006545
 800656c:	08006545 	.word	0x08006545
 8006570:	08006545 	.word	0x08006545
 8006574:	080065c9 	.word	0x080065c9
 8006578:	08006545 	.word	0x08006545
 800657c:	08006545 	.word	0x08006545
 8006580:	08006545 	.word	0x08006545
 8006584:	08006545 	.word	0x08006545
 8006588:	080066d5 	.word	0x080066d5
 800658c:	080065f9 	.word	0x080065f9
 8006590:	080066b7 	.word	0x080066b7
 8006594:	08006545 	.word	0x08006545
 8006598:	08006545 	.word	0x08006545
 800659c:	080066f7 	.word	0x080066f7
 80065a0:	08006545 	.word	0x08006545
 80065a4:	080065f9 	.word	0x080065f9
 80065a8:	08006545 	.word	0x08006545
 80065ac:	08006545 	.word	0x08006545
 80065b0:	080066bf 	.word	0x080066bf
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	1d1a      	adds	r2, r3, #4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	602a      	str	r2, [r5, #0]
 80065bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065c4:	2301      	movs	r3, #1
 80065c6:	e0a3      	b.n	8006710 <_printf_i+0x1f4>
 80065c8:	6820      	ldr	r0, [r4, #0]
 80065ca:	6829      	ldr	r1, [r5, #0]
 80065cc:	0606      	lsls	r6, r0, #24
 80065ce:	f101 0304 	add.w	r3, r1, #4
 80065d2:	d50a      	bpl.n	80065ea <_printf_i+0xce>
 80065d4:	680e      	ldr	r6, [r1, #0]
 80065d6:	602b      	str	r3, [r5, #0]
 80065d8:	2e00      	cmp	r6, #0
 80065da:	da03      	bge.n	80065e4 <_printf_i+0xc8>
 80065dc:	232d      	movs	r3, #45	; 0x2d
 80065de:	4276      	negs	r6, r6
 80065e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e4:	485e      	ldr	r0, [pc, #376]	; (8006760 <_printf_i+0x244>)
 80065e6:	230a      	movs	r3, #10
 80065e8:	e019      	b.n	800661e <_printf_i+0x102>
 80065ea:	680e      	ldr	r6, [r1, #0]
 80065ec:	602b      	str	r3, [r5, #0]
 80065ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065f2:	bf18      	it	ne
 80065f4:	b236      	sxthne	r6, r6
 80065f6:	e7ef      	b.n	80065d8 <_printf_i+0xbc>
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	6820      	ldr	r0, [r4, #0]
 80065fc:	1d19      	adds	r1, r3, #4
 80065fe:	6029      	str	r1, [r5, #0]
 8006600:	0601      	lsls	r1, r0, #24
 8006602:	d501      	bpl.n	8006608 <_printf_i+0xec>
 8006604:	681e      	ldr	r6, [r3, #0]
 8006606:	e002      	b.n	800660e <_printf_i+0xf2>
 8006608:	0646      	lsls	r6, r0, #25
 800660a:	d5fb      	bpl.n	8006604 <_printf_i+0xe8>
 800660c:	881e      	ldrh	r6, [r3, #0]
 800660e:	4854      	ldr	r0, [pc, #336]	; (8006760 <_printf_i+0x244>)
 8006610:	2f6f      	cmp	r7, #111	; 0x6f
 8006612:	bf0c      	ite	eq
 8006614:	2308      	moveq	r3, #8
 8006616:	230a      	movne	r3, #10
 8006618:	2100      	movs	r1, #0
 800661a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800661e:	6865      	ldr	r5, [r4, #4]
 8006620:	60a5      	str	r5, [r4, #8]
 8006622:	2d00      	cmp	r5, #0
 8006624:	bfa2      	ittt	ge
 8006626:	6821      	ldrge	r1, [r4, #0]
 8006628:	f021 0104 	bicge.w	r1, r1, #4
 800662c:	6021      	strge	r1, [r4, #0]
 800662e:	b90e      	cbnz	r6, 8006634 <_printf_i+0x118>
 8006630:	2d00      	cmp	r5, #0
 8006632:	d04d      	beq.n	80066d0 <_printf_i+0x1b4>
 8006634:	4615      	mov	r5, r2
 8006636:	fbb6 f1f3 	udiv	r1, r6, r3
 800663a:	fb03 6711 	mls	r7, r3, r1, r6
 800663e:	5dc7      	ldrb	r7, [r0, r7]
 8006640:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006644:	4637      	mov	r7, r6
 8006646:	42bb      	cmp	r3, r7
 8006648:	460e      	mov	r6, r1
 800664a:	d9f4      	bls.n	8006636 <_printf_i+0x11a>
 800664c:	2b08      	cmp	r3, #8
 800664e:	d10b      	bne.n	8006668 <_printf_i+0x14c>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	07de      	lsls	r6, r3, #31
 8006654:	d508      	bpl.n	8006668 <_printf_i+0x14c>
 8006656:	6923      	ldr	r3, [r4, #16]
 8006658:	6861      	ldr	r1, [r4, #4]
 800665a:	4299      	cmp	r1, r3
 800665c:	bfde      	ittt	le
 800665e:	2330      	movle	r3, #48	; 0x30
 8006660:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006664:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006668:	1b52      	subs	r2, r2, r5
 800666a:	6122      	str	r2, [r4, #16]
 800666c:	f8cd a000 	str.w	sl, [sp]
 8006670:	464b      	mov	r3, r9
 8006672:	aa03      	add	r2, sp, #12
 8006674:	4621      	mov	r1, r4
 8006676:	4640      	mov	r0, r8
 8006678:	f7ff fee2 	bl	8006440 <_printf_common>
 800667c:	3001      	adds	r0, #1
 800667e:	d14c      	bne.n	800671a <_printf_i+0x1fe>
 8006680:	f04f 30ff 	mov.w	r0, #4294967295
 8006684:	b004      	add	sp, #16
 8006686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800668a:	4835      	ldr	r0, [pc, #212]	; (8006760 <_printf_i+0x244>)
 800668c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006690:	6829      	ldr	r1, [r5, #0]
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	f851 6b04 	ldr.w	r6, [r1], #4
 8006698:	6029      	str	r1, [r5, #0]
 800669a:	061d      	lsls	r5, r3, #24
 800669c:	d514      	bpl.n	80066c8 <_printf_i+0x1ac>
 800669e:	07df      	lsls	r7, r3, #31
 80066a0:	bf44      	itt	mi
 80066a2:	f043 0320 	orrmi.w	r3, r3, #32
 80066a6:	6023      	strmi	r3, [r4, #0]
 80066a8:	b91e      	cbnz	r6, 80066b2 <_printf_i+0x196>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	f023 0320 	bic.w	r3, r3, #32
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	2310      	movs	r3, #16
 80066b4:	e7b0      	b.n	8006618 <_printf_i+0xfc>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	f043 0320 	orr.w	r3, r3, #32
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	2378      	movs	r3, #120	; 0x78
 80066c0:	4828      	ldr	r0, [pc, #160]	; (8006764 <_printf_i+0x248>)
 80066c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066c6:	e7e3      	b.n	8006690 <_printf_i+0x174>
 80066c8:	0659      	lsls	r1, r3, #25
 80066ca:	bf48      	it	mi
 80066cc:	b2b6      	uxthmi	r6, r6
 80066ce:	e7e6      	b.n	800669e <_printf_i+0x182>
 80066d0:	4615      	mov	r5, r2
 80066d2:	e7bb      	b.n	800664c <_printf_i+0x130>
 80066d4:	682b      	ldr	r3, [r5, #0]
 80066d6:	6826      	ldr	r6, [r4, #0]
 80066d8:	6961      	ldr	r1, [r4, #20]
 80066da:	1d18      	adds	r0, r3, #4
 80066dc:	6028      	str	r0, [r5, #0]
 80066de:	0635      	lsls	r5, r6, #24
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	d501      	bpl.n	80066e8 <_printf_i+0x1cc>
 80066e4:	6019      	str	r1, [r3, #0]
 80066e6:	e002      	b.n	80066ee <_printf_i+0x1d2>
 80066e8:	0670      	lsls	r0, r6, #25
 80066ea:	d5fb      	bpl.n	80066e4 <_printf_i+0x1c8>
 80066ec:	8019      	strh	r1, [r3, #0]
 80066ee:	2300      	movs	r3, #0
 80066f0:	6123      	str	r3, [r4, #16]
 80066f2:	4615      	mov	r5, r2
 80066f4:	e7ba      	b.n	800666c <_printf_i+0x150>
 80066f6:	682b      	ldr	r3, [r5, #0]
 80066f8:	1d1a      	adds	r2, r3, #4
 80066fa:	602a      	str	r2, [r5, #0]
 80066fc:	681d      	ldr	r5, [r3, #0]
 80066fe:	6862      	ldr	r2, [r4, #4]
 8006700:	2100      	movs	r1, #0
 8006702:	4628      	mov	r0, r5
 8006704:	f7f9 fdec 	bl	80002e0 <memchr>
 8006708:	b108      	cbz	r0, 800670e <_printf_i+0x1f2>
 800670a:	1b40      	subs	r0, r0, r5
 800670c:	6060      	str	r0, [r4, #4]
 800670e:	6863      	ldr	r3, [r4, #4]
 8006710:	6123      	str	r3, [r4, #16]
 8006712:	2300      	movs	r3, #0
 8006714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006718:	e7a8      	b.n	800666c <_printf_i+0x150>
 800671a:	6923      	ldr	r3, [r4, #16]
 800671c:	462a      	mov	r2, r5
 800671e:	4649      	mov	r1, r9
 8006720:	4640      	mov	r0, r8
 8006722:	47d0      	blx	sl
 8006724:	3001      	adds	r0, #1
 8006726:	d0ab      	beq.n	8006680 <_printf_i+0x164>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	079b      	lsls	r3, r3, #30
 800672c:	d413      	bmi.n	8006756 <_printf_i+0x23a>
 800672e:	68e0      	ldr	r0, [r4, #12]
 8006730:	9b03      	ldr	r3, [sp, #12]
 8006732:	4298      	cmp	r0, r3
 8006734:	bfb8      	it	lt
 8006736:	4618      	movlt	r0, r3
 8006738:	e7a4      	b.n	8006684 <_printf_i+0x168>
 800673a:	2301      	movs	r3, #1
 800673c:	4632      	mov	r2, r6
 800673e:	4649      	mov	r1, r9
 8006740:	4640      	mov	r0, r8
 8006742:	47d0      	blx	sl
 8006744:	3001      	adds	r0, #1
 8006746:	d09b      	beq.n	8006680 <_printf_i+0x164>
 8006748:	3501      	adds	r5, #1
 800674a:	68e3      	ldr	r3, [r4, #12]
 800674c:	9903      	ldr	r1, [sp, #12]
 800674e:	1a5b      	subs	r3, r3, r1
 8006750:	42ab      	cmp	r3, r5
 8006752:	dcf2      	bgt.n	800673a <_printf_i+0x21e>
 8006754:	e7eb      	b.n	800672e <_printf_i+0x212>
 8006756:	2500      	movs	r5, #0
 8006758:	f104 0619 	add.w	r6, r4, #25
 800675c:	e7f5      	b.n	800674a <_printf_i+0x22e>
 800675e:	bf00      	nop
 8006760:	08006e61 	.word	0x08006e61
 8006764:	08006e72 	.word	0x08006e72

08006768 <_sbrk_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	4d06      	ldr	r5, [pc, #24]	; (8006784 <_sbrk_r+0x1c>)
 800676c:	2300      	movs	r3, #0
 800676e:	4604      	mov	r4, r0
 8006770:	4608      	mov	r0, r1
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	f7fa fc9e 	bl	80010b4 <_sbrk>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_sbrk_r+0x1a>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_sbrk_r+0x1a>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	24000180 	.word	0x24000180

08006788 <__sread>:
 8006788:	b510      	push	{r4, lr}
 800678a:	460c      	mov	r4, r1
 800678c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006790:	f000 fab2 	bl	8006cf8 <_read_r>
 8006794:	2800      	cmp	r0, #0
 8006796:	bfab      	itete	ge
 8006798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800679a:	89a3      	ldrhlt	r3, [r4, #12]
 800679c:	181b      	addge	r3, r3, r0
 800679e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067a2:	bfac      	ite	ge
 80067a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80067a6:	81a3      	strhlt	r3, [r4, #12]
 80067a8:	bd10      	pop	{r4, pc}

080067aa <__swrite>:
 80067aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ae:	461f      	mov	r7, r3
 80067b0:	898b      	ldrh	r3, [r1, #12]
 80067b2:	05db      	lsls	r3, r3, #23
 80067b4:	4605      	mov	r5, r0
 80067b6:	460c      	mov	r4, r1
 80067b8:	4616      	mov	r6, r2
 80067ba:	d505      	bpl.n	80067c8 <__swrite+0x1e>
 80067bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c0:	2302      	movs	r3, #2
 80067c2:	2200      	movs	r2, #0
 80067c4:	f000 f9c8 	bl	8006b58 <_lseek_r>
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067d2:	81a3      	strh	r3, [r4, #12]
 80067d4:	4632      	mov	r2, r6
 80067d6:	463b      	mov	r3, r7
 80067d8:	4628      	mov	r0, r5
 80067da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067de:	f000 b869 	b.w	80068b4 <_write_r>

080067e2 <__sseek>:
 80067e2:	b510      	push	{r4, lr}
 80067e4:	460c      	mov	r4, r1
 80067e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ea:	f000 f9b5 	bl	8006b58 <_lseek_r>
 80067ee:	1c43      	adds	r3, r0, #1
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	bf15      	itete	ne
 80067f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80067f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067fe:	81a3      	strheq	r3, [r4, #12]
 8006800:	bf18      	it	ne
 8006802:	81a3      	strhne	r3, [r4, #12]
 8006804:	bd10      	pop	{r4, pc}

08006806 <__sclose>:
 8006806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680a:	f000 b8d3 	b.w	80069b4 <_close_r>
	...

08006810 <__swbuf_r>:
 8006810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006812:	460e      	mov	r6, r1
 8006814:	4614      	mov	r4, r2
 8006816:	4605      	mov	r5, r0
 8006818:	b118      	cbz	r0, 8006822 <__swbuf_r+0x12>
 800681a:	6983      	ldr	r3, [r0, #24]
 800681c:	b90b      	cbnz	r3, 8006822 <__swbuf_r+0x12>
 800681e:	f7ff fb81 	bl	8005f24 <__sinit>
 8006822:	4b21      	ldr	r3, [pc, #132]	; (80068a8 <__swbuf_r+0x98>)
 8006824:	429c      	cmp	r4, r3
 8006826:	d12b      	bne.n	8006880 <__swbuf_r+0x70>
 8006828:	686c      	ldr	r4, [r5, #4]
 800682a:	69a3      	ldr	r3, [r4, #24]
 800682c:	60a3      	str	r3, [r4, #8]
 800682e:	89a3      	ldrh	r3, [r4, #12]
 8006830:	071a      	lsls	r2, r3, #28
 8006832:	d52f      	bpl.n	8006894 <__swbuf_r+0x84>
 8006834:	6923      	ldr	r3, [r4, #16]
 8006836:	b36b      	cbz	r3, 8006894 <__swbuf_r+0x84>
 8006838:	6923      	ldr	r3, [r4, #16]
 800683a:	6820      	ldr	r0, [r4, #0]
 800683c:	1ac0      	subs	r0, r0, r3
 800683e:	6963      	ldr	r3, [r4, #20]
 8006840:	b2f6      	uxtb	r6, r6
 8006842:	4283      	cmp	r3, r0
 8006844:	4637      	mov	r7, r6
 8006846:	dc04      	bgt.n	8006852 <__swbuf_r+0x42>
 8006848:	4621      	mov	r1, r4
 800684a:	4628      	mov	r0, r5
 800684c:	f000 f948 	bl	8006ae0 <_fflush_r>
 8006850:	bb30      	cbnz	r0, 80068a0 <__swbuf_r+0x90>
 8006852:	68a3      	ldr	r3, [r4, #8]
 8006854:	3b01      	subs	r3, #1
 8006856:	60a3      	str	r3, [r4, #8]
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	6022      	str	r2, [r4, #0]
 800685e:	701e      	strb	r6, [r3, #0]
 8006860:	6963      	ldr	r3, [r4, #20]
 8006862:	3001      	adds	r0, #1
 8006864:	4283      	cmp	r3, r0
 8006866:	d004      	beq.n	8006872 <__swbuf_r+0x62>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	07db      	lsls	r3, r3, #31
 800686c:	d506      	bpl.n	800687c <__swbuf_r+0x6c>
 800686e:	2e0a      	cmp	r6, #10
 8006870:	d104      	bne.n	800687c <__swbuf_r+0x6c>
 8006872:	4621      	mov	r1, r4
 8006874:	4628      	mov	r0, r5
 8006876:	f000 f933 	bl	8006ae0 <_fflush_r>
 800687a:	b988      	cbnz	r0, 80068a0 <__swbuf_r+0x90>
 800687c:	4638      	mov	r0, r7
 800687e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006880:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <__swbuf_r+0x9c>)
 8006882:	429c      	cmp	r4, r3
 8006884:	d101      	bne.n	800688a <__swbuf_r+0x7a>
 8006886:	68ac      	ldr	r4, [r5, #8]
 8006888:	e7cf      	b.n	800682a <__swbuf_r+0x1a>
 800688a:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <__swbuf_r+0xa0>)
 800688c:	429c      	cmp	r4, r3
 800688e:	bf08      	it	eq
 8006890:	68ec      	ldreq	r4, [r5, #12]
 8006892:	e7ca      	b.n	800682a <__swbuf_r+0x1a>
 8006894:	4621      	mov	r1, r4
 8006896:	4628      	mov	r0, r5
 8006898:	f000 f81e 	bl	80068d8 <__swsetup_r>
 800689c:	2800      	cmp	r0, #0
 800689e:	d0cb      	beq.n	8006838 <__swbuf_r+0x28>
 80068a0:	f04f 37ff 	mov.w	r7, #4294967295
 80068a4:	e7ea      	b.n	800687c <__swbuf_r+0x6c>
 80068a6:	bf00      	nop
 80068a8:	08006e10 	.word	0x08006e10
 80068ac:	08006e30 	.word	0x08006e30
 80068b0:	08006df0 	.word	0x08006df0

080068b4 <_write_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4d07      	ldr	r5, [pc, #28]	; (80068d4 <_write_r+0x20>)
 80068b8:	4604      	mov	r4, r0
 80068ba:	4608      	mov	r0, r1
 80068bc:	4611      	mov	r1, r2
 80068be:	2200      	movs	r2, #0
 80068c0:	602a      	str	r2, [r5, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	f7fa fba5 	bl	8001012 <_write>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	d102      	bne.n	80068d2 <_write_r+0x1e>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	b103      	cbz	r3, 80068d2 <_write_r+0x1e>
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	bd38      	pop	{r3, r4, r5, pc}
 80068d4:	24000180 	.word	0x24000180

080068d8 <__swsetup_r>:
 80068d8:	4b32      	ldr	r3, [pc, #200]	; (80069a4 <__swsetup_r+0xcc>)
 80068da:	b570      	push	{r4, r5, r6, lr}
 80068dc:	681d      	ldr	r5, [r3, #0]
 80068de:	4606      	mov	r6, r0
 80068e0:	460c      	mov	r4, r1
 80068e2:	b125      	cbz	r5, 80068ee <__swsetup_r+0x16>
 80068e4:	69ab      	ldr	r3, [r5, #24]
 80068e6:	b913      	cbnz	r3, 80068ee <__swsetup_r+0x16>
 80068e8:	4628      	mov	r0, r5
 80068ea:	f7ff fb1b 	bl	8005f24 <__sinit>
 80068ee:	4b2e      	ldr	r3, [pc, #184]	; (80069a8 <__swsetup_r+0xd0>)
 80068f0:	429c      	cmp	r4, r3
 80068f2:	d10f      	bne.n	8006914 <__swsetup_r+0x3c>
 80068f4:	686c      	ldr	r4, [r5, #4]
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068fc:	0719      	lsls	r1, r3, #28
 80068fe:	d42c      	bmi.n	800695a <__swsetup_r+0x82>
 8006900:	06dd      	lsls	r5, r3, #27
 8006902:	d411      	bmi.n	8006928 <__swsetup_r+0x50>
 8006904:	2309      	movs	r3, #9
 8006906:	6033      	str	r3, [r6, #0]
 8006908:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800690c:	81a3      	strh	r3, [r4, #12]
 800690e:	f04f 30ff 	mov.w	r0, #4294967295
 8006912:	e03e      	b.n	8006992 <__swsetup_r+0xba>
 8006914:	4b25      	ldr	r3, [pc, #148]	; (80069ac <__swsetup_r+0xd4>)
 8006916:	429c      	cmp	r4, r3
 8006918:	d101      	bne.n	800691e <__swsetup_r+0x46>
 800691a:	68ac      	ldr	r4, [r5, #8]
 800691c:	e7eb      	b.n	80068f6 <__swsetup_r+0x1e>
 800691e:	4b24      	ldr	r3, [pc, #144]	; (80069b0 <__swsetup_r+0xd8>)
 8006920:	429c      	cmp	r4, r3
 8006922:	bf08      	it	eq
 8006924:	68ec      	ldreq	r4, [r5, #12]
 8006926:	e7e6      	b.n	80068f6 <__swsetup_r+0x1e>
 8006928:	0758      	lsls	r0, r3, #29
 800692a:	d512      	bpl.n	8006952 <__swsetup_r+0x7a>
 800692c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800692e:	b141      	cbz	r1, 8006942 <__swsetup_r+0x6a>
 8006930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006934:	4299      	cmp	r1, r3
 8006936:	d002      	beq.n	800693e <__swsetup_r+0x66>
 8006938:	4630      	mov	r0, r6
 800693a:	f000 f991 	bl	8006c60 <_free_r>
 800693e:	2300      	movs	r3, #0
 8006940:	6363      	str	r3, [r4, #52]	; 0x34
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006948:	81a3      	strh	r3, [r4, #12]
 800694a:	2300      	movs	r3, #0
 800694c:	6063      	str	r3, [r4, #4]
 800694e:	6923      	ldr	r3, [r4, #16]
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	f043 0308 	orr.w	r3, r3, #8
 8006958:	81a3      	strh	r3, [r4, #12]
 800695a:	6923      	ldr	r3, [r4, #16]
 800695c:	b94b      	cbnz	r3, 8006972 <__swsetup_r+0x9a>
 800695e:	89a3      	ldrh	r3, [r4, #12]
 8006960:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006968:	d003      	beq.n	8006972 <__swsetup_r+0x9a>
 800696a:	4621      	mov	r1, r4
 800696c:	4630      	mov	r0, r6
 800696e:	f000 f92b 	bl	8006bc8 <__smakebuf_r>
 8006972:	89a0      	ldrh	r0, [r4, #12]
 8006974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006978:	f010 0301 	ands.w	r3, r0, #1
 800697c:	d00a      	beq.n	8006994 <__swsetup_r+0xbc>
 800697e:	2300      	movs	r3, #0
 8006980:	60a3      	str	r3, [r4, #8]
 8006982:	6963      	ldr	r3, [r4, #20]
 8006984:	425b      	negs	r3, r3
 8006986:	61a3      	str	r3, [r4, #24]
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	b943      	cbnz	r3, 800699e <__swsetup_r+0xc6>
 800698c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006990:	d1ba      	bne.n	8006908 <__swsetup_r+0x30>
 8006992:	bd70      	pop	{r4, r5, r6, pc}
 8006994:	0781      	lsls	r1, r0, #30
 8006996:	bf58      	it	pl
 8006998:	6963      	ldrpl	r3, [r4, #20]
 800699a:	60a3      	str	r3, [r4, #8]
 800699c:	e7f4      	b.n	8006988 <__swsetup_r+0xb0>
 800699e:	2000      	movs	r0, #0
 80069a0:	e7f7      	b.n	8006992 <__swsetup_r+0xba>
 80069a2:	bf00      	nop
 80069a4:	24000010 	.word	0x24000010
 80069a8:	08006e10 	.word	0x08006e10
 80069ac:	08006e30 	.word	0x08006e30
 80069b0:	08006df0 	.word	0x08006df0

080069b4 <_close_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	4d06      	ldr	r5, [pc, #24]	; (80069d0 <_close_r+0x1c>)
 80069b8:	2300      	movs	r3, #0
 80069ba:	4604      	mov	r4, r0
 80069bc:	4608      	mov	r0, r1
 80069be:	602b      	str	r3, [r5, #0]
 80069c0:	f7fa fb43 	bl	800104a <_close>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d102      	bne.n	80069ce <_close_r+0x1a>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	b103      	cbz	r3, 80069ce <_close_r+0x1a>
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	bd38      	pop	{r3, r4, r5, pc}
 80069d0:	24000180 	.word	0x24000180

080069d4 <__sflush_r>:
 80069d4:	898a      	ldrh	r2, [r1, #12]
 80069d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069da:	4605      	mov	r5, r0
 80069dc:	0710      	lsls	r0, r2, #28
 80069de:	460c      	mov	r4, r1
 80069e0:	d458      	bmi.n	8006a94 <__sflush_r+0xc0>
 80069e2:	684b      	ldr	r3, [r1, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	dc05      	bgt.n	80069f4 <__sflush_r+0x20>
 80069e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	dc02      	bgt.n	80069f4 <__sflush_r+0x20>
 80069ee:	2000      	movs	r0, #0
 80069f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069f6:	2e00      	cmp	r6, #0
 80069f8:	d0f9      	beq.n	80069ee <__sflush_r+0x1a>
 80069fa:	2300      	movs	r3, #0
 80069fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a00:	682f      	ldr	r7, [r5, #0]
 8006a02:	602b      	str	r3, [r5, #0]
 8006a04:	d032      	beq.n	8006a6c <__sflush_r+0x98>
 8006a06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a08:	89a3      	ldrh	r3, [r4, #12]
 8006a0a:	075a      	lsls	r2, r3, #29
 8006a0c:	d505      	bpl.n	8006a1a <__sflush_r+0x46>
 8006a0e:	6863      	ldr	r3, [r4, #4]
 8006a10:	1ac0      	subs	r0, r0, r3
 8006a12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a14:	b10b      	cbz	r3, 8006a1a <__sflush_r+0x46>
 8006a16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a18:	1ac0      	subs	r0, r0, r3
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a20:	6a21      	ldr	r1, [r4, #32]
 8006a22:	4628      	mov	r0, r5
 8006a24:	47b0      	blx	r6
 8006a26:	1c43      	adds	r3, r0, #1
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	d106      	bne.n	8006a3a <__sflush_r+0x66>
 8006a2c:	6829      	ldr	r1, [r5, #0]
 8006a2e:	291d      	cmp	r1, #29
 8006a30:	d82c      	bhi.n	8006a8c <__sflush_r+0xb8>
 8006a32:	4a2a      	ldr	r2, [pc, #168]	; (8006adc <__sflush_r+0x108>)
 8006a34:	40ca      	lsrs	r2, r1
 8006a36:	07d6      	lsls	r6, r2, #31
 8006a38:	d528      	bpl.n	8006a8c <__sflush_r+0xb8>
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	6062      	str	r2, [r4, #4]
 8006a3e:	04d9      	lsls	r1, r3, #19
 8006a40:	6922      	ldr	r2, [r4, #16]
 8006a42:	6022      	str	r2, [r4, #0]
 8006a44:	d504      	bpl.n	8006a50 <__sflush_r+0x7c>
 8006a46:	1c42      	adds	r2, r0, #1
 8006a48:	d101      	bne.n	8006a4e <__sflush_r+0x7a>
 8006a4a:	682b      	ldr	r3, [r5, #0]
 8006a4c:	b903      	cbnz	r3, 8006a50 <__sflush_r+0x7c>
 8006a4e:	6560      	str	r0, [r4, #84]	; 0x54
 8006a50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a52:	602f      	str	r7, [r5, #0]
 8006a54:	2900      	cmp	r1, #0
 8006a56:	d0ca      	beq.n	80069ee <__sflush_r+0x1a>
 8006a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a5c:	4299      	cmp	r1, r3
 8006a5e:	d002      	beq.n	8006a66 <__sflush_r+0x92>
 8006a60:	4628      	mov	r0, r5
 8006a62:	f000 f8fd 	bl	8006c60 <_free_r>
 8006a66:	2000      	movs	r0, #0
 8006a68:	6360      	str	r0, [r4, #52]	; 0x34
 8006a6a:	e7c1      	b.n	80069f0 <__sflush_r+0x1c>
 8006a6c:	6a21      	ldr	r1, [r4, #32]
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4628      	mov	r0, r5
 8006a72:	47b0      	blx	r6
 8006a74:	1c41      	adds	r1, r0, #1
 8006a76:	d1c7      	bne.n	8006a08 <__sflush_r+0x34>
 8006a78:	682b      	ldr	r3, [r5, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0c4      	beq.n	8006a08 <__sflush_r+0x34>
 8006a7e:	2b1d      	cmp	r3, #29
 8006a80:	d001      	beq.n	8006a86 <__sflush_r+0xb2>
 8006a82:	2b16      	cmp	r3, #22
 8006a84:	d101      	bne.n	8006a8a <__sflush_r+0xb6>
 8006a86:	602f      	str	r7, [r5, #0]
 8006a88:	e7b1      	b.n	80069ee <__sflush_r+0x1a>
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a90:	81a3      	strh	r3, [r4, #12]
 8006a92:	e7ad      	b.n	80069f0 <__sflush_r+0x1c>
 8006a94:	690f      	ldr	r7, [r1, #16]
 8006a96:	2f00      	cmp	r7, #0
 8006a98:	d0a9      	beq.n	80069ee <__sflush_r+0x1a>
 8006a9a:	0793      	lsls	r3, r2, #30
 8006a9c:	680e      	ldr	r6, [r1, #0]
 8006a9e:	bf08      	it	eq
 8006aa0:	694b      	ldreq	r3, [r1, #20]
 8006aa2:	600f      	str	r7, [r1, #0]
 8006aa4:	bf18      	it	ne
 8006aa6:	2300      	movne	r3, #0
 8006aa8:	eba6 0807 	sub.w	r8, r6, r7
 8006aac:	608b      	str	r3, [r1, #8]
 8006aae:	f1b8 0f00 	cmp.w	r8, #0
 8006ab2:	dd9c      	ble.n	80069ee <__sflush_r+0x1a>
 8006ab4:	6a21      	ldr	r1, [r4, #32]
 8006ab6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ab8:	4643      	mov	r3, r8
 8006aba:	463a      	mov	r2, r7
 8006abc:	4628      	mov	r0, r5
 8006abe:	47b0      	blx	r6
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	dc06      	bgt.n	8006ad2 <__sflush_r+0xfe>
 8006ac4:	89a3      	ldrh	r3, [r4, #12]
 8006ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aca:	81a3      	strh	r3, [r4, #12]
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad0:	e78e      	b.n	80069f0 <__sflush_r+0x1c>
 8006ad2:	4407      	add	r7, r0
 8006ad4:	eba8 0800 	sub.w	r8, r8, r0
 8006ad8:	e7e9      	b.n	8006aae <__sflush_r+0xda>
 8006ada:	bf00      	nop
 8006adc:	20400001 	.word	0x20400001

08006ae0 <_fflush_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	690b      	ldr	r3, [r1, #16]
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	b913      	cbnz	r3, 8006af0 <_fflush_r+0x10>
 8006aea:	2500      	movs	r5, #0
 8006aec:	4628      	mov	r0, r5
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
 8006af0:	b118      	cbz	r0, 8006afa <_fflush_r+0x1a>
 8006af2:	6983      	ldr	r3, [r0, #24]
 8006af4:	b90b      	cbnz	r3, 8006afa <_fflush_r+0x1a>
 8006af6:	f7ff fa15 	bl	8005f24 <__sinit>
 8006afa:	4b14      	ldr	r3, [pc, #80]	; (8006b4c <_fflush_r+0x6c>)
 8006afc:	429c      	cmp	r4, r3
 8006afe:	d11b      	bne.n	8006b38 <_fflush_r+0x58>
 8006b00:	686c      	ldr	r4, [r5, #4]
 8006b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d0ef      	beq.n	8006aea <_fflush_r+0xa>
 8006b0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b0c:	07d0      	lsls	r0, r2, #31
 8006b0e:	d404      	bmi.n	8006b1a <_fflush_r+0x3a>
 8006b10:	0599      	lsls	r1, r3, #22
 8006b12:	d402      	bmi.n	8006b1a <_fflush_r+0x3a>
 8006b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b16:	f7ff faa3 	bl	8006060 <__retarget_lock_acquire_recursive>
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	f7ff ff59 	bl	80069d4 <__sflush_r>
 8006b22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b24:	07da      	lsls	r2, r3, #31
 8006b26:	4605      	mov	r5, r0
 8006b28:	d4e0      	bmi.n	8006aec <_fflush_r+0xc>
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	059b      	lsls	r3, r3, #22
 8006b2e:	d4dd      	bmi.n	8006aec <_fflush_r+0xc>
 8006b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b32:	f7ff fa96 	bl	8006062 <__retarget_lock_release_recursive>
 8006b36:	e7d9      	b.n	8006aec <_fflush_r+0xc>
 8006b38:	4b05      	ldr	r3, [pc, #20]	; (8006b50 <_fflush_r+0x70>)
 8006b3a:	429c      	cmp	r4, r3
 8006b3c:	d101      	bne.n	8006b42 <_fflush_r+0x62>
 8006b3e:	68ac      	ldr	r4, [r5, #8]
 8006b40:	e7df      	b.n	8006b02 <_fflush_r+0x22>
 8006b42:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <_fflush_r+0x74>)
 8006b44:	429c      	cmp	r4, r3
 8006b46:	bf08      	it	eq
 8006b48:	68ec      	ldreq	r4, [r5, #12]
 8006b4a:	e7da      	b.n	8006b02 <_fflush_r+0x22>
 8006b4c:	08006e10 	.word	0x08006e10
 8006b50:	08006e30 	.word	0x08006e30
 8006b54:	08006df0 	.word	0x08006df0

08006b58 <_lseek_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	4d07      	ldr	r5, [pc, #28]	; (8006b78 <_lseek_r+0x20>)
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	4608      	mov	r0, r1
 8006b60:	4611      	mov	r1, r2
 8006b62:	2200      	movs	r2, #0
 8006b64:	602a      	str	r2, [r5, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	f7fa fa96 	bl	8001098 <_lseek>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d102      	bne.n	8006b76 <_lseek_r+0x1e>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	b103      	cbz	r3, 8006b76 <_lseek_r+0x1e>
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	24000180 	.word	0x24000180

08006b7c <__swhatbuf_r>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	460e      	mov	r6, r1
 8006b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b84:	2900      	cmp	r1, #0
 8006b86:	b096      	sub	sp, #88	; 0x58
 8006b88:	4614      	mov	r4, r2
 8006b8a:	461d      	mov	r5, r3
 8006b8c:	da08      	bge.n	8006ba0 <__swhatbuf_r+0x24>
 8006b8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	602a      	str	r2, [r5, #0]
 8006b96:	061a      	lsls	r2, r3, #24
 8006b98:	d410      	bmi.n	8006bbc <__swhatbuf_r+0x40>
 8006b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b9e:	e00e      	b.n	8006bbe <__swhatbuf_r+0x42>
 8006ba0:	466a      	mov	r2, sp
 8006ba2:	f000 f8bb 	bl	8006d1c <_fstat_r>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	dbf1      	blt.n	8006b8e <__swhatbuf_r+0x12>
 8006baa:	9a01      	ldr	r2, [sp, #4]
 8006bac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bb4:	425a      	negs	r2, r3
 8006bb6:	415a      	adcs	r2, r3
 8006bb8:	602a      	str	r2, [r5, #0]
 8006bba:	e7ee      	b.n	8006b9a <__swhatbuf_r+0x1e>
 8006bbc:	2340      	movs	r3, #64	; 0x40
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	b016      	add	sp, #88	; 0x58
 8006bc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006bc8 <__smakebuf_r>:
 8006bc8:	898b      	ldrh	r3, [r1, #12]
 8006bca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bcc:	079d      	lsls	r5, r3, #30
 8006bce:	4606      	mov	r6, r0
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	d507      	bpl.n	8006be4 <__smakebuf_r+0x1c>
 8006bd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	6123      	str	r3, [r4, #16]
 8006bdc:	2301      	movs	r3, #1
 8006bde:	6163      	str	r3, [r4, #20]
 8006be0:	b002      	add	sp, #8
 8006be2:	bd70      	pop	{r4, r5, r6, pc}
 8006be4:	ab01      	add	r3, sp, #4
 8006be6:	466a      	mov	r2, sp
 8006be8:	f7ff ffc8 	bl	8006b7c <__swhatbuf_r>
 8006bec:	9900      	ldr	r1, [sp, #0]
 8006bee:	4605      	mov	r5, r0
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f7ff fa57 	bl	80060a4 <_malloc_r>
 8006bf6:	b948      	cbnz	r0, 8006c0c <__smakebuf_r+0x44>
 8006bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bfc:	059a      	lsls	r2, r3, #22
 8006bfe:	d4ef      	bmi.n	8006be0 <__smakebuf_r+0x18>
 8006c00:	f023 0303 	bic.w	r3, r3, #3
 8006c04:	f043 0302 	orr.w	r3, r3, #2
 8006c08:	81a3      	strh	r3, [r4, #12]
 8006c0a:	e7e3      	b.n	8006bd4 <__smakebuf_r+0xc>
 8006c0c:	4b0d      	ldr	r3, [pc, #52]	; (8006c44 <__smakebuf_r+0x7c>)
 8006c0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	6020      	str	r0, [r4, #0]
 8006c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c18:	81a3      	strh	r3, [r4, #12]
 8006c1a:	9b00      	ldr	r3, [sp, #0]
 8006c1c:	6163      	str	r3, [r4, #20]
 8006c1e:	9b01      	ldr	r3, [sp, #4]
 8006c20:	6120      	str	r0, [r4, #16]
 8006c22:	b15b      	cbz	r3, 8006c3c <__smakebuf_r+0x74>
 8006c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f000 f889 	bl	8006d40 <_isatty_r>
 8006c2e:	b128      	cbz	r0, 8006c3c <__smakebuf_r+0x74>
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	f023 0303 	bic.w	r3, r3, #3
 8006c36:	f043 0301 	orr.w	r3, r3, #1
 8006c3a:	81a3      	strh	r3, [r4, #12]
 8006c3c:	89a0      	ldrh	r0, [r4, #12]
 8006c3e:	4305      	orrs	r5, r0
 8006c40:	81a5      	strh	r5, [r4, #12]
 8006c42:	e7cd      	b.n	8006be0 <__smakebuf_r+0x18>
 8006c44:	08005ebd 	.word	0x08005ebd

08006c48 <__malloc_lock>:
 8006c48:	4801      	ldr	r0, [pc, #4]	; (8006c50 <__malloc_lock+0x8>)
 8006c4a:	f7ff ba09 	b.w	8006060 <__retarget_lock_acquire_recursive>
 8006c4e:	bf00      	nop
 8006c50:	24000174 	.word	0x24000174

08006c54 <__malloc_unlock>:
 8006c54:	4801      	ldr	r0, [pc, #4]	; (8006c5c <__malloc_unlock+0x8>)
 8006c56:	f7ff ba04 	b.w	8006062 <__retarget_lock_release_recursive>
 8006c5a:	bf00      	nop
 8006c5c:	24000174 	.word	0x24000174

08006c60 <_free_r>:
 8006c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c62:	2900      	cmp	r1, #0
 8006c64:	d044      	beq.n	8006cf0 <_free_r+0x90>
 8006c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c6a:	9001      	str	r0, [sp, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c72:	bfb8      	it	lt
 8006c74:	18e4      	addlt	r4, r4, r3
 8006c76:	f7ff ffe7 	bl	8006c48 <__malloc_lock>
 8006c7a:	4a1e      	ldr	r2, [pc, #120]	; (8006cf4 <_free_r+0x94>)
 8006c7c:	9801      	ldr	r0, [sp, #4]
 8006c7e:	6813      	ldr	r3, [r2, #0]
 8006c80:	b933      	cbnz	r3, 8006c90 <_free_r+0x30>
 8006c82:	6063      	str	r3, [r4, #4]
 8006c84:	6014      	str	r4, [r2, #0]
 8006c86:	b003      	add	sp, #12
 8006c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c8c:	f7ff bfe2 	b.w	8006c54 <__malloc_unlock>
 8006c90:	42a3      	cmp	r3, r4
 8006c92:	d908      	bls.n	8006ca6 <_free_r+0x46>
 8006c94:	6825      	ldr	r5, [r4, #0]
 8006c96:	1961      	adds	r1, r4, r5
 8006c98:	428b      	cmp	r3, r1
 8006c9a:	bf01      	itttt	eq
 8006c9c:	6819      	ldreq	r1, [r3, #0]
 8006c9e:	685b      	ldreq	r3, [r3, #4]
 8006ca0:	1949      	addeq	r1, r1, r5
 8006ca2:	6021      	streq	r1, [r4, #0]
 8006ca4:	e7ed      	b.n	8006c82 <_free_r+0x22>
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	b10b      	cbz	r3, 8006cb0 <_free_r+0x50>
 8006cac:	42a3      	cmp	r3, r4
 8006cae:	d9fa      	bls.n	8006ca6 <_free_r+0x46>
 8006cb0:	6811      	ldr	r1, [r2, #0]
 8006cb2:	1855      	adds	r5, r2, r1
 8006cb4:	42a5      	cmp	r5, r4
 8006cb6:	d10b      	bne.n	8006cd0 <_free_r+0x70>
 8006cb8:	6824      	ldr	r4, [r4, #0]
 8006cba:	4421      	add	r1, r4
 8006cbc:	1854      	adds	r4, r2, r1
 8006cbe:	42a3      	cmp	r3, r4
 8006cc0:	6011      	str	r1, [r2, #0]
 8006cc2:	d1e0      	bne.n	8006c86 <_free_r+0x26>
 8006cc4:	681c      	ldr	r4, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	6053      	str	r3, [r2, #4]
 8006cca:	4421      	add	r1, r4
 8006ccc:	6011      	str	r1, [r2, #0]
 8006cce:	e7da      	b.n	8006c86 <_free_r+0x26>
 8006cd0:	d902      	bls.n	8006cd8 <_free_r+0x78>
 8006cd2:	230c      	movs	r3, #12
 8006cd4:	6003      	str	r3, [r0, #0]
 8006cd6:	e7d6      	b.n	8006c86 <_free_r+0x26>
 8006cd8:	6825      	ldr	r5, [r4, #0]
 8006cda:	1961      	adds	r1, r4, r5
 8006cdc:	428b      	cmp	r3, r1
 8006cde:	bf04      	itt	eq
 8006ce0:	6819      	ldreq	r1, [r3, #0]
 8006ce2:	685b      	ldreq	r3, [r3, #4]
 8006ce4:	6063      	str	r3, [r4, #4]
 8006ce6:	bf04      	itt	eq
 8006ce8:	1949      	addeq	r1, r1, r5
 8006cea:	6021      	streq	r1, [r4, #0]
 8006cec:	6054      	str	r4, [r2, #4]
 8006cee:	e7ca      	b.n	8006c86 <_free_r+0x26>
 8006cf0:	b003      	add	sp, #12
 8006cf2:	bd30      	pop	{r4, r5, pc}
 8006cf4:	24000178 	.word	0x24000178

08006cf8 <_read_r>:
 8006cf8:	b538      	push	{r3, r4, r5, lr}
 8006cfa:	4d07      	ldr	r5, [pc, #28]	; (8006d18 <_read_r+0x20>)
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	4608      	mov	r0, r1
 8006d00:	4611      	mov	r1, r2
 8006d02:	2200      	movs	r2, #0
 8006d04:	602a      	str	r2, [r5, #0]
 8006d06:	461a      	mov	r2, r3
 8006d08:	f7fa f966 	bl	8000fd8 <_read>
 8006d0c:	1c43      	adds	r3, r0, #1
 8006d0e:	d102      	bne.n	8006d16 <_read_r+0x1e>
 8006d10:	682b      	ldr	r3, [r5, #0]
 8006d12:	b103      	cbz	r3, 8006d16 <_read_r+0x1e>
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	bd38      	pop	{r3, r4, r5, pc}
 8006d18:	24000180 	.word	0x24000180

08006d1c <_fstat_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4d07      	ldr	r5, [pc, #28]	; (8006d3c <_fstat_r+0x20>)
 8006d20:	2300      	movs	r3, #0
 8006d22:	4604      	mov	r4, r0
 8006d24:	4608      	mov	r0, r1
 8006d26:	4611      	mov	r1, r2
 8006d28:	602b      	str	r3, [r5, #0]
 8006d2a:	f7fa f99a 	bl	8001062 <_fstat>
 8006d2e:	1c43      	adds	r3, r0, #1
 8006d30:	d102      	bne.n	8006d38 <_fstat_r+0x1c>
 8006d32:	682b      	ldr	r3, [r5, #0]
 8006d34:	b103      	cbz	r3, 8006d38 <_fstat_r+0x1c>
 8006d36:	6023      	str	r3, [r4, #0]
 8006d38:	bd38      	pop	{r3, r4, r5, pc}
 8006d3a:	bf00      	nop
 8006d3c:	24000180 	.word	0x24000180

08006d40 <_isatty_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4d06      	ldr	r5, [pc, #24]	; (8006d5c <_isatty_r+0x1c>)
 8006d44:	2300      	movs	r3, #0
 8006d46:	4604      	mov	r4, r0
 8006d48:	4608      	mov	r0, r1
 8006d4a:	602b      	str	r3, [r5, #0]
 8006d4c:	f7fa f999 	bl	8001082 <_isatty>
 8006d50:	1c43      	adds	r3, r0, #1
 8006d52:	d102      	bne.n	8006d5a <_isatty_r+0x1a>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	b103      	cbz	r3, 8006d5a <_isatty_r+0x1a>
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	bd38      	pop	{r3, r4, r5, pc}
 8006d5c:	24000180 	.word	0x24000180

08006d60 <_init>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	bf00      	nop
 8006d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d66:	bc08      	pop	{r3}
 8006d68:	469e      	mov	lr, r3
 8006d6a:	4770      	bx	lr

08006d6c <_fini>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	bf00      	nop
 8006d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d72:	bc08      	pop	{r3}
 8006d74:	469e      	mov	lr, r3
 8006d76:	4770      	bx	lr
