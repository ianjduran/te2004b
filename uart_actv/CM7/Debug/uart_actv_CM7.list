
uart_actv_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006168  08006168  00016168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006248  08006248  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006248  08006248  00016248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006250  08006250  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006250  08006250  00016250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006254  08006254  00016254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08006258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  24000074  080062cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000184  080062cc  00020184  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a44  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c1  00000000  00000000  00034ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  000370a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  00037f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039fd8  00000000  00000000  00038d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ea0  00000000  00000000  00072d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017a6f6  00000000  00000000  00086ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020129e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044b8  00000000  00000000  002012f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006150 	.word	0x08006150

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08006150 	.word	0x08006150

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007bc:	bf00      	nop
 80007be:	4b27      	ldr	r3, [pc, #156]	; (800085c <main+0xac>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <main+0x24>
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	60fa      	str	r2, [r7, #12]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dcf4      	bgt.n	80007be <main+0xe>
  if ( timeout < 0 )
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da01      	bge.n	80007de <main+0x2e>
  {
  Error_Handler();
 80007da:	f000 f9bd 	bl	8000b58 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 fbaf 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f83f 	bl	8000864 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <main+0xac>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4a1b      	ldr	r2, [pc, #108]	; (800085c <main+0xac>)
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <main+0xac>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000804:	2000      	movs	r0, #0
 8000806:	f000 ff0b 	bl	8001620 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f000 ff21 	bl	8001654 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000816:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000818:	bf00      	nop
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <main+0xac>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d104      	bne.n	8000830 <main+0x80>
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	60fa      	str	r2, [r7, #12]
 800082c:	2b00      	cmp	r3, #0
 800082e:	dcf4      	bgt.n	800081a <main+0x6a>
if ( timeout < 0 )
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	da01      	bge.n	800083a <main+0x8a>
{
Error_Handler();
 8000836:	f000 f98f 	bl	8000b58 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 f919 	bl	8000a70 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083e:	f000 f8cb 	bl	80009d8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000842:	f000 f889 	bl	8000958 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	unsigned int buffer = 0x55;
 8000846:	2355      	movs	r3, #85	; 0x55
 8000848:	60bb      	str	r3, [r7, #8]
  while (1)
  {

//	HAL_UART_Receive(&huart3, buffer, sizeof(buffer), HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart3, &buffer, 1, HAL_MAX_DELAY);
	printf("Hola mundo!\n\r");
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <main+0xb0>)
 800084c:	f004 fcf2 	bl	8005234 <iprintf>
	HAL_Delay(1000);
 8000850:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000854:	f000 fc06 	bl	8001064 <HAL_Delay>
  {
 8000858:	e7f7      	b.n	800084a <main+0x9a>
 800085a:	bf00      	nop
 800085c:	58024400 	.word	0x58024400
 8000860:	08006168 	.word	0x08006168

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b09c      	sub	sp, #112	; 0x70
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086e:	224c      	movs	r2, #76	; 0x4c
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f004 fcd6 	bl	8005224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2220      	movs	r2, #32
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f004 fcd0 	bl	8005224 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000884:	2004      	movs	r0, #4
 8000886:	f001 f821 	bl	80018cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b30      	ldr	r3, [pc, #192]	; (8000950 <SystemClock_Config+0xec>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	4a2f      	ldr	r2, [pc, #188]	; (8000950 <SystemClock_Config+0xec>)
 8000894:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000898:	6193      	str	r3, [r2, #24]
 800089a:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <SystemClock_Config+0xec>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <SystemClock_Config+0xf0>)
 80008a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a8:	4a2a      	ldr	r2, [pc, #168]	; (8000954 <SystemClock_Config+0xf0>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008b0:	4b28      	ldr	r3, [pc, #160]	; (8000954 <SystemClock_Config+0xf0>)
 80008b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008bc:	bf00      	nop
 80008be:	4b24      	ldr	r3, [pc, #144]	; (8000950 <SystemClock_Config+0xec>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ca:	d1f8      	bne.n	80008be <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008cc:	2301      	movs	r3, #1
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d6:	2302      	movs	r3, #2
 80008d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008da:	2302      	movs	r3, #2
 80008dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008de:	2302      	movs	r3, #2
 80008e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 80008e2:	23f0      	movs	r3, #240	; 0xf0
 80008e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008f2:	2308      	movs	r3, #8
 80008f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4618      	mov	r0, r3
 8000904:	f001 f83c 	bl	8001980 <HAL_RCC_OscConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800090e:	f000 f923 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000912:	233f      	movs	r3, #63	; 0x3f
 8000914:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000916:	2303      	movs	r3, #3
 8000918:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800091e:	2308      	movs	r3, #8
 8000920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000922:	2340      	movs	r3, #64	; 0x40
 8000924:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000926:	2340      	movs	r3, #64	; 0x40
 8000928:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800092a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2104      	movs	r1, #4
 8000938:	4618      	mov	r0, r3
 800093a:	f001 fc4f 	bl	80021dc <HAL_RCC_ClockConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000944:	f000 f908 	bl	8000b58 <Error_Handler>
  }
}
 8000948:	bf00      	nop
 800094a:	3770      	adds	r7, #112	; 0x70
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	58024800 	.word	0x58024800
 8000954:	58000400 	.word	0x58000400

08000958 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_I2C1_Init+0x74>)
 800095e:	4a1c      	ldr	r2, [pc, #112]	; (80009d0 <MX_I2C1_Init+0x78>)
 8000960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_I2C1_Init+0x74>)
 8000964:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <MX_I2C1_Init+0x7c>)
 8000966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_I2C1_Init+0x74>)
 8000970:	2201      	movs	r2, #1
 8000972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_I2C1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_I2C1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_I2C1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_I2C1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_I2C1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000992:	480e      	ldr	r0, [pc, #56]	; (80009cc <MX_I2C1_Init+0x74>)
 8000994:	f000 fe72 	bl	800167c <HAL_I2C_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800099e:	f000 f8db 	bl	8000b58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <MX_I2C1_Init+0x74>)
 80009a6:	f000 fef9 	bl	800179c <HAL_I2CEx_ConfigAnalogFilter>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009b0:	f000 f8d2 	bl	8000b58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009b4:	2100      	movs	r1, #0
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_I2C1_Init+0x74>)
 80009b8:	f000 ff3b 	bl	8001832 <HAL_I2CEx_ConfigDigitalFilter>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009c2:	f000 f8c9 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	24000090 	.word	0x24000090
 80009d0:	40005400 	.word	0x40005400
 80009d4:	307075b1 	.word	0x307075b1

080009d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009dc:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009de:	4a23      	ldr	r2, [pc, #140]	; (8000a6c <MX_USART3_UART_Init+0x94>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a22:	f003 facf 	bl	8003fc4 <HAL_UART_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a2c:	f000 f894 	bl	8000b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a30:	2100      	movs	r1, #0
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a34:	f004 fb02 	bl	800503c <HAL_UARTEx_SetTxFifoThreshold>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a3e:	f000 f88b 	bl	8000b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a46:	f004 fb37 	bl	80050b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a50:	f000 f882 	bl	8000b58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_USART3_UART_Init+0x90>)
 8000a56:	f004 fab8 	bl	8004fca <HAL_UARTEx_DisableFifoMode>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a60:	f000 f87a 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	240000dc 	.word	0x240000dc
 8000a6c:	40004800 	.word	0x40004800

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <MX_GPIO_Init+0xdc>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	4a2f      	ldr	r2, [pc, #188]	; (8000b4c <MX_GPIO_Init+0xdc>)
 8000a8e:	f043 0304 	orr.w	r3, r3, #4
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a96:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <MX_GPIO_Init+0xdc>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa4:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <MX_GPIO_Init+0xdc>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	4a28      	ldr	r2, [pc, #160]	; (8000b4c <MX_GPIO_Init+0xdc>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab4:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <MX_GPIO_Init+0xdc>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <MX_GPIO_Init+0xdc>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	4a20      	ldr	r2, [pc, #128]	; (8000b4c <MX_GPIO_Init+0xdc>)
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <MX_GPIO_Init+0xdc>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_GPIO_Init+0xdc>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae6:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <MX_GPIO_Init+0xdc>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <MX_GPIO_Init+0xdc>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af6:	f003 0308 	and.w	r3, r3, #8
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b04:	4812      	ldr	r0, [pc, #72]	; (8000b50 <MX_GPIO_Init+0xe0>)
 8000b06:	f000 fd71 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <MX_GPIO_Init+0xe4>)
 8000b20:	f000 fbb4 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b24:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_GPIO_Init+0xe0>)
 8000b3e:	f000 fba5 	bl	800128c <HAL_GPIO_Init>

}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	; 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	58024400 	.word	0x58024400
 8000b50:	58020400 	.word	0x58020400
 8000b54:	58020800 	.word	0x58020800

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <Error_Handler+0x8>
	...

08000b64 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000b6c:	1d39      	adds	r1, r7, #4
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	2201      	movs	r2, #1
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <__io_putchar+0x20>)
 8000b76:	f003 fa75 	bl	8004064 <HAL_UART_Transmit>
  return ch;
 8000b7a:	687b      	ldr	r3, [r7, #4]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	240000dc 	.word	0x240000dc

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_MspInit+0x30>)
 8000b90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b94:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_MspInit+0x30>)
 8000b96:	f043 0302 	orr.w	r3, r3, #2
 8000b9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_MspInit+0x30>)
 8000ba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	58024400 	.word	0x58024400

08000bbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0b8      	sub	sp, #224	; 0xe0
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	22bc      	movs	r2, #188	; 0xbc
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f004 fb21 	bl	8005224 <memset>
  if(hi2c->Instance==I2C1)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a24      	ldr	r2, [pc, #144]	; (8000c78 <HAL_I2C_MspInit+0xbc>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d141      	bne.n	8000c70 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bec:	2308      	movs	r3, #8
 8000bee:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf6:	f107 0310 	add.w	r3, r7, #16
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 fe7a 	bl	80028f4 <HAL_RCCEx_PeriphCLKConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c06:	f7ff ffa7 	bl	8000b58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <HAL_I2C_MspInit+0xc0>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	4a1a      	ldr	r2, [pc, #104]	; (8000c7c <HAL_I2C_MspInit+0xc0>)
 8000c12:	f043 0302 	orr.w	r3, r3, #2
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_I2C_MspInit+0xc0>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c28:	23c0      	movs	r3, #192	; 0xc0
 8000c2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2e:	2312      	movs	r3, #18
 8000c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c40:	2304      	movs	r3, #4
 8000c42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <HAL_I2C_MspInit+0xc4>)
 8000c4e:	f000 fb1d 	bl	800128c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_I2C_MspInit+0xc0>)
 8000c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c58:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <HAL_I2C_MspInit+0xc0>)
 8000c5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_I2C_MspInit+0xc0>)
 8000c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c70:	bf00      	nop
 8000c72:	37e0      	adds	r7, #224	; 0xe0
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40005400 	.word	0x40005400
 8000c7c:	58024400 	.word	0x58024400
 8000c80:	58020400 	.word	0x58020400

08000c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0b8      	sub	sp, #224	; 0xe0
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	22bc      	movs	r2, #188	; 0xbc
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f004 fabd 	bl	8005224 <memset>
  if(huart->Instance==USART3)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a25      	ldr	r2, [pc, #148]	; (8000d44 <HAL_UART_MspInit+0xc0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d142      	bne.n	8000d3a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 fe16 	bl	80028f4 <HAL_RCCEx_PeriphCLKConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cce:	f7ff ff43 	bl	8000b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <HAL_UART_MspInit+0xc4>)
 8000cd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cd8:	4a1b      	ldr	r2, [pc, #108]	; (8000d48 <HAL_UART_MspInit+0xc4>)
 8000cda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <HAL_UART_MspInit+0xc4>)
 8000ce4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_UART_MspInit+0xc4>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <HAL_UART_MspInit+0xc4>)
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_UART_MspInit+0xc4>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <HAL_UART_MspInit+0xc8>)
 8000d36:	f000 faa9 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	37e0      	adds	r7, #224	; 0xe0
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40004800 	.word	0x40004800
 8000d48:	58024400 	.word	0x58024400
 8000d4c:	58020c00 	.word	0x58020c00

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9c:	f000 f942 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	e00a      	b.n	8000dcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000db6:	f3af 8000 	nop.w
 8000dba:	4601      	mov	r1, r0
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	60ba      	str	r2, [r7, #8]
 8000dc2:	b2ca      	uxtb	r2, r1
 8000dc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	dbf0      	blt.n	8000db6 <_read+0x12>
	}

return len;
 8000dd4:	687b      	ldr	r3, [r7, #4]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	e009      	b.n	8000e04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	60ba      	str	r2, [r7, #8]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff feb3 	bl	8000b64 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3301      	adds	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dbf1      	blt.n	8000df0 <_write+0x12>
	}
	return len;
 8000e0c:	687b      	ldr	r3, [r7, #4]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_close>:

int _close(int file)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e3e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <_isatty>:

int _isatty(int file)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
	return 1;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e88:	4a14      	ldr	r2, [pc, #80]	; (8000edc <_sbrk+0x5c>)
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <_sbrk+0x60>)
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <_sbrk+0x64>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <_sbrk+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d207      	bcs.n	8000ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb0:	f004 f98e 	bl	80051d0 <__errno>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	e009      	b.n	8000ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <_sbrk+0x64>)
 8000ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	24080000 	.word	0x24080000
 8000ee0:	00000400 	.word	0x00000400
 8000ee4:	2400016c 	.word	0x2400016c
 8000ee8:	24000188 	.word	0x24000188

08000eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ef0:	f7ff fbc8 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ef6:	490d      	ldr	r1, [pc, #52]	; (8000f2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f0c:	4c0a      	ldr	r4, [pc, #40]	; (8000f38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f004 f95f 	bl	80051dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1e:	f7ff fc47 	bl	80007b0 <main>
  bx  lr
 8000f22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f24:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f2c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000f30:	08006258 	.word	0x08006258
  ldr r2, =_sbss
 8000f34:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000f38:	24000184 	.word	0x24000184

08000f3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC3_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f46:	2003      	movs	r0, #3
 8000f48:	f000 f96e 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f4c:	f001 fafc 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8000f50:	4602      	mov	r2, r0
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_Init+0x68>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	0a1b      	lsrs	r3, r3, #8
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	4913      	ldr	r1, [pc, #76]	; (8000fac <HAL_Init+0x6c>)
 8000f5e:	5ccb      	ldrb	r3, [r1, r3]
 8000f60:	f003 031f 	and.w	r3, r3, #31
 8000f64:	fa22 f303 	lsr.w	r3, r2, r3
 8000f68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_Init+0x68>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <HAL_Init+0x6c>)
 8000f74:	5cd3      	ldrb	r3, [r2, r3]
 8000f76:	f003 031f 	and.w	r3, r3, #31
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f80:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <HAL_Init+0x70>)
 8000f82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <HAL_Init+0x74>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f8a:	200f      	movs	r0, #15
 8000f8c:	f000 f814 	bl	8000fb8 <HAL_InitTick>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e002      	b.n	8000fa0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9a:	f7ff fdf5 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	58024400 	.word	0x58024400
 8000fac:	08006178 	.word	0x08006178
 8000fb0:	24000004 	.word	0x24000004
 8000fb4:	24000000 	.word	0x24000000

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_InitTick+0x60>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d101      	bne.n	8000fcc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e021      	b.n	8001010 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <HAL_InitTick+0x64>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_InitTick+0x60>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f945 	bl	8001272 <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 f91d 	bl	800123e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x68>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2400000c 	.word	0x2400000c
 800101c:	24000000 	.word	0x24000000
 8001020:	24000008 	.word	0x24000008

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	2400000c 	.word	0x2400000c
 8001048:	24000170 	.word	0x24000170

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	24000170 	.word	0x24000170

08001064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff ffee 	bl	800104c <HAL_GetTick>
 8001070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107c:	d005      	beq.n	800108a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_Delay+0x44>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800108a:	bf00      	nop
 800108c:	f7ff ffde 	bl	800104c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	429a      	cmp	r2, r3
 800109a:	d8f7      	bhi.n	800108c <HAL_Delay+0x28>
  {
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2400000c 	.word	0x2400000c

080010ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetREVID+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0c1b      	lsrs	r3, r3, #16
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	5c001000 	.word	0x5c001000

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <__NVIC_SetPriorityGrouping+0x40>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x40>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	05fa0000 	.word	0x05fa0000

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f4:	d301      	bcc.n	80011fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00f      	b.n	800121a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <SysTick_Config+0x40>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001202:	210f      	movs	r1, #15
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f7ff ff8e 	bl	8001128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <SysTick_Config+0x40>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SysTick_Config+0x40>)
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	e000e010 	.word	0xe000e010

08001228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff47 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff5e 	bl	800110c <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff90 	bl	800117c <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5f 	bl	8001128 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffb2 	bl	80011e4 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800129a:	4b89      	ldr	r3, [pc, #548]	; (80014c0 <HAL_GPIO_Init+0x234>)
 800129c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800129e:	e194      	b.n	80015ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2101      	movs	r1, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 8186 	beq.w	80015c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d005      	beq.n	80012d0 <HAL_GPIO_Init+0x44>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d130      	bne.n	8001332 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001306:	2201      	movs	r2, #1
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	f003 0201 	and.w	r2, r3, #1
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b03      	cmp	r3, #3
 800133c:	d017      	beq.n	800136e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d123      	bne.n	80013c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	08da      	lsrs	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3208      	adds	r2, #8
 8001382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	220f      	movs	r2, #15
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	691a      	ldr	r2, [r3, #16]
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	08da      	lsrs	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3208      	adds	r2, #8
 80013bc:	69b9      	ldr	r1, [r7, #24]
 80013be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	2203      	movs	r2, #3
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0203 	and.w	r2, r3, #3
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 80e0 	beq.w	80015c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001404:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <HAL_GPIO_Init+0x238>)
 8001406:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800140a:	4a2e      	ldr	r2, [pc, #184]	; (80014c4 <HAL_GPIO_Init+0x238>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <HAL_GPIO_Init+0x238>)
 8001416:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001422:	4a29      	ldr	r2, [pc, #164]	; (80014c8 <HAL_GPIO_Init+0x23c>)
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	3302      	adds	r3, #2
 800142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	220f      	movs	r2, #15
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a20      	ldr	r2, [pc, #128]	; (80014cc <HAL_GPIO_Init+0x240>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d052      	beq.n	80014f4 <HAL_GPIO_Init+0x268>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a1f      	ldr	r2, [pc, #124]	; (80014d0 <HAL_GPIO_Init+0x244>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d031      	beq.n	80014ba <HAL_GPIO_Init+0x22e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <HAL_GPIO_Init+0x248>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d02b      	beq.n	80014b6 <HAL_GPIO_Init+0x22a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <HAL_GPIO_Init+0x24c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d025      	beq.n	80014b2 <HAL_GPIO_Init+0x226>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a1c      	ldr	r2, [pc, #112]	; (80014dc <HAL_GPIO_Init+0x250>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d01f      	beq.n	80014ae <HAL_GPIO_Init+0x222>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <HAL_GPIO_Init+0x254>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d019      	beq.n	80014aa <HAL_GPIO_Init+0x21e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a1a      	ldr	r2, [pc, #104]	; (80014e4 <HAL_GPIO_Init+0x258>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d013      	beq.n	80014a6 <HAL_GPIO_Init+0x21a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a19      	ldr	r2, [pc, #100]	; (80014e8 <HAL_GPIO_Init+0x25c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d00d      	beq.n	80014a2 <HAL_GPIO_Init+0x216>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a18      	ldr	r2, [pc, #96]	; (80014ec <HAL_GPIO_Init+0x260>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d007      	beq.n	800149e <HAL_GPIO_Init+0x212>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <HAL_GPIO_Init+0x264>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d101      	bne.n	800149a <HAL_GPIO_Init+0x20e>
 8001496:	2309      	movs	r3, #9
 8001498:	e02d      	b.n	80014f6 <HAL_GPIO_Init+0x26a>
 800149a:	230a      	movs	r3, #10
 800149c:	e02b      	b.n	80014f6 <HAL_GPIO_Init+0x26a>
 800149e:	2308      	movs	r3, #8
 80014a0:	e029      	b.n	80014f6 <HAL_GPIO_Init+0x26a>
 80014a2:	2307      	movs	r3, #7
 80014a4:	e027      	b.n	80014f6 <HAL_GPIO_Init+0x26a>
 80014a6:	2306      	movs	r3, #6
 80014a8:	e025      	b.n	80014f6 <HAL_GPIO_Init+0x26a>
 80014aa:	2305      	movs	r3, #5
 80014ac:	e023      	b.n	80014f6 <HAL_GPIO_Init+0x26a>
 80014ae:	2304      	movs	r3, #4
 80014b0:	e021      	b.n	80014f6 <HAL_GPIO_Init+0x26a>
 80014b2:	2303      	movs	r3, #3
 80014b4:	e01f      	b.n	80014f6 <HAL_GPIO_Init+0x26a>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e01d      	b.n	80014f6 <HAL_GPIO_Init+0x26a>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e01b      	b.n	80014f6 <HAL_GPIO_Init+0x26a>
 80014be:	bf00      	nop
 80014c0:	58000080 	.word	0x58000080
 80014c4:	58024400 	.word	0x58024400
 80014c8:	58000400 	.word	0x58000400
 80014cc:	58020000 	.word	0x58020000
 80014d0:	58020400 	.word	0x58020400
 80014d4:	58020800 	.word	0x58020800
 80014d8:	58020c00 	.word	0x58020c00
 80014dc:	58021000 	.word	0x58021000
 80014e0:	58021400 	.word	0x58021400
 80014e4:	58021800 	.word	0x58021800
 80014e8:	58021c00 	.word	0x58021c00
 80014ec:	58022000 	.word	0x58022000
 80014f0:	58022400 	.word	0x58022400
 80014f4:	2300      	movs	r3, #0
 80014f6:	69fa      	ldr	r2, [r7, #28]
 80014f8:	f002 0203 	and.w	r2, r2, #3
 80014fc:	0092      	lsls	r2, r2, #2
 80014fe:	4093      	lsls	r3, r2
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001506:	4938      	ldr	r1, [pc, #224]	; (80015e8 <HAL_GPIO_Init+0x35c>)
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800153a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	3301      	adds	r3, #1
 80015c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	fa22 f303 	lsr.w	r3, r2, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f47f ae63 	bne.w	80012a0 <HAL_GPIO_Init+0x14>
  }
}
 80015da:	bf00      	nop
 80015dc:	bf00      	nop
 80015de:	3724      	adds	r7, #36	; 0x24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	58000400 	.word	0x58000400

080015ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
 80015f8:	4613      	mov	r3, r2
 80015fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015fc:	787b      	ldrb	r3, [r7, #1]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001608:	e003      	b.n	8001612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800160a:	887b      	ldrh	r3, [r7, #2]
 800160c:	041a      	lsls	r2, r3, #16
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	619a      	str	r2, [r3, #24]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001628:	4a08      	ldr	r2, [pc, #32]	; (800164c <HAL_HSEM_FastTake+0x2c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3320      	adds	r3, #32
 800162e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001632:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_HSEM_FastTake+0x30>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d101      	bne.n	800163c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	e000      	b.n	800163e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	58026400 	.word	0x58026400
 8001650:	80000300 	.word	0x80000300

08001654 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800165e:	4906      	ldr	r1, [pc, #24]	; (8001678 <HAL_HSEM_Release+0x24>)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	58026400 	.word	0x58026400

0800167c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e07f      	b.n	800178e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d106      	bne.n	80016a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fa8a 	bl	8000bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2224      	movs	r2, #36	; 0x24
 80016ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d107      	bne.n	80016f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	e006      	b.n	8001704 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001702:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d104      	bne.n	8001716 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001714:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6859      	ldr	r1, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <HAL_I2C_Init+0x11c>)
 8001722:	430b      	orrs	r3, r1
 8001724:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001734:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69d9      	ldr	r1, [r3, #28]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1a      	ldr	r2, [r3, #32]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2220      	movs	r2, #32
 800177a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	02008000 	.word	0x02008000

0800179c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b20      	cmp	r3, #32
 80017b0:	d138      	bne.n	8001824 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017bc:	2302      	movs	r3, #2
 80017be:	e032      	b.n	8001826 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2224      	movs	r2, #36	; 0x24
 80017cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0201 	bic.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6819      	ldr	r1, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2220      	movs	r2, #32
 8001814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	e000      	b.n	8001826 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001824:	2302      	movs	r3, #2
  }
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001832:	b480      	push	{r7}
 8001834:	b085      	sub	sp, #20
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b20      	cmp	r3, #32
 8001846:	d139      	bne.n	80018bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800184e:	2b01      	cmp	r3, #1
 8001850:	d101      	bne.n	8001856 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001852:	2302      	movs	r3, #2
 8001854:	e033      	b.n	80018be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2224      	movs	r2, #36	; 0x24
 8001862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0201 	bic.w	r2, r2, #1
 8001874:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001884:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4313      	orrs	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0201 	orr.w	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2220      	movs	r2, #32
 80018ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	e000      	b.n	80018be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018bc:	2302      	movs	r3, #2
  }
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80018d4:	4b29      	ldr	r3, [pc, #164]	; (800197c <HAL_PWREx_ConfigSupply+0xb0>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	2b06      	cmp	r3, #6
 80018de:	d00a      	beq.n	80018f6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80018e0:	4b26      	ldr	r3, [pc, #152]	; (800197c <HAL_PWREx_ConfigSupply+0xb0>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d001      	beq.n	80018f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e040      	b.n	8001974 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e03e      	b.n	8001974 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <HAL_PWREx_ConfigSupply+0xb0>)
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80018fe:	491f      	ldr	r1, [pc, #124]	; (800197c <HAL_PWREx_ConfigSupply+0xb0>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4313      	orrs	r3, r2
 8001904:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001906:	f7ff fba1 	bl	800104c <HAL_GetTick>
 800190a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800190c:	e009      	b.n	8001922 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800190e:	f7ff fb9d 	bl	800104c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800191c:	d901      	bls.n	8001922 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e028      	b.n	8001974 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <HAL_PWREx_ConfigSupply+0xb0>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800192a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800192e:	d1ee      	bne.n	800190e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b1e      	cmp	r3, #30
 8001934:	d008      	beq.n	8001948 <HAL_PWREx_ConfigSupply+0x7c>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b2e      	cmp	r3, #46	; 0x2e
 800193a:	d005      	beq.n	8001948 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b1d      	cmp	r3, #29
 8001940:	d002      	beq.n	8001948 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b2d      	cmp	r3, #45	; 0x2d
 8001946:	d114      	bne.n	8001972 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001948:	f7ff fb80 	bl	800104c <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800194e:	e009      	b.n	8001964 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001950:	f7ff fb7c 	bl	800104c <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800195e:	d901      	bls.n	8001964 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e007      	b.n	8001974 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_PWREx_ConfigSupply+0xb0>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001970:	d1ee      	bne.n	8001950 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	58024800 	.word	0x58024800

08001980 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08c      	sub	sp, #48	; 0x30
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	f000 bc1d 	b.w	80021ce <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 8087 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019a2:	4b99      	ldr	r3, [pc, #612]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019ac:	4b96      	ldr	r3, [pc, #600]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80019b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b4:	2b10      	cmp	r3, #16
 80019b6:	d007      	beq.n	80019c8 <HAL_RCC_OscConfig+0x48>
 80019b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ba:	2b18      	cmp	r3, #24
 80019bc:	d110      	bne.n	80019e0 <HAL_RCC_OscConfig+0x60>
 80019be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d10b      	bne.n	80019e0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	4b8f      	ldr	r3, [pc, #572]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d06c      	beq.n	8001aae <HAL_RCC_OscConfig+0x12e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d168      	bne.n	8001aae <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e3f6      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e8:	d106      	bne.n	80019f8 <HAL_RCC_OscConfig+0x78>
 80019ea:	4b87      	ldr	r3, [pc, #540]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a86      	ldr	r2, [pc, #536]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e02e      	b.n	8001a56 <HAL_RCC_OscConfig+0xd6>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10c      	bne.n	8001a1a <HAL_RCC_OscConfig+0x9a>
 8001a00:	4b81      	ldr	r3, [pc, #516]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a80      	ldr	r2, [pc, #512]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b7e      	ldr	r3, [pc, #504]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a7d      	ldr	r2, [pc, #500]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	e01d      	b.n	8001a56 <HAL_RCC_OscConfig+0xd6>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a22:	d10c      	bne.n	8001a3e <HAL_RCC_OscConfig+0xbe>
 8001a24:	4b78      	ldr	r3, [pc, #480]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a77      	ldr	r2, [pc, #476]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001a2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b75      	ldr	r3, [pc, #468]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a74      	ldr	r2, [pc, #464]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	e00b      	b.n	8001a56 <HAL_RCC_OscConfig+0xd6>
 8001a3e:	4b72      	ldr	r3, [pc, #456]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a71      	ldr	r2, [pc, #452]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b6f      	ldr	r3, [pc, #444]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a6e      	ldr	r2, [pc, #440]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a54:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d013      	beq.n	8001a86 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5e:	f7ff faf5 	bl	800104c <HAL_GetTick>
 8001a62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a66:	f7ff faf1 	bl	800104c <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b64      	cmp	r3, #100	; 0x64
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e3aa      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a78:	4b63      	ldr	r3, [pc, #396]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0xe6>
 8001a84:	e014      	b.n	8001ab0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff fae1 	bl	800104c <HAL_GetTick>
 8001a8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a8e:	f7ff fadd 	bl	800104c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b64      	cmp	r3, #100	; 0x64
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e396      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001aa0:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x10e>
 8001aac:	e000      	b.n	8001ab0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80cb 	beq.w	8001c54 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001abe:	4b52      	ldr	r3, [pc, #328]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ac6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ac8:	4b4f      	ldr	r3, [pc, #316]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d007      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x164>
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	2b18      	cmp	r3, #24
 8001ad8:	d156      	bne.n	8001b88 <HAL_RCC_OscConfig+0x208>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d151      	bne.n	8001b88 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae4:	4b48      	ldr	r3, [pc, #288]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_OscConfig+0x17c>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e368      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001afc:	4b42      	ldr	r3, [pc, #264]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 0219 	bic.w	r2, r3, #25
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	493f      	ldr	r1, [pc, #252]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b0e:	f7ff fa9d 	bl	800104c <HAL_GetTick>
 8001b12:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b16:	f7ff fa99 	bl	800104c <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e352      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b28:	4b37      	ldr	r3, [pc, #220]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b34:	f7ff faba 	bl	80010ac <HAL_GetREVID>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d817      	bhi.n	8001b72 <HAL_RCC_OscConfig+0x1f2>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2b40      	cmp	r3, #64	; 0x40
 8001b48:	d108      	bne.n	8001b5c <HAL_RCC_OscConfig+0x1dc>
 8001b4a:	4b2f      	ldr	r3, [pc, #188]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b52:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b58:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b5a:	e07b      	b.n	8001c54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	031b      	lsls	r3, r3, #12
 8001b6a:	4927      	ldr	r1, [pc, #156]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b70:	e070      	b.n	8001c54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b72:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	061b      	lsls	r3, r3, #24
 8001b80:	4921      	ldr	r1, [pc, #132]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b86:	e065      	b.n	8001c54 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d048      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f023 0219 	bic.w	r2, r3, #25
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	491a      	ldr	r1, [pc, #104]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fa53 	bl	800104c <HAL_GetTick>
 8001ba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001baa:	f7ff fa4f 	bl	800104c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e308      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	f7ff fa70 	bl	80010ac <HAL_GetREVID>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d81a      	bhi.n	8001c0c <HAL_RCC_OscConfig+0x28c>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b40      	cmp	r3, #64	; 0x40
 8001bdc:	d108      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x270>
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001be6:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bec:	6053      	str	r3, [r2, #4]
 8001bee:	e031      	b.n	8001c54 <HAL_RCC_OscConfig+0x2d4>
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	031b      	lsls	r3, r3, #12
 8001bfe:	4902      	ldr	r1, [pc, #8]	; (8001c08 <HAL_RCC_OscConfig+0x288>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
 8001c04:	e026      	b.n	8001c54 <HAL_RCC_OscConfig+0x2d4>
 8001c06:	bf00      	nop
 8001c08:	58024400 	.word	0x58024400
 8001c0c:	4b9a      	ldr	r3, [pc, #616]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	061b      	lsls	r3, r3, #24
 8001c1a:	4997      	ldr	r1, [pc, #604]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
 8001c20:	e018      	b.n	8001c54 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c22:	4b95      	ldr	r3, [pc, #596]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a94      	ldr	r2, [pc, #592]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2e:	f7ff fa0d 	bl	800104c <HAL_GetTick>
 8001c32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c36:	f7ff fa09 	bl	800104c <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e2c2      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c48:	4b8b      	ldr	r3, [pc, #556]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f0      	bne.n	8001c36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80a9 	beq.w	8001db4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c62:	4b85      	ldr	r3, [pc, #532]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c6c:	4b82      	ldr	r3, [pc, #520]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d007      	beq.n	8001c88 <HAL_RCC_OscConfig+0x308>
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b18      	cmp	r3, #24
 8001c7c:	d13a      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x374>
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d135      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c88:	4b7b      	ldr	r3, [pc, #492]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x320>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b80      	cmp	r3, #128	; 0x80
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e296      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ca0:	f7ff fa04 	bl	80010ac <HAL_GetREVID>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f241 0203 	movw	r2, #4099	; 0x1003
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d817      	bhi.n	8001cde <HAL_RCC_OscConfig+0x35e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	d108      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x348>
 8001cb6:	4b70      	ldr	r3, [pc, #448]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001cbe:	4a6e      	ldr	r2, [pc, #440]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001cc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cc4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cc6:	e075      	b.n	8001db4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cc8:	4b6b      	ldr	r3, [pc, #428]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	069b      	lsls	r3, r3, #26
 8001cd6:	4968      	ldr	r1, [pc, #416]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cdc:	e06a      	b.n	8001db4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cde:	4b66      	ldr	r3, [pc, #408]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	061b      	lsls	r3, r3, #24
 8001cec:	4962      	ldr	r1, [pc, #392]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cf2:	e05f      	b.n	8001db4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d042      	beq.n	8001d82 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001cfc:	4b5e      	ldr	r3, [pc, #376]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a5d      	ldr	r2, [pc, #372]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff f9a0 	bl	800104c <HAL_GetTick>
 8001d0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d10:	f7ff f99c 	bl	800104c <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e255      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d22:	4b55      	ldr	r3, [pc, #340]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d2e:	f7ff f9bd 	bl	80010ac <HAL_GetREVID>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d817      	bhi.n	8001d6c <HAL_RCC_OscConfig+0x3ec>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	2b20      	cmp	r3, #32
 8001d42:	d108      	bne.n	8001d56 <HAL_RCC_OscConfig+0x3d6>
 8001d44:	4b4c      	ldr	r3, [pc, #304]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d4c:	4a4a      	ldr	r2, [pc, #296]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001d4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d52:	6053      	str	r3, [r2, #4]
 8001d54:	e02e      	b.n	8001db4 <HAL_RCC_OscConfig+0x434>
 8001d56:	4b48      	ldr	r3, [pc, #288]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	069b      	lsls	r3, r3, #26
 8001d64:	4944      	ldr	r1, [pc, #272]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
 8001d6a:	e023      	b.n	8001db4 <HAL_RCC_OscConfig+0x434>
 8001d6c:	4b42      	ldr	r3, [pc, #264]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	061b      	lsls	r3, r3, #24
 8001d7a:	493f      	ldr	r1, [pc, #252]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60cb      	str	r3, [r1, #12]
 8001d80:	e018      	b.n	8001db4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d82:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a3c      	ldr	r2, [pc, #240]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001d88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7ff f95d 	bl	800104c <HAL_GetTick>
 8001d92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d96:	f7ff f959 	bl	800104c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e212      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001da8:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f0      	bne.n	8001d96 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d036      	beq.n	8001e2e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d019      	beq.n	8001dfc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dcc:	4a2a      	ldr	r2, [pc, #168]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7ff f93a 	bl	800104c <HAL_GetTick>
 8001dd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ddc:	f7ff f936 	bl	800104c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1ef      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dee:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x45c>
 8001dfa:	e018      	b.n	8001e2e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e00:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e08:	f7ff f920 	bl	800104c <HAL_GetTick>
 8001e0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e10:	f7ff f91c 	bl	800104c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1d5      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d039      	beq.n	8001eae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01c      	beq.n	8001e7c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001e48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e4e:	f7ff f8fd 	bl	800104c <HAL_GetTick>
 8001e52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e56:	f7ff f8f9 	bl	800104c <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e1b2      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <HAL_RCC_OscConfig+0x4f8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x4d6>
 8001e74:	e01b      	b.n	8001eae <HAL_RCC_OscConfig+0x52e>
 8001e76:	bf00      	nop
 8001e78:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e7c:	4b9b      	ldr	r3, [pc, #620]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a9a      	ldr	r2, [pc, #616]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e88:	f7ff f8e0 	bl	800104c <HAL_GetTick>
 8001e8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e90:	f7ff f8dc 	bl	800104c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e195      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ea2:	4b92      	ldr	r3, [pc, #584]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8081 	beq.w	8001fbe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ebc:	4b8c      	ldr	r3, [pc, #560]	; (80020f0 <HAL_RCC_OscConfig+0x770>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a8b      	ldr	r2, [pc, #556]	; (80020f0 <HAL_RCC_OscConfig+0x770>)
 8001ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ec8:	f7ff f8c0 	bl	800104c <HAL_GetTick>
 8001ecc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ed0:	f7ff f8bc 	bl	800104c <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e175      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ee2:	4b83      	ldr	r3, [pc, #524]	; (80020f0 <HAL_RCC_OscConfig+0x770>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d106      	bne.n	8001f04 <HAL_RCC_OscConfig+0x584>
 8001ef6:	4b7d      	ldr	r3, [pc, #500]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efa:	4a7c      	ldr	r2, [pc, #496]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6713      	str	r3, [r2, #112]	; 0x70
 8001f02:	e02d      	b.n	8001f60 <HAL_RCC_OscConfig+0x5e0>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10c      	bne.n	8001f26 <HAL_RCC_OscConfig+0x5a6>
 8001f0c:	4b77      	ldr	r3, [pc, #476]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f10:	4a76      	ldr	r2, [pc, #472]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001f12:	f023 0301 	bic.w	r3, r3, #1
 8001f16:	6713      	str	r3, [r2, #112]	; 0x70
 8001f18:	4b74      	ldr	r3, [pc, #464]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1c:	4a73      	ldr	r2, [pc, #460]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001f1e:	f023 0304 	bic.w	r3, r3, #4
 8001f22:	6713      	str	r3, [r2, #112]	; 0x70
 8001f24:	e01c      	b.n	8001f60 <HAL_RCC_OscConfig+0x5e0>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x5c8>
 8001f2e:	4b6f      	ldr	r3, [pc, #444]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f32:	4a6e      	ldr	r2, [pc, #440]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3a:	4b6c      	ldr	r3, [pc, #432]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	4a6b      	ldr	r2, [pc, #428]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6713      	str	r3, [r2, #112]	; 0x70
 8001f46:	e00b      	b.n	8001f60 <HAL_RCC_OscConfig+0x5e0>
 8001f48:	4b68      	ldr	r3, [pc, #416]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	4a67      	ldr	r2, [pc, #412]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001f4e:	f023 0301 	bic.w	r3, r3, #1
 8001f52:	6713      	str	r3, [r2, #112]	; 0x70
 8001f54:	4b65      	ldr	r3, [pc, #404]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	4a64      	ldr	r2, [pc, #400]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001f5a:	f023 0304 	bic.w	r3, r3, #4
 8001f5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d015      	beq.n	8001f94 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7ff f870 	bl	800104c <HAL_GetTick>
 8001f6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f70:	f7ff f86c 	bl	800104c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e123      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f86:	4b59      	ldr	r3, [pc, #356]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0ee      	beq.n	8001f70 <HAL_RCC_OscConfig+0x5f0>
 8001f92:	e014      	b.n	8001fbe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7ff f85a 	bl	800104c <HAL_GetTick>
 8001f98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9c:	f7ff f856 	bl	800104c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e10d      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fb2:	4b4e      	ldr	r3, [pc, #312]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1ee      	bne.n	8001f9c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8102 	beq.w	80021cc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001fc8:	4b48      	ldr	r3, [pc, #288]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fd0:	2b18      	cmp	r3, #24
 8001fd2:	f000 80bd 	beq.w	8002150 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	f040 809e 	bne.w	800211c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe0:	4b42      	ldr	r3, [pc, #264]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a41      	ldr	r2, [pc, #260]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8001fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7ff f82e 	bl	800104c <HAL_GetTick>
 8001ff0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7ff f82a 	bl	800104c <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e0e3      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002006:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002012:	4b36      	ldr	r3, [pc, #216]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8002014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002016:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <HAL_RCC_OscConfig+0x774>)
 8002018:	4013      	ands	r3, r2
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	430a      	orrs	r2, r1
 8002026:	4931      	ldr	r1, [pc, #196]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8002028:	4313      	orrs	r3, r2
 800202a:	628b      	str	r3, [r1, #40]	; 0x28
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	3b01      	subs	r3, #1
 8002032:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203a:	3b01      	subs	r3, #1
 800203c:	025b      	lsls	r3, r3, #9
 800203e:	b29b      	uxth	r3, r3
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002046:	3b01      	subs	r3, #1
 8002048:	041b      	lsls	r3, r3, #16
 800204a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002054:	3b01      	subs	r3, #1
 8002056:	061b      	lsls	r3, r3, #24
 8002058:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800205c:	4923      	ldr	r1, [pc, #140]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 800205e:	4313      	orrs	r3, r2
 8002060:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002062:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	4a21      	ldr	r2, [pc, #132]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800206e:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8002070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002072:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <HAL_RCC_OscConfig+0x778>)
 8002074:	4013      	ands	r3, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800207a:	00d2      	lsls	r2, r2, #3
 800207c:	491b      	ldr	r1, [pc, #108]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 800207e:	4313      	orrs	r3, r2
 8002080:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002082:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8002084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002086:	f023 020c 	bic.w	r2, r3, #12
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4917      	ldr	r1, [pc, #92]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8002090:	4313      	orrs	r3, r2
 8002092:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002094:	4b15      	ldr	r3, [pc, #84]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	f023 0202 	bic.w	r2, r3, #2
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	4912      	ldr	r1, [pc, #72]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	4a10      	ldr	r2, [pc, #64]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 80020b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 80020c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	4a07      	ldr	r2, [pc, #28]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_RCC_OscConfig+0x76c>)
 80020dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7fe ffb3 	bl	800104c <HAL_GetTick>
 80020e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020e8:	e011      	b.n	800210e <HAL_RCC_OscConfig+0x78e>
 80020ea:	bf00      	nop
 80020ec:	58024400 	.word	0x58024400
 80020f0:	58024800 	.word	0x58024800
 80020f4:	fffffc0c 	.word	0xfffffc0c
 80020f8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fc:	f7fe ffa6 	bl	800104c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e05f      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800210e:	4b32      	ldr	r3, [pc, #200]	; (80021d8 <HAL_RCC_OscConfig+0x858>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0x77c>
 800211a:	e057      	b.n	80021cc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211c:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <HAL_RCC_OscConfig+0x858>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a2d      	ldr	r2, [pc, #180]	; (80021d8 <HAL_RCC_OscConfig+0x858>)
 8002122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7fe ff90 	bl	800104c <HAL_GetTick>
 800212c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002130:	f7fe ff8c 	bl	800104c <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e045      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002142:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <HAL_RCC_OscConfig+0x858>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x7b0>
 800214e:	e03d      	b.n	80021cc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002150:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <HAL_RCC_OscConfig+0x858>)
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <HAL_RCC_OscConfig+0x858>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	2b01      	cmp	r3, #1
 8002162:	d031      	beq.n	80021c8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f003 0203 	and.w	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d12a      	bne.n	80021c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217e:	429a      	cmp	r2, r3
 8002180:	d122      	bne.n	80021c8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800218e:	429a      	cmp	r2, r3
 8002190:	d11a      	bne.n	80021c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	0a5b      	lsrs	r3, r3, #9
 8002196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d111      	bne.n	80021c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	0c1b      	lsrs	r3, r3, #16
 80021a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d108      	bne.n	80021c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	0e1b      	lsrs	r3, r3, #24
 80021ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3730      	adds	r7, #48	; 0x30
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	58024400 	.word	0x58024400

080021dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e19c      	b.n	800252a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f0:	4b8a      	ldr	r3, [pc, #552]	; (800241c <HAL_RCC_ClockConfig+0x240>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 030f 	and.w	r3, r3, #15
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d910      	bls.n	8002220 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b87      	ldr	r3, [pc, #540]	; (800241c <HAL_RCC_ClockConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 020f 	bic.w	r2, r3, #15
 8002206:	4985      	ldr	r1, [pc, #532]	; (800241c <HAL_RCC_ClockConfig+0x240>)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b83      	ldr	r3, [pc, #524]	; (800241c <HAL_RCC_ClockConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d001      	beq.n	8002220 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e184      	b.n	800252a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d010      	beq.n	800224e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	4b7b      	ldr	r3, [pc, #492]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002238:	429a      	cmp	r2, r3
 800223a:	d908      	bls.n	800224e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800223c:	4b78      	ldr	r3, [pc, #480]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	4975      	ldr	r1, [pc, #468]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 800224a:	4313      	orrs	r3, r2
 800224c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d010      	beq.n	800227c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	4b70      	ldr	r3, [pc, #448]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002266:	429a      	cmp	r2, r3
 8002268:	d908      	bls.n	800227c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800226a:	4b6d      	ldr	r3, [pc, #436]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	496a      	ldr	r1, [pc, #424]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 8002278:	4313      	orrs	r3, r2
 800227a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	d010      	beq.n	80022aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	4b64      	ldr	r3, [pc, #400]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002294:	429a      	cmp	r2, r3
 8002296:	d908      	bls.n	80022aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002298:	4b61      	ldr	r3, [pc, #388]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	495e      	ldr	r1, [pc, #376]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d010      	beq.n	80022d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69da      	ldr	r2, [r3, #28]
 80022ba:	4b59      	ldr	r3, [pc, #356]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d908      	bls.n	80022d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022c6:	4b56      	ldr	r3, [pc, #344]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	4953      	ldr	r1, [pc, #332]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d010      	beq.n	8002306 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	4b4d      	ldr	r3, [pc, #308]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d908      	bls.n	8002306 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f4:	4b4a      	ldr	r3, [pc, #296]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f023 020f 	bic.w	r2, r3, #15
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4947      	ldr	r1, [pc, #284]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 8002302:	4313      	orrs	r3, r2
 8002304:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d055      	beq.n	80023be <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002312:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	4940      	ldr	r1, [pc, #256]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 8002320:	4313      	orrs	r3, r2
 8002322:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d107      	bne.n	800233c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800232c:	4b3c      	ldr	r3, [pc, #240]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d121      	bne.n	800237c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0f6      	b.n	800252a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d107      	bne.n	8002354 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002344:	4b36      	ldr	r3, [pc, #216]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d115      	bne.n	800237c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0ea      	b.n	800252a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d107      	bne.n	800236c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800235c:	4b30      	ldr	r3, [pc, #192]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002364:	2b00      	cmp	r3, #0
 8002366:	d109      	bne.n	800237c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0de      	b.n	800252a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800236c:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0d6      	b.n	800252a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800237c:	4b28      	ldr	r3, [pc, #160]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	f023 0207 	bic.w	r2, r3, #7
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4925      	ldr	r1, [pc, #148]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 800238a:	4313      	orrs	r3, r2
 800238c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238e:	f7fe fe5d 	bl	800104c <HAL_GetTick>
 8002392:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002394:	e00a      	b.n	80023ac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002396:	f7fe fe59 	bl	800104c <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e0be      	b.n	800252a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ac:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d1eb      	bne.n	8002396 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d010      	beq.n	80023ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d208      	bcs.n	80023ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f023 020f 	bic.w	r2, r3, #15
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	490e      	ldr	r1, [pc, #56]	; (8002420 <HAL_RCC_ClockConfig+0x244>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_ClockConfig+0x240>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d214      	bcs.n	8002424 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_RCC_ClockConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 020f 	bic.w	r2, r3, #15
 8002402:	4906      	ldr	r1, [pc, #24]	; (800241c <HAL_RCC_ClockConfig+0x240>)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b04      	ldr	r3, [pc, #16]	; (800241c <HAL_RCC_ClockConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d005      	beq.n	8002424 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e086      	b.n	800252a <HAL_RCC_ClockConfig+0x34e>
 800241c:	52002000 	.word	0x52002000
 8002420:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d010      	beq.n	8002452 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	4b3f      	ldr	r3, [pc, #252]	; (8002534 <HAL_RCC_ClockConfig+0x358>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800243c:	429a      	cmp	r2, r3
 800243e:	d208      	bcs.n	8002452 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002440:	4b3c      	ldr	r3, [pc, #240]	; (8002534 <HAL_RCC_ClockConfig+0x358>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	4939      	ldr	r1, [pc, #228]	; (8002534 <HAL_RCC_ClockConfig+0x358>)
 800244e:	4313      	orrs	r3, r2
 8002450:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d010      	beq.n	8002480 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	4b34      	ldr	r3, [pc, #208]	; (8002534 <HAL_RCC_ClockConfig+0x358>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800246a:	429a      	cmp	r2, r3
 800246c:	d208      	bcs.n	8002480 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800246e:	4b31      	ldr	r3, [pc, #196]	; (8002534 <HAL_RCC_ClockConfig+0x358>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	492e      	ldr	r1, [pc, #184]	; (8002534 <HAL_RCC_ClockConfig+0x358>)
 800247c:	4313      	orrs	r3, r2
 800247e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	2b00      	cmp	r3, #0
 800248a:	d010      	beq.n	80024ae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699a      	ldr	r2, [r3, #24]
 8002490:	4b28      	ldr	r3, [pc, #160]	; (8002534 <HAL_RCC_ClockConfig+0x358>)
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002498:	429a      	cmp	r2, r3
 800249a:	d208      	bcs.n	80024ae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800249c:	4b25      	ldr	r3, [pc, #148]	; (8002534 <HAL_RCC_ClockConfig+0x358>)
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	4922      	ldr	r1, [pc, #136]	; (8002534 <HAL_RCC_ClockConfig+0x358>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0320 	and.w	r3, r3, #32
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d010      	beq.n	80024dc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_RCC_ClockConfig+0x358>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d208      	bcs.n	80024dc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80024ca:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <HAL_RCC_ClockConfig+0x358>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	4917      	ldr	r1, [pc, #92]	; (8002534 <HAL_RCC_ClockConfig+0x358>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024dc:	f000 f834 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <HAL_RCC_ClockConfig+0x358>)
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	4912      	ldr	r1, [pc, #72]	; (8002538 <HAL_RCC_ClockConfig+0x35c>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
 80024f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <HAL_RCC_ClockConfig+0x358>)
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	4a0d      	ldr	r2, [pc, #52]	; (8002538 <HAL_RCC_ClockConfig+0x35c>)
 8002504:	5cd3      	ldrb	r3, [r2, r3]
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	4a0a      	ldr	r2, [pc, #40]	; (800253c <HAL_RCC_ClockConfig+0x360>)
 8002512:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <HAL_RCC_ClockConfig+0x364>)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <HAL_RCC_ClockConfig+0x368>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe fd4a 	bl	8000fb8 <HAL_InitTick>
 8002524:	4603      	mov	r3, r0
 8002526:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002528:	7bfb      	ldrb	r3, [r7, #15]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	58024400 	.word	0x58024400
 8002538:	08006178 	.word	0x08006178
 800253c:	24000004 	.word	0x24000004
 8002540:	24000000 	.word	0x24000000
 8002544:	24000008 	.word	0x24000008

08002548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b089      	sub	sp, #36	; 0x24
 800254c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800254e:	4bb3      	ldr	r3, [pc, #716]	; (800281c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002556:	2b18      	cmp	r3, #24
 8002558:	f200 8155 	bhi.w	8002806 <HAL_RCC_GetSysClockFreq+0x2be>
 800255c:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <HAL_RCC_GetSysClockFreq+0x1c>)
 800255e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002562:	bf00      	nop
 8002564:	080025c9 	.word	0x080025c9
 8002568:	08002807 	.word	0x08002807
 800256c:	08002807 	.word	0x08002807
 8002570:	08002807 	.word	0x08002807
 8002574:	08002807 	.word	0x08002807
 8002578:	08002807 	.word	0x08002807
 800257c:	08002807 	.word	0x08002807
 8002580:	08002807 	.word	0x08002807
 8002584:	080025ef 	.word	0x080025ef
 8002588:	08002807 	.word	0x08002807
 800258c:	08002807 	.word	0x08002807
 8002590:	08002807 	.word	0x08002807
 8002594:	08002807 	.word	0x08002807
 8002598:	08002807 	.word	0x08002807
 800259c:	08002807 	.word	0x08002807
 80025a0:	08002807 	.word	0x08002807
 80025a4:	080025f5 	.word	0x080025f5
 80025a8:	08002807 	.word	0x08002807
 80025ac:	08002807 	.word	0x08002807
 80025b0:	08002807 	.word	0x08002807
 80025b4:	08002807 	.word	0x08002807
 80025b8:	08002807 	.word	0x08002807
 80025bc:	08002807 	.word	0x08002807
 80025c0:	08002807 	.word	0x08002807
 80025c4:	080025fb 	.word	0x080025fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025c8:	4b94      	ldr	r3, [pc, #592]	; (800281c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d009      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025d4:	4b91      	ldr	r3, [pc, #580]	; (800281c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	08db      	lsrs	r3, r3, #3
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	4a90      	ldr	r2, [pc, #576]	; (8002820 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
 80025e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80025e6:	e111      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80025e8:	4b8d      	ldr	r3, [pc, #564]	; (8002820 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025ea:	61bb      	str	r3, [r7, #24]
    break;
 80025ec:	e10e      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80025ee:	4b8d      	ldr	r3, [pc, #564]	; (8002824 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025f0:	61bb      	str	r3, [r7, #24]
    break;
 80025f2:	e10b      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80025f4:	4b8c      	ldr	r3, [pc, #560]	; (8002828 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80025f6:	61bb      	str	r3, [r7, #24]
    break;
 80025f8:	e108      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025fa:	4b88      	ldr	r3, [pc, #544]	; (800281c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002604:	4b85      	ldr	r3, [pc, #532]	; (800281c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800260e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002610:	4b82      	ldr	r3, [pc, #520]	; (800281c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800261a:	4b80      	ldr	r3, [pc, #512]	; (800281c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800261c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261e:	08db      	lsrs	r3, r3, #3
 8002620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	ee07 3a90 	vmov	s15, r3
 800262e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002632:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80e1 	beq.w	8002800 <HAL_RCC_GetSysClockFreq+0x2b8>
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b02      	cmp	r3, #2
 8002642:	f000 8083 	beq.w	800274c <HAL_RCC_GetSysClockFreq+0x204>
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2b02      	cmp	r3, #2
 800264a:	f200 80a1 	bhi.w	8002790 <HAL_RCC_GetSysClockFreq+0x248>
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x114>
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d056      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0x1c0>
 800265a:	e099      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800265c:	4b6f      	ldr	r3, [pc, #444]	; (800281c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	2b00      	cmp	r3, #0
 8002666:	d02d      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002668:	4b6c      	ldr	r3, [pc, #432]	; (800281c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	08db      	lsrs	r3, r3, #3
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	4a6b      	ldr	r2, [pc, #428]	; (8002820 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
 8002678:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	ee07 3a90 	vmov	s15, r3
 8002680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	ee07 3a90 	vmov	s15, r3
 800268a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800268e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002692:	4b62      	ldr	r3, [pc, #392]	; (800281c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80026a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800282c <HAL_RCC_GetSysClockFreq+0x2e4>
 80026aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80026c2:	e087      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002830 <HAL_RCC_GetSysClockFreq+0x2e8>
 80026d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026d6:	4b51      	ldr	r3, [pc, #324]	; (800281c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026de:	ee07 3a90 	vmov	s15, r3
 80026e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800282c <HAL_RCC_GetSysClockFreq+0x2e4>
 80026ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002706:	e065      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	ee07 3a90 	vmov	s15, r3
 800270e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002712:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002834 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800271a:	4b40      	ldr	r3, [pc, #256]	; (800281c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002722:	ee07 3a90 	vmov	s15, r3
 8002726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800272a:	ed97 6a02 	vldr	s12, [r7, #8]
 800272e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800282c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800273a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800273e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800274a:	e043      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	ee07 3a90 	vmov	s15, r3
 8002752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002756:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002838 <HAL_RCC_GetSysClockFreq+0x2f0>
 800275a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800275e:	4b2f      	ldr	r3, [pc, #188]	; (800281c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800276e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002772:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800282c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800277a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800277e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800278e:	e021      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002834 <HAL_RCC_GetSysClockFreq+0x2ec>
 800279e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a2:	4b1e      	ldr	r3, [pc, #120]	; (800281c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800282c <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027d2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80027d4:	4b11      	ldr	r3, [pc, #68]	; (800281c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	0a5b      	lsrs	r3, r3, #9
 80027da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027de:	3301      	adds	r3, #1
 80027e0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	ee07 3a90 	vmov	s15, r3
 80027e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80027f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027f8:	ee17 3a90 	vmov	r3, s15
 80027fc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80027fe:	e005      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
    break;
 8002804:	e002      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002808:	61bb      	str	r3, [r7, #24]
    break;
 800280a:	bf00      	nop
  }

  return sysclockfreq;
 800280c:	69bb      	ldr	r3, [r7, #24]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3724      	adds	r7, #36	; 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	58024400 	.word	0x58024400
 8002820:	03d09000 	.word	0x03d09000
 8002824:	003d0900 	.word	0x003d0900
 8002828:	007a1200 	.word	0x007a1200
 800282c:	46000000 	.word	0x46000000
 8002830:	4c742400 	.word	0x4c742400
 8002834:	4a742400 	.word	0x4a742400
 8002838:	4af42400 	.word	0x4af42400

0800283c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002842:	f7ff fe81 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8002846:	4602      	mov	r2, r0
 8002848:	4b10      	ldr	r3, [pc, #64]	; (800288c <HAL_RCC_GetHCLKFreq+0x50>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	490f      	ldr	r1, [pc, #60]	; (8002890 <HAL_RCC_GetHCLKFreq+0x54>)
 8002854:	5ccb      	ldrb	r3, [r1, r3]
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	fa22 f303 	lsr.w	r3, r2, r3
 800285e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002860:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_RCC_GetHCLKFreq+0x50>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	4a09      	ldr	r2, [pc, #36]	; (8002890 <HAL_RCC_GetHCLKFreq+0x54>)
 800286a:	5cd3      	ldrb	r3, [r2, r3]
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	fa22 f303 	lsr.w	r3, r2, r3
 8002876:	4a07      	ldr	r2, [pc, #28]	; (8002894 <HAL_RCC_GetHCLKFreq+0x58>)
 8002878:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800287a:	4a07      	ldr	r2, [pc, #28]	; (8002898 <HAL_RCC_GetHCLKFreq+0x5c>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <HAL_RCC_GetHCLKFreq+0x58>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	58024400 	.word	0x58024400
 8002890:	08006178 	.word	0x08006178
 8002894:	24000004 	.word	0x24000004
 8002898:	24000000 	.word	0x24000000

0800289c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80028a0:	f7ff ffcc 	bl	800283c <HAL_RCC_GetHCLKFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	4904      	ldr	r1, [pc, #16]	; (80028c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	58024400 	.word	0x58024400
 80028c4:	08006178 	.word	0x08006178

080028c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80028cc:	f7ff ffb6 	bl	800283c <HAL_RCC_GetHCLKFreq>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	0a1b      	lsrs	r3, r3, #8
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	4904      	ldr	r1, [pc, #16]	; (80028f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028de:	5ccb      	ldrb	r3, [r1, r3]
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	58024400 	.word	0x58024400
 80028f0:	08006178 	.word	0x08006178

080028f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028fc:	2300      	movs	r3, #0
 80028fe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002900:	2300      	movs	r3, #0
 8002902:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d03f      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002914:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002918:	d02a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800291a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800291e:	d824      	bhi.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002920:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002924:	d018      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800292a:	d81e      	bhi.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002930:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002934:	d007      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002936:	e018      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002938:	4ba3      	ldr	r3, [pc, #652]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	4aa2      	ldr	r2, [pc, #648]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800293e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002942:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002944:	e015      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3304      	adds	r3, #4
 800294a:	2102      	movs	r1, #2
 800294c:	4618      	mov	r0, r3
 800294e:	f001 f9d5 	bl	8003cfc <RCCEx_PLL2_Config>
 8002952:	4603      	mov	r3, r0
 8002954:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002956:	e00c      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3324      	adds	r3, #36	; 0x24
 800295c:	2102      	movs	r1, #2
 800295e:	4618      	mov	r0, r3
 8002960:	f001 fa7e 	bl	8003e60 <RCCEx_PLL3_Config>
 8002964:	4603      	mov	r3, r0
 8002966:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002968:	e003      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	75fb      	strb	r3, [r7, #23]
      break;
 800296e:	e000      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002972:	7dfb      	ldrb	r3, [r7, #23]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d109      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002978:	4b93      	ldr	r3, [pc, #588]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800297a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002984:	4990      	ldr	r1, [pc, #576]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	650b      	str	r3, [r1, #80]	; 0x50
 800298a:	e001      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d03d      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d826      	bhi.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80029a4:	a201      	add	r2, pc, #4	; (adr r2, 80029ac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80029a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029aa:	bf00      	nop
 80029ac:	080029c1 	.word	0x080029c1
 80029b0:	080029cf 	.word	0x080029cf
 80029b4:	080029e1 	.word	0x080029e1
 80029b8:	080029f9 	.word	0x080029f9
 80029bc:	080029f9 	.word	0x080029f9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c0:	4b81      	ldr	r3, [pc, #516]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	4a80      	ldr	r2, [pc, #512]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029cc:	e015      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3304      	adds	r3, #4
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f001 f991 	bl	8003cfc <RCCEx_PLL2_Config>
 80029da:	4603      	mov	r3, r0
 80029dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029de:	e00c      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3324      	adds	r3, #36	; 0x24
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f001 fa3a 	bl	8003e60 <RCCEx_PLL3_Config>
 80029ec:	4603      	mov	r3, r0
 80029ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029f0:	e003      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	75fb      	strb	r3, [r7, #23]
      break;
 80029f6:	e000      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80029f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d109      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a00:	4b71      	ldr	r3, [pc, #452]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a04:	f023 0207 	bic.w	r2, r3, #7
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	496e      	ldr	r1, [pc, #440]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	650b      	str	r3, [r1, #80]	; 0x50
 8002a12:	e001      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
 8002a16:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d042      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2c:	d02b      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a32:	d825      	bhi.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a34:	2bc0      	cmp	r3, #192	; 0xc0
 8002a36:	d028      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002a38:	2bc0      	cmp	r3, #192	; 0xc0
 8002a3a:	d821      	bhi.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d016      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002a40:	2b80      	cmp	r3, #128	; 0x80
 8002a42:	d81d      	bhi.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002a48:	2b40      	cmp	r3, #64	; 0x40
 8002a4a:	d007      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002a4c:	e018      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a4e:	4b5e      	ldr	r3, [pc, #376]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a52:	4a5d      	ldr	r2, [pc, #372]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a5a:	e017      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	2100      	movs	r1, #0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f001 f94a 	bl	8003cfc <RCCEx_PLL2_Config>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a6c:	e00e      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3324      	adds	r3, #36	; 0x24
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 f9f3 	bl	8003e60 <RCCEx_PLL3_Config>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a7e:	e005      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	75fb      	strb	r3, [r7, #23]
      break;
 8002a84:	e002      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002a86:	bf00      	nop
 8002a88:	e000      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a92:	4b4d      	ldr	r3, [pc, #308]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a96:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	494a      	ldr	r1, [pc, #296]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	650b      	str	r3, [r1, #80]	; 0x50
 8002aa4:	e001      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa6:	7dfb      	ldrb	r3, [r7, #23]
 8002aa8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d049      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002abc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ac0:	d030      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002ac2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ac6:	d82a      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ac8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002acc:	d02c      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002ace:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ad2:	d824      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad8:	d018      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ade:	d81e      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002ae4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ae8:	d007      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002aea:	e018      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aec:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	4a35      	ldr	r2, [pc, #212]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002af8:	e017      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f001 f8fb 	bl	8003cfc <RCCEx_PLL2_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002b0a:	e00e      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3324      	adds	r3, #36	; 0x24
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f001 f9a4 	bl	8003e60 <RCCEx_PLL3_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b1c:	e005      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	75fb      	strb	r3, [r7, #23]
      break;
 8002b22:	e002      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b24:	bf00      	nop
 8002b26:	e000      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10a      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b30:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b34:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b3e:	4922      	ldr	r1, [pc, #136]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	658b      	str	r3, [r1, #88]	; 0x58
 8002b44:	e001      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
 8002b48:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d04b      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b60:	d030      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002b62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b66:	d82a      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b6c:	d02e      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002b6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b72:	d824      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b78:	d018      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002b7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b7e:	d81e      	bhi.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b88:	d007      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002b8a:	e018      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	4a0d      	ldr	r2, [pc, #52]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b98:	e019      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f001 f8ab 	bl	8003cfc <RCCEx_PLL2_Config>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002baa:	e010      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3324      	adds	r3, #36	; 0x24
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 f954 	bl	8003e60 <RCCEx_PLL3_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bbc:	e007      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8002bc2:	e004      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002bc4:	bf00      	nop
 8002bc6:	e002      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002bc8:	58024400 	.word	0x58024400
      break;
 8002bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002bd4:	4b99      	ldr	r3, [pc, #612]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002be2:	4996      	ldr	r1, [pc, #600]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	658b      	str	r3, [r1, #88]	; 0x58
 8002be8:	e001      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d032      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfe:	2b30      	cmp	r3, #48	; 0x30
 8002c00:	d01c      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002c02:	2b30      	cmp	r3, #48	; 0x30
 8002c04:	d817      	bhi.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d00c      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d813      	bhi.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d016      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002c12:	2b10      	cmp	r3, #16
 8002c14:	d10f      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c16:	4b89      	ldr	r3, [pc, #548]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	4a88      	ldr	r2, [pc, #544]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c22:	e00e      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3304      	adds	r3, #4
 8002c28:	2102      	movs	r1, #2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f001 f866 	bl	8003cfc <RCCEx_PLL2_Config>
 8002c30:	4603      	mov	r3, r0
 8002c32:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c34:	e005      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	75fb      	strb	r3, [r7, #23]
      break;
 8002c3a:	e002      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002c3c:	bf00      	nop
 8002c3e:	e000      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c48:	4b7c      	ldr	r3, [pc, #496]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c54:	4979      	ldr	r1, [pc, #484]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c5a:	e001      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d047      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c74:	d030      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002c76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c7a:	d82a      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002c7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c80:	d02c      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002c82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c86:	d824      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8c:	d018      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c92:	d81e      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9c:	d007      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002c9e:	e018      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca0:	4b66      	ldr	r3, [pc, #408]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	4a65      	ldr	r2, [pc, #404]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002caa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cac:	e017      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 f821 	bl	8003cfc <RCCEx_PLL2_Config>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cbe:	e00e      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3324      	adds	r3, #36	; 0x24
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 f8ca 	bl	8003e60 <RCCEx_PLL3_Config>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cd0:	e005      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8002cd6:	e002      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002cd8:	bf00      	nop
 8002cda:	e000      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002cdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d109      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ce4:	4b55      	ldr	r3, [pc, #340]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	4952      	ldr	r1, [pc, #328]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	650b      	str	r3, [r1, #80]	; 0x50
 8002cf6:	e001      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d049      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d10:	d02e      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002d12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d16:	d828      	bhi.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d1c:	d02a      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002d1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d22:	d822      	bhi.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d28:	d026      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002d2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d2e:	d81c      	bhi.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d34:	d010      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002d36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d3a:	d816      	bhi.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01d      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d44:	d111      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 ffd5 	bl	8003cfc <RCCEx_PLL2_Config>
 8002d52:	4603      	mov	r3, r0
 8002d54:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d56:	e012      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3324      	adds	r3, #36	; 0x24
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 f87e 	bl	8003e60 <RCCEx_PLL3_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d68:	e009      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d6e:	e006      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002d70:	bf00      	nop
 8002d72:	e004      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002d74:	bf00      	nop
 8002d76:	e002      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002d78:	bf00      	nop
 8002d7a:	e000      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d109      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d84:	4b2d      	ldr	r3, [pc, #180]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d88:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d90:	492a      	ldr	r1, [pc, #168]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	650b      	str	r3, [r1, #80]	; 0x50
 8002d96:	e001      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
 8002d9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d04d      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002db2:	d02e      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002db8:	d828      	bhi.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbe:	d02a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc4:	d822      	bhi.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002dc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002dca:	d026      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002dcc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002dd0:	d81c      	bhi.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd6:	d010      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ddc:	d816      	bhi.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d01d      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002de6:	d111      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3304      	adds	r3, #4
 8002dec:	2101      	movs	r1, #1
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 ff84 	bl	8003cfc <RCCEx_PLL2_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002df8:	e012      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3324      	adds	r3, #36	; 0x24
 8002dfe:	2101      	movs	r1, #1
 8002e00:	4618      	mov	r0, r3
 8002e02:	f001 f82d 	bl	8003e60 <RCCEx_PLL3_Config>
 8002e06:	4603      	mov	r3, r0
 8002e08:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e0a:	e009      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e10:	e006      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e12:	bf00      	nop
 8002e14:	e004      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e16:	bf00      	nop
 8002e18:	e002      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e1a:	bf00      	nop
 8002e1c:	e000      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e20:	7dfb      	ldrb	r3, [r7, #23]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e34:	4901      	ldr	r1, [pc, #4]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	658b      	str	r3, [r1, #88]	; 0x58
 8002e3a:	e003      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002e3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d02f      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e58:	d00e      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e5e:	d814      	bhi.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d015      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002e64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e68:	d10f      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e6a:	4baf      	ldr	r3, [pc, #700]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	4aae      	ldr	r2, [pc, #696]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e76:	e00c      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 ff3c 	bl	8003cfc <RCCEx_PLL2_Config>
 8002e84:	4603      	mov	r3, r0
 8002e86:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e88:	e003      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e8e:	e000      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002e90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d109      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e98:	4ba3      	ldr	r3, [pc, #652]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea4:	49a0      	ldr	r1, [pc, #640]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	650b      	str	r3, [r1, #80]	; 0x50
 8002eaa:	e001      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
 8002eae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d032      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d81b      	bhi.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002ec4:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eca:	bf00      	nop
 8002ecc:	08002f03 	.word	0x08002f03
 8002ed0:	08002edd 	.word	0x08002edd
 8002ed4:	08002eeb 	.word	0x08002eeb
 8002ed8:	08002f03 	.word	0x08002f03
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002edc:	4b92      	ldr	r3, [pc, #584]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	4a91      	ldr	r2, [pc, #580]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ee8:	e00c      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3304      	adds	r3, #4
 8002eee:	2102      	movs	r1, #2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 ff03 	bl	8003cfc <RCCEx_PLL2_Config>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002efa:	e003      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	75fb      	strb	r3, [r7, #23]
      break;
 8002f00:	e000      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f0a:	4b87      	ldr	r3, [pc, #540]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0e:	f023 0203 	bic.w	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	4984      	ldr	r1, [pc, #528]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f1c:	e001      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1e:	7dfb      	ldrb	r3, [r7, #23]
 8002f20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8086 	beq.w	800303c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f30:	4b7e      	ldr	r3, [pc, #504]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a7d      	ldr	r2, [pc, #500]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f3c:	f7fe f886 	bl	800104c <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f42:	e009      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f44:	f7fe f882 	bl	800104c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d902      	bls.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	75fb      	strb	r3, [r7, #23]
        break;
 8002f56:	e005      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f58:	4b74      	ldr	r3, [pc, #464]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ef      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d166      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f6a:	4b6f      	ldr	r3, [pc, #444]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f74:	4053      	eors	r3, r2
 8002f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d013      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f7e:	4b6a      	ldr	r3, [pc, #424]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f86:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f88:	4b67      	ldr	r3, [pc, #412]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	4a66      	ldr	r2, [pc, #408]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f92:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f94:	4b64      	ldr	r3, [pc, #400]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	4a63      	ldr	r2, [pc, #396]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002fa0:	4a61      	ldr	r2, [pc, #388]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb0:	d115      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7fe f84b 	bl	800104c <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fb8:	e00b      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fba:	f7fe f847 	bl	800104c <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d902      	bls.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	75fb      	strb	r3, [r7, #23]
            break;
 8002fd0:	e005      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fd2:	4b55      	ldr	r3, [pc, #340]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0ed      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d126      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff2:	d10d      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002ff4:	4b4c      	ldr	r3, [pc, #304]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003002:	0919      	lsrs	r1, r3, #4
 8003004:	4b4a      	ldr	r3, [pc, #296]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003006:	400b      	ands	r3, r1
 8003008:	4947      	ldr	r1, [pc, #284]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800300a:	4313      	orrs	r3, r2
 800300c:	610b      	str	r3, [r1, #16]
 800300e:	e005      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003010:	4b45      	ldr	r3, [pc, #276]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	4a44      	ldr	r2, [pc, #272]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003016:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800301a:	6113      	str	r3, [r2, #16]
 800301c:	4b42      	ldr	r3, [pc, #264]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800301e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302a:	493f      	ldr	r1, [pc, #252]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800302c:	4313      	orrs	r3, r2
 800302e:	670b      	str	r3, [r1, #112]	; 0x70
 8003030:	e004      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	75bb      	strb	r3, [r7, #22]
 8003036:	e001      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003038:	7dfb      	ldrb	r3, [r7, #23]
 800303a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8085 	beq.w	8003154 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800304e:	2b28      	cmp	r3, #40	; 0x28
 8003050:	d866      	bhi.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003052:	a201      	add	r2, pc, #4	; (adr r2, 8003058 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003058:	08003135 	.word	0x08003135
 800305c:	08003121 	.word	0x08003121
 8003060:	08003121 	.word	0x08003121
 8003064:	08003121 	.word	0x08003121
 8003068:	08003121 	.word	0x08003121
 800306c:	08003121 	.word	0x08003121
 8003070:	08003121 	.word	0x08003121
 8003074:	08003121 	.word	0x08003121
 8003078:	080030fd 	.word	0x080030fd
 800307c:	08003121 	.word	0x08003121
 8003080:	08003121 	.word	0x08003121
 8003084:	08003121 	.word	0x08003121
 8003088:	08003121 	.word	0x08003121
 800308c:	08003121 	.word	0x08003121
 8003090:	08003121 	.word	0x08003121
 8003094:	08003121 	.word	0x08003121
 8003098:	0800310f 	.word	0x0800310f
 800309c:	08003121 	.word	0x08003121
 80030a0:	08003121 	.word	0x08003121
 80030a4:	08003121 	.word	0x08003121
 80030a8:	08003121 	.word	0x08003121
 80030ac:	08003121 	.word	0x08003121
 80030b0:	08003121 	.word	0x08003121
 80030b4:	08003121 	.word	0x08003121
 80030b8:	08003135 	.word	0x08003135
 80030bc:	08003121 	.word	0x08003121
 80030c0:	08003121 	.word	0x08003121
 80030c4:	08003121 	.word	0x08003121
 80030c8:	08003121 	.word	0x08003121
 80030cc:	08003121 	.word	0x08003121
 80030d0:	08003121 	.word	0x08003121
 80030d4:	08003121 	.word	0x08003121
 80030d8:	08003135 	.word	0x08003135
 80030dc:	08003121 	.word	0x08003121
 80030e0:	08003121 	.word	0x08003121
 80030e4:	08003121 	.word	0x08003121
 80030e8:	08003121 	.word	0x08003121
 80030ec:	08003121 	.word	0x08003121
 80030f0:	08003121 	.word	0x08003121
 80030f4:	08003121 	.word	0x08003121
 80030f8:	08003135 	.word	0x08003135
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	2101      	movs	r1, #1
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fdfa 	bl	8003cfc <RCCEx_PLL2_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800310c:	e013      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3324      	adds	r3, #36	; 0x24
 8003112:	2101      	movs	r1, #1
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fea3 	bl	8003e60 <RCCEx_PLL3_Config>
 800311a:	4603      	mov	r3, r0
 800311c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800311e:	e00a      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	75fb      	strb	r3, [r7, #23]
      break;
 8003124:	e007      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003126:	bf00      	nop
 8003128:	58024400 	.word	0x58024400
 800312c:	58024800 	.word	0x58024800
 8003130:	00ffffcf 	.word	0x00ffffcf
      break;
 8003134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003136:	7dfb      	ldrb	r3, [r7, #23]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d109      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800313c:	4b96      	ldr	r3, [pc, #600]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800313e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003140:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003148:	4993      	ldr	r1, [pc, #588]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800314a:	4313      	orrs	r3, r2
 800314c:	654b      	str	r3, [r1, #84]	; 0x54
 800314e:	e001      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003150:	7dfb      	ldrb	r3, [r7, #23]
 8003152:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d038      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003164:	2b05      	cmp	r3, #5
 8003166:	d821      	bhi.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003168:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	080031b3 	.word	0x080031b3
 8003174:	08003189 	.word	0x08003189
 8003178:	0800319b 	.word	0x0800319b
 800317c:	080031b3 	.word	0x080031b3
 8003180:	080031b3 	.word	0x080031b3
 8003184:	080031b3 	.word	0x080031b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	2101      	movs	r1, #1
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fdb4 	bl	8003cfc <RCCEx_PLL2_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003198:	e00c      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3324      	adds	r3, #36	; 0x24
 800319e:	2101      	movs	r1, #1
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fe5d 	bl	8003e60 <RCCEx_PLL3_Config>
 80031a6:	4603      	mov	r3, r0
 80031a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80031aa:	e003      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	75fb      	strb	r3, [r7, #23]
      break;
 80031b0:	e000      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80031b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80031ba:	4b77      	ldr	r3, [pc, #476]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	f023 0207 	bic.w	r2, r3, #7
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c6:	4974      	ldr	r1, [pc, #464]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	654b      	str	r3, [r1, #84]	; 0x54
 80031cc:	e001      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
 80031d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d03a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e4:	2b05      	cmp	r3, #5
 80031e6:	d821      	bhi.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x938>
 80031e8:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003233 	.word	0x08003233
 80031f4:	08003209 	.word	0x08003209
 80031f8:	0800321b 	.word	0x0800321b
 80031fc:	08003233 	.word	0x08003233
 8003200:	08003233 	.word	0x08003233
 8003204:	08003233 	.word	0x08003233
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	2101      	movs	r1, #1
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fd74 	bl	8003cfc <RCCEx_PLL2_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003218:	e00c      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3324      	adds	r3, #36	; 0x24
 800321e:	2101      	movs	r1, #1
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fe1d 	bl	8003e60 <RCCEx_PLL3_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800322a:	e003      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	75fb      	strb	r3, [r7, #23]
      break;
 8003230:	e000      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003234:	7dfb      	ldrb	r3, [r7, #23]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10a      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800323a:	4b57      	ldr	r3, [pc, #348]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800323c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323e:	f023 0207 	bic.w	r2, r3, #7
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	4953      	ldr	r1, [pc, #332]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	658b      	str	r3, [r1, #88]	; 0x58
 800324e:	e001      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003250:	7dfb      	ldrb	r3, [r7, #23]
 8003252:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d04b      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003266:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800326a:	d02e      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800326c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003270:	d828      	bhi.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003276:	d02a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327c:	d822      	bhi.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800327e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003282:	d026      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003284:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003288:	d81c      	bhi.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800328a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800328e:	d010      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003294:	d816      	bhi.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01d      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800329a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800329e:	d111      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	2100      	movs	r1, #0
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fd28 	bl	8003cfc <RCCEx_PLL2_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80032b0:	e012      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3324      	adds	r3, #36	; 0x24
 80032b6:	2102      	movs	r1, #2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fdd1 	bl	8003e60 <RCCEx_PLL3_Config>
 80032be:	4603      	mov	r3, r0
 80032c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80032c2:	e009      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	75fb      	strb	r3, [r7, #23]
      break;
 80032c8:	e006      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80032ca:	bf00      	nop
 80032cc:	e004      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80032ce:	bf00      	nop
 80032d0:	e002      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80032d2:	bf00      	nop
 80032d4:	e000      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80032d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10a      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032de:	4b2e      	ldr	r3, [pc, #184]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ec:	492a      	ldr	r1, [pc, #168]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	654b      	str	r3, [r1, #84]	; 0x54
 80032f2:	e001      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
 80032f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d04d      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800330a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800330e:	d02e      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003310:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003314:	d828      	bhi.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331a:	d02a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800331c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003320:	d822      	bhi.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003322:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003326:	d026      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003328:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800332c:	d81c      	bhi.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800332e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003332:	d010      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003338:	d816      	bhi.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800333a:	2b00      	cmp	r3, #0
 800333c:	d01d      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800333e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003342:	d111      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fcd6 	bl	8003cfc <RCCEx_PLL2_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003354:	e012      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3324      	adds	r3, #36	; 0x24
 800335a:	2102      	movs	r1, #2
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fd7f 	bl	8003e60 <RCCEx_PLL3_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003366:	e009      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	75fb      	strb	r3, [r7, #23]
      break;
 800336c:	e006      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800336e:	bf00      	nop
 8003370:	e004      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003372:	bf00      	nop
 8003374:	e002      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003376:	bf00      	nop
 8003378:	e000      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800337a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10c      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003390:	4901      	ldr	r1, [pc, #4]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003392:	4313      	orrs	r3, r2
 8003394:	658b      	str	r3, [r1, #88]	; 0x58
 8003396:	e003      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003398:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d04b      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033b6:	d02e      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80033b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033bc:	d828      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80033be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c2:	d02a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80033c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c8:	d822      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80033ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80033ce:	d026      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80033d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80033d4:	d81c      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80033d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033da:	d010      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80033dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033e0:	d816      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d01d      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80033e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ea:	d111      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3304      	adds	r3, #4
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fc82 	bl	8003cfc <RCCEx_PLL2_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80033fc:	e012      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3324      	adds	r3, #36	; 0x24
 8003402:	2102      	movs	r1, #2
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fd2b 	bl	8003e60 <RCCEx_PLL3_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800340e:	e009      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	75fb      	strb	r3, [r7, #23]
      break;
 8003414:	e006      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003416:	bf00      	nop
 8003418:	e004      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800341a:	bf00      	nop
 800341c:	e002      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800341e:	bf00      	nop
 8003420:	e000      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003422:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10a      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800342a:	4b9d      	ldr	r3, [pc, #628]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003438:	4999      	ldr	r1, [pc, #612]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800343a:	4313      	orrs	r3, r2
 800343c:	658b      	str	r3, [r1, #88]	; 0x58
 800343e:	e001      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01a      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345a:	d10a      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3324      	adds	r3, #36	; 0x24
 8003460:	2102      	movs	r1, #2
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fcfc 	bl	8003e60 <RCCEx_PLL3_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003472:	4b8b      	ldr	r3, [pc, #556]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003476:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003480:	4987      	ldr	r1, [pc, #540]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003482:	4313      	orrs	r3, r2
 8003484:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	2b00      	cmp	r3, #0
 8003490:	d01a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800349c:	d10a      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3324      	adds	r3, #36	; 0x24
 80034a2:	2102      	movs	r1, #2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fcdb 	bl	8003e60 <RCCEx_PLL3_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034b4:	4b7a      	ldr	r3, [pc, #488]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c2:	4977      	ldr	r1, [pc, #476]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d034      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034de:	d01d      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80034e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034e4:	d817      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80034ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ee:	d009      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80034f0:	e011      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2100      	movs	r1, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fbff 	bl	8003cfc <RCCEx_PLL2_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003502:	e00c      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3324      	adds	r3, #36	; 0x24
 8003508:	2102      	movs	r1, #2
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fca8 	bl	8003e60 <RCCEx_PLL3_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003514:	e003      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	75fb      	strb	r3, [r7, #23]
      break;
 800351a:	e000      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800351c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800351e:	7dfb      	ldrb	r3, [r7, #23]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10a      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003524:	4b5e      	ldr	r3, [pc, #376]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003528:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003532:	495b      	ldr	r1, [pc, #364]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003534:	4313      	orrs	r3, r2
 8003536:	658b      	str	r3, [r1, #88]	; 0x58
 8003538:	e001      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353a:	7dfb      	ldrb	r3, [r7, #23]
 800353c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d033      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003550:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003554:	d01c      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003556:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800355a:	d816      	bhi.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800355c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003560:	d003      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003566:	d007      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003568:	e00f      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800356a:	4b4d      	ldr	r3, [pc, #308]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	4a4c      	ldr	r2, [pc, #304]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003574:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003576:	e00c      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3324      	adds	r3, #36	; 0x24
 800357c:	2101      	movs	r1, #1
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fc6e 	bl	8003e60 <RCCEx_PLL3_Config>
 8003584:	4603      	mov	r3, r0
 8003586:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003588:	e003      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	75fb      	strb	r3, [r7, #23]
      break;
 800358e:	e000      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003590:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003592:	7dfb      	ldrb	r3, [r7, #23]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003598:	4b41      	ldr	r3, [pc, #260]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800359a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a6:	493e      	ldr	r1, [pc, #248]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	654b      	str	r3, [r1, #84]	; 0x54
 80035ac:	e001      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ae:	7dfb      	ldrb	r3, [r7, #23]
 80035b0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d029      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80035c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ca:	d007      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80035cc:	e00f      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ce:	4b34      	ldr	r3, [pc, #208]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	4a33      	ldr	r2, [pc, #204]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80035da:	e00b      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	2102      	movs	r1, #2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fb8a 	bl	8003cfc <RCCEx_PLL2_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80035ec:	e002      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	75fb      	strb	r3, [r7, #23]
      break;
 80035f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80035fa:	4b29      	ldr	r3, [pc, #164]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003606:	4926      	ldr	r1, [pc, #152]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003608:	4313      	orrs	r3, r2
 800360a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800360c:	e001      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360e:	7dfb      	ldrb	r3, [r7, #23]
 8003610:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3324      	adds	r3, #36	; 0x24
 8003622:	2102      	movs	r1, #2
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fc1b 	bl	8003e60 <RCCEx_PLL3_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d033      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003648:	d017      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800364a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800364e:	d811      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003654:	d013      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365a:	d80b      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800365c:	2b00      	cmp	r3, #0
 800365e:	d010      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003664:	d106      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003666:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	4a0d      	ldr	r2, [pc, #52]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800366c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003670:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003672:	e007      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	75fb      	strb	r3, [r7, #23]
      break;
 8003678:	e004      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800367a:	bf00      	nop
 800367c:	e002      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003682:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003684:	7dfb      	ldrb	r3, [r7, #23]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10c      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003696:	4902      	ldr	r1, [pc, #8]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003698:	4313      	orrs	r3, r2
 800369a:	654b      	str	r3, [r1, #84]	; 0x54
 800369c:	e004      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800369e:	bf00      	nop
 80036a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
 80036a6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036b4:	4b31      	ldr	r3, [pc, #196]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c0:	492e      	ldr	r1, [pc, #184]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d009      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80036d2:	4b2a      	ldr	r3, [pc, #168]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036e0:	4926      	ldr	r1, [pc, #152]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036f2:	4b22      	ldr	r3, [pc, #136]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80036f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036fe:	491f      	ldr	r1, [pc, #124]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003700:	4313      	orrs	r3, r2
 8003702:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00d      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003710:	4b1a      	ldr	r3, [pc, #104]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	4a19      	ldr	r2, [pc, #100]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003716:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800371a:	6113      	str	r3, [r2, #16]
 800371c:	4b17      	ldr	r3, [pc, #92]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003726:	4915      	ldr	r1, [pc, #84]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003728:	4313      	orrs	r3, r2
 800372a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	da08      	bge.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003734:	4b11      	ldr	r3, [pc, #68]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003738:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003740:	490e      	ldr	r1, [pc, #56]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003742:	4313      	orrs	r3, r2
 8003744:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003752:	4b0a      	ldr	r3, [pc, #40]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003756:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003760:	4906      	ldr	r1, [pc, #24]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003762:	4313      	orrs	r3, r2
 8003764:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003766:	7dbb      	ldrb	r3, [r7, #22]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e000      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	58024400 	.word	0x58024400

08003780 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003784:	f7ff f85a 	bl	800283c <HAL_RCC_GetHCLKFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	091b      	lsrs	r3, r3, #4
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	4904      	ldr	r1, [pc, #16]	; (80037a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	58024400 	.word	0x58024400
 80037a8:	08006178 	.word	0x08006178

080037ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b089      	sub	sp, #36	; 0x24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037b4:	4ba1      	ldr	r3, [pc, #644]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80037be:	4b9f      	ldr	r3, [pc, #636]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	0b1b      	lsrs	r3, r3, #12
 80037c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80037ca:	4b9c      	ldr	r3, [pc, #624]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80037d6:	4b99      	ldr	r3, [pc, #612]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037da:	08db      	lsrs	r3, r3, #3
 80037dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	fb02 f303 	mul.w	r3, r2, r3
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8111 	beq.w	8003a1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	f000 8083 	beq.w	8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	2b02      	cmp	r3, #2
 8003806:	f200 80a1 	bhi.w	800394c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d056      	beq.n	80038c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003816:	e099      	b.n	800394c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003818:	4b88      	ldr	r3, [pc, #544]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d02d      	beq.n	8003880 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003824:	4b85      	ldr	r3, [pc, #532]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	08db      	lsrs	r3, r3, #3
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	4a84      	ldr	r2, [pc, #528]	; (8003a40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
 8003834:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	ee07 3a90 	vmov	s15, r3
 800383c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800384e:	4b7b      	ldr	r3, [pc, #492]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800385e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003862:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800386a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800386e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800387e:	e087      	b.n	8003990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800388e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003892:	4b6a      	ldr	r3, [pc, #424]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038c2:	e065      	b.n	8003990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	ee07 3a90 	vmov	s15, r3
 80038ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038d6:	4b59      	ldr	r3, [pc, #356]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003902:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003906:	e043      	b.n	8003990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	ee07 3a90 	vmov	s15, r3
 800390e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003912:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800391a:	4b48      	ldr	r3, [pc, #288]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800392a:	ed97 6a03 	vldr	s12, [r7, #12]
 800392e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800393a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800393e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003946:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800394a:	e021      	b.n	8003990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003956:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800395a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800395e:	4b37      	ldr	r3, [pc, #220]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800396e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003972:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800397a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800397e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800398a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800398e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003990:	4b2a      	ldr	r3, [pc, #168]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	0a5b      	lsrs	r3, r3, #9
 8003996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80039ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039b6:	ee17 2a90 	vmov	r2, s15
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80039be:	4b1f      	ldr	r3, [pc, #124]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c2:	0c1b      	lsrs	r3, r3, #16
 80039c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c8:	ee07 3a90 	vmov	s15, r3
 80039cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80039dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039e4:	ee17 2a90 	vmov	r2, s15
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80039ec:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	0e1b      	lsrs	r3, r3, #24
 80039f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a06:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a12:	ee17 2a90 	vmov	r2, s15
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a1a:	e008      	b.n	8003a2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	609a      	str	r2, [r3, #8]
}
 8003a2e:	bf00      	nop
 8003a30:	3724      	adds	r7, #36	; 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	58024400 	.word	0x58024400
 8003a40:	03d09000 	.word	0x03d09000
 8003a44:	46000000 	.word	0x46000000
 8003a48:	4c742400 	.word	0x4c742400
 8003a4c:	4a742400 	.word	0x4a742400
 8003a50:	4af42400 	.word	0x4af42400

08003a54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	; 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a5c:	4ba1      	ldr	r3, [pc, #644]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003a66:	4b9f      	ldr	r3, [pc, #636]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	0d1b      	lsrs	r3, r3, #20
 8003a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003a72:	4b9c      	ldr	r3, [pc, #624]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003a7e:	4b99      	ldr	r3, [pc, #612]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	08db      	lsrs	r3, r3, #3
 8003a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 8111 	beq.w	8003cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	f000 8083 	beq.w	8003bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	f200 80a1 	bhi.w	8003bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d056      	beq.n	8003b6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003abe:	e099      	b.n	8003bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ac0:	4b88      	ldr	r3, [pc, #544]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d02d      	beq.n	8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003acc:	4b85      	ldr	r3, [pc, #532]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	08db      	lsrs	r3, r3, #3
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	4a84      	ldr	r2, [pc, #528]	; (8003ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8003adc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	ee07 3a90 	vmov	s15, r3
 8003ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af6:	4b7b      	ldr	r3, [pc, #492]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b22:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003b26:	e087      	b.n	8003c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	ee07 3a90 	vmov	s15, r3
 8003b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3a:	4b6a      	ldr	r3, [pc, #424]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b42:	ee07 3a90 	vmov	s15, r3
 8003b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b6a:	e065      	b.n	8003c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	ee07 3a90 	vmov	s15, r3
 8003b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7e:	4b59      	ldr	r3, [pc, #356]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b86:	ee07 3a90 	vmov	s15, r3
 8003b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003baa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bae:	e043      	b.n	8003c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	ee07 3a90 	vmov	s15, r3
 8003bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bc2:	4b48      	ldr	r3, [pc, #288]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bf2:	e021      	b.n	8003c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	ee07 3a90 	vmov	s15, r3
 8003bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c06:	4b37      	ldr	r3, [pc, #220]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003c38:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	0a5b      	lsrs	r3, r3, #9
 8003c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c52:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c5e:	ee17 2a90 	vmov	r2, s15
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003c66:	4b1f      	ldr	r3, [pc, #124]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	0c1b      	lsrs	r3, r3, #16
 8003c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c70:	ee07 3a90 	vmov	s15, r3
 8003c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c8c:	ee17 2a90 	vmov	r2, s15
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	0e1b      	lsrs	r3, r3, #24
 8003c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cba:	ee17 2a90 	vmov	r2, s15
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	609a      	str	r2, [r3, #8]
}
 8003cd6:	bf00      	nop
 8003cd8:	3724      	adds	r7, #36	; 0x24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	58024400 	.word	0x58024400
 8003ce8:	03d09000 	.word	0x03d09000
 8003cec:	46000000 	.word	0x46000000
 8003cf0:	4c742400 	.word	0x4c742400
 8003cf4:	4a742400 	.word	0x4a742400
 8003cf8:	4af42400 	.word	0x4af42400

08003cfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d0a:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d101      	bne.n	8003d1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e099      	b.n	8003e4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d1a:	4b4f      	ldr	r3, [pc, #316]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a4e      	ldr	r2, [pc, #312]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003d20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d26:	f7fd f991 	bl	800104c <HAL_GetTick>
 8003d2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d2c:	e008      	b.n	8003d40 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d2e:	f7fd f98d 	bl	800104c <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e086      	b.n	8003e4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d40:	4b45      	ldr	r3, [pc, #276]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f0      	bne.n	8003d2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d4c:	4b42      	ldr	r3, [pc, #264]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	031b      	lsls	r3, r3, #12
 8003d5a:	493f      	ldr	r1, [pc, #252]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	628b      	str	r3, [r1, #40]	; 0x28
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	025b      	lsls	r3, r3, #9
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	041b      	lsls	r3, r3, #16
 8003d7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	061b      	lsls	r3, r3, #24
 8003d8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d90:	4931      	ldr	r1, [pc, #196]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d96:	4b30      	ldr	r3, [pc, #192]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	492d      	ldr	r1, [pc, #180]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003da8:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	f023 0220 	bic.w	r2, r3, #32
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	4928      	ldr	r1, [pc, #160]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003dba:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	4a26      	ldr	r2, [pc, #152]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003dc0:	f023 0310 	bic.w	r3, r3, #16
 8003dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003dc6:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dca:	4b24      	ldr	r3, [pc, #144]	; (8003e5c <RCCEx_PLL2_Config+0x160>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	69d2      	ldr	r2, [r2, #28]
 8003dd2:	00d2      	lsls	r2, r2, #3
 8003dd4:	4920      	ldr	r1, [pc, #128]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003dda:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003de0:	f043 0310 	orr.w	r3, r3, #16
 8003de4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d106      	bne.n	8003dfa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003dec:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	4a19      	ldr	r2, [pc, #100]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003df2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003df6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003df8:	e00f      	b.n	8003e1a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d106      	bne.n	8003e0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e00:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e0c:	e005      	b.n	8003e1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a0e      	ldr	r2, [pc, #56]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003e20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e26:	f7fd f911 	bl	800104c <HAL_GetTick>
 8003e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e2c:	e008      	b.n	8003e40 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e2e:	f7fd f90d 	bl	800104c <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e006      	b.n	8003e4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	58024400 	.word	0x58024400
 8003e5c:	ffff0007 	.word	0xffff0007

08003e60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e6e:	4b53      	ldr	r3, [pc, #332]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d101      	bne.n	8003e7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e099      	b.n	8003fb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e7e:	4b4f      	ldr	r3, [pc, #316]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a4e      	ldr	r2, [pc, #312]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e8a:	f7fd f8df 	bl	800104c <HAL_GetTick>
 8003e8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e90:	e008      	b.n	8003ea4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e92:	f7fd f8db 	bl	800104c <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e086      	b.n	8003fb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ea4:	4b45      	ldr	r3, [pc, #276]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003eb0:	4b42      	ldr	r3, [pc, #264]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	051b      	lsls	r3, r3, #20
 8003ebe:	493f      	ldr	r1, [pc, #252]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	628b      	str	r3, [r1, #40]	; 0x28
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	025b      	lsls	r3, r3, #9
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	3b01      	subs	r3, #1
 8003eee:	061b      	lsls	r3, r3, #24
 8003ef0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ef4:	4931      	ldr	r1, [pc, #196]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003efa:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	492d      	ldr	r1, [pc, #180]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f0c:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	4928      	ldr	r1, [pc, #160]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f1e:	4b27      	ldr	r3, [pc, #156]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	4a26      	ldr	r2, [pc, #152]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f2a:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f2e:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <RCCEx_PLL3_Config+0x160>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	69d2      	ldr	r2, [r2, #28]
 8003f36:	00d2      	lsls	r2, r2, #3
 8003f38:	4920      	ldr	r1, [pc, #128]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f3e:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	4a1e      	ldr	r2, [pc, #120]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f50:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f5c:	e00f      	b.n	8003f7e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d106      	bne.n	8003f72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f64:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	4a14      	ldr	r2, [pc, #80]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f70:	e005      	b.n	8003f7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f72:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	4a11      	ldr	r2, [pc, #68]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f7e:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a0e      	ldr	r2, [pc, #56]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f8a:	f7fd f85f 	bl	800104c <HAL_GetTick>
 8003f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f90:	e008      	b.n	8003fa4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003f92:	f7fd f85b 	bl	800104c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e006      	b.n	8003fb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	58024400 	.word	0x58024400
 8003fc0:	ffff0007 	.word	0xffff0007

08003fc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e042      	b.n	800405c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d106      	bne.n	8003fee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7fc fe4b 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2224      	movs	r2, #36	; 0x24
 8003ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f8c2 	bl	8004190 <UART_SetConfig>
 800400c:	4603      	mov	r3, r0
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e022      	b.n	800405c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fe1e 	bl	8004c60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fea5 	bl	8004da4 <UART_CheckIdleState>
 800405a:	4603      	mov	r3, r0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	; 0x28
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4613      	mov	r3, r2
 8004072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800407a:	2b20      	cmp	r3, #32
 800407c:	f040 8083 	bne.w	8004186 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_UART_Transmit+0x28>
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e07b      	b.n	8004188 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_UART_Transmit+0x3a>
 800409a:	2302      	movs	r3, #2
 800409c:	e074      	b.n	8004188 <HAL_UART_Transmit+0x124>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2221      	movs	r2, #33	; 0x21
 80040b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040b6:	f7fc ffc9 	bl	800104c <HAL_GetTick>
 80040ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	88fa      	ldrh	r2, [r7, #6]
 80040c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d4:	d108      	bne.n	80040e8 <HAL_UART_Transmit+0x84>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d104      	bne.n	80040e8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	e003      	b.n	80040f0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80040f8:	e02c      	b.n	8004154 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2200      	movs	r2, #0
 8004102:	2180      	movs	r1, #128	; 0x80
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fe98 	bl	8004e3a <UART_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e039      	b.n	8004188 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10b      	bne.n	8004132 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004128:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	3302      	adds	r3, #2
 800412e:	61bb      	str	r3, [r7, #24]
 8004130:	e007      	b.n	8004142 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	781a      	ldrb	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	3301      	adds	r3, #1
 8004140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004148:	b29b      	uxth	r3, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1cc      	bne.n	80040fa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2200      	movs	r2, #0
 8004168:	2140      	movs	r1, #64	; 0x40
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 fe65 	bl	8004e3a <UART_WaitOnFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e006      	b.n	8004188 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	e000      	b.n	8004188 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004186:	2302      	movs	r3, #2
  }
}
 8004188:	4618      	mov	r0, r3
 800418a:	3720      	adds	r7, #32
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004194:	b092      	sub	sp, #72	; 0x48
 8004196:	af00      	add	r7, sp, #0
 8004198:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	431a      	orrs	r2, r3
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4bbe      	ldr	r3, [pc, #760]	; (80044b8 <UART_SetConfig+0x328>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	6812      	ldr	r2, [r2, #0]
 80041c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4ab3      	ldr	r2, [pc, #716]	; (80044bc <UART_SetConfig+0x32c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d004      	beq.n	80041fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041f8:	4313      	orrs	r3, r2
 80041fa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	4baf      	ldr	r3, [pc, #700]	; (80044c0 <UART_SetConfig+0x330>)
 8004204:	4013      	ands	r3, r2
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800420c:	430b      	orrs	r3, r1
 800420e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	f023 010f 	bic.w	r1, r3, #15
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4aa6      	ldr	r2, [pc, #664]	; (80044c4 <UART_SetConfig+0x334>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d177      	bne.n	8004320 <UART_SetConfig+0x190>
 8004230:	4ba5      	ldr	r3, [pc, #660]	; (80044c8 <UART_SetConfig+0x338>)
 8004232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004234:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004238:	2b28      	cmp	r3, #40	; 0x28
 800423a:	d86d      	bhi.n	8004318 <UART_SetConfig+0x188>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <UART_SetConfig+0xb4>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	080042e9 	.word	0x080042e9
 8004248:	08004319 	.word	0x08004319
 800424c:	08004319 	.word	0x08004319
 8004250:	08004319 	.word	0x08004319
 8004254:	08004319 	.word	0x08004319
 8004258:	08004319 	.word	0x08004319
 800425c:	08004319 	.word	0x08004319
 8004260:	08004319 	.word	0x08004319
 8004264:	080042f1 	.word	0x080042f1
 8004268:	08004319 	.word	0x08004319
 800426c:	08004319 	.word	0x08004319
 8004270:	08004319 	.word	0x08004319
 8004274:	08004319 	.word	0x08004319
 8004278:	08004319 	.word	0x08004319
 800427c:	08004319 	.word	0x08004319
 8004280:	08004319 	.word	0x08004319
 8004284:	080042f9 	.word	0x080042f9
 8004288:	08004319 	.word	0x08004319
 800428c:	08004319 	.word	0x08004319
 8004290:	08004319 	.word	0x08004319
 8004294:	08004319 	.word	0x08004319
 8004298:	08004319 	.word	0x08004319
 800429c:	08004319 	.word	0x08004319
 80042a0:	08004319 	.word	0x08004319
 80042a4:	08004301 	.word	0x08004301
 80042a8:	08004319 	.word	0x08004319
 80042ac:	08004319 	.word	0x08004319
 80042b0:	08004319 	.word	0x08004319
 80042b4:	08004319 	.word	0x08004319
 80042b8:	08004319 	.word	0x08004319
 80042bc:	08004319 	.word	0x08004319
 80042c0:	08004319 	.word	0x08004319
 80042c4:	08004309 	.word	0x08004309
 80042c8:	08004319 	.word	0x08004319
 80042cc:	08004319 	.word	0x08004319
 80042d0:	08004319 	.word	0x08004319
 80042d4:	08004319 	.word	0x08004319
 80042d8:	08004319 	.word	0x08004319
 80042dc:	08004319 	.word	0x08004319
 80042e0:	08004319 	.word	0x08004319
 80042e4:	08004311 	.word	0x08004311
 80042e8:	2301      	movs	r3, #1
 80042ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ee:	e222      	b.n	8004736 <UART_SetConfig+0x5a6>
 80042f0:	2304      	movs	r3, #4
 80042f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042f6:	e21e      	b.n	8004736 <UART_SetConfig+0x5a6>
 80042f8:	2308      	movs	r3, #8
 80042fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042fe:	e21a      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004300:	2310      	movs	r3, #16
 8004302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004306:	e216      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004308:	2320      	movs	r3, #32
 800430a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800430e:	e212      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004310:	2340      	movs	r3, #64	; 0x40
 8004312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004316:	e20e      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004318:	2380      	movs	r3, #128	; 0x80
 800431a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800431e:	e20a      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a69      	ldr	r2, [pc, #420]	; (80044cc <UART_SetConfig+0x33c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d130      	bne.n	800438c <UART_SetConfig+0x1fc>
 800432a:	4b67      	ldr	r3, [pc, #412]	; (80044c8 <UART_SetConfig+0x338>)
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	2b05      	cmp	r3, #5
 8004334:	d826      	bhi.n	8004384 <UART_SetConfig+0x1f4>
 8004336:	a201      	add	r2, pc, #4	; (adr r2, 800433c <UART_SetConfig+0x1ac>)
 8004338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433c:	08004355 	.word	0x08004355
 8004340:	0800435d 	.word	0x0800435d
 8004344:	08004365 	.word	0x08004365
 8004348:	0800436d 	.word	0x0800436d
 800434c:	08004375 	.word	0x08004375
 8004350:	0800437d 	.word	0x0800437d
 8004354:	2300      	movs	r3, #0
 8004356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800435a:	e1ec      	b.n	8004736 <UART_SetConfig+0x5a6>
 800435c:	2304      	movs	r3, #4
 800435e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004362:	e1e8      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004364:	2308      	movs	r3, #8
 8004366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800436a:	e1e4      	b.n	8004736 <UART_SetConfig+0x5a6>
 800436c:	2310      	movs	r3, #16
 800436e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004372:	e1e0      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004374:	2320      	movs	r3, #32
 8004376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800437a:	e1dc      	b.n	8004736 <UART_SetConfig+0x5a6>
 800437c:	2340      	movs	r3, #64	; 0x40
 800437e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004382:	e1d8      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004384:	2380      	movs	r3, #128	; 0x80
 8004386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800438a:	e1d4      	b.n	8004736 <UART_SetConfig+0x5a6>
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a4f      	ldr	r2, [pc, #316]	; (80044d0 <UART_SetConfig+0x340>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d130      	bne.n	80043f8 <UART_SetConfig+0x268>
 8004396:	4b4c      	ldr	r3, [pc, #304]	; (80044c8 <UART_SetConfig+0x338>)
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	2b05      	cmp	r3, #5
 80043a0:	d826      	bhi.n	80043f0 <UART_SetConfig+0x260>
 80043a2:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <UART_SetConfig+0x218>)
 80043a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a8:	080043c1 	.word	0x080043c1
 80043ac:	080043c9 	.word	0x080043c9
 80043b0:	080043d1 	.word	0x080043d1
 80043b4:	080043d9 	.word	0x080043d9
 80043b8:	080043e1 	.word	0x080043e1
 80043bc:	080043e9 	.word	0x080043e9
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043c6:	e1b6      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043c8:	2304      	movs	r3, #4
 80043ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ce:	e1b2      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043d0:	2308      	movs	r3, #8
 80043d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043d6:	e1ae      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043d8:	2310      	movs	r3, #16
 80043da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043de:	e1aa      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043e0:	2320      	movs	r3, #32
 80043e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043e6:	e1a6      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043e8:	2340      	movs	r3, #64	; 0x40
 80043ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ee:	e1a2      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043f0:	2380      	movs	r3, #128	; 0x80
 80043f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043f6:	e19e      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a35      	ldr	r2, [pc, #212]	; (80044d4 <UART_SetConfig+0x344>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d130      	bne.n	8004464 <UART_SetConfig+0x2d4>
 8004402:	4b31      	ldr	r3, [pc, #196]	; (80044c8 <UART_SetConfig+0x338>)
 8004404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	2b05      	cmp	r3, #5
 800440c:	d826      	bhi.n	800445c <UART_SetConfig+0x2cc>
 800440e:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <UART_SetConfig+0x284>)
 8004410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004414:	0800442d 	.word	0x0800442d
 8004418:	08004435 	.word	0x08004435
 800441c:	0800443d 	.word	0x0800443d
 8004420:	08004445 	.word	0x08004445
 8004424:	0800444d 	.word	0x0800444d
 8004428:	08004455 	.word	0x08004455
 800442c:	2300      	movs	r3, #0
 800442e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004432:	e180      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004434:	2304      	movs	r3, #4
 8004436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800443a:	e17c      	b.n	8004736 <UART_SetConfig+0x5a6>
 800443c:	2308      	movs	r3, #8
 800443e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004442:	e178      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004444:	2310      	movs	r3, #16
 8004446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800444a:	e174      	b.n	8004736 <UART_SetConfig+0x5a6>
 800444c:	2320      	movs	r3, #32
 800444e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004452:	e170      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004454:	2340      	movs	r3, #64	; 0x40
 8004456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800445a:	e16c      	b.n	8004736 <UART_SetConfig+0x5a6>
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004462:	e168      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <UART_SetConfig+0x348>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d142      	bne.n	80044f4 <UART_SetConfig+0x364>
 800446e:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <UART_SetConfig+0x338>)
 8004470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	2b05      	cmp	r3, #5
 8004478:	d838      	bhi.n	80044ec <UART_SetConfig+0x35c>
 800447a:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <UART_SetConfig+0x2f0>)
 800447c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004480:	08004499 	.word	0x08004499
 8004484:	080044a1 	.word	0x080044a1
 8004488:	080044a9 	.word	0x080044a9
 800448c:	080044b1 	.word	0x080044b1
 8004490:	080044dd 	.word	0x080044dd
 8004494:	080044e5 	.word	0x080044e5
 8004498:	2300      	movs	r3, #0
 800449a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800449e:	e14a      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044a0:	2304      	movs	r3, #4
 80044a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044a6:	e146      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044a8:	2308      	movs	r3, #8
 80044aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ae:	e142      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044b0:	2310      	movs	r3, #16
 80044b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044b6:	e13e      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044b8:	cfff69f3 	.word	0xcfff69f3
 80044bc:	58000c00 	.word	0x58000c00
 80044c0:	11fff4ff 	.word	0x11fff4ff
 80044c4:	40011000 	.word	0x40011000
 80044c8:	58024400 	.word	0x58024400
 80044cc:	40004400 	.word	0x40004400
 80044d0:	40004800 	.word	0x40004800
 80044d4:	40004c00 	.word	0x40004c00
 80044d8:	40005000 	.word	0x40005000
 80044dc:	2320      	movs	r3, #32
 80044de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044e2:	e128      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044e4:	2340      	movs	r3, #64	; 0x40
 80044e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ea:	e124      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044ec:	2380      	movs	r3, #128	; 0x80
 80044ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044f2:	e120      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4acb      	ldr	r2, [pc, #812]	; (8004828 <UART_SetConfig+0x698>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d176      	bne.n	80045ec <UART_SetConfig+0x45c>
 80044fe:	4bcb      	ldr	r3, [pc, #812]	; (800482c <UART_SetConfig+0x69c>)
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004506:	2b28      	cmp	r3, #40	; 0x28
 8004508:	d86c      	bhi.n	80045e4 <UART_SetConfig+0x454>
 800450a:	a201      	add	r2, pc, #4	; (adr r2, 8004510 <UART_SetConfig+0x380>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	080045b5 	.word	0x080045b5
 8004514:	080045e5 	.word	0x080045e5
 8004518:	080045e5 	.word	0x080045e5
 800451c:	080045e5 	.word	0x080045e5
 8004520:	080045e5 	.word	0x080045e5
 8004524:	080045e5 	.word	0x080045e5
 8004528:	080045e5 	.word	0x080045e5
 800452c:	080045e5 	.word	0x080045e5
 8004530:	080045bd 	.word	0x080045bd
 8004534:	080045e5 	.word	0x080045e5
 8004538:	080045e5 	.word	0x080045e5
 800453c:	080045e5 	.word	0x080045e5
 8004540:	080045e5 	.word	0x080045e5
 8004544:	080045e5 	.word	0x080045e5
 8004548:	080045e5 	.word	0x080045e5
 800454c:	080045e5 	.word	0x080045e5
 8004550:	080045c5 	.word	0x080045c5
 8004554:	080045e5 	.word	0x080045e5
 8004558:	080045e5 	.word	0x080045e5
 800455c:	080045e5 	.word	0x080045e5
 8004560:	080045e5 	.word	0x080045e5
 8004564:	080045e5 	.word	0x080045e5
 8004568:	080045e5 	.word	0x080045e5
 800456c:	080045e5 	.word	0x080045e5
 8004570:	080045cd 	.word	0x080045cd
 8004574:	080045e5 	.word	0x080045e5
 8004578:	080045e5 	.word	0x080045e5
 800457c:	080045e5 	.word	0x080045e5
 8004580:	080045e5 	.word	0x080045e5
 8004584:	080045e5 	.word	0x080045e5
 8004588:	080045e5 	.word	0x080045e5
 800458c:	080045e5 	.word	0x080045e5
 8004590:	080045d5 	.word	0x080045d5
 8004594:	080045e5 	.word	0x080045e5
 8004598:	080045e5 	.word	0x080045e5
 800459c:	080045e5 	.word	0x080045e5
 80045a0:	080045e5 	.word	0x080045e5
 80045a4:	080045e5 	.word	0x080045e5
 80045a8:	080045e5 	.word	0x080045e5
 80045ac:	080045e5 	.word	0x080045e5
 80045b0:	080045dd 	.word	0x080045dd
 80045b4:	2301      	movs	r3, #1
 80045b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ba:	e0bc      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045bc:	2304      	movs	r3, #4
 80045be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045c2:	e0b8      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045c4:	2308      	movs	r3, #8
 80045c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ca:	e0b4      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045cc:	2310      	movs	r3, #16
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045d2:	e0b0      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045d4:	2320      	movs	r3, #32
 80045d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045da:	e0ac      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045dc:	2340      	movs	r3, #64	; 0x40
 80045de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045e2:	e0a8      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045e4:	2380      	movs	r3, #128	; 0x80
 80045e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ea:	e0a4      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a8f      	ldr	r2, [pc, #572]	; (8004830 <UART_SetConfig+0x6a0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d130      	bne.n	8004658 <UART_SetConfig+0x4c8>
 80045f6:	4b8d      	ldr	r3, [pc, #564]	; (800482c <UART_SetConfig+0x69c>)
 80045f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	2b05      	cmp	r3, #5
 8004600:	d826      	bhi.n	8004650 <UART_SetConfig+0x4c0>
 8004602:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <UART_SetConfig+0x478>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	08004621 	.word	0x08004621
 800460c:	08004629 	.word	0x08004629
 8004610:	08004631 	.word	0x08004631
 8004614:	08004639 	.word	0x08004639
 8004618:	08004641 	.word	0x08004641
 800461c:	08004649 	.word	0x08004649
 8004620:	2300      	movs	r3, #0
 8004622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004626:	e086      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004628:	2304      	movs	r3, #4
 800462a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800462e:	e082      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004630:	2308      	movs	r3, #8
 8004632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004636:	e07e      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004638:	2310      	movs	r3, #16
 800463a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800463e:	e07a      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004640:	2320      	movs	r3, #32
 8004642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004646:	e076      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004648:	2340      	movs	r3, #64	; 0x40
 800464a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800464e:	e072      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004650:	2380      	movs	r3, #128	; 0x80
 8004652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004656:	e06e      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a75      	ldr	r2, [pc, #468]	; (8004834 <UART_SetConfig+0x6a4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d130      	bne.n	80046c4 <UART_SetConfig+0x534>
 8004662:	4b72      	ldr	r3, [pc, #456]	; (800482c <UART_SetConfig+0x69c>)
 8004664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	2b05      	cmp	r3, #5
 800466c:	d826      	bhi.n	80046bc <UART_SetConfig+0x52c>
 800466e:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <UART_SetConfig+0x4e4>)
 8004670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004674:	0800468d 	.word	0x0800468d
 8004678:	08004695 	.word	0x08004695
 800467c:	0800469d 	.word	0x0800469d
 8004680:	080046a5 	.word	0x080046a5
 8004684:	080046ad 	.word	0x080046ad
 8004688:	080046b5 	.word	0x080046b5
 800468c:	2300      	movs	r3, #0
 800468e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004692:	e050      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004694:	2304      	movs	r3, #4
 8004696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800469a:	e04c      	b.n	8004736 <UART_SetConfig+0x5a6>
 800469c:	2308      	movs	r3, #8
 800469e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046a2:	e048      	b.n	8004736 <UART_SetConfig+0x5a6>
 80046a4:	2310      	movs	r3, #16
 80046a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046aa:	e044      	b.n	8004736 <UART_SetConfig+0x5a6>
 80046ac:	2320      	movs	r3, #32
 80046ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046b2:	e040      	b.n	8004736 <UART_SetConfig+0x5a6>
 80046b4:	2340      	movs	r3, #64	; 0x40
 80046b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ba:	e03c      	b.n	8004736 <UART_SetConfig+0x5a6>
 80046bc:	2380      	movs	r3, #128	; 0x80
 80046be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046c2:	e038      	b.n	8004736 <UART_SetConfig+0x5a6>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a5b      	ldr	r2, [pc, #364]	; (8004838 <UART_SetConfig+0x6a8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d130      	bne.n	8004730 <UART_SetConfig+0x5a0>
 80046ce:	4b57      	ldr	r3, [pc, #348]	; (800482c <UART_SetConfig+0x69c>)
 80046d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	2b05      	cmp	r3, #5
 80046d8:	d826      	bhi.n	8004728 <UART_SetConfig+0x598>
 80046da:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <UART_SetConfig+0x550>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	080046f9 	.word	0x080046f9
 80046e4:	08004701 	.word	0x08004701
 80046e8:	08004709 	.word	0x08004709
 80046ec:	08004711 	.word	0x08004711
 80046f0:	08004719 	.word	0x08004719
 80046f4:	08004721 	.word	0x08004721
 80046f8:	2302      	movs	r3, #2
 80046fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046fe:	e01a      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004700:	2304      	movs	r3, #4
 8004702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004706:	e016      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004708:	2308      	movs	r3, #8
 800470a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800470e:	e012      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004710:	2310      	movs	r3, #16
 8004712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004716:	e00e      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004718:	2320      	movs	r3, #32
 800471a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800471e:	e00a      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004720:	2340      	movs	r3, #64	; 0x40
 8004722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004726:	e006      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800472e:	e002      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004730:	2380      	movs	r3, #128	; 0x80
 8004732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a3f      	ldr	r2, [pc, #252]	; (8004838 <UART_SetConfig+0x6a8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	f040 80f8 	bne.w	8004932 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004742:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004746:	2b20      	cmp	r3, #32
 8004748:	dc46      	bgt.n	80047d8 <UART_SetConfig+0x648>
 800474a:	2b02      	cmp	r3, #2
 800474c:	f2c0 8082 	blt.w	8004854 <UART_SetConfig+0x6c4>
 8004750:	3b02      	subs	r3, #2
 8004752:	2b1e      	cmp	r3, #30
 8004754:	d87e      	bhi.n	8004854 <UART_SetConfig+0x6c4>
 8004756:	a201      	add	r2, pc, #4	; (adr r2, 800475c <UART_SetConfig+0x5cc>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	080047df 	.word	0x080047df
 8004760:	08004855 	.word	0x08004855
 8004764:	080047e7 	.word	0x080047e7
 8004768:	08004855 	.word	0x08004855
 800476c:	08004855 	.word	0x08004855
 8004770:	08004855 	.word	0x08004855
 8004774:	080047f7 	.word	0x080047f7
 8004778:	08004855 	.word	0x08004855
 800477c:	08004855 	.word	0x08004855
 8004780:	08004855 	.word	0x08004855
 8004784:	08004855 	.word	0x08004855
 8004788:	08004855 	.word	0x08004855
 800478c:	08004855 	.word	0x08004855
 8004790:	08004855 	.word	0x08004855
 8004794:	08004807 	.word	0x08004807
 8004798:	08004855 	.word	0x08004855
 800479c:	08004855 	.word	0x08004855
 80047a0:	08004855 	.word	0x08004855
 80047a4:	08004855 	.word	0x08004855
 80047a8:	08004855 	.word	0x08004855
 80047ac:	08004855 	.word	0x08004855
 80047b0:	08004855 	.word	0x08004855
 80047b4:	08004855 	.word	0x08004855
 80047b8:	08004855 	.word	0x08004855
 80047bc:	08004855 	.word	0x08004855
 80047c0:	08004855 	.word	0x08004855
 80047c4:	08004855 	.word	0x08004855
 80047c8:	08004855 	.word	0x08004855
 80047cc:	08004855 	.word	0x08004855
 80047d0:	08004855 	.word	0x08004855
 80047d4:	08004847 	.word	0x08004847
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	d037      	beq.n	800484c <UART_SetConfig+0x6bc>
 80047dc:	e03a      	b.n	8004854 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80047de:	f7fe ffcf 	bl	8003780 <HAL_RCCEx_GetD3PCLK1Freq>
 80047e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80047e4:	e03c      	b.n	8004860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fe ffde 	bl	80037ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047f4:	e034      	b.n	8004860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047f6:	f107 0318 	add.w	r3, r7, #24
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff f92a 	bl	8003a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004804:	e02c      	b.n	8004860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004806:	4b09      	ldr	r3, [pc, #36]	; (800482c <UART_SetConfig+0x69c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b00      	cmp	r3, #0
 8004810:	d016      	beq.n	8004840 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004812:	4b06      	ldr	r3, [pc, #24]	; (800482c <UART_SetConfig+0x69c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	08db      	lsrs	r3, r3, #3
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	4a07      	ldr	r2, [pc, #28]	; (800483c <UART_SetConfig+0x6ac>)
 800481e:	fa22 f303 	lsr.w	r3, r2, r3
 8004822:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004824:	e01c      	b.n	8004860 <UART_SetConfig+0x6d0>
 8004826:	bf00      	nop
 8004828:	40011400 	.word	0x40011400
 800482c:	58024400 	.word	0x58024400
 8004830:	40007800 	.word	0x40007800
 8004834:	40007c00 	.word	0x40007c00
 8004838:	58000c00 	.word	0x58000c00
 800483c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004840:	4b9d      	ldr	r3, [pc, #628]	; (8004ab8 <UART_SetConfig+0x928>)
 8004842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004844:	e00c      	b.n	8004860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004846:	4b9d      	ldr	r3, [pc, #628]	; (8004abc <UART_SetConfig+0x92c>)
 8004848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800484a:	e009      	b.n	8004860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004852:	e005      	b.n	8004860 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800485e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 81de 	beq.w	8004c24 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	4a94      	ldr	r2, [pc, #592]	; (8004ac0 <UART_SetConfig+0x930>)
 800486e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004872:	461a      	mov	r2, r3
 8004874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004876:	fbb3 f3f2 	udiv	r3, r3, r2
 800487a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	4413      	add	r3, r2
 8004886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004888:	429a      	cmp	r2, r3
 800488a:	d305      	bcc.n	8004898 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004894:	429a      	cmp	r2, r3
 8004896:	d903      	bls.n	80048a0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800489e:	e1c1      	b.n	8004c24 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a2:	2200      	movs	r2, #0
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	60fa      	str	r2, [r7, #12]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	4a84      	ldr	r2, [pc, #528]	; (8004ac0 <UART_SetConfig+0x930>)
 80048ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2200      	movs	r2, #0
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	607a      	str	r2, [r7, #4]
 80048ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048c2:	f7fb fd5d 	bl	8000380 <__aeabi_uldivmod>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4610      	mov	r0, r2
 80048cc:	4619      	mov	r1, r3
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	020b      	lsls	r3, r1, #8
 80048d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048dc:	0202      	lsls	r2, r0, #8
 80048de:	6979      	ldr	r1, [r7, #20]
 80048e0:	6849      	ldr	r1, [r1, #4]
 80048e2:	0849      	lsrs	r1, r1, #1
 80048e4:	2000      	movs	r0, #0
 80048e6:	460c      	mov	r4, r1
 80048e8:	4605      	mov	r5, r0
 80048ea:	eb12 0804 	adds.w	r8, r2, r4
 80048ee:	eb43 0905 	adc.w	r9, r3, r5
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	469a      	mov	sl, r3
 80048fa:	4693      	mov	fp, r2
 80048fc:	4652      	mov	r2, sl
 80048fe:	465b      	mov	r3, fp
 8004900:	4640      	mov	r0, r8
 8004902:	4649      	mov	r1, r9
 8004904:	f7fb fd3c 	bl	8000380 <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4613      	mov	r3, r2
 800490e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004916:	d308      	bcc.n	800492a <UART_SetConfig+0x79a>
 8004918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800491e:	d204      	bcs.n	800492a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004926:	60da      	str	r2, [r3, #12]
 8004928:	e17c      	b.n	8004c24 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004930:	e178      	b.n	8004c24 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800493a:	f040 80c5 	bne.w	8004ac8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800493e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004942:	2b20      	cmp	r3, #32
 8004944:	dc48      	bgt.n	80049d8 <UART_SetConfig+0x848>
 8004946:	2b00      	cmp	r3, #0
 8004948:	db7b      	blt.n	8004a42 <UART_SetConfig+0x8b2>
 800494a:	2b20      	cmp	r3, #32
 800494c:	d879      	bhi.n	8004a42 <UART_SetConfig+0x8b2>
 800494e:	a201      	add	r2, pc, #4	; (adr r2, 8004954 <UART_SetConfig+0x7c4>)
 8004950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004954:	080049df 	.word	0x080049df
 8004958:	080049e7 	.word	0x080049e7
 800495c:	08004a43 	.word	0x08004a43
 8004960:	08004a43 	.word	0x08004a43
 8004964:	080049ef 	.word	0x080049ef
 8004968:	08004a43 	.word	0x08004a43
 800496c:	08004a43 	.word	0x08004a43
 8004970:	08004a43 	.word	0x08004a43
 8004974:	080049ff 	.word	0x080049ff
 8004978:	08004a43 	.word	0x08004a43
 800497c:	08004a43 	.word	0x08004a43
 8004980:	08004a43 	.word	0x08004a43
 8004984:	08004a43 	.word	0x08004a43
 8004988:	08004a43 	.word	0x08004a43
 800498c:	08004a43 	.word	0x08004a43
 8004990:	08004a43 	.word	0x08004a43
 8004994:	08004a0f 	.word	0x08004a0f
 8004998:	08004a43 	.word	0x08004a43
 800499c:	08004a43 	.word	0x08004a43
 80049a0:	08004a43 	.word	0x08004a43
 80049a4:	08004a43 	.word	0x08004a43
 80049a8:	08004a43 	.word	0x08004a43
 80049ac:	08004a43 	.word	0x08004a43
 80049b0:	08004a43 	.word	0x08004a43
 80049b4:	08004a43 	.word	0x08004a43
 80049b8:	08004a43 	.word	0x08004a43
 80049bc:	08004a43 	.word	0x08004a43
 80049c0:	08004a43 	.word	0x08004a43
 80049c4:	08004a43 	.word	0x08004a43
 80049c8:	08004a43 	.word	0x08004a43
 80049cc:	08004a43 	.word	0x08004a43
 80049d0:	08004a43 	.word	0x08004a43
 80049d4:	08004a35 	.word	0x08004a35
 80049d8:	2b40      	cmp	r3, #64	; 0x40
 80049da:	d02e      	beq.n	8004a3a <UART_SetConfig+0x8aa>
 80049dc:	e031      	b.n	8004a42 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049de:	f7fd ff5d 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 80049e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80049e4:	e033      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e6:	f7fd ff6f 	bl	80028c8 <HAL_RCC_GetPCLK2Freq>
 80049ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80049ec:	e02f      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fe feda 	bl	80037ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049fc:	e027      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049fe:	f107 0318 	add.w	r3, r7, #24
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff f826 	bl	8003a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a0c:	e01f      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a0e:	4b2d      	ldr	r3, [pc, #180]	; (8004ac4 <UART_SetConfig+0x934>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d009      	beq.n	8004a2e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a1a:	4b2a      	ldr	r3, [pc, #168]	; (8004ac4 <UART_SetConfig+0x934>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	08db      	lsrs	r3, r3, #3
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	4a24      	ldr	r2, [pc, #144]	; (8004ab8 <UART_SetConfig+0x928>)
 8004a26:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a2c:	e00f      	b.n	8004a4e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004a2e:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <UART_SetConfig+0x928>)
 8004a30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a32:	e00c      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a34:	4b21      	ldr	r3, [pc, #132]	; (8004abc <UART_SetConfig+0x92c>)
 8004a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a38:	e009      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a40:	e005      	b.n	8004a4e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004a4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80e7 	beq.w	8004c24 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	4a19      	ldr	r2, [pc, #100]	; (8004ac0 <UART_SetConfig+0x930>)
 8004a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a60:	461a      	mov	r2, r3
 8004a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a64:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a68:	005a      	lsls	r2, r3, #1
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	085b      	lsrs	r3, r3, #1
 8004a70:	441a      	add	r2, r3
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7e:	2b0f      	cmp	r3, #15
 8004a80:	d916      	bls.n	8004ab0 <UART_SetConfig+0x920>
 8004a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a88:	d212      	bcs.n	8004ab0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	f023 030f 	bic.w	r3, r3, #15
 8004a92:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004aac:	60da      	str	r2, [r3, #12]
 8004aae:	e0b9      	b.n	8004c24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004ab6:	e0b5      	b.n	8004c24 <UART_SetConfig+0xa94>
 8004ab8:	03d09000 	.word	0x03d09000
 8004abc:	003d0900 	.word	0x003d0900
 8004ac0:	08006188 	.word	0x08006188
 8004ac4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ac8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	dc49      	bgt.n	8004b64 <UART_SetConfig+0x9d4>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	db7c      	blt.n	8004bce <UART_SetConfig+0xa3e>
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d87a      	bhi.n	8004bce <UART_SetConfig+0xa3e>
 8004ad8:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <UART_SetConfig+0x950>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004b6b 	.word	0x08004b6b
 8004ae4:	08004b73 	.word	0x08004b73
 8004ae8:	08004bcf 	.word	0x08004bcf
 8004aec:	08004bcf 	.word	0x08004bcf
 8004af0:	08004b7b 	.word	0x08004b7b
 8004af4:	08004bcf 	.word	0x08004bcf
 8004af8:	08004bcf 	.word	0x08004bcf
 8004afc:	08004bcf 	.word	0x08004bcf
 8004b00:	08004b8b 	.word	0x08004b8b
 8004b04:	08004bcf 	.word	0x08004bcf
 8004b08:	08004bcf 	.word	0x08004bcf
 8004b0c:	08004bcf 	.word	0x08004bcf
 8004b10:	08004bcf 	.word	0x08004bcf
 8004b14:	08004bcf 	.word	0x08004bcf
 8004b18:	08004bcf 	.word	0x08004bcf
 8004b1c:	08004bcf 	.word	0x08004bcf
 8004b20:	08004b9b 	.word	0x08004b9b
 8004b24:	08004bcf 	.word	0x08004bcf
 8004b28:	08004bcf 	.word	0x08004bcf
 8004b2c:	08004bcf 	.word	0x08004bcf
 8004b30:	08004bcf 	.word	0x08004bcf
 8004b34:	08004bcf 	.word	0x08004bcf
 8004b38:	08004bcf 	.word	0x08004bcf
 8004b3c:	08004bcf 	.word	0x08004bcf
 8004b40:	08004bcf 	.word	0x08004bcf
 8004b44:	08004bcf 	.word	0x08004bcf
 8004b48:	08004bcf 	.word	0x08004bcf
 8004b4c:	08004bcf 	.word	0x08004bcf
 8004b50:	08004bcf 	.word	0x08004bcf
 8004b54:	08004bcf 	.word	0x08004bcf
 8004b58:	08004bcf 	.word	0x08004bcf
 8004b5c:	08004bcf 	.word	0x08004bcf
 8004b60:	08004bc1 	.word	0x08004bc1
 8004b64:	2b40      	cmp	r3, #64	; 0x40
 8004b66:	d02e      	beq.n	8004bc6 <UART_SetConfig+0xa36>
 8004b68:	e031      	b.n	8004bce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b6a:	f7fd fe97 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 8004b6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b70:	e033      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b72:	f7fd fea9 	bl	80028c8 <HAL_RCC_GetPCLK2Freq>
 8004b76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b78:	e02f      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe fe14 	bl	80037ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b88:	e027      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b8a:	f107 0318 	add.w	r3, r7, #24
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe ff60 	bl	8003a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b98:	e01f      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b9a:	4b2d      	ldr	r3, [pc, #180]	; (8004c50 <UART_SetConfig+0xac0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ba6:	4b2a      	ldr	r3, [pc, #168]	; (8004c50 <UART_SetConfig+0xac0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	08db      	lsrs	r3, r3, #3
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	4a28      	ldr	r2, [pc, #160]	; (8004c54 <UART_SetConfig+0xac4>)
 8004bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bb8:	e00f      	b.n	8004bda <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004bba:	4b26      	ldr	r3, [pc, #152]	; (8004c54 <UART_SetConfig+0xac4>)
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bbe:	e00c      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004bc0:	4b25      	ldr	r3, [pc, #148]	; (8004c58 <UART_SetConfig+0xac8>)
 8004bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bc4:	e009      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bcc:	e005      	b.n	8004bda <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004bd8:	bf00      	nop
    }

    if (pclk != 0U)
 8004bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d021      	beq.n	8004c24 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	4a1d      	ldr	r2, [pc, #116]	; (8004c5c <UART_SetConfig+0xacc>)
 8004be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bea:	461a      	mov	r2, r3
 8004bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bee:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	441a      	add	r2, r3
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c06:	2b0f      	cmp	r3, #15
 8004c08:	d909      	bls.n	8004c1e <UART_SetConfig+0xa8e>
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c10:	d205      	bcs.n	8004c1e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60da      	str	r2, [r3, #12]
 8004c1c:	e002      	b.n	8004c24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2200      	movs	r2, #0
 8004c38:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004c40:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3748      	adds	r7, #72	; 0x48
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c4e:	bf00      	nop
 8004c50:	58024400 	.word	0x58024400
 8004c54:	03d09000 	.word	0x03d09000
 8004c58:	003d0900 	.word	0x003d0900
 8004c5c:	08006188 	.word	0x08006188

08004c60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01a      	beq.n	8004d76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d5e:	d10a      	bne.n	8004d76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	605a      	str	r2, [r3, #4]
  }
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004db4:	f7fc f94a 	bl	800104c <HAL_GetTick>
 8004db8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d10e      	bne.n	8004de6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f82f 	bl	8004e3a <UART_WaitOnFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e025      	b.n	8004e32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d10e      	bne.n	8004e12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004df4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f819 	bl	8004e3a <UART_WaitOnFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e00f      	b.n	8004e32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b09c      	sub	sp, #112	; 0x70
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	603b      	str	r3, [r7, #0]
 8004e46:	4613      	mov	r3, r2
 8004e48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e4a:	e0a9      	b.n	8004fa0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	f000 80a5 	beq.w	8004fa0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e56:	f7fc f8f9 	bl	800104c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d302      	bcc.n	8004e6c <UART_WaitOnFlagUntilTimeout+0x32>
 8004e66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d140      	bne.n	8004eee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e74:	e853 3f00 	ldrex	r3, [r3]
 8004e78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e80:	667b      	str	r3, [r7, #100]	; 0x64
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e8c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1e6      	bne.n	8004e6c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	663b      	str	r3, [r7, #96]	; 0x60
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3308      	adds	r3, #8
 8004ebc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ebe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ec0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e5      	bne.n	8004e9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e069      	b.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d051      	beq.n	8004fa0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f0a:	d149      	bne.n	8004fa0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f34:	637b      	str	r3, [r7, #52]	; 0x34
 8004f36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e6      	bne.n	8004f16 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	613b      	str	r3, [r7, #16]
   return(result);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f023 0301 	bic.w	r3, r3, #1
 8004f5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3308      	adds	r3, #8
 8004f66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f68:	623a      	str	r2, [r7, #32]
 8004f6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	69f9      	ldr	r1, [r7, #28]
 8004f6e:	6a3a      	ldr	r2, [r7, #32]
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e5      	bne.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e010      	b.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69da      	ldr	r2, [r3, #28]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	bf0c      	ite	eq
 8004fb0:	2301      	moveq	r3, #1
 8004fb2:	2300      	movne	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	f43f af46 	beq.w	8004e4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3770      	adds	r7, #112	; 0x70
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <HAL_UARTEx_DisableFifoMode+0x16>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e027      	b.n	8005030 <HAL_UARTEx_DisableFifoMode+0x66>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2224      	movs	r2, #36	; 0x24
 8004fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0201 	bic.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800500e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005050:	2302      	movs	r3, #2
 8005052:	e02d      	b.n	80050b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2224      	movs	r2, #36	; 0x24
 8005060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0201 	bic.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f84f 	bl	8005134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e02d      	b.n	800512c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2224      	movs	r2, #36	; 0x24
 80050dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0201 	bic.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f811 	bl	8005134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005140:	2b00      	cmp	r3, #0
 8005142:	d108      	bne.n	8005156 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005154:	e031      	b.n	80051ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005156:	2310      	movs	r3, #16
 8005158:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800515a:	2310      	movs	r3, #16
 800515c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	0e5b      	lsrs	r3, r3, #25
 8005166:	b2db      	uxtb	r3, r3
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	0f5b      	lsrs	r3, r3, #29
 8005176:	b2db      	uxtb	r3, r3
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800517e:	7bbb      	ldrb	r3, [r7, #14]
 8005180:	7b3a      	ldrb	r2, [r7, #12]
 8005182:	4911      	ldr	r1, [pc, #68]	; (80051c8 <UARTEx_SetNbDataToProcess+0x94>)
 8005184:	5c8a      	ldrb	r2, [r1, r2]
 8005186:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800518a:	7b3a      	ldrb	r2, [r7, #12]
 800518c:	490f      	ldr	r1, [pc, #60]	; (80051cc <UARTEx_SetNbDataToProcess+0x98>)
 800518e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005190:	fb93 f3f2 	sdiv	r3, r3, r2
 8005194:	b29a      	uxth	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800519c:	7bfb      	ldrb	r3, [r7, #15]
 800519e:	7b7a      	ldrb	r2, [r7, #13]
 80051a0:	4909      	ldr	r1, [pc, #36]	; (80051c8 <UARTEx_SetNbDataToProcess+0x94>)
 80051a2:	5c8a      	ldrb	r2, [r1, r2]
 80051a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80051a8:	7b7a      	ldrb	r2, [r7, #13]
 80051aa:	4908      	ldr	r1, [pc, #32]	; (80051cc <UARTEx_SetNbDataToProcess+0x98>)
 80051ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80051ba:	bf00      	nop
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	080061a0 	.word	0x080061a0
 80051cc:	080061a8 	.word	0x080061a8

080051d0 <__errno>:
 80051d0:	4b01      	ldr	r3, [pc, #4]	; (80051d8 <__errno+0x8>)
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	24000010 	.word	0x24000010

080051dc <__libc_init_array>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	4d0d      	ldr	r5, [pc, #52]	; (8005214 <__libc_init_array+0x38>)
 80051e0:	4c0d      	ldr	r4, [pc, #52]	; (8005218 <__libc_init_array+0x3c>)
 80051e2:	1b64      	subs	r4, r4, r5
 80051e4:	10a4      	asrs	r4, r4, #2
 80051e6:	2600      	movs	r6, #0
 80051e8:	42a6      	cmp	r6, r4
 80051ea:	d109      	bne.n	8005200 <__libc_init_array+0x24>
 80051ec:	4d0b      	ldr	r5, [pc, #44]	; (800521c <__libc_init_array+0x40>)
 80051ee:	4c0c      	ldr	r4, [pc, #48]	; (8005220 <__libc_init_array+0x44>)
 80051f0:	f000 ffae 	bl	8006150 <_init>
 80051f4:	1b64      	subs	r4, r4, r5
 80051f6:	10a4      	asrs	r4, r4, #2
 80051f8:	2600      	movs	r6, #0
 80051fa:	42a6      	cmp	r6, r4
 80051fc:	d105      	bne.n	800520a <__libc_init_array+0x2e>
 80051fe:	bd70      	pop	{r4, r5, r6, pc}
 8005200:	f855 3b04 	ldr.w	r3, [r5], #4
 8005204:	4798      	blx	r3
 8005206:	3601      	adds	r6, #1
 8005208:	e7ee      	b.n	80051e8 <__libc_init_array+0xc>
 800520a:	f855 3b04 	ldr.w	r3, [r5], #4
 800520e:	4798      	blx	r3
 8005210:	3601      	adds	r6, #1
 8005212:	e7f2      	b.n	80051fa <__libc_init_array+0x1e>
 8005214:	08006250 	.word	0x08006250
 8005218:	08006250 	.word	0x08006250
 800521c:	08006250 	.word	0x08006250
 8005220:	08006254 	.word	0x08006254

08005224 <memset>:
 8005224:	4402      	add	r2, r0
 8005226:	4603      	mov	r3, r0
 8005228:	4293      	cmp	r3, r2
 800522a:	d100      	bne.n	800522e <memset+0xa>
 800522c:	4770      	bx	lr
 800522e:	f803 1b01 	strb.w	r1, [r3], #1
 8005232:	e7f9      	b.n	8005228 <memset+0x4>

08005234 <iprintf>:
 8005234:	b40f      	push	{r0, r1, r2, r3}
 8005236:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <iprintf+0x2c>)
 8005238:	b513      	push	{r0, r1, r4, lr}
 800523a:	681c      	ldr	r4, [r3, #0]
 800523c:	b124      	cbz	r4, 8005248 <iprintf+0x14>
 800523e:	69a3      	ldr	r3, [r4, #24]
 8005240:	b913      	cbnz	r3, 8005248 <iprintf+0x14>
 8005242:	4620      	mov	r0, r4
 8005244:	f000 f866 	bl	8005314 <__sinit>
 8005248:	ab05      	add	r3, sp, #20
 800524a:	9a04      	ldr	r2, [sp, #16]
 800524c:	68a1      	ldr	r1, [r4, #8]
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	4620      	mov	r0, r4
 8005252:	f000 f9bd 	bl	80055d0 <_vfiprintf_r>
 8005256:	b002      	add	sp, #8
 8005258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800525c:	b004      	add	sp, #16
 800525e:	4770      	bx	lr
 8005260:	24000010 	.word	0x24000010

08005264 <std>:
 8005264:	2300      	movs	r3, #0
 8005266:	b510      	push	{r4, lr}
 8005268:	4604      	mov	r4, r0
 800526a:	e9c0 3300 	strd	r3, r3, [r0]
 800526e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005272:	6083      	str	r3, [r0, #8]
 8005274:	8181      	strh	r1, [r0, #12]
 8005276:	6643      	str	r3, [r0, #100]	; 0x64
 8005278:	81c2      	strh	r2, [r0, #14]
 800527a:	6183      	str	r3, [r0, #24]
 800527c:	4619      	mov	r1, r3
 800527e:	2208      	movs	r2, #8
 8005280:	305c      	adds	r0, #92	; 0x5c
 8005282:	f7ff ffcf 	bl	8005224 <memset>
 8005286:	4b05      	ldr	r3, [pc, #20]	; (800529c <std+0x38>)
 8005288:	6263      	str	r3, [r4, #36]	; 0x24
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <std+0x3c>)
 800528c:	62a3      	str	r3, [r4, #40]	; 0x28
 800528e:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <std+0x40>)
 8005290:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005292:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <std+0x44>)
 8005294:	6224      	str	r4, [r4, #32]
 8005296:	6323      	str	r3, [r4, #48]	; 0x30
 8005298:	bd10      	pop	{r4, pc}
 800529a:	bf00      	nop
 800529c:	08005b79 	.word	0x08005b79
 80052a0:	08005b9b 	.word	0x08005b9b
 80052a4:	08005bd3 	.word	0x08005bd3
 80052a8:	08005bf7 	.word	0x08005bf7

080052ac <_cleanup_r>:
 80052ac:	4901      	ldr	r1, [pc, #4]	; (80052b4 <_cleanup_r+0x8>)
 80052ae:	f000 b8af 	b.w	8005410 <_fwalk_reent>
 80052b2:	bf00      	nop
 80052b4:	08005ed1 	.word	0x08005ed1

080052b8 <__sfmoreglue>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	2268      	movs	r2, #104	; 0x68
 80052bc:	1e4d      	subs	r5, r1, #1
 80052be:	4355      	muls	r5, r2
 80052c0:	460e      	mov	r6, r1
 80052c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80052c6:	f000 f8e5 	bl	8005494 <_malloc_r>
 80052ca:	4604      	mov	r4, r0
 80052cc:	b140      	cbz	r0, 80052e0 <__sfmoreglue+0x28>
 80052ce:	2100      	movs	r1, #0
 80052d0:	e9c0 1600 	strd	r1, r6, [r0]
 80052d4:	300c      	adds	r0, #12
 80052d6:	60a0      	str	r0, [r4, #8]
 80052d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80052dc:	f7ff ffa2 	bl	8005224 <memset>
 80052e0:	4620      	mov	r0, r4
 80052e2:	bd70      	pop	{r4, r5, r6, pc}

080052e4 <__sfp_lock_acquire>:
 80052e4:	4801      	ldr	r0, [pc, #4]	; (80052ec <__sfp_lock_acquire+0x8>)
 80052e6:	f000 b8b3 	b.w	8005450 <__retarget_lock_acquire_recursive>
 80052ea:	bf00      	nop
 80052ec:	24000175 	.word	0x24000175

080052f0 <__sfp_lock_release>:
 80052f0:	4801      	ldr	r0, [pc, #4]	; (80052f8 <__sfp_lock_release+0x8>)
 80052f2:	f000 b8ae 	b.w	8005452 <__retarget_lock_release_recursive>
 80052f6:	bf00      	nop
 80052f8:	24000175 	.word	0x24000175

080052fc <__sinit_lock_acquire>:
 80052fc:	4801      	ldr	r0, [pc, #4]	; (8005304 <__sinit_lock_acquire+0x8>)
 80052fe:	f000 b8a7 	b.w	8005450 <__retarget_lock_acquire_recursive>
 8005302:	bf00      	nop
 8005304:	24000176 	.word	0x24000176

08005308 <__sinit_lock_release>:
 8005308:	4801      	ldr	r0, [pc, #4]	; (8005310 <__sinit_lock_release+0x8>)
 800530a:	f000 b8a2 	b.w	8005452 <__retarget_lock_release_recursive>
 800530e:	bf00      	nop
 8005310:	24000176 	.word	0x24000176

08005314 <__sinit>:
 8005314:	b510      	push	{r4, lr}
 8005316:	4604      	mov	r4, r0
 8005318:	f7ff fff0 	bl	80052fc <__sinit_lock_acquire>
 800531c:	69a3      	ldr	r3, [r4, #24]
 800531e:	b11b      	cbz	r3, 8005328 <__sinit+0x14>
 8005320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005324:	f7ff bff0 	b.w	8005308 <__sinit_lock_release>
 8005328:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800532c:	6523      	str	r3, [r4, #80]	; 0x50
 800532e:	4b13      	ldr	r3, [pc, #76]	; (800537c <__sinit+0x68>)
 8005330:	4a13      	ldr	r2, [pc, #76]	; (8005380 <__sinit+0x6c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	62a2      	str	r2, [r4, #40]	; 0x28
 8005336:	42a3      	cmp	r3, r4
 8005338:	bf04      	itt	eq
 800533a:	2301      	moveq	r3, #1
 800533c:	61a3      	streq	r3, [r4, #24]
 800533e:	4620      	mov	r0, r4
 8005340:	f000 f820 	bl	8005384 <__sfp>
 8005344:	6060      	str	r0, [r4, #4]
 8005346:	4620      	mov	r0, r4
 8005348:	f000 f81c 	bl	8005384 <__sfp>
 800534c:	60a0      	str	r0, [r4, #8]
 800534e:	4620      	mov	r0, r4
 8005350:	f000 f818 	bl	8005384 <__sfp>
 8005354:	2200      	movs	r2, #0
 8005356:	60e0      	str	r0, [r4, #12]
 8005358:	2104      	movs	r1, #4
 800535a:	6860      	ldr	r0, [r4, #4]
 800535c:	f7ff ff82 	bl	8005264 <std>
 8005360:	68a0      	ldr	r0, [r4, #8]
 8005362:	2201      	movs	r2, #1
 8005364:	2109      	movs	r1, #9
 8005366:	f7ff ff7d 	bl	8005264 <std>
 800536a:	68e0      	ldr	r0, [r4, #12]
 800536c:	2202      	movs	r2, #2
 800536e:	2112      	movs	r1, #18
 8005370:	f7ff ff78 	bl	8005264 <std>
 8005374:	2301      	movs	r3, #1
 8005376:	61a3      	str	r3, [r4, #24]
 8005378:	e7d2      	b.n	8005320 <__sinit+0xc>
 800537a:	bf00      	nop
 800537c:	080061b0 	.word	0x080061b0
 8005380:	080052ad 	.word	0x080052ad

08005384 <__sfp>:
 8005384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005386:	4607      	mov	r7, r0
 8005388:	f7ff ffac 	bl	80052e4 <__sfp_lock_acquire>
 800538c:	4b1e      	ldr	r3, [pc, #120]	; (8005408 <__sfp+0x84>)
 800538e:	681e      	ldr	r6, [r3, #0]
 8005390:	69b3      	ldr	r3, [r6, #24]
 8005392:	b913      	cbnz	r3, 800539a <__sfp+0x16>
 8005394:	4630      	mov	r0, r6
 8005396:	f7ff ffbd 	bl	8005314 <__sinit>
 800539a:	3648      	adds	r6, #72	; 0x48
 800539c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	d503      	bpl.n	80053ac <__sfp+0x28>
 80053a4:	6833      	ldr	r3, [r6, #0]
 80053a6:	b30b      	cbz	r3, 80053ec <__sfp+0x68>
 80053a8:	6836      	ldr	r6, [r6, #0]
 80053aa:	e7f7      	b.n	800539c <__sfp+0x18>
 80053ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80053b0:	b9d5      	cbnz	r5, 80053e8 <__sfp+0x64>
 80053b2:	4b16      	ldr	r3, [pc, #88]	; (800540c <__sfp+0x88>)
 80053b4:	60e3      	str	r3, [r4, #12]
 80053b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80053ba:	6665      	str	r5, [r4, #100]	; 0x64
 80053bc:	f000 f847 	bl	800544e <__retarget_lock_init_recursive>
 80053c0:	f7ff ff96 	bl	80052f0 <__sfp_lock_release>
 80053c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80053c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80053cc:	6025      	str	r5, [r4, #0]
 80053ce:	61a5      	str	r5, [r4, #24]
 80053d0:	2208      	movs	r2, #8
 80053d2:	4629      	mov	r1, r5
 80053d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80053d8:	f7ff ff24 	bl	8005224 <memset>
 80053dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80053e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80053e4:	4620      	mov	r0, r4
 80053e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053e8:	3468      	adds	r4, #104	; 0x68
 80053ea:	e7d9      	b.n	80053a0 <__sfp+0x1c>
 80053ec:	2104      	movs	r1, #4
 80053ee:	4638      	mov	r0, r7
 80053f0:	f7ff ff62 	bl	80052b8 <__sfmoreglue>
 80053f4:	4604      	mov	r4, r0
 80053f6:	6030      	str	r0, [r6, #0]
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d1d5      	bne.n	80053a8 <__sfp+0x24>
 80053fc:	f7ff ff78 	bl	80052f0 <__sfp_lock_release>
 8005400:	230c      	movs	r3, #12
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	e7ee      	b.n	80053e4 <__sfp+0x60>
 8005406:	bf00      	nop
 8005408:	080061b0 	.word	0x080061b0
 800540c:	ffff0001 	.word	0xffff0001

08005410 <_fwalk_reent>:
 8005410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005414:	4606      	mov	r6, r0
 8005416:	4688      	mov	r8, r1
 8005418:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800541c:	2700      	movs	r7, #0
 800541e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005422:	f1b9 0901 	subs.w	r9, r9, #1
 8005426:	d505      	bpl.n	8005434 <_fwalk_reent+0x24>
 8005428:	6824      	ldr	r4, [r4, #0]
 800542a:	2c00      	cmp	r4, #0
 800542c:	d1f7      	bne.n	800541e <_fwalk_reent+0xe>
 800542e:	4638      	mov	r0, r7
 8005430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005434:	89ab      	ldrh	r3, [r5, #12]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d907      	bls.n	800544a <_fwalk_reent+0x3a>
 800543a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800543e:	3301      	adds	r3, #1
 8005440:	d003      	beq.n	800544a <_fwalk_reent+0x3a>
 8005442:	4629      	mov	r1, r5
 8005444:	4630      	mov	r0, r6
 8005446:	47c0      	blx	r8
 8005448:	4307      	orrs	r7, r0
 800544a:	3568      	adds	r5, #104	; 0x68
 800544c:	e7e9      	b.n	8005422 <_fwalk_reent+0x12>

0800544e <__retarget_lock_init_recursive>:
 800544e:	4770      	bx	lr

08005450 <__retarget_lock_acquire_recursive>:
 8005450:	4770      	bx	lr

08005452 <__retarget_lock_release_recursive>:
 8005452:	4770      	bx	lr

08005454 <sbrk_aligned>:
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	4e0e      	ldr	r6, [pc, #56]	; (8005490 <sbrk_aligned+0x3c>)
 8005458:	460c      	mov	r4, r1
 800545a:	6831      	ldr	r1, [r6, #0]
 800545c:	4605      	mov	r5, r0
 800545e:	b911      	cbnz	r1, 8005466 <sbrk_aligned+0x12>
 8005460:	f000 fb7a 	bl	8005b58 <_sbrk_r>
 8005464:	6030      	str	r0, [r6, #0]
 8005466:	4621      	mov	r1, r4
 8005468:	4628      	mov	r0, r5
 800546a:	f000 fb75 	bl	8005b58 <_sbrk_r>
 800546e:	1c43      	adds	r3, r0, #1
 8005470:	d00a      	beq.n	8005488 <sbrk_aligned+0x34>
 8005472:	1cc4      	adds	r4, r0, #3
 8005474:	f024 0403 	bic.w	r4, r4, #3
 8005478:	42a0      	cmp	r0, r4
 800547a:	d007      	beq.n	800548c <sbrk_aligned+0x38>
 800547c:	1a21      	subs	r1, r4, r0
 800547e:	4628      	mov	r0, r5
 8005480:	f000 fb6a 	bl	8005b58 <_sbrk_r>
 8005484:	3001      	adds	r0, #1
 8005486:	d101      	bne.n	800548c <sbrk_aligned+0x38>
 8005488:	f04f 34ff 	mov.w	r4, #4294967295
 800548c:	4620      	mov	r0, r4
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	2400017c 	.word	0x2400017c

08005494 <_malloc_r>:
 8005494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005498:	1ccd      	adds	r5, r1, #3
 800549a:	f025 0503 	bic.w	r5, r5, #3
 800549e:	3508      	adds	r5, #8
 80054a0:	2d0c      	cmp	r5, #12
 80054a2:	bf38      	it	cc
 80054a4:	250c      	movcc	r5, #12
 80054a6:	2d00      	cmp	r5, #0
 80054a8:	4607      	mov	r7, r0
 80054aa:	db01      	blt.n	80054b0 <_malloc_r+0x1c>
 80054ac:	42a9      	cmp	r1, r5
 80054ae:	d905      	bls.n	80054bc <_malloc_r+0x28>
 80054b0:	230c      	movs	r3, #12
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	2600      	movs	r6, #0
 80054b6:	4630      	mov	r0, r6
 80054b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054bc:	4e2e      	ldr	r6, [pc, #184]	; (8005578 <_malloc_r+0xe4>)
 80054be:	f000 fdbb 	bl	8006038 <__malloc_lock>
 80054c2:	6833      	ldr	r3, [r6, #0]
 80054c4:	461c      	mov	r4, r3
 80054c6:	bb34      	cbnz	r4, 8005516 <_malloc_r+0x82>
 80054c8:	4629      	mov	r1, r5
 80054ca:	4638      	mov	r0, r7
 80054cc:	f7ff ffc2 	bl	8005454 <sbrk_aligned>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	4604      	mov	r4, r0
 80054d4:	d14d      	bne.n	8005572 <_malloc_r+0xde>
 80054d6:	6834      	ldr	r4, [r6, #0]
 80054d8:	4626      	mov	r6, r4
 80054da:	2e00      	cmp	r6, #0
 80054dc:	d140      	bne.n	8005560 <_malloc_r+0xcc>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	4631      	mov	r1, r6
 80054e2:	4638      	mov	r0, r7
 80054e4:	eb04 0803 	add.w	r8, r4, r3
 80054e8:	f000 fb36 	bl	8005b58 <_sbrk_r>
 80054ec:	4580      	cmp	r8, r0
 80054ee:	d13a      	bne.n	8005566 <_malloc_r+0xd2>
 80054f0:	6821      	ldr	r1, [r4, #0]
 80054f2:	3503      	adds	r5, #3
 80054f4:	1a6d      	subs	r5, r5, r1
 80054f6:	f025 0503 	bic.w	r5, r5, #3
 80054fa:	3508      	adds	r5, #8
 80054fc:	2d0c      	cmp	r5, #12
 80054fe:	bf38      	it	cc
 8005500:	250c      	movcc	r5, #12
 8005502:	4629      	mov	r1, r5
 8005504:	4638      	mov	r0, r7
 8005506:	f7ff ffa5 	bl	8005454 <sbrk_aligned>
 800550a:	3001      	adds	r0, #1
 800550c:	d02b      	beq.n	8005566 <_malloc_r+0xd2>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	442b      	add	r3, r5
 8005512:	6023      	str	r3, [r4, #0]
 8005514:	e00e      	b.n	8005534 <_malloc_r+0xa0>
 8005516:	6822      	ldr	r2, [r4, #0]
 8005518:	1b52      	subs	r2, r2, r5
 800551a:	d41e      	bmi.n	800555a <_malloc_r+0xc6>
 800551c:	2a0b      	cmp	r2, #11
 800551e:	d916      	bls.n	800554e <_malloc_r+0xba>
 8005520:	1961      	adds	r1, r4, r5
 8005522:	42a3      	cmp	r3, r4
 8005524:	6025      	str	r5, [r4, #0]
 8005526:	bf18      	it	ne
 8005528:	6059      	strne	r1, [r3, #4]
 800552a:	6863      	ldr	r3, [r4, #4]
 800552c:	bf08      	it	eq
 800552e:	6031      	streq	r1, [r6, #0]
 8005530:	5162      	str	r2, [r4, r5]
 8005532:	604b      	str	r3, [r1, #4]
 8005534:	4638      	mov	r0, r7
 8005536:	f104 060b 	add.w	r6, r4, #11
 800553a:	f000 fd83 	bl	8006044 <__malloc_unlock>
 800553e:	f026 0607 	bic.w	r6, r6, #7
 8005542:	1d23      	adds	r3, r4, #4
 8005544:	1af2      	subs	r2, r6, r3
 8005546:	d0b6      	beq.n	80054b6 <_malloc_r+0x22>
 8005548:	1b9b      	subs	r3, r3, r6
 800554a:	50a3      	str	r3, [r4, r2]
 800554c:	e7b3      	b.n	80054b6 <_malloc_r+0x22>
 800554e:	6862      	ldr	r2, [r4, #4]
 8005550:	42a3      	cmp	r3, r4
 8005552:	bf0c      	ite	eq
 8005554:	6032      	streq	r2, [r6, #0]
 8005556:	605a      	strne	r2, [r3, #4]
 8005558:	e7ec      	b.n	8005534 <_malloc_r+0xa0>
 800555a:	4623      	mov	r3, r4
 800555c:	6864      	ldr	r4, [r4, #4]
 800555e:	e7b2      	b.n	80054c6 <_malloc_r+0x32>
 8005560:	4634      	mov	r4, r6
 8005562:	6876      	ldr	r6, [r6, #4]
 8005564:	e7b9      	b.n	80054da <_malloc_r+0x46>
 8005566:	230c      	movs	r3, #12
 8005568:	603b      	str	r3, [r7, #0]
 800556a:	4638      	mov	r0, r7
 800556c:	f000 fd6a 	bl	8006044 <__malloc_unlock>
 8005570:	e7a1      	b.n	80054b6 <_malloc_r+0x22>
 8005572:	6025      	str	r5, [r4, #0]
 8005574:	e7de      	b.n	8005534 <_malloc_r+0xa0>
 8005576:	bf00      	nop
 8005578:	24000178 	.word	0x24000178

0800557c <__sfputc_r>:
 800557c:	6893      	ldr	r3, [r2, #8]
 800557e:	3b01      	subs	r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	b410      	push	{r4}
 8005584:	6093      	str	r3, [r2, #8]
 8005586:	da08      	bge.n	800559a <__sfputc_r+0x1e>
 8005588:	6994      	ldr	r4, [r2, #24]
 800558a:	42a3      	cmp	r3, r4
 800558c:	db01      	blt.n	8005592 <__sfputc_r+0x16>
 800558e:	290a      	cmp	r1, #10
 8005590:	d103      	bne.n	800559a <__sfputc_r+0x1e>
 8005592:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005596:	f000 bb33 	b.w	8005c00 <__swbuf_r>
 800559a:	6813      	ldr	r3, [r2, #0]
 800559c:	1c58      	adds	r0, r3, #1
 800559e:	6010      	str	r0, [r2, #0]
 80055a0:	7019      	strb	r1, [r3, #0]
 80055a2:	4608      	mov	r0, r1
 80055a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <__sfputs_r>:
 80055aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ac:	4606      	mov	r6, r0
 80055ae:	460f      	mov	r7, r1
 80055b0:	4614      	mov	r4, r2
 80055b2:	18d5      	adds	r5, r2, r3
 80055b4:	42ac      	cmp	r4, r5
 80055b6:	d101      	bne.n	80055bc <__sfputs_r+0x12>
 80055b8:	2000      	movs	r0, #0
 80055ba:	e007      	b.n	80055cc <__sfputs_r+0x22>
 80055bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055c0:	463a      	mov	r2, r7
 80055c2:	4630      	mov	r0, r6
 80055c4:	f7ff ffda 	bl	800557c <__sfputc_r>
 80055c8:	1c43      	adds	r3, r0, #1
 80055ca:	d1f3      	bne.n	80055b4 <__sfputs_r+0xa>
 80055cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055d0 <_vfiprintf_r>:
 80055d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d4:	460d      	mov	r5, r1
 80055d6:	b09d      	sub	sp, #116	; 0x74
 80055d8:	4614      	mov	r4, r2
 80055da:	4698      	mov	r8, r3
 80055dc:	4606      	mov	r6, r0
 80055de:	b118      	cbz	r0, 80055e8 <_vfiprintf_r+0x18>
 80055e0:	6983      	ldr	r3, [r0, #24]
 80055e2:	b90b      	cbnz	r3, 80055e8 <_vfiprintf_r+0x18>
 80055e4:	f7ff fe96 	bl	8005314 <__sinit>
 80055e8:	4b89      	ldr	r3, [pc, #548]	; (8005810 <_vfiprintf_r+0x240>)
 80055ea:	429d      	cmp	r5, r3
 80055ec:	d11b      	bne.n	8005626 <_vfiprintf_r+0x56>
 80055ee:	6875      	ldr	r5, [r6, #4]
 80055f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055f2:	07d9      	lsls	r1, r3, #31
 80055f4:	d405      	bmi.n	8005602 <_vfiprintf_r+0x32>
 80055f6:	89ab      	ldrh	r3, [r5, #12]
 80055f8:	059a      	lsls	r2, r3, #22
 80055fa:	d402      	bmi.n	8005602 <_vfiprintf_r+0x32>
 80055fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055fe:	f7ff ff27 	bl	8005450 <__retarget_lock_acquire_recursive>
 8005602:	89ab      	ldrh	r3, [r5, #12]
 8005604:	071b      	lsls	r3, r3, #28
 8005606:	d501      	bpl.n	800560c <_vfiprintf_r+0x3c>
 8005608:	692b      	ldr	r3, [r5, #16]
 800560a:	b9eb      	cbnz	r3, 8005648 <_vfiprintf_r+0x78>
 800560c:	4629      	mov	r1, r5
 800560e:	4630      	mov	r0, r6
 8005610:	f000 fb5a 	bl	8005cc8 <__swsetup_r>
 8005614:	b1c0      	cbz	r0, 8005648 <_vfiprintf_r+0x78>
 8005616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005618:	07dc      	lsls	r4, r3, #31
 800561a:	d50e      	bpl.n	800563a <_vfiprintf_r+0x6a>
 800561c:	f04f 30ff 	mov.w	r0, #4294967295
 8005620:	b01d      	add	sp, #116	; 0x74
 8005622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005626:	4b7b      	ldr	r3, [pc, #492]	; (8005814 <_vfiprintf_r+0x244>)
 8005628:	429d      	cmp	r5, r3
 800562a:	d101      	bne.n	8005630 <_vfiprintf_r+0x60>
 800562c:	68b5      	ldr	r5, [r6, #8]
 800562e:	e7df      	b.n	80055f0 <_vfiprintf_r+0x20>
 8005630:	4b79      	ldr	r3, [pc, #484]	; (8005818 <_vfiprintf_r+0x248>)
 8005632:	429d      	cmp	r5, r3
 8005634:	bf08      	it	eq
 8005636:	68f5      	ldreq	r5, [r6, #12]
 8005638:	e7da      	b.n	80055f0 <_vfiprintf_r+0x20>
 800563a:	89ab      	ldrh	r3, [r5, #12]
 800563c:	0598      	lsls	r0, r3, #22
 800563e:	d4ed      	bmi.n	800561c <_vfiprintf_r+0x4c>
 8005640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005642:	f7ff ff06 	bl	8005452 <__retarget_lock_release_recursive>
 8005646:	e7e9      	b.n	800561c <_vfiprintf_r+0x4c>
 8005648:	2300      	movs	r3, #0
 800564a:	9309      	str	r3, [sp, #36]	; 0x24
 800564c:	2320      	movs	r3, #32
 800564e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005652:	f8cd 800c 	str.w	r8, [sp, #12]
 8005656:	2330      	movs	r3, #48	; 0x30
 8005658:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800581c <_vfiprintf_r+0x24c>
 800565c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005660:	f04f 0901 	mov.w	r9, #1
 8005664:	4623      	mov	r3, r4
 8005666:	469a      	mov	sl, r3
 8005668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800566c:	b10a      	cbz	r2, 8005672 <_vfiprintf_r+0xa2>
 800566e:	2a25      	cmp	r2, #37	; 0x25
 8005670:	d1f9      	bne.n	8005666 <_vfiprintf_r+0x96>
 8005672:	ebba 0b04 	subs.w	fp, sl, r4
 8005676:	d00b      	beq.n	8005690 <_vfiprintf_r+0xc0>
 8005678:	465b      	mov	r3, fp
 800567a:	4622      	mov	r2, r4
 800567c:	4629      	mov	r1, r5
 800567e:	4630      	mov	r0, r6
 8005680:	f7ff ff93 	bl	80055aa <__sfputs_r>
 8005684:	3001      	adds	r0, #1
 8005686:	f000 80aa 	beq.w	80057de <_vfiprintf_r+0x20e>
 800568a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800568c:	445a      	add	r2, fp
 800568e:	9209      	str	r2, [sp, #36]	; 0x24
 8005690:	f89a 3000 	ldrb.w	r3, [sl]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 80a2 	beq.w	80057de <_vfiprintf_r+0x20e>
 800569a:	2300      	movs	r3, #0
 800569c:	f04f 32ff 	mov.w	r2, #4294967295
 80056a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056a4:	f10a 0a01 	add.w	sl, sl, #1
 80056a8:	9304      	str	r3, [sp, #16]
 80056aa:	9307      	str	r3, [sp, #28]
 80056ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056b0:	931a      	str	r3, [sp, #104]	; 0x68
 80056b2:	4654      	mov	r4, sl
 80056b4:	2205      	movs	r2, #5
 80056b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ba:	4858      	ldr	r0, [pc, #352]	; (800581c <_vfiprintf_r+0x24c>)
 80056bc:	f7fa fe10 	bl	80002e0 <memchr>
 80056c0:	9a04      	ldr	r2, [sp, #16]
 80056c2:	b9d8      	cbnz	r0, 80056fc <_vfiprintf_r+0x12c>
 80056c4:	06d1      	lsls	r1, r2, #27
 80056c6:	bf44      	itt	mi
 80056c8:	2320      	movmi	r3, #32
 80056ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056ce:	0713      	lsls	r3, r2, #28
 80056d0:	bf44      	itt	mi
 80056d2:	232b      	movmi	r3, #43	; 0x2b
 80056d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056d8:	f89a 3000 	ldrb.w	r3, [sl]
 80056dc:	2b2a      	cmp	r3, #42	; 0x2a
 80056de:	d015      	beq.n	800570c <_vfiprintf_r+0x13c>
 80056e0:	9a07      	ldr	r2, [sp, #28]
 80056e2:	4654      	mov	r4, sl
 80056e4:	2000      	movs	r0, #0
 80056e6:	f04f 0c0a 	mov.w	ip, #10
 80056ea:	4621      	mov	r1, r4
 80056ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056f0:	3b30      	subs	r3, #48	; 0x30
 80056f2:	2b09      	cmp	r3, #9
 80056f4:	d94e      	bls.n	8005794 <_vfiprintf_r+0x1c4>
 80056f6:	b1b0      	cbz	r0, 8005726 <_vfiprintf_r+0x156>
 80056f8:	9207      	str	r2, [sp, #28]
 80056fa:	e014      	b.n	8005726 <_vfiprintf_r+0x156>
 80056fc:	eba0 0308 	sub.w	r3, r0, r8
 8005700:	fa09 f303 	lsl.w	r3, r9, r3
 8005704:	4313      	orrs	r3, r2
 8005706:	9304      	str	r3, [sp, #16]
 8005708:	46a2      	mov	sl, r4
 800570a:	e7d2      	b.n	80056b2 <_vfiprintf_r+0xe2>
 800570c:	9b03      	ldr	r3, [sp, #12]
 800570e:	1d19      	adds	r1, r3, #4
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	9103      	str	r1, [sp, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	bfbb      	ittet	lt
 8005718:	425b      	neglt	r3, r3
 800571a:	f042 0202 	orrlt.w	r2, r2, #2
 800571e:	9307      	strge	r3, [sp, #28]
 8005720:	9307      	strlt	r3, [sp, #28]
 8005722:	bfb8      	it	lt
 8005724:	9204      	strlt	r2, [sp, #16]
 8005726:	7823      	ldrb	r3, [r4, #0]
 8005728:	2b2e      	cmp	r3, #46	; 0x2e
 800572a:	d10c      	bne.n	8005746 <_vfiprintf_r+0x176>
 800572c:	7863      	ldrb	r3, [r4, #1]
 800572e:	2b2a      	cmp	r3, #42	; 0x2a
 8005730:	d135      	bne.n	800579e <_vfiprintf_r+0x1ce>
 8005732:	9b03      	ldr	r3, [sp, #12]
 8005734:	1d1a      	adds	r2, r3, #4
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	9203      	str	r2, [sp, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	bfb8      	it	lt
 800573e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005742:	3402      	adds	r4, #2
 8005744:	9305      	str	r3, [sp, #20]
 8005746:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800582c <_vfiprintf_r+0x25c>
 800574a:	7821      	ldrb	r1, [r4, #0]
 800574c:	2203      	movs	r2, #3
 800574e:	4650      	mov	r0, sl
 8005750:	f7fa fdc6 	bl	80002e0 <memchr>
 8005754:	b140      	cbz	r0, 8005768 <_vfiprintf_r+0x198>
 8005756:	2340      	movs	r3, #64	; 0x40
 8005758:	eba0 000a 	sub.w	r0, r0, sl
 800575c:	fa03 f000 	lsl.w	r0, r3, r0
 8005760:	9b04      	ldr	r3, [sp, #16]
 8005762:	4303      	orrs	r3, r0
 8005764:	3401      	adds	r4, #1
 8005766:	9304      	str	r3, [sp, #16]
 8005768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800576c:	482c      	ldr	r0, [pc, #176]	; (8005820 <_vfiprintf_r+0x250>)
 800576e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005772:	2206      	movs	r2, #6
 8005774:	f7fa fdb4 	bl	80002e0 <memchr>
 8005778:	2800      	cmp	r0, #0
 800577a:	d03f      	beq.n	80057fc <_vfiprintf_r+0x22c>
 800577c:	4b29      	ldr	r3, [pc, #164]	; (8005824 <_vfiprintf_r+0x254>)
 800577e:	bb1b      	cbnz	r3, 80057c8 <_vfiprintf_r+0x1f8>
 8005780:	9b03      	ldr	r3, [sp, #12]
 8005782:	3307      	adds	r3, #7
 8005784:	f023 0307 	bic.w	r3, r3, #7
 8005788:	3308      	adds	r3, #8
 800578a:	9303      	str	r3, [sp, #12]
 800578c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800578e:	443b      	add	r3, r7
 8005790:	9309      	str	r3, [sp, #36]	; 0x24
 8005792:	e767      	b.n	8005664 <_vfiprintf_r+0x94>
 8005794:	fb0c 3202 	mla	r2, ip, r2, r3
 8005798:	460c      	mov	r4, r1
 800579a:	2001      	movs	r0, #1
 800579c:	e7a5      	b.n	80056ea <_vfiprintf_r+0x11a>
 800579e:	2300      	movs	r3, #0
 80057a0:	3401      	adds	r4, #1
 80057a2:	9305      	str	r3, [sp, #20]
 80057a4:	4619      	mov	r1, r3
 80057a6:	f04f 0c0a 	mov.w	ip, #10
 80057aa:	4620      	mov	r0, r4
 80057ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057b0:	3a30      	subs	r2, #48	; 0x30
 80057b2:	2a09      	cmp	r2, #9
 80057b4:	d903      	bls.n	80057be <_vfiprintf_r+0x1ee>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0c5      	beq.n	8005746 <_vfiprintf_r+0x176>
 80057ba:	9105      	str	r1, [sp, #20]
 80057bc:	e7c3      	b.n	8005746 <_vfiprintf_r+0x176>
 80057be:	fb0c 2101 	mla	r1, ip, r1, r2
 80057c2:	4604      	mov	r4, r0
 80057c4:	2301      	movs	r3, #1
 80057c6:	e7f0      	b.n	80057aa <_vfiprintf_r+0x1da>
 80057c8:	ab03      	add	r3, sp, #12
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	462a      	mov	r2, r5
 80057ce:	4b16      	ldr	r3, [pc, #88]	; (8005828 <_vfiprintf_r+0x258>)
 80057d0:	a904      	add	r1, sp, #16
 80057d2:	4630      	mov	r0, r6
 80057d4:	f3af 8000 	nop.w
 80057d8:	4607      	mov	r7, r0
 80057da:	1c78      	adds	r0, r7, #1
 80057dc:	d1d6      	bne.n	800578c <_vfiprintf_r+0x1bc>
 80057de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057e0:	07d9      	lsls	r1, r3, #31
 80057e2:	d405      	bmi.n	80057f0 <_vfiprintf_r+0x220>
 80057e4:	89ab      	ldrh	r3, [r5, #12]
 80057e6:	059a      	lsls	r2, r3, #22
 80057e8:	d402      	bmi.n	80057f0 <_vfiprintf_r+0x220>
 80057ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057ec:	f7ff fe31 	bl	8005452 <__retarget_lock_release_recursive>
 80057f0:	89ab      	ldrh	r3, [r5, #12]
 80057f2:	065b      	lsls	r3, r3, #25
 80057f4:	f53f af12 	bmi.w	800561c <_vfiprintf_r+0x4c>
 80057f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057fa:	e711      	b.n	8005620 <_vfiprintf_r+0x50>
 80057fc:	ab03      	add	r3, sp, #12
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	462a      	mov	r2, r5
 8005802:	4b09      	ldr	r3, [pc, #36]	; (8005828 <_vfiprintf_r+0x258>)
 8005804:	a904      	add	r1, sp, #16
 8005806:	4630      	mov	r0, r6
 8005808:	f000 f880 	bl	800590c <_printf_i>
 800580c:	e7e4      	b.n	80057d8 <_vfiprintf_r+0x208>
 800580e:	bf00      	nop
 8005810:	080061d4 	.word	0x080061d4
 8005814:	080061f4 	.word	0x080061f4
 8005818:	080061b4 	.word	0x080061b4
 800581c:	08006214 	.word	0x08006214
 8005820:	0800621e 	.word	0x0800621e
 8005824:	00000000 	.word	0x00000000
 8005828:	080055ab 	.word	0x080055ab
 800582c:	0800621a 	.word	0x0800621a

08005830 <_printf_common>:
 8005830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005834:	4616      	mov	r6, r2
 8005836:	4699      	mov	r9, r3
 8005838:	688a      	ldr	r2, [r1, #8]
 800583a:	690b      	ldr	r3, [r1, #16]
 800583c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005840:	4293      	cmp	r3, r2
 8005842:	bfb8      	it	lt
 8005844:	4613      	movlt	r3, r2
 8005846:	6033      	str	r3, [r6, #0]
 8005848:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800584c:	4607      	mov	r7, r0
 800584e:	460c      	mov	r4, r1
 8005850:	b10a      	cbz	r2, 8005856 <_printf_common+0x26>
 8005852:	3301      	adds	r3, #1
 8005854:	6033      	str	r3, [r6, #0]
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	0699      	lsls	r1, r3, #26
 800585a:	bf42      	ittt	mi
 800585c:	6833      	ldrmi	r3, [r6, #0]
 800585e:	3302      	addmi	r3, #2
 8005860:	6033      	strmi	r3, [r6, #0]
 8005862:	6825      	ldr	r5, [r4, #0]
 8005864:	f015 0506 	ands.w	r5, r5, #6
 8005868:	d106      	bne.n	8005878 <_printf_common+0x48>
 800586a:	f104 0a19 	add.w	sl, r4, #25
 800586e:	68e3      	ldr	r3, [r4, #12]
 8005870:	6832      	ldr	r2, [r6, #0]
 8005872:	1a9b      	subs	r3, r3, r2
 8005874:	42ab      	cmp	r3, r5
 8005876:	dc26      	bgt.n	80058c6 <_printf_common+0x96>
 8005878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800587c:	1e13      	subs	r3, r2, #0
 800587e:	6822      	ldr	r2, [r4, #0]
 8005880:	bf18      	it	ne
 8005882:	2301      	movne	r3, #1
 8005884:	0692      	lsls	r2, r2, #26
 8005886:	d42b      	bmi.n	80058e0 <_printf_common+0xb0>
 8005888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800588c:	4649      	mov	r1, r9
 800588e:	4638      	mov	r0, r7
 8005890:	47c0      	blx	r8
 8005892:	3001      	adds	r0, #1
 8005894:	d01e      	beq.n	80058d4 <_printf_common+0xa4>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	68e5      	ldr	r5, [r4, #12]
 800589a:	6832      	ldr	r2, [r6, #0]
 800589c:	f003 0306 	and.w	r3, r3, #6
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	bf08      	it	eq
 80058a4:	1aad      	subeq	r5, r5, r2
 80058a6:	68a3      	ldr	r3, [r4, #8]
 80058a8:	6922      	ldr	r2, [r4, #16]
 80058aa:	bf0c      	ite	eq
 80058ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058b0:	2500      	movne	r5, #0
 80058b2:	4293      	cmp	r3, r2
 80058b4:	bfc4      	itt	gt
 80058b6:	1a9b      	subgt	r3, r3, r2
 80058b8:	18ed      	addgt	r5, r5, r3
 80058ba:	2600      	movs	r6, #0
 80058bc:	341a      	adds	r4, #26
 80058be:	42b5      	cmp	r5, r6
 80058c0:	d11a      	bne.n	80058f8 <_printf_common+0xc8>
 80058c2:	2000      	movs	r0, #0
 80058c4:	e008      	b.n	80058d8 <_printf_common+0xa8>
 80058c6:	2301      	movs	r3, #1
 80058c8:	4652      	mov	r2, sl
 80058ca:	4649      	mov	r1, r9
 80058cc:	4638      	mov	r0, r7
 80058ce:	47c0      	blx	r8
 80058d0:	3001      	adds	r0, #1
 80058d2:	d103      	bne.n	80058dc <_printf_common+0xac>
 80058d4:	f04f 30ff 	mov.w	r0, #4294967295
 80058d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058dc:	3501      	adds	r5, #1
 80058de:	e7c6      	b.n	800586e <_printf_common+0x3e>
 80058e0:	18e1      	adds	r1, r4, r3
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	2030      	movs	r0, #48	; 0x30
 80058e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ea:	4422      	add	r2, r4
 80058ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058f4:	3302      	adds	r3, #2
 80058f6:	e7c7      	b.n	8005888 <_printf_common+0x58>
 80058f8:	2301      	movs	r3, #1
 80058fa:	4622      	mov	r2, r4
 80058fc:	4649      	mov	r1, r9
 80058fe:	4638      	mov	r0, r7
 8005900:	47c0      	blx	r8
 8005902:	3001      	adds	r0, #1
 8005904:	d0e6      	beq.n	80058d4 <_printf_common+0xa4>
 8005906:	3601      	adds	r6, #1
 8005908:	e7d9      	b.n	80058be <_printf_common+0x8e>
	...

0800590c <_printf_i>:
 800590c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005910:	7e0f      	ldrb	r7, [r1, #24]
 8005912:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005914:	2f78      	cmp	r7, #120	; 0x78
 8005916:	4691      	mov	r9, r2
 8005918:	4680      	mov	r8, r0
 800591a:	460c      	mov	r4, r1
 800591c:	469a      	mov	sl, r3
 800591e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005922:	d807      	bhi.n	8005934 <_printf_i+0x28>
 8005924:	2f62      	cmp	r7, #98	; 0x62
 8005926:	d80a      	bhi.n	800593e <_printf_i+0x32>
 8005928:	2f00      	cmp	r7, #0
 800592a:	f000 80d8 	beq.w	8005ade <_printf_i+0x1d2>
 800592e:	2f58      	cmp	r7, #88	; 0x58
 8005930:	f000 80a3 	beq.w	8005a7a <_printf_i+0x16e>
 8005934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800593c:	e03a      	b.n	80059b4 <_printf_i+0xa8>
 800593e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005942:	2b15      	cmp	r3, #21
 8005944:	d8f6      	bhi.n	8005934 <_printf_i+0x28>
 8005946:	a101      	add	r1, pc, #4	; (adr r1, 800594c <_printf_i+0x40>)
 8005948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800594c:	080059a5 	.word	0x080059a5
 8005950:	080059b9 	.word	0x080059b9
 8005954:	08005935 	.word	0x08005935
 8005958:	08005935 	.word	0x08005935
 800595c:	08005935 	.word	0x08005935
 8005960:	08005935 	.word	0x08005935
 8005964:	080059b9 	.word	0x080059b9
 8005968:	08005935 	.word	0x08005935
 800596c:	08005935 	.word	0x08005935
 8005970:	08005935 	.word	0x08005935
 8005974:	08005935 	.word	0x08005935
 8005978:	08005ac5 	.word	0x08005ac5
 800597c:	080059e9 	.word	0x080059e9
 8005980:	08005aa7 	.word	0x08005aa7
 8005984:	08005935 	.word	0x08005935
 8005988:	08005935 	.word	0x08005935
 800598c:	08005ae7 	.word	0x08005ae7
 8005990:	08005935 	.word	0x08005935
 8005994:	080059e9 	.word	0x080059e9
 8005998:	08005935 	.word	0x08005935
 800599c:	08005935 	.word	0x08005935
 80059a0:	08005aaf 	.word	0x08005aaf
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	1d1a      	adds	r2, r3, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	602a      	str	r2, [r5, #0]
 80059ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0a3      	b.n	8005b00 <_printf_i+0x1f4>
 80059b8:	6820      	ldr	r0, [r4, #0]
 80059ba:	6829      	ldr	r1, [r5, #0]
 80059bc:	0606      	lsls	r6, r0, #24
 80059be:	f101 0304 	add.w	r3, r1, #4
 80059c2:	d50a      	bpl.n	80059da <_printf_i+0xce>
 80059c4:	680e      	ldr	r6, [r1, #0]
 80059c6:	602b      	str	r3, [r5, #0]
 80059c8:	2e00      	cmp	r6, #0
 80059ca:	da03      	bge.n	80059d4 <_printf_i+0xc8>
 80059cc:	232d      	movs	r3, #45	; 0x2d
 80059ce:	4276      	negs	r6, r6
 80059d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d4:	485e      	ldr	r0, [pc, #376]	; (8005b50 <_printf_i+0x244>)
 80059d6:	230a      	movs	r3, #10
 80059d8:	e019      	b.n	8005a0e <_printf_i+0x102>
 80059da:	680e      	ldr	r6, [r1, #0]
 80059dc:	602b      	str	r3, [r5, #0]
 80059de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059e2:	bf18      	it	ne
 80059e4:	b236      	sxthne	r6, r6
 80059e6:	e7ef      	b.n	80059c8 <_printf_i+0xbc>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	6820      	ldr	r0, [r4, #0]
 80059ec:	1d19      	adds	r1, r3, #4
 80059ee:	6029      	str	r1, [r5, #0]
 80059f0:	0601      	lsls	r1, r0, #24
 80059f2:	d501      	bpl.n	80059f8 <_printf_i+0xec>
 80059f4:	681e      	ldr	r6, [r3, #0]
 80059f6:	e002      	b.n	80059fe <_printf_i+0xf2>
 80059f8:	0646      	lsls	r6, r0, #25
 80059fa:	d5fb      	bpl.n	80059f4 <_printf_i+0xe8>
 80059fc:	881e      	ldrh	r6, [r3, #0]
 80059fe:	4854      	ldr	r0, [pc, #336]	; (8005b50 <_printf_i+0x244>)
 8005a00:	2f6f      	cmp	r7, #111	; 0x6f
 8005a02:	bf0c      	ite	eq
 8005a04:	2308      	moveq	r3, #8
 8005a06:	230a      	movne	r3, #10
 8005a08:	2100      	movs	r1, #0
 8005a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a0e:	6865      	ldr	r5, [r4, #4]
 8005a10:	60a5      	str	r5, [r4, #8]
 8005a12:	2d00      	cmp	r5, #0
 8005a14:	bfa2      	ittt	ge
 8005a16:	6821      	ldrge	r1, [r4, #0]
 8005a18:	f021 0104 	bicge.w	r1, r1, #4
 8005a1c:	6021      	strge	r1, [r4, #0]
 8005a1e:	b90e      	cbnz	r6, 8005a24 <_printf_i+0x118>
 8005a20:	2d00      	cmp	r5, #0
 8005a22:	d04d      	beq.n	8005ac0 <_printf_i+0x1b4>
 8005a24:	4615      	mov	r5, r2
 8005a26:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a2a:	fb03 6711 	mls	r7, r3, r1, r6
 8005a2e:	5dc7      	ldrb	r7, [r0, r7]
 8005a30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a34:	4637      	mov	r7, r6
 8005a36:	42bb      	cmp	r3, r7
 8005a38:	460e      	mov	r6, r1
 8005a3a:	d9f4      	bls.n	8005a26 <_printf_i+0x11a>
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d10b      	bne.n	8005a58 <_printf_i+0x14c>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	07de      	lsls	r6, r3, #31
 8005a44:	d508      	bpl.n	8005a58 <_printf_i+0x14c>
 8005a46:	6923      	ldr	r3, [r4, #16]
 8005a48:	6861      	ldr	r1, [r4, #4]
 8005a4a:	4299      	cmp	r1, r3
 8005a4c:	bfde      	ittt	le
 8005a4e:	2330      	movle	r3, #48	; 0x30
 8005a50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a58:	1b52      	subs	r2, r2, r5
 8005a5a:	6122      	str	r2, [r4, #16]
 8005a5c:	f8cd a000 	str.w	sl, [sp]
 8005a60:	464b      	mov	r3, r9
 8005a62:	aa03      	add	r2, sp, #12
 8005a64:	4621      	mov	r1, r4
 8005a66:	4640      	mov	r0, r8
 8005a68:	f7ff fee2 	bl	8005830 <_printf_common>
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d14c      	bne.n	8005b0a <_printf_i+0x1fe>
 8005a70:	f04f 30ff 	mov.w	r0, #4294967295
 8005a74:	b004      	add	sp, #16
 8005a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a7a:	4835      	ldr	r0, [pc, #212]	; (8005b50 <_printf_i+0x244>)
 8005a7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a80:	6829      	ldr	r1, [r5, #0]
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a88:	6029      	str	r1, [r5, #0]
 8005a8a:	061d      	lsls	r5, r3, #24
 8005a8c:	d514      	bpl.n	8005ab8 <_printf_i+0x1ac>
 8005a8e:	07df      	lsls	r7, r3, #31
 8005a90:	bf44      	itt	mi
 8005a92:	f043 0320 	orrmi.w	r3, r3, #32
 8005a96:	6023      	strmi	r3, [r4, #0]
 8005a98:	b91e      	cbnz	r6, 8005aa2 <_printf_i+0x196>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	f023 0320 	bic.w	r3, r3, #32
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	2310      	movs	r3, #16
 8005aa4:	e7b0      	b.n	8005a08 <_printf_i+0xfc>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	f043 0320 	orr.w	r3, r3, #32
 8005aac:	6023      	str	r3, [r4, #0]
 8005aae:	2378      	movs	r3, #120	; 0x78
 8005ab0:	4828      	ldr	r0, [pc, #160]	; (8005b54 <_printf_i+0x248>)
 8005ab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ab6:	e7e3      	b.n	8005a80 <_printf_i+0x174>
 8005ab8:	0659      	lsls	r1, r3, #25
 8005aba:	bf48      	it	mi
 8005abc:	b2b6      	uxthmi	r6, r6
 8005abe:	e7e6      	b.n	8005a8e <_printf_i+0x182>
 8005ac0:	4615      	mov	r5, r2
 8005ac2:	e7bb      	b.n	8005a3c <_printf_i+0x130>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	6826      	ldr	r6, [r4, #0]
 8005ac8:	6961      	ldr	r1, [r4, #20]
 8005aca:	1d18      	adds	r0, r3, #4
 8005acc:	6028      	str	r0, [r5, #0]
 8005ace:	0635      	lsls	r5, r6, #24
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	d501      	bpl.n	8005ad8 <_printf_i+0x1cc>
 8005ad4:	6019      	str	r1, [r3, #0]
 8005ad6:	e002      	b.n	8005ade <_printf_i+0x1d2>
 8005ad8:	0670      	lsls	r0, r6, #25
 8005ada:	d5fb      	bpl.n	8005ad4 <_printf_i+0x1c8>
 8005adc:	8019      	strh	r1, [r3, #0]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	6123      	str	r3, [r4, #16]
 8005ae2:	4615      	mov	r5, r2
 8005ae4:	e7ba      	b.n	8005a5c <_printf_i+0x150>
 8005ae6:	682b      	ldr	r3, [r5, #0]
 8005ae8:	1d1a      	adds	r2, r3, #4
 8005aea:	602a      	str	r2, [r5, #0]
 8005aec:	681d      	ldr	r5, [r3, #0]
 8005aee:	6862      	ldr	r2, [r4, #4]
 8005af0:	2100      	movs	r1, #0
 8005af2:	4628      	mov	r0, r5
 8005af4:	f7fa fbf4 	bl	80002e0 <memchr>
 8005af8:	b108      	cbz	r0, 8005afe <_printf_i+0x1f2>
 8005afa:	1b40      	subs	r0, r0, r5
 8005afc:	6060      	str	r0, [r4, #4]
 8005afe:	6863      	ldr	r3, [r4, #4]
 8005b00:	6123      	str	r3, [r4, #16]
 8005b02:	2300      	movs	r3, #0
 8005b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b08:	e7a8      	b.n	8005a5c <_printf_i+0x150>
 8005b0a:	6923      	ldr	r3, [r4, #16]
 8005b0c:	462a      	mov	r2, r5
 8005b0e:	4649      	mov	r1, r9
 8005b10:	4640      	mov	r0, r8
 8005b12:	47d0      	blx	sl
 8005b14:	3001      	adds	r0, #1
 8005b16:	d0ab      	beq.n	8005a70 <_printf_i+0x164>
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	079b      	lsls	r3, r3, #30
 8005b1c:	d413      	bmi.n	8005b46 <_printf_i+0x23a>
 8005b1e:	68e0      	ldr	r0, [r4, #12]
 8005b20:	9b03      	ldr	r3, [sp, #12]
 8005b22:	4298      	cmp	r0, r3
 8005b24:	bfb8      	it	lt
 8005b26:	4618      	movlt	r0, r3
 8005b28:	e7a4      	b.n	8005a74 <_printf_i+0x168>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4632      	mov	r2, r6
 8005b2e:	4649      	mov	r1, r9
 8005b30:	4640      	mov	r0, r8
 8005b32:	47d0      	blx	sl
 8005b34:	3001      	adds	r0, #1
 8005b36:	d09b      	beq.n	8005a70 <_printf_i+0x164>
 8005b38:	3501      	adds	r5, #1
 8005b3a:	68e3      	ldr	r3, [r4, #12]
 8005b3c:	9903      	ldr	r1, [sp, #12]
 8005b3e:	1a5b      	subs	r3, r3, r1
 8005b40:	42ab      	cmp	r3, r5
 8005b42:	dcf2      	bgt.n	8005b2a <_printf_i+0x21e>
 8005b44:	e7eb      	b.n	8005b1e <_printf_i+0x212>
 8005b46:	2500      	movs	r5, #0
 8005b48:	f104 0619 	add.w	r6, r4, #25
 8005b4c:	e7f5      	b.n	8005b3a <_printf_i+0x22e>
 8005b4e:	bf00      	nop
 8005b50:	08006225 	.word	0x08006225
 8005b54:	08006236 	.word	0x08006236

08005b58 <_sbrk_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4d06      	ldr	r5, [pc, #24]	; (8005b74 <_sbrk_r+0x1c>)
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	4604      	mov	r4, r0
 8005b60:	4608      	mov	r0, r1
 8005b62:	602b      	str	r3, [r5, #0]
 8005b64:	f7fb f98c 	bl	8000e80 <_sbrk>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d102      	bne.n	8005b72 <_sbrk_r+0x1a>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	b103      	cbz	r3, 8005b72 <_sbrk_r+0x1a>
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	24000180 	.word	0x24000180

08005b78 <__sread>:
 8005b78:	b510      	push	{r4, lr}
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b80:	f000 fab2 	bl	80060e8 <_read_r>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	bfab      	itete	ge
 8005b88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b8a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b8c:	181b      	addge	r3, r3, r0
 8005b8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b92:	bfac      	ite	ge
 8005b94:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b96:	81a3      	strhlt	r3, [r4, #12]
 8005b98:	bd10      	pop	{r4, pc}

08005b9a <__swrite>:
 8005b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9e:	461f      	mov	r7, r3
 8005ba0:	898b      	ldrh	r3, [r1, #12]
 8005ba2:	05db      	lsls	r3, r3, #23
 8005ba4:	4605      	mov	r5, r0
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	4616      	mov	r6, r2
 8005baa:	d505      	bpl.n	8005bb8 <__swrite+0x1e>
 8005bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f000 f9c8 	bl	8005f48 <_lseek_r>
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bc2:	81a3      	strh	r3, [r4, #12]
 8005bc4:	4632      	mov	r2, r6
 8005bc6:	463b      	mov	r3, r7
 8005bc8:	4628      	mov	r0, r5
 8005bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bce:	f000 b869 	b.w	8005ca4 <_write_r>

08005bd2 <__sseek>:
 8005bd2:	b510      	push	{r4, lr}
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bda:	f000 f9b5 	bl	8005f48 <_lseek_r>
 8005bde:	1c43      	adds	r3, r0, #1
 8005be0:	89a3      	ldrh	r3, [r4, #12]
 8005be2:	bf15      	itete	ne
 8005be4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005be6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bee:	81a3      	strheq	r3, [r4, #12]
 8005bf0:	bf18      	it	ne
 8005bf2:	81a3      	strhne	r3, [r4, #12]
 8005bf4:	bd10      	pop	{r4, pc}

08005bf6 <__sclose>:
 8005bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bfa:	f000 b8d3 	b.w	8005da4 <_close_r>
	...

08005c00 <__swbuf_r>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	460e      	mov	r6, r1
 8005c04:	4614      	mov	r4, r2
 8005c06:	4605      	mov	r5, r0
 8005c08:	b118      	cbz	r0, 8005c12 <__swbuf_r+0x12>
 8005c0a:	6983      	ldr	r3, [r0, #24]
 8005c0c:	b90b      	cbnz	r3, 8005c12 <__swbuf_r+0x12>
 8005c0e:	f7ff fb81 	bl	8005314 <__sinit>
 8005c12:	4b21      	ldr	r3, [pc, #132]	; (8005c98 <__swbuf_r+0x98>)
 8005c14:	429c      	cmp	r4, r3
 8005c16:	d12b      	bne.n	8005c70 <__swbuf_r+0x70>
 8005c18:	686c      	ldr	r4, [r5, #4]
 8005c1a:	69a3      	ldr	r3, [r4, #24]
 8005c1c:	60a3      	str	r3, [r4, #8]
 8005c1e:	89a3      	ldrh	r3, [r4, #12]
 8005c20:	071a      	lsls	r2, r3, #28
 8005c22:	d52f      	bpl.n	8005c84 <__swbuf_r+0x84>
 8005c24:	6923      	ldr	r3, [r4, #16]
 8005c26:	b36b      	cbz	r3, 8005c84 <__swbuf_r+0x84>
 8005c28:	6923      	ldr	r3, [r4, #16]
 8005c2a:	6820      	ldr	r0, [r4, #0]
 8005c2c:	1ac0      	subs	r0, r0, r3
 8005c2e:	6963      	ldr	r3, [r4, #20]
 8005c30:	b2f6      	uxtb	r6, r6
 8005c32:	4283      	cmp	r3, r0
 8005c34:	4637      	mov	r7, r6
 8005c36:	dc04      	bgt.n	8005c42 <__swbuf_r+0x42>
 8005c38:	4621      	mov	r1, r4
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f000 f948 	bl	8005ed0 <_fflush_r>
 8005c40:	bb30      	cbnz	r0, 8005c90 <__swbuf_r+0x90>
 8005c42:	68a3      	ldr	r3, [r4, #8]
 8005c44:	3b01      	subs	r3, #1
 8005c46:	60a3      	str	r3, [r4, #8]
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	6022      	str	r2, [r4, #0]
 8005c4e:	701e      	strb	r6, [r3, #0]
 8005c50:	6963      	ldr	r3, [r4, #20]
 8005c52:	3001      	adds	r0, #1
 8005c54:	4283      	cmp	r3, r0
 8005c56:	d004      	beq.n	8005c62 <__swbuf_r+0x62>
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	07db      	lsls	r3, r3, #31
 8005c5c:	d506      	bpl.n	8005c6c <__swbuf_r+0x6c>
 8005c5e:	2e0a      	cmp	r6, #10
 8005c60:	d104      	bne.n	8005c6c <__swbuf_r+0x6c>
 8005c62:	4621      	mov	r1, r4
 8005c64:	4628      	mov	r0, r5
 8005c66:	f000 f933 	bl	8005ed0 <_fflush_r>
 8005c6a:	b988      	cbnz	r0, 8005c90 <__swbuf_r+0x90>
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c70:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <__swbuf_r+0x9c>)
 8005c72:	429c      	cmp	r4, r3
 8005c74:	d101      	bne.n	8005c7a <__swbuf_r+0x7a>
 8005c76:	68ac      	ldr	r4, [r5, #8]
 8005c78:	e7cf      	b.n	8005c1a <__swbuf_r+0x1a>
 8005c7a:	4b09      	ldr	r3, [pc, #36]	; (8005ca0 <__swbuf_r+0xa0>)
 8005c7c:	429c      	cmp	r4, r3
 8005c7e:	bf08      	it	eq
 8005c80:	68ec      	ldreq	r4, [r5, #12]
 8005c82:	e7ca      	b.n	8005c1a <__swbuf_r+0x1a>
 8005c84:	4621      	mov	r1, r4
 8005c86:	4628      	mov	r0, r5
 8005c88:	f000 f81e 	bl	8005cc8 <__swsetup_r>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d0cb      	beq.n	8005c28 <__swbuf_r+0x28>
 8005c90:	f04f 37ff 	mov.w	r7, #4294967295
 8005c94:	e7ea      	b.n	8005c6c <__swbuf_r+0x6c>
 8005c96:	bf00      	nop
 8005c98:	080061d4 	.word	0x080061d4
 8005c9c:	080061f4 	.word	0x080061f4
 8005ca0:	080061b4 	.word	0x080061b4

08005ca4 <_write_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	4d07      	ldr	r5, [pc, #28]	; (8005cc4 <_write_r+0x20>)
 8005ca8:	4604      	mov	r4, r0
 8005caa:	4608      	mov	r0, r1
 8005cac:	4611      	mov	r1, r2
 8005cae:	2200      	movs	r2, #0
 8005cb0:	602a      	str	r2, [r5, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f7fb f893 	bl	8000dde <_write>
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	d102      	bne.n	8005cc2 <_write_r+0x1e>
 8005cbc:	682b      	ldr	r3, [r5, #0]
 8005cbe:	b103      	cbz	r3, 8005cc2 <_write_r+0x1e>
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	bd38      	pop	{r3, r4, r5, pc}
 8005cc4:	24000180 	.word	0x24000180

08005cc8 <__swsetup_r>:
 8005cc8:	4b32      	ldr	r3, [pc, #200]	; (8005d94 <__swsetup_r+0xcc>)
 8005cca:	b570      	push	{r4, r5, r6, lr}
 8005ccc:	681d      	ldr	r5, [r3, #0]
 8005cce:	4606      	mov	r6, r0
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	b125      	cbz	r5, 8005cde <__swsetup_r+0x16>
 8005cd4:	69ab      	ldr	r3, [r5, #24]
 8005cd6:	b913      	cbnz	r3, 8005cde <__swsetup_r+0x16>
 8005cd8:	4628      	mov	r0, r5
 8005cda:	f7ff fb1b 	bl	8005314 <__sinit>
 8005cde:	4b2e      	ldr	r3, [pc, #184]	; (8005d98 <__swsetup_r+0xd0>)
 8005ce0:	429c      	cmp	r4, r3
 8005ce2:	d10f      	bne.n	8005d04 <__swsetup_r+0x3c>
 8005ce4:	686c      	ldr	r4, [r5, #4]
 8005ce6:	89a3      	ldrh	r3, [r4, #12]
 8005ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cec:	0719      	lsls	r1, r3, #28
 8005cee:	d42c      	bmi.n	8005d4a <__swsetup_r+0x82>
 8005cf0:	06dd      	lsls	r5, r3, #27
 8005cf2:	d411      	bmi.n	8005d18 <__swsetup_r+0x50>
 8005cf4:	2309      	movs	r3, #9
 8005cf6:	6033      	str	r3, [r6, #0]
 8005cf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cfc:	81a3      	strh	r3, [r4, #12]
 8005cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8005d02:	e03e      	b.n	8005d82 <__swsetup_r+0xba>
 8005d04:	4b25      	ldr	r3, [pc, #148]	; (8005d9c <__swsetup_r+0xd4>)
 8005d06:	429c      	cmp	r4, r3
 8005d08:	d101      	bne.n	8005d0e <__swsetup_r+0x46>
 8005d0a:	68ac      	ldr	r4, [r5, #8]
 8005d0c:	e7eb      	b.n	8005ce6 <__swsetup_r+0x1e>
 8005d0e:	4b24      	ldr	r3, [pc, #144]	; (8005da0 <__swsetup_r+0xd8>)
 8005d10:	429c      	cmp	r4, r3
 8005d12:	bf08      	it	eq
 8005d14:	68ec      	ldreq	r4, [r5, #12]
 8005d16:	e7e6      	b.n	8005ce6 <__swsetup_r+0x1e>
 8005d18:	0758      	lsls	r0, r3, #29
 8005d1a:	d512      	bpl.n	8005d42 <__swsetup_r+0x7a>
 8005d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d1e:	b141      	cbz	r1, 8005d32 <__swsetup_r+0x6a>
 8005d20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d24:	4299      	cmp	r1, r3
 8005d26:	d002      	beq.n	8005d2e <__swsetup_r+0x66>
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f000 f991 	bl	8006050 <_free_r>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	6363      	str	r3, [r4, #52]	; 0x34
 8005d32:	89a3      	ldrh	r3, [r4, #12]
 8005d34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d38:	81a3      	strh	r3, [r4, #12]
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	6063      	str	r3, [r4, #4]
 8005d3e:	6923      	ldr	r3, [r4, #16]
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	f043 0308 	orr.w	r3, r3, #8
 8005d48:	81a3      	strh	r3, [r4, #12]
 8005d4a:	6923      	ldr	r3, [r4, #16]
 8005d4c:	b94b      	cbnz	r3, 8005d62 <__swsetup_r+0x9a>
 8005d4e:	89a3      	ldrh	r3, [r4, #12]
 8005d50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d58:	d003      	beq.n	8005d62 <__swsetup_r+0x9a>
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	f000 f92b 	bl	8005fb8 <__smakebuf_r>
 8005d62:	89a0      	ldrh	r0, [r4, #12]
 8005d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d68:	f010 0301 	ands.w	r3, r0, #1
 8005d6c:	d00a      	beq.n	8005d84 <__swsetup_r+0xbc>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60a3      	str	r3, [r4, #8]
 8005d72:	6963      	ldr	r3, [r4, #20]
 8005d74:	425b      	negs	r3, r3
 8005d76:	61a3      	str	r3, [r4, #24]
 8005d78:	6923      	ldr	r3, [r4, #16]
 8005d7a:	b943      	cbnz	r3, 8005d8e <__swsetup_r+0xc6>
 8005d7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d80:	d1ba      	bne.n	8005cf8 <__swsetup_r+0x30>
 8005d82:	bd70      	pop	{r4, r5, r6, pc}
 8005d84:	0781      	lsls	r1, r0, #30
 8005d86:	bf58      	it	pl
 8005d88:	6963      	ldrpl	r3, [r4, #20]
 8005d8a:	60a3      	str	r3, [r4, #8]
 8005d8c:	e7f4      	b.n	8005d78 <__swsetup_r+0xb0>
 8005d8e:	2000      	movs	r0, #0
 8005d90:	e7f7      	b.n	8005d82 <__swsetup_r+0xba>
 8005d92:	bf00      	nop
 8005d94:	24000010 	.word	0x24000010
 8005d98:	080061d4 	.word	0x080061d4
 8005d9c:	080061f4 	.word	0x080061f4
 8005da0:	080061b4 	.word	0x080061b4

08005da4 <_close_r>:
 8005da4:	b538      	push	{r3, r4, r5, lr}
 8005da6:	4d06      	ldr	r5, [pc, #24]	; (8005dc0 <_close_r+0x1c>)
 8005da8:	2300      	movs	r3, #0
 8005daa:	4604      	mov	r4, r0
 8005dac:	4608      	mov	r0, r1
 8005dae:	602b      	str	r3, [r5, #0]
 8005db0:	f7fb f831 	bl	8000e16 <_close>
 8005db4:	1c43      	adds	r3, r0, #1
 8005db6:	d102      	bne.n	8005dbe <_close_r+0x1a>
 8005db8:	682b      	ldr	r3, [r5, #0]
 8005dba:	b103      	cbz	r3, 8005dbe <_close_r+0x1a>
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	bd38      	pop	{r3, r4, r5, pc}
 8005dc0:	24000180 	.word	0x24000180

08005dc4 <__sflush_r>:
 8005dc4:	898a      	ldrh	r2, [r1, #12]
 8005dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dca:	4605      	mov	r5, r0
 8005dcc:	0710      	lsls	r0, r2, #28
 8005dce:	460c      	mov	r4, r1
 8005dd0:	d458      	bmi.n	8005e84 <__sflush_r+0xc0>
 8005dd2:	684b      	ldr	r3, [r1, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	dc05      	bgt.n	8005de4 <__sflush_r+0x20>
 8005dd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	dc02      	bgt.n	8005de4 <__sflush_r+0x20>
 8005dde:	2000      	movs	r0, #0
 8005de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005de4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005de6:	2e00      	cmp	r6, #0
 8005de8:	d0f9      	beq.n	8005dde <__sflush_r+0x1a>
 8005dea:	2300      	movs	r3, #0
 8005dec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005df0:	682f      	ldr	r7, [r5, #0]
 8005df2:	602b      	str	r3, [r5, #0]
 8005df4:	d032      	beq.n	8005e5c <__sflush_r+0x98>
 8005df6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	075a      	lsls	r2, r3, #29
 8005dfc:	d505      	bpl.n	8005e0a <__sflush_r+0x46>
 8005dfe:	6863      	ldr	r3, [r4, #4]
 8005e00:	1ac0      	subs	r0, r0, r3
 8005e02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e04:	b10b      	cbz	r3, 8005e0a <__sflush_r+0x46>
 8005e06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e08:	1ac0      	subs	r0, r0, r3
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e10:	6a21      	ldr	r1, [r4, #32]
 8005e12:	4628      	mov	r0, r5
 8005e14:	47b0      	blx	r6
 8005e16:	1c43      	adds	r3, r0, #1
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	d106      	bne.n	8005e2a <__sflush_r+0x66>
 8005e1c:	6829      	ldr	r1, [r5, #0]
 8005e1e:	291d      	cmp	r1, #29
 8005e20:	d82c      	bhi.n	8005e7c <__sflush_r+0xb8>
 8005e22:	4a2a      	ldr	r2, [pc, #168]	; (8005ecc <__sflush_r+0x108>)
 8005e24:	40ca      	lsrs	r2, r1
 8005e26:	07d6      	lsls	r6, r2, #31
 8005e28:	d528      	bpl.n	8005e7c <__sflush_r+0xb8>
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	6062      	str	r2, [r4, #4]
 8005e2e:	04d9      	lsls	r1, r3, #19
 8005e30:	6922      	ldr	r2, [r4, #16]
 8005e32:	6022      	str	r2, [r4, #0]
 8005e34:	d504      	bpl.n	8005e40 <__sflush_r+0x7c>
 8005e36:	1c42      	adds	r2, r0, #1
 8005e38:	d101      	bne.n	8005e3e <__sflush_r+0x7a>
 8005e3a:	682b      	ldr	r3, [r5, #0]
 8005e3c:	b903      	cbnz	r3, 8005e40 <__sflush_r+0x7c>
 8005e3e:	6560      	str	r0, [r4, #84]	; 0x54
 8005e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e42:	602f      	str	r7, [r5, #0]
 8005e44:	2900      	cmp	r1, #0
 8005e46:	d0ca      	beq.n	8005dde <__sflush_r+0x1a>
 8005e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e4c:	4299      	cmp	r1, r3
 8005e4e:	d002      	beq.n	8005e56 <__sflush_r+0x92>
 8005e50:	4628      	mov	r0, r5
 8005e52:	f000 f8fd 	bl	8006050 <_free_r>
 8005e56:	2000      	movs	r0, #0
 8005e58:	6360      	str	r0, [r4, #52]	; 0x34
 8005e5a:	e7c1      	b.n	8005de0 <__sflush_r+0x1c>
 8005e5c:	6a21      	ldr	r1, [r4, #32]
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4628      	mov	r0, r5
 8005e62:	47b0      	blx	r6
 8005e64:	1c41      	adds	r1, r0, #1
 8005e66:	d1c7      	bne.n	8005df8 <__sflush_r+0x34>
 8005e68:	682b      	ldr	r3, [r5, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0c4      	beq.n	8005df8 <__sflush_r+0x34>
 8005e6e:	2b1d      	cmp	r3, #29
 8005e70:	d001      	beq.n	8005e76 <__sflush_r+0xb2>
 8005e72:	2b16      	cmp	r3, #22
 8005e74:	d101      	bne.n	8005e7a <__sflush_r+0xb6>
 8005e76:	602f      	str	r7, [r5, #0]
 8005e78:	e7b1      	b.n	8005dde <__sflush_r+0x1a>
 8005e7a:	89a3      	ldrh	r3, [r4, #12]
 8005e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e80:	81a3      	strh	r3, [r4, #12]
 8005e82:	e7ad      	b.n	8005de0 <__sflush_r+0x1c>
 8005e84:	690f      	ldr	r7, [r1, #16]
 8005e86:	2f00      	cmp	r7, #0
 8005e88:	d0a9      	beq.n	8005dde <__sflush_r+0x1a>
 8005e8a:	0793      	lsls	r3, r2, #30
 8005e8c:	680e      	ldr	r6, [r1, #0]
 8005e8e:	bf08      	it	eq
 8005e90:	694b      	ldreq	r3, [r1, #20]
 8005e92:	600f      	str	r7, [r1, #0]
 8005e94:	bf18      	it	ne
 8005e96:	2300      	movne	r3, #0
 8005e98:	eba6 0807 	sub.w	r8, r6, r7
 8005e9c:	608b      	str	r3, [r1, #8]
 8005e9e:	f1b8 0f00 	cmp.w	r8, #0
 8005ea2:	dd9c      	ble.n	8005dde <__sflush_r+0x1a>
 8005ea4:	6a21      	ldr	r1, [r4, #32]
 8005ea6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ea8:	4643      	mov	r3, r8
 8005eaa:	463a      	mov	r2, r7
 8005eac:	4628      	mov	r0, r5
 8005eae:	47b0      	blx	r6
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	dc06      	bgt.n	8005ec2 <__sflush_r+0xfe>
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eba:	81a3      	strh	r3, [r4, #12]
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec0:	e78e      	b.n	8005de0 <__sflush_r+0x1c>
 8005ec2:	4407      	add	r7, r0
 8005ec4:	eba8 0800 	sub.w	r8, r8, r0
 8005ec8:	e7e9      	b.n	8005e9e <__sflush_r+0xda>
 8005eca:	bf00      	nop
 8005ecc:	20400001 	.word	0x20400001

08005ed0 <_fflush_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	690b      	ldr	r3, [r1, #16]
 8005ed4:	4605      	mov	r5, r0
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	b913      	cbnz	r3, 8005ee0 <_fflush_r+0x10>
 8005eda:	2500      	movs	r5, #0
 8005edc:	4628      	mov	r0, r5
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	b118      	cbz	r0, 8005eea <_fflush_r+0x1a>
 8005ee2:	6983      	ldr	r3, [r0, #24]
 8005ee4:	b90b      	cbnz	r3, 8005eea <_fflush_r+0x1a>
 8005ee6:	f7ff fa15 	bl	8005314 <__sinit>
 8005eea:	4b14      	ldr	r3, [pc, #80]	; (8005f3c <_fflush_r+0x6c>)
 8005eec:	429c      	cmp	r4, r3
 8005eee:	d11b      	bne.n	8005f28 <_fflush_r+0x58>
 8005ef0:	686c      	ldr	r4, [r5, #4]
 8005ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0ef      	beq.n	8005eda <_fflush_r+0xa>
 8005efa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005efc:	07d0      	lsls	r0, r2, #31
 8005efe:	d404      	bmi.n	8005f0a <_fflush_r+0x3a>
 8005f00:	0599      	lsls	r1, r3, #22
 8005f02:	d402      	bmi.n	8005f0a <_fflush_r+0x3a>
 8005f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f06:	f7ff faa3 	bl	8005450 <__retarget_lock_acquire_recursive>
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	f7ff ff59 	bl	8005dc4 <__sflush_r>
 8005f12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f14:	07da      	lsls	r2, r3, #31
 8005f16:	4605      	mov	r5, r0
 8005f18:	d4e0      	bmi.n	8005edc <_fflush_r+0xc>
 8005f1a:	89a3      	ldrh	r3, [r4, #12]
 8005f1c:	059b      	lsls	r3, r3, #22
 8005f1e:	d4dd      	bmi.n	8005edc <_fflush_r+0xc>
 8005f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f22:	f7ff fa96 	bl	8005452 <__retarget_lock_release_recursive>
 8005f26:	e7d9      	b.n	8005edc <_fflush_r+0xc>
 8005f28:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <_fflush_r+0x70>)
 8005f2a:	429c      	cmp	r4, r3
 8005f2c:	d101      	bne.n	8005f32 <_fflush_r+0x62>
 8005f2e:	68ac      	ldr	r4, [r5, #8]
 8005f30:	e7df      	b.n	8005ef2 <_fflush_r+0x22>
 8005f32:	4b04      	ldr	r3, [pc, #16]	; (8005f44 <_fflush_r+0x74>)
 8005f34:	429c      	cmp	r4, r3
 8005f36:	bf08      	it	eq
 8005f38:	68ec      	ldreq	r4, [r5, #12]
 8005f3a:	e7da      	b.n	8005ef2 <_fflush_r+0x22>
 8005f3c:	080061d4 	.word	0x080061d4
 8005f40:	080061f4 	.word	0x080061f4
 8005f44:	080061b4 	.word	0x080061b4

08005f48 <_lseek_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4d07      	ldr	r5, [pc, #28]	; (8005f68 <_lseek_r+0x20>)
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	4608      	mov	r0, r1
 8005f50:	4611      	mov	r1, r2
 8005f52:	2200      	movs	r2, #0
 8005f54:	602a      	str	r2, [r5, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	f7fa ff84 	bl	8000e64 <_lseek>
 8005f5c:	1c43      	adds	r3, r0, #1
 8005f5e:	d102      	bne.n	8005f66 <_lseek_r+0x1e>
 8005f60:	682b      	ldr	r3, [r5, #0]
 8005f62:	b103      	cbz	r3, 8005f66 <_lseek_r+0x1e>
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
 8005f68:	24000180 	.word	0x24000180

08005f6c <__swhatbuf_r>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	460e      	mov	r6, r1
 8005f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f74:	2900      	cmp	r1, #0
 8005f76:	b096      	sub	sp, #88	; 0x58
 8005f78:	4614      	mov	r4, r2
 8005f7a:	461d      	mov	r5, r3
 8005f7c:	da08      	bge.n	8005f90 <__swhatbuf_r+0x24>
 8005f7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	602a      	str	r2, [r5, #0]
 8005f86:	061a      	lsls	r2, r3, #24
 8005f88:	d410      	bmi.n	8005fac <__swhatbuf_r+0x40>
 8005f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f8e:	e00e      	b.n	8005fae <__swhatbuf_r+0x42>
 8005f90:	466a      	mov	r2, sp
 8005f92:	f000 f8bb 	bl	800610c <_fstat_r>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	dbf1      	blt.n	8005f7e <__swhatbuf_r+0x12>
 8005f9a:	9a01      	ldr	r2, [sp, #4]
 8005f9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005fa0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005fa4:	425a      	negs	r2, r3
 8005fa6:	415a      	adcs	r2, r3
 8005fa8:	602a      	str	r2, [r5, #0]
 8005faa:	e7ee      	b.n	8005f8a <__swhatbuf_r+0x1e>
 8005fac:	2340      	movs	r3, #64	; 0x40
 8005fae:	2000      	movs	r0, #0
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	b016      	add	sp, #88	; 0x58
 8005fb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005fb8 <__smakebuf_r>:
 8005fb8:	898b      	ldrh	r3, [r1, #12]
 8005fba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005fbc:	079d      	lsls	r5, r3, #30
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	d507      	bpl.n	8005fd4 <__smakebuf_r+0x1c>
 8005fc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	6123      	str	r3, [r4, #16]
 8005fcc:	2301      	movs	r3, #1
 8005fce:	6163      	str	r3, [r4, #20]
 8005fd0:	b002      	add	sp, #8
 8005fd2:	bd70      	pop	{r4, r5, r6, pc}
 8005fd4:	ab01      	add	r3, sp, #4
 8005fd6:	466a      	mov	r2, sp
 8005fd8:	f7ff ffc8 	bl	8005f6c <__swhatbuf_r>
 8005fdc:	9900      	ldr	r1, [sp, #0]
 8005fde:	4605      	mov	r5, r0
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f7ff fa57 	bl	8005494 <_malloc_r>
 8005fe6:	b948      	cbnz	r0, 8005ffc <__smakebuf_r+0x44>
 8005fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fec:	059a      	lsls	r2, r3, #22
 8005fee:	d4ef      	bmi.n	8005fd0 <__smakebuf_r+0x18>
 8005ff0:	f023 0303 	bic.w	r3, r3, #3
 8005ff4:	f043 0302 	orr.w	r3, r3, #2
 8005ff8:	81a3      	strh	r3, [r4, #12]
 8005ffa:	e7e3      	b.n	8005fc4 <__smakebuf_r+0xc>
 8005ffc:	4b0d      	ldr	r3, [pc, #52]	; (8006034 <__smakebuf_r+0x7c>)
 8005ffe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	6020      	str	r0, [r4, #0]
 8006004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006008:	81a3      	strh	r3, [r4, #12]
 800600a:	9b00      	ldr	r3, [sp, #0]
 800600c:	6163      	str	r3, [r4, #20]
 800600e:	9b01      	ldr	r3, [sp, #4]
 8006010:	6120      	str	r0, [r4, #16]
 8006012:	b15b      	cbz	r3, 800602c <__smakebuf_r+0x74>
 8006014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006018:	4630      	mov	r0, r6
 800601a:	f000 f889 	bl	8006130 <_isatty_r>
 800601e:	b128      	cbz	r0, 800602c <__smakebuf_r+0x74>
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	f023 0303 	bic.w	r3, r3, #3
 8006026:	f043 0301 	orr.w	r3, r3, #1
 800602a:	81a3      	strh	r3, [r4, #12]
 800602c:	89a0      	ldrh	r0, [r4, #12]
 800602e:	4305      	orrs	r5, r0
 8006030:	81a5      	strh	r5, [r4, #12]
 8006032:	e7cd      	b.n	8005fd0 <__smakebuf_r+0x18>
 8006034:	080052ad 	.word	0x080052ad

08006038 <__malloc_lock>:
 8006038:	4801      	ldr	r0, [pc, #4]	; (8006040 <__malloc_lock+0x8>)
 800603a:	f7ff ba09 	b.w	8005450 <__retarget_lock_acquire_recursive>
 800603e:	bf00      	nop
 8006040:	24000174 	.word	0x24000174

08006044 <__malloc_unlock>:
 8006044:	4801      	ldr	r0, [pc, #4]	; (800604c <__malloc_unlock+0x8>)
 8006046:	f7ff ba04 	b.w	8005452 <__retarget_lock_release_recursive>
 800604a:	bf00      	nop
 800604c:	24000174 	.word	0x24000174

08006050 <_free_r>:
 8006050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006052:	2900      	cmp	r1, #0
 8006054:	d044      	beq.n	80060e0 <_free_r+0x90>
 8006056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800605a:	9001      	str	r0, [sp, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f1a1 0404 	sub.w	r4, r1, #4
 8006062:	bfb8      	it	lt
 8006064:	18e4      	addlt	r4, r4, r3
 8006066:	f7ff ffe7 	bl	8006038 <__malloc_lock>
 800606a:	4a1e      	ldr	r2, [pc, #120]	; (80060e4 <_free_r+0x94>)
 800606c:	9801      	ldr	r0, [sp, #4]
 800606e:	6813      	ldr	r3, [r2, #0]
 8006070:	b933      	cbnz	r3, 8006080 <_free_r+0x30>
 8006072:	6063      	str	r3, [r4, #4]
 8006074:	6014      	str	r4, [r2, #0]
 8006076:	b003      	add	sp, #12
 8006078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800607c:	f7ff bfe2 	b.w	8006044 <__malloc_unlock>
 8006080:	42a3      	cmp	r3, r4
 8006082:	d908      	bls.n	8006096 <_free_r+0x46>
 8006084:	6825      	ldr	r5, [r4, #0]
 8006086:	1961      	adds	r1, r4, r5
 8006088:	428b      	cmp	r3, r1
 800608a:	bf01      	itttt	eq
 800608c:	6819      	ldreq	r1, [r3, #0]
 800608e:	685b      	ldreq	r3, [r3, #4]
 8006090:	1949      	addeq	r1, r1, r5
 8006092:	6021      	streq	r1, [r4, #0]
 8006094:	e7ed      	b.n	8006072 <_free_r+0x22>
 8006096:	461a      	mov	r2, r3
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	b10b      	cbz	r3, 80060a0 <_free_r+0x50>
 800609c:	42a3      	cmp	r3, r4
 800609e:	d9fa      	bls.n	8006096 <_free_r+0x46>
 80060a0:	6811      	ldr	r1, [r2, #0]
 80060a2:	1855      	adds	r5, r2, r1
 80060a4:	42a5      	cmp	r5, r4
 80060a6:	d10b      	bne.n	80060c0 <_free_r+0x70>
 80060a8:	6824      	ldr	r4, [r4, #0]
 80060aa:	4421      	add	r1, r4
 80060ac:	1854      	adds	r4, r2, r1
 80060ae:	42a3      	cmp	r3, r4
 80060b0:	6011      	str	r1, [r2, #0]
 80060b2:	d1e0      	bne.n	8006076 <_free_r+0x26>
 80060b4:	681c      	ldr	r4, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	6053      	str	r3, [r2, #4]
 80060ba:	4421      	add	r1, r4
 80060bc:	6011      	str	r1, [r2, #0]
 80060be:	e7da      	b.n	8006076 <_free_r+0x26>
 80060c0:	d902      	bls.n	80060c8 <_free_r+0x78>
 80060c2:	230c      	movs	r3, #12
 80060c4:	6003      	str	r3, [r0, #0]
 80060c6:	e7d6      	b.n	8006076 <_free_r+0x26>
 80060c8:	6825      	ldr	r5, [r4, #0]
 80060ca:	1961      	adds	r1, r4, r5
 80060cc:	428b      	cmp	r3, r1
 80060ce:	bf04      	itt	eq
 80060d0:	6819      	ldreq	r1, [r3, #0]
 80060d2:	685b      	ldreq	r3, [r3, #4]
 80060d4:	6063      	str	r3, [r4, #4]
 80060d6:	bf04      	itt	eq
 80060d8:	1949      	addeq	r1, r1, r5
 80060da:	6021      	streq	r1, [r4, #0]
 80060dc:	6054      	str	r4, [r2, #4]
 80060de:	e7ca      	b.n	8006076 <_free_r+0x26>
 80060e0:	b003      	add	sp, #12
 80060e2:	bd30      	pop	{r4, r5, pc}
 80060e4:	24000178 	.word	0x24000178

080060e8 <_read_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	4d07      	ldr	r5, [pc, #28]	; (8006108 <_read_r+0x20>)
 80060ec:	4604      	mov	r4, r0
 80060ee:	4608      	mov	r0, r1
 80060f0:	4611      	mov	r1, r2
 80060f2:	2200      	movs	r2, #0
 80060f4:	602a      	str	r2, [r5, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f7fa fe54 	bl	8000da4 <_read>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d102      	bne.n	8006106 <_read_r+0x1e>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	b103      	cbz	r3, 8006106 <_read_r+0x1e>
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	bd38      	pop	{r3, r4, r5, pc}
 8006108:	24000180 	.word	0x24000180

0800610c <_fstat_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4d07      	ldr	r5, [pc, #28]	; (800612c <_fstat_r+0x20>)
 8006110:	2300      	movs	r3, #0
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	4611      	mov	r1, r2
 8006118:	602b      	str	r3, [r5, #0]
 800611a:	f7fa fe88 	bl	8000e2e <_fstat>
 800611e:	1c43      	adds	r3, r0, #1
 8006120:	d102      	bne.n	8006128 <_fstat_r+0x1c>
 8006122:	682b      	ldr	r3, [r5, #0]
 8006124:	b103      	cbz	r3, 8006128 <_fstat_r+0x1c>
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	bd38      	pop	{r3, r4, r5, pc}
 800612a:	bf00      	nop
 800612c:	24000180 	.word	0x24000180

08006130 <_isatty_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4d06      	ldr	r5, [pc, #24]	; (800614c <_isatty_r+0x1c>)
 8006134:	2300      	movs	r3, #0
 8006136:	4604      	mov	r4, r0
 8006138:	4608      	mov	r0, r1
 800613a:	602b      	str	r3, [r5, #0]
 800613c:	f7fa fe87 	bl	8000e4e <_isatty>
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	d102      	bne.n	800614a <_isatty_r+0x1a>
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	b103      	cbz	r3, 800614a <_isatty_r+0x1a>
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	bd38      	pop	{r3, r4, r5, pc}
 800614c:	24000180 	.word	0x24000180

08006150 <_init>:
 8006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006152:	bf00      	nop
 8006154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006156:	bc08      	pop	{r3}
 8006158:	469e      	mov	lr, r3
 800615a:	4770      	bx	lr

0800615c <_fini>:
 800615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615e:	bf00      	nop
 8006160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006162:	bc08      	pop	{r3}
 8006164:	469e      	mov	lr, r3
 8006166:	4770      	bx	lr
