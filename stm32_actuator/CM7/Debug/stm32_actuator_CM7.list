
stm32_actuator_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d10  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004fa8  08004fa8  00014fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fe0  08004fe0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004fe0  08004fe0  00014fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fe8  08004fe8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe8  08004fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fec  08004fec  00014fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08004ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  24000010  08005000  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400010c  08005000  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a11  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ed  00000000  00000000  00033a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00035c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00036a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038b13  00000000  00000000  00037728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012923  00000000  00000000  0007023b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00177f9c  00000000  00000000  00082b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001faafa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c8  00000000  00000000  001fab4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004f90 	.word	0x08004f90

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004f90 	.word	0x08004f90

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b29      	ldr	r3, [pc, #164]	; (80007bc <main+0xb4>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 f9f5 	bl	8000b20 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fb33 	bl	8000da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f845 	bl	80007c8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <main+0xb4>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <main+0xb4>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <main+0xb4>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fea9 	bl	80014b4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f000 febf 	bl	80014e8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <main+0xb4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 f9c7 	bl	8000b20 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f91f 	bl	80009d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f8d1 	bl	800093c <MX_USART3_UART_Init>
  MX_I2C4_Init();
 800079a:	f000 f88f 	bl	80008bc <MX_I2C4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(ACTUATOR_GPIO_Port, ACTUATOR_Pin);
 800079e:	2180      	movs	r1, #128	; 0x80
 80007a0:	4807      	ldr	r0, [pc, #28]	; (80007c0 <main+0xb8>)
 80007a2:	f000 fe6c 	bl	800147e <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <main+0xbc>)
 80007ac:	f000 fe67 	bl	800147e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80007b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b4:	f000 fb86 	bl	8000ec4 <HAL_Delay>
	  HAL_GPIO_TogglePin(ACTUATOR_GPIO_Port, ACTUATOR_Pin);
 80007b8:	e7f1      	b.n	800079e <main+0x96>
 80007ba:	bf00      	nop
 80007bc:	58024400 	.word	0x58024400
 80007c0:	58020c00 	.word	0x58020c00
 80007c4:	58020400 	.word	0x58020400

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b09c      	sub	sp, #112	; 0x70
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	224c      	movs	r2, #76	; 0x4c
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f004 fbd2 	bl	8004f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2220      	movs	r2, #32
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 fbcc 	bl	8004f80 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007e8:	2004      	movs	r0, #4
 80007ea:	f000 ffb9 	bl	8001760 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b30      	ldr	r3, [pc, #192]	; (80008b4 <SystemClock_Config+0xec>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	4a2f      	ldr	r2, [pc, #188]	; (80008b4 <SystemClock_Config+0xec>)
 80007f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007fc:	6193      	str	r3, [r2, #24]
 80007fe:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <SystemClock_Config+0xec>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <SystemClock_Config+0xf0>)
 800080a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080c:	4a2a      	ldr	r2, [pc, #168]	; (80008b8 <SystemClock_Config+0xf0>)
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000814:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <SystemClock_Config+0xf0>)
 8000816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000820:	bf00      	nop
 8000822:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <SystemClock_Config+0xec>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800082a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800082e:	d1f8      	bne.n	8000822 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000830:	2301      	movs	r3, #1
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000834:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	2302      	movs	r3, #2
 8000840:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000846:	23f0      	movs	r3, #240	; 0xf0
 8000848:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000852:	2302      	movs	r3, #2
 8000854:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000856:	2308      	movs	r3, #8
 8000858:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800085a:	2300      	movs	r3, #0
 800085c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000866:	4618      	mov	r0, r3
 8000868:	f000 ffd4 	bl	8001814 <HAL_RCC_OscConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000872:	f000 f955 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	233f      	movs	r3, #63	; 0x3f
 8000878:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	2303      	movs	r3, #3
 800087c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000882:	2308      	movs	r3, #8
 8000884:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000886:	2340      	movs	r3, #64	; 0x40
 8000888:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800088a:	2340      	movs	r3, #64	; 0x40
 800088c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800088e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000892:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2104      	movs	r1, #4
 800089c:	4618      	mov	r0, r3
 800089e:	f001 fbe7 	bl	8002070 <HAL_RCC_ClockConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008a8:	f000 f93a 	bl	8000b20 <Error_Handler>
  }
}
 80008ac:	bf00      	nop
 80008ae:	3770      	adds	r7, #112	; 0x70
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	58024800 	.word	0x58024800
 80008b8:	58000400 	.word	0x58000400

080008bc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_I2C4_Init+0x74>)
 80008c2:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <MX_I2C4_Init+0x78>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_I2C4_Init+0x74>)
 80008c8:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <MX_I2C4_Init+0x7c>)
 80008ca:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_I2C4_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_I2C4_Init+0x74>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_I2C4_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_I2C4_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_I2C4_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_I2C4_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_I2C4_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80008f6:	480e      	ldr	r0, [pc, #56]	; (8000930 <MX_I2C4_Init+0x74>)
 80008f8:	f000 fe0a 	bl	8001510 <HAL_I2C_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000902:	f000 f90d 	bl	8000b20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000906:	2100      	movs	r1, #0
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <MX_I2C4_Init+0x74>)
 800090a:	f000 fe91 	bl	8001630 <HAL_I2CEx_ConfigAnalogFilter>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000914:	f000 f904 	bl	8000b20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000918:	2100      	movs	r1, #0
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_I2C4_Init+0x74>)
 800091c:	f000 fed3 	bl	80016c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000926:	f000 f8fb 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2400002c 	.word	0x2400002c
 8000934:	58001c00 	.word	0x58001c00
 8000938:	307075b1 	.word	0x307075b1

0800093c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000942:	4a23      	ldr	r2, [pc, #140]	; (80009d0 <MX_USART3_UART_Init+0x94>)
 8000944:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800094c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_USART3_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_USART3_UART_Init+0x90>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_USART3_UART_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000984:	4811      	ldr	r0, [pc, #68]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000986:	f003 fa67 	bl	8003e58 <HAL_UART_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000990:	f000 f8c6 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000994:	2100      	movs	r1, #0
 8000996:	480d      	ldr	r0, [pc, #52]	; (80009cc <MX_USART3_UART_Init+0x90>)
 8000998:	f004 fa04 	bl	8004da4 <HAL_UARTEx_SetTxFifoThreshold>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009a2:	f000 f8bd 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a6:	2100      	movs	r1, #0
 80009a8:	4808      	ldr	r0, [pc, #32]	; (80009cc <MX_USART3_UART_Init+0x90>)
 80009aa:	f004 fa39 	bl	8004e20 <HAL_UARTEx_SetRxFifoThreshold>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009b4:	f000 f8b4 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_USART3_UART_Init+0x90>)
 80009ba:	f004 f9ba 	bl	8004d32 <HAL_UARTEx_DisableFifoMode>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009c4:	f000 f8ac 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	24000078 	.word	0x24000078
 80009d0:	40004800 	.word	0x40004800

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	4b49      	ldr	r3, [pc, #292]	; (8000b10 <MX_GPIO_Init+0x13c>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	4a47      	ldr	r2, [pc, #284]	; (8000b10 <MX_GPIO_Init+0x13c>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fa:	4b45      	ldr	r3, [pc, #276]	; (8000b10 <MX_GPIO_Init+0x13c>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	f003 0304 	and.w	r3, r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a08:	4b41      	ldr	r3, [pc, #260]	; (8000b10 <MX_GPIO_Init+0x13c>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0e:	4a40      	ldr	r2, [pc, #256]	; (8000b10 <MX_GPIO_Init+0x13c>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a18:	4b3d      	ldr	r3, [pc, #244]	; (8000b10 <MX_GPIO_Init+0x13c>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	4b3a      	ldr	r3, [pc, #232]	; (8000b10 <MX_GPIO_Init+0x13c>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	4a38      	ldr	r2, [pc, #224]	; (8000b10 <MX_GPIO_Init+0x13c>)
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a36:	4b36      	ldr	r3, [pc, #216]	; (8000b10 <MX_GPIO_Init+0x13c>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a44:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <MX_GPIO_Init+0x13c>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4a:	4a31      	ldr	r2, [pc, #196]	; (8000b10 <MX_GPIO_Init+0x13c>)
 8000a4c:	f043 0320 	orr.w	r3, r3, #32
 8000a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a54:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <MX_GPIO_Init+0x13c>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	f003 0320 	and.w	r3, r3, #32
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a62:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <MX_GPIO_Init+0x13c>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a68:	4a29      	ldr	r2, [pc, #164]	; (8000b10 <MX_GPIO_Init+0x13c>)
 8000a6a:	f043 0308 	orr.w	r3, r3, #8
 8000a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a72:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <MX_GPIO_Init+0x13c>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <MX_GPIO_Init+0x13c>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a86:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <MX_GPIO_Init+0x13c>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_GPIO_Init+0x13c>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f244 0101 	movw	r1, #16385	; 0x4001
 8000aa4:	481b      	ldr	r0, [pc, #108]	; (8000b14 <MX_GPIO_Init+0x140>)
 8000aa6:	f000 fcd1 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACTUATOR_GPIO_Port, ACTUATOR_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2180      	movs	r1, #128	; 0x80
 8000aae:	481a      	ldr	r0, [pc, #104]	; (8000b18 <MX_GPIO_Init+0x144>)
 8000ab0:	f000 fccc 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4814      	ldr	r0, [pc, #80]	; (8000b1c <MX_GPIO_Init+0x148>)
 8000aca:	f000 fb0f 	bl	80010ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8000ace:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480b      	ldr	r0, [pc, #44]	; (8000b14 <MX_GPIO_Init+0x140>)
 8000ae8:	f000 fb00 	bl	80010ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ACTUATOR_Pin */
  GPIO_InitStruct.Pin = ACTUATOR_Pin;
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ACTUATOR_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_GPIO_Init+0x144>)
 8000b04:	f000 faf2 	bl	80010ec <HAL_GPIO_Init>

}
 8000b08:	bf00      	nop
 8000b0a:	3730      	adds	r7, #48	; 0x30
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	58024400 	.word	0x58024400
 8000b14:	58020400 	.word	0x58020400
 8000b18:	58020c00 	.word	0x58020c00
 8000b1c:	58020800 	.word	0x58020800

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_MspInit+0x30>)
 8000b34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b38:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <HAL_MspInit+0x30>)
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_MspInit+0x30>)
 8000b44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	58024400 	.word	0x58024400

08000b60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0b8      	sub	sp, #224	; 0xe0
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	22bc      	movs	r2, #188	; 0xbc
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f004 f9fd 	bl	8004f80 <memset>
  if(hi2c->Instance==I2C4)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a25      	ldr	r2, [pc, #148]	; (8000c20 <HAL_I2C_MspInit+0xc0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d142      	bne.n	8000c16 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000b90:	2310      	movs	r3, #16
 8000b92:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 fdf2 	bl	8002788 <HAL_RCCEx_PeriphCLKConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000baa:	f7ff ffb9 	bl	8000b20 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <HAL_I2C_MspInit+0xc4>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <HAL_I2C_MspInit+0xc4>)
 8000bb6:	f043 0320 	orr.w	r3, r3, #32
 8000bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <HAL_I2C_MspInit+0xc4>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	f003 0320 	and.w	r3, r3, #32
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000bcc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd4:	2312      	movs	r3, #18
 8000bd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000be6:	2304      	movs	r3, #4
 8000be8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480d      	ldr	r0, [pc, #52]	; (8000c28 <HAL_I2C_MspInit+0xc8>)
 8000bf4:	f000 fa7a 	bl	80010ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_I2C_MspInit+0xc4>)
 8000bfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bfe:	4a09      	ldr	r2, [pc, #36]	; (8000c24 <HAL_I2C_MspInit+0xc4>)
 8000c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_I2C_MspInit+0xc4>)
 8000c0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	37e0      	adds	r7, #224	; 0xe0
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	58001c00 	.word	0x58001c00
 8000c24:	58024400 	.word	0x58024400
 8000c28:	58021400 	.word	0x58021400

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0b8      	sub	sp, #224	; 0xe0
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	22bc      	movs	r2, #188	; 0xbc
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 f997 	bl	8004f80 <memset>
  if(huart->Instance==USART3)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a25      	ldr	r2, [pc, #148]	; (8000cec <HAL_UART_MspInit+0xc0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d142      	bne.n	8000ce2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 fd8c 	bl	8002788 <HAL_RCCEx_PeriphCLKConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c76:	f7ff ff53 	bl	8000b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_UART_MspInit+0xc4>)
 8000c7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c80:	4a1b      	ldr	r2, [pc, #108]	; (8000cf0 <HAL_UART_MspInit+0xc4>)
 8000c82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_UART_MspInit+0xc4>)
 8000c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_UART_MspInit+0xc4>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <HAL_UART_MspInit+0xc4>)
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_UART_MspInit+0xc4>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	f003 0308 	and.w	r3, r3, #8
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000cb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <HAL_UART_MspInit+0xc8>)
 8000cde:	f000 fa05 	bl	80010ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	37e0      	adds	r7, #224	; 0xe0
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40004800 	.word	0x40004800
 8000cf0:	58024400 	.word	0x58024400
 8000cf4:	58020c00 	.word	0x58020c00

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 f89e 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d50:	f7ff fc44 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d56:	490d      	ldr	r1, [pc, #52]	; (8000d8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	; (8000d98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f004 f8dd 	bl	8004f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7e:	f7ff fcc3 	bl	8000708 <main>
  bx  lr
 8000d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d84:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d8c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000d90:	08004ff0 	.word	0x08004ff0
  ldr r2, =_sbss
 8000d94:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000d98:	2400010c 	.word	0x2400010c

08000d9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC3_IRQHandler>
	...

08000da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da6:	2003      	movs	r0, #3
 8000da8:	f000 f96e 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000dac:	f001 fb16 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8000db0:	4602      	mov	r2, r0
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_Init+0x68>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	f003 030f 	and.w	r3, r3, #15
 8000dbc:	4913      	ldr	r1, [pc, #76]	; (8000e0c <HAL_Init+0x6c>)
 8000dbe:	5ccb      	ldrb	r3, [r1, r3]
 8000dc0:	f003 031f 	and.w	r3, r3, #31
 8000dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_Init+0x68>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <HAL_Init+0x6c>)
 8000dd4:	5cd3      	ldrb	r3, [r2, r3]
 8000dd6:	f003 031f 	and.w	r3, r3, #31
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8000de0:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <HAL_Init+0x70>)
 8000de2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000de4:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <HAL_Init+0x74>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dea:	200f      	movs	r0, #15
 8000dec:	f000 f814 	bl	8000e18 <HAL_InitTick>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e002      	b.n	8000e00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000dfa:	f7ff fe97 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	08004fa8 	.word	0x08004fa8
 8000e10:	24000004 	.word	0x24000004
 8000e14:	24000000 	.word	0x24000000

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_InitTick+0x60>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d101      	bne.n	8000e2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e021      	b.n	8000e70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <HAL_InitTick+0x64>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_InitTick+0x60>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f945 	bl	80010d2 <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f000 f91d 	bl	800109e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_InitTick+0x68>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	2400000c 	.word	0x2400000c
 8000e7c:	24000000 	.word	0x24000000
 8000e80:	24000008 	.word	0x24000008

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	2400000c 	.word	0x2400000c
 8000ea8:	24000108 	.word	0x24000108

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	24000108 	.word	0x24000108

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_Delay+0x44>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffde 	bl	8000eac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2400000c 	.word	0x2400000c

08000f0c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_GetREVID+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	0c1b      	lsrs	r3, r3, #16
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	5c001000 	.word	0x5c001000

08000f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <__NVIC_SetPriorityGrouping+0x40>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <__NVIC_SetPriorityGrouping+0x40>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00
 8000f68:	05fa0000 	.word	0x05fa0000

08000f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001054:	d301      	bcc.n	800105a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001056:	2301      	movs	r3, #1
 8001058:	e00f      	b.n	800107a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <SysTick_Config+0x40>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001062:	210f      	movs	r1, #15
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f7ff ff8e 	bl	8000f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SysTick_Config+0x40>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <SysTick_Config+0x40>)
 8001074:	2207      	movs	r2, #7
 8001076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	e000e010 	.word	0xe000e010

08001088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff47 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff5e 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff90 	bl	8000fdc <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5f 	bl	8000f88 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffb2 	bl	8001044 <SysTick_Config>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	; 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80010fa:	4b89      	ldr	r3, [pc, #548]	; (8001320 <HAL_GPIO_Init+0x234>)
 80010fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010fe:	e194      	b.n	800142a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	2101      	movs	r1, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 8186 	beq.w	8001424 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b01      	cmp	r3, #1
 8001122:	d005      	beq.n	8001130 <HAL_GPIO_Init+0x44>
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d130      	bne.n	8001192 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001166:	2201      	movs	r2, #1
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	091b      	lsrs	r3, r3, #4
 800117c:	f003 0201 	and.w	r2, r3, #1
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b03      	cmp	r3, #3
 800119c:	d017      	beq.n	80011ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	2203      	movs	r2, #3
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d123      	bne.n	8001222 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3208      	adds	r2, #8
 80011e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	220f      	movs	r2, #15
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	691a      	ldr	r2, [r3, #16]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	69b9      	ldr	r1, [r7, #24]
 800121e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0203 	and.w	r2, r3, #3
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80e0 	beq.w	8001424 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001264:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <HAL_GPIO_Init+0x238>)
 8001266:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800126a:	4a2e      	ldr	r2, [pc, #184]	; (8001324 <HAL_GPIO_Init+0x238>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <HAL_GPIO_Init+0x238>)
 8001276:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001282:	4a29      	ldr	r2, [pc, #164]	; (8001328 <HAL_GPIO_Init+0x23c>)
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3302      	adds	r3, #2
 800128a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	220f      	movs	r2, #15
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a20      	ldr	r2, [pc, #128]	; (800132c <HAL_GPIO_Init+0x240>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d052      	beq.n	8001354 <HAL_GPIO_Init+0x268>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a1f      	ldr	r2, [pc, #124]	; (8001330 <HAL_GPIO_Init+0x244>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d031      	beq.n	800131a <HAL_GPIO_Init+0x22e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a1e      	ldr	r2, [pc, #120]	; (8001334 <HAL_GPIO_Init+0x248>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d02b      	beq.n	8001316 <HAL_GPIO_Init+0x22a>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_GPIO_Init+0x24c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d025      	beq.n	8001312 <HAL_GPIO_Init+0x226>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a1c      	ldr	r2, [pc, #112]	; (800133c <HAL_GPIO_Init+0x250>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d01f      	beq.n	800130e <HAL_GPIO_Init+0x222>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_GPIO_Init+0x254>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d019      	beq.n	800130a <HAL_GPIO_Init+0x21e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a1a      	ldr	r2, [pc, #104]	; (8001344 <HAL_GPIO_Init+0x258>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d013      	beq.n	8001306 <HAL_GPIO_Init+0x21a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a19      	ldr	r2, [pc, #100]	; (8001348 <HAL_GPIO_Init+0x25c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d00d      	beq.n	8001302 <HAL_GPIO_Init+0x216>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a18      	ldr	r2, [pc, #96]	; (800134c <HAL_GPIO_Init+0x260>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d007      	beq.n	80012fe <HAL_GPIO_Init+0x212>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a17      	ldr	r2, [pc, #92]	; (8001350 <HAL_GPIO_Init+0x264>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d101      	bne.n	80012fa <HAL_GPIO_Init+0x20e>
 80012f6:	2309      	movs	r3, #9
 80012f8:	e02d      	b.n	8001356 <HAL_GPIO_Init+0x26a>
 80012fa:	230a      	movs	r3, #10
 80012fc:	e02b      	b.n	8001356 <HAL_GPIO_Init+0x26a>
 80012fe:	2308      	movs	r3, #8
 8001300:	e029      	b.n	8001356 <HAL_GPIO_Init+0x26a>
 8001302:	2307      	movs	r3, #7
 8001304:	e027      	b.n	8001356 <HAL_GPIO_Init+0x26a>
 8001306:	2306      	movs	r3, #6
 8001308:	e025      	b.n	8001356 <HAL_GPIO_Init+0x26a>
 800130a:	2305      	movs	r3, #5
 800130c:	e023      	b.n	8001356 <HAL_GPIO_Init+0x26a>
 800130e:	2304      	movs	r3, #4
 8001310:	e021      	b.n	8001356 <HAL_GPIO_Init+0x26a>
 8001312:	2303      	movs	r3, #3
 8001314:	e01f      	b.n	8001356 <HAL_GPIO_Init+0x26a>
 8001316:	2302      	movs	r3, #2
 8001318:	e01d      	b.n	8001356 <HAL_GPIO_Init+0x26a>
 800131a:	2301      	movs	r3, #1
 800131c:	e01b      	b.n	8001356 <HAL_GPIO_Init+0x26a>
 800131e:	bf00      	nop
 8001320:	58000080 	.word	0x58000080
 8001324:	58024400 	.word	0x58024400
 8001328:	58000400 	.word	0x58000400
 800132c:	58020000 	.word	0x58020000
 8001330:	58020400 	.word	0x58020400
 8001334:	58020800 	.word	0x58020800
 8001338:	58020c00 	.word	0x58020c00
 800133c:	58021000 	.word	0x58021000
 8001340:	58021400 	.word	0x58021400
 8001344:	58021800 	.word	0x58021800
 8001348:	58021c00 	.word	0x58021c00
 800134c:	58022000 	.word	0x58022000
 8001350:	58022400 	.word	0x58022400
 8001354:	2300      	movs	r3, #0
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	f002 0203 	and.w	r2, r2, #3
 800135c:	0092      	lsls	r2, r2, #2
 800135e:	4093      	lsls	r3, r2
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001366:	4938      	ldr	r1, [pc, #224]	; (8001448 <HAL_GPIO_Init+0x35c>)
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800139a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	3301      	adds	r3, #1
 8001428:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	f47f ae63 	bne.w	8001100 <HAL_GPIO_Init+0x14>
  }
}
 800143a:	bf00      	nop
 800143c:	bf00      	nop
 800143e:	3724      	adds	r7, #36	; 0x24
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	58000400 	.word	0x58000400

0800144c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
 8001458:	4613      	mov	r3, r2
 800145a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800145c:	787b      	ldrb	r3, [r7, #1]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001468:	e003      	b.n	8001472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	041a      	lsls	r2, r3, #16
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	619a      	str	r2, [r3, #24]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800147e:	b480      	push	{r7}
 8001480:	b085      	sub	sp, #20
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001490:	887a      	ldrh	r2, [r7, #2]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4013      	ands	r3, r2
 8001496:	041a      	lsls	r2, r3, #16
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43d9      	mvns	r1, r3
 800149c:	887b      	ldrh	r3, [r7, #2]
 800149e:	400b      	ands	r3, r1
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	619a      	str	r2, [r3, #24]
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80014bc:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <HAL_HSEM_FastTake+0x2c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3320      	adds	r3, #32
 80014c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c6:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_HSEM_FastTake+0x30>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d101      	bne.n	80014d0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e000      	b.n	80014d2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	58026400 	.word	0x58026400
 80014e4:	80000300 	.word	0x80000300

080014e8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80014f2:	4906      	ldr	r1, [pc, #24]	; (800150c <HAL_HSEM_Release+0x24>)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	58026400 	.word	0x58026400

08001510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e07f      	b.n	8001622 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fb12 	bl	8000b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2224      	movs	r2, #36	; 0x24
 8001540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0201 	bic.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001560:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001570:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d107      	bne.n	800158a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	e006      	b.n	8001598 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001596:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d104      	bne.n	80015aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6859      	ldr	r1, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_I2C_Init+0x11c>)
 80015b6:	430b      	orrs	r3, r1
 80015b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69d9      	ldr	r1, [r3, #28]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1a      	ldr	r2, [r3, #32]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0201 	orr.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2220      	movs	r2, #32
 800160e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	02008000 	.word	0x02008000

08001630 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b20      	cmp	r3, #32
 8001644:	d138      	bne.n	80016b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001650:	2302      	movs	r3, #2
 8001652:	e032      	b.n	80016ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2224      	movs	r2, #36	; 0x24
 8001660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0201 	bic.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001682:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6819      	ldr	r1, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0201 	orr.w	r2, r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2220      	movs	r2, #32
 80016a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	e000      	b.n	80016ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016b8:	2302      	movs	r3, #2
  }
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b085      	sub	sp, #20
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b20      	cmp	r3, #32
 80016da:	d139      	bne.n	8001750 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e033      	b.n	8001752 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2224      	movs	r2, #36	; 0x24
 80016f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0201 	bic.w	r2, r2, #1
 8001708:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001718:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0201 	orr.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	e000      	b.n	8001752 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001750:	2302      	movs	r3, #2
  }
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001768:	4b29      	ldr	r3, [pc, #164]	; (8001810 <HAL_PWREx_ConfigSupply+0xb0>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	2b06      	cmp	r3, #6
 8001772:	d00a      	beq.n	800178a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001774:	4b26      	ldr	r3, [pc, #152]	; (8001810 <HAL_PWREx_ConfigSupply+0xb0>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	429a      	cmp	r2, r3
 8001780:	d001      	beq.n	8001786 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e040      	b.n	8001808 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	e03e      	b.n	8001808 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <HAL_PWREx_ConfigSupply+0xb0>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001792:	491f      	ldr	r1, [pc, #124]	; (8001810 <HAL_PWREx_ConfigSupply+0xb0>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4313      	orrs	r3, r2
 8001798:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800179a:	f7ff fb87 	bl	8000eac <HAL_GetTick>
 800179e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017a0:	e009      	b.n	80017b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017a2:	f7ff fb83 	bl	8000eac <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017b0:	d901      	bls.n	80017b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e028      	b.n	8001808 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <HAL_PWREx_ConfigSupply+0xb0>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017c2:	d1ee      	bne.n	80017a2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b1e      	cmp	r3, #30
 80017c8:	d008      	beq.n	80017dc <HAL_PWREx_ConfigSupply+0x7c>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b2e      	cmp	r3, #46	; 0x2e
 80017ce:	d005      	beq.n	80017dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b1d      	cmp	r3, #29
 80017d4:	d002      	beq.n	80017dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b2d      	cmp	r3, #45	; 0x2d
 80017da:	d114      	bne.n	8001806 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80017dc:	f7ff fb66 	bl	8000eac <HAL_GetTick>
 80017e0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017e2:	e009      	b.n	80017f8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017e4:	f7ff fb62 	bl	8000eac <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017f2:	d901      	bls.n	80017f8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e007      	b.n	8001808 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_PWREx_ConfigSupply+0xb0>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001804:	d1ee      	bne.n	80017e4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	58024800 	.word	0x58024800

08001814 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08c      	sub	sp, #48	; 0x30
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	f000 bc1d 	b.w	8002062 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 8087 	beq.w	8001944 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001836:	4b99      	ldr	r3, [pc, #612]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001840:	4b96      	ldr	r3, [pc, #600]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	2b10      	cmp	r3, #16
 800184a:	d007      	beq.n	800185c <HAL_RCC_OscConfig+0x48>
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	2b18      	cmp	r3, #24
 8001850:	d110      	bne.n	8001874 <HAL_RCC_OscConfig+0x60>
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d10b      	bne.n	8001874 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185c:	4b8f      	ldr	r3, [pc, #572]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d06c      	beq.n	8001942 <HAL_RCC_OscConfig+0x12e>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d168      	bne.n	8001942 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e3f6      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187c:	d106      	bne.n	800188c <HAL_RCC_OscConfig+0x78>
 800187e:	4b87      	ldr	r3, [pc, #540]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a86      	ldr	r2, [pc, #536]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	e02e      	b.n	80018ea <HAL_RCC_OscConfig+0xd6>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10c      	bne.n	80018ae <HAL_RCC_OscConfig+0x9a>
 8001894:	4b81      	ldr	r3, [pc, #516]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a80      	ldr	r2, [pc, #512]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 800189a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b7e      	ldr	r3, [pc, #504]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a7d      	ldr	r2, [pc, #500]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 80018a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	e01d      	b.n	80018ea <HAL_RCC_OscConfig+0xd6>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b6:	d10c      	bne.n	80018d2 <HAL_RCC_OscConfig+0xbe>
 80018b8:	4b78      	ldr	r3, [pc, #480]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a77      	ldr	r2, [pc, #476]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 80018be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b75      	ldr	r3, [pc, #468]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a74      	ldr	r2, [pc, #464]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 80018ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	e00b      	b.n	80018ea <HAL_RCC_OscConfig+0xd6>
 80018d2:	4b72      	ldr	r3, [pc, #456]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a71      	ldr	r2, [pc, #452]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 80018d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a6e      	ldr	r2, [pc, #440]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 80018e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d013      	beq.n	800191a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f2:	f7ff fadb 	bl	8000eac <HAL_GetTick>
 80018f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018fa:	f7ff fad7 	bl	8000eac <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b64      	cmp	r3, #100	; 0x64
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e3aa      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800190c:	4b63      	ldr	r3, [pc, #396]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0xe6>
 8001918:	e014      	b.n	8001944 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191a:	f7ff fac7 	bl	8000eac <HAL_GetTick>
 800191e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001922:	f7ff fac3 	bl	8000eac <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b64      	cmp	r3, #100	; 0x64
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e396      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001934:	4b59      	ldr	r3, [pc, #356]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x10e>
 8001940:	e000      	b.n	8001944 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001942:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80cb 	beq.w	8001ae8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001952:	4b52      	ldr	r3, [pc, #328]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800195a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800195c:	4b4f      	ldr	r3, [pc, #316]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d007      	beq.n	8001978 <HAL_RCC_OscConfig+0x164>
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	2b18      	cmp	r3, #24
 800196c:	d156      	bne.n	8001a1c <HAL_RCC_OscConfig+0x208>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d151      	bne.n	8001a1c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001978:	4b48      	ldr	r3, [pc, #288]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_OscConfig+0x17c>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e368      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001990:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f023 0219 	bic.w	r2, r3, #25
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	493f      	ldr	r1, [pc, #252]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019a2:	f7ff fa83 	bl	8000eac <HAL_GetTick>
 80019a6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019aa:	f7ff fa7f 	bl	8000eac <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e352      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019bc:	4b37      	ldr	r3, [pc, #220]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c8:	f7ff faa0 	bl	8000f0c <HAL_GetREVID>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d817      	bhi.n	8001a06 <HAL_RCC_OscConfig+0x1f2>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	2b40      	cmp	r3, #64	; 0x40
 80019dc:	d108      	bne.n	80019f0 <HAL_RCC_OscConfig+0x1dc>
 80019de:	4b2f      	ldr	r3, [pc, #188]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80019e6:	4a2d      	ldr	r2, [pc, #180]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ec:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ee:	e07b      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f0:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	031b      	lsls	r3, r3, #12
 80019fe:	4927      	ldr	r1, [pc, #156]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a04:	e070      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a06:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	061b      	lsls	r3, r3, #24
 8001a14:	4921      	ldr	r1, [pc, #132]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a1a:	e065      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d048      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 0219 	bic.w	r2, r3, #25
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	491a      	ldr	r1, [pc, #104]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff fa39 	bl	8000eac <HAL_GetTick>
 8001a3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fa35 	bl	8000eac <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e308      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	f7ff fa56 	bl	8000f0c <HAL_GetREVID>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d81a      	bhi.n	8001aa0 <HAL_RCC_OscConfig+0x28c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b40      	cmp	r3, #64	; 0x40
 8001a70:	d108      	bne.n	8001a84 <HAL_RCC_OscConfig+0x270>
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a7a:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a80:	6053      	str	r3, [r2, #4]
 8001a82:	e031      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2d4>
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	031b      	lsls	r3, r3, #12
 8001a92:	4902      	ldr	r1, [pc, #8]	; (8001a9c <HAL_RCC_OscConfig+0x288>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
 8001a98:	e026      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2d4>
 8001a9a:	bf00      	nop
 8001a9c:	58024400 	.word	0x58024400
 8001aa0:	4b9a      	ldr	r3, [pc, #616]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4997      	ldr	r1, [pc, #604]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
 8001ab4:	e018      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab6:	4b95      	ldr	r3, [pc, #596]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a94      	ldr	r2, [pc, #592]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac2:	f7ff f9f3 	bl	8000eac <HAL_GetTick>
 8001ac6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aca:	f7ff f9ef 	bl	8000eac <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e2c2      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001adc:	4b8b      	ldr	r3, [pc, #556]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f0      	bne.n	8001aca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80a9 	beq.w	8001c48 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001af6:	4b85      	ldr	r3, [pc, #532]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001afe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b00:	4b82      	ldr	r3, [pc, #520]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d007      	beq.n	8001b1c <HAL_RCC_OscConfig+0x308>
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2b18      	cmp	r3, #24
 8001b10:	d13a      	bne.n	8001b88 <HAL_RCC_OscConfig+0x374>
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d135      	bne.n	8001b88 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b1c:	4b7b      	ldr	r3, [pc, #492]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_OscConfig+0x320>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	2b80      	cmp	r3, #128	; 0x80
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e296      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b34:	f7ff f9ea 	bl	8000f0c <HAL_GetREVID>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d817      	bhi.n	8001b72 <HAL_RCC_OscConfig+0x35e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	2b20      	cmp	r3, #32
 8001b48:	d108      	bne.n	8001b5c <HAL_RCC_OscConfig+0x348>
 8001b4a:	4b70      	ldr	r3, [pc, #448]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b52:	4a6e      	ldr	r2, [pc, #440]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001b54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b58:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b5a:	e075      	b.n	8001c48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b5c:	4b6b      	ldr	r3, [pc, #428]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	069b      	lsls	r3, r3, #26
 8001b6a:	4968      	ldr	r1, [pc, #416]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b70:	e06a      	b.n	8001c48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b72:	4b66      	ldr	r3, [pc, #408]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	061b      	lsls	r3, r3, #24
 8001b80:	4962      	ldr	r1, [pc, #392]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b86:	e05f      	b.n	8001c48 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d042      	beq.n	8001c16 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b90:	4b5e      	ldr	r3, [pc, #376]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a5d      	ldr	r2, [pc, #372]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f986 	bl	8000eac <HAL_GetTick>
 8001ba0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001ba4:	f7ff f982 	bl	8000eac <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e255      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bb6:	4b55      	ldr	r3, [pc, #340]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bc2:	f7ff f9a3 	bl	8000f0c <HAL_GetREVID>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d817      	bhi.n	8001c00 <HAL_RCC_OscConfig+0x3ec>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	2b20      	cmp	r3, #32
 8001bd6:	d108      	bne.n	8001bea <HAL_RCC_OscConfig+0x3d6>
 8001bd8:	4b4c      	ldr	r3, [pc, #304]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001be0:	4a4a      	ldr	r2, [pc, #296]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001be2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001be6:	6053      	str	r3, [r2, #4]
 8001be8:	e02e      	b.n	8001c48 <HAL_RCC_OscConfig+0x434>
 8001bea:	4b48      	ldr	r3, [pc, #288]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	069b      	lsls	r3, r3, #26
 8001bf8:	4944      	ldr	r1, [pc, #272]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]
 8001bfe:	e023      	b.n	8001c48 <HAL_RCC_OscConfig+0x434>
 8001c00:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	061b      	lsls	r3, r3, #24
 8001c0e:	493f      	ldr	r1, [pc, #252]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	60cb      	str	r3, [r1, #12]
 8001c14:	e018      	b.n	8001c48 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c16:	4b3d      	ldr	r3, [pc, #244]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a3c      	ldr	r2, [pc, #240]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c22:	f7ff f943 	bl	8000eac <HAL_GetTick>
 8001c26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c2a:	f7ff f93f 	bl	8000eac <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e212      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c3c:	4b33      	ldr	r3, [pc, #204]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f0      	bne.n	8001c2a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d036      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d019      	beq.n	8001c90 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c60:	4a2a      	ldr	r2, [pc, #168]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c68:	f7ff f920 	bl	8000eac <HAL_GetTick>
 8001c6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c70:	f7ff f91c 	bl	8000eac <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e1ef      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c82:	4b22      	ldr	r3, [pc, #136]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x45c>
 8001c8e:	e018      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c90:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c94:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001c96:	f023 0301 	bic.w	r3, r3, #1
 8001c9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9c:	f7ff f906 	bl	8000eac <HAL_GetTick>
 8001ca0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca4:	f7ff f902 	bl	8000eac <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e1d5      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d039      	beq.n	8001d42 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d01c      	beq.n	8001d10 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a0c      	ldr	r2, [pc, #48]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001cdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ce0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ce2:	f7ff f8e3 	bl	8000eac <HAL_GetTick>
 8001ce6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001cea:	f7ff f8df 	bl	8000eac <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e1b2      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_RCC_OscConfig+0x4f8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x4d6>
 8001d08:	e01b      	b.n	8001d42 <HAL_RCC_OscConfig+0x52e>
 8001d0a:	bf00      	nop
 8001d0c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d10:	4b9b      	ldr	r3, [pc, #620]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a9a      	ldr	r2, [pc, #616]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001d16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d1c:	f7ff f8c6 	bl	8000eac <HAL_GetTick>
 8001d20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d24:	f7ff f8c2 	bl	8000eac <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e195      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d36:	4b92      	ldr	r3, [pc, #584]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8081 	beq.w	8001e52 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d50:	4b8c      	ldr	r3, [pc, #560]	; (8001f84 <HAL_RCC_OscConfig+0x770>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a8b      	ldr	r2, [pc, #556]	; (8001f84 <HAL_RCC_OscConfig+0x770>)
 8001d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d5c:	f7ff f8a6 	bl	8000eac <HAL_GetTick>
 8001d60:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d64:	f7ff f8a2 	bl	8000eac <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	; 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e175      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d76:	4b83      	ldr	r3, [pc, #524]	; (8001f84 <HAL_RCC_OscConfig+0x770>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d106      	bne.n	8001d98 <HAL_RCC_OscConfig+0x584>
 8001d8a:	4b7d      	ldr	r3, [pc, #500]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8e:	4a7c      	ldr	r2, [pc, #496]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6713      	str	r3, [r2, #112]	; 0x70
 8001d96:	e02d      	b.n	8001df4 <HAL_RCC_OscConfig+0x5e0>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_OscConfig+0x5a6>
 8001da0:	4b77      	ldr	r3, [pc, #476]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	4a76      	ldr	r2, [pc, #472]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	6713      	str	r3, [r2, #112]	; 0x70
 8001dac:	4b74      	ldr	r3, [pc, #464]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db0:	4a73      	ldr	r2, [pc, #460]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001db2:	f023 0304 	bic.w	r3, r3, #4
 8001db6:	6713      	str	r3, [r2, #112]	; 0x70
 8001db8:	e01c      	b.n	8001df4 <HAL_RCC_OscConfig+0x5e0>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b05      	cmp	r3, #5
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x5c8>
 8001dc2:	4b6f      	ldr	r3, [pc, #444]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	4a6e      	ldr	r2, [pc, #440]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dce:	4b6c      	ldr	r3, [pc, #432]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd2:	4a6b      	ldr	r2, [pc, #428]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dda:	e00b      	b.n	8001df4 <HAL_RCC_OscConfig+0x5e0>
 8001ddc:	4b68      	ldr	r3, [pc, #416]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de0:	4a67      	ldr	r2, [pc, #412]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001de2:	f023 0301 	bic.w	r3, r3, #1
 8001de6:	6713      	str	r3, [r2, #112]	; 0x70
 8001de8:	4b65      	ldr	r3, [pc, #404]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dec:	4a64      	ldr	r2, [pc, #400]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001dee:	f023 0304 	bic.w	r3, r3, #4
 8001df2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d015      	beq.n	8001e28 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7ff f856 	bl	8000eac <HAL_GetTick>
 8001e00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e02:	e00a      	b.n	8001e1a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e04:	f7ff f852 	bl	8000eac <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e123      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e1a:	4b59      	ldr	r3, [pc, #356]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0ee      	beq.n	8001e04 <HAL_RCC_OscConfig+0x5f0>
 8001e26:	e014      	b.n	8001e52 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff f840 	bl	8000eac <HAL_GetTick>
 8001e2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e2e:	e00a      	b.n	8001e46 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e30:	f7ff f83c 	bl	8000eac <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e10d      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e46:	4b4e      	ldr	r3, [pc, #312]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1ee      	bne.n	8001e30 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 8102 	beq.w	8002060 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e5c:	4b48      	ldr	r3, [pc, #288]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e64:	2b18      	cmp	r3, #24
 8001e66:	f000 80bd 	beq.w	8001fe4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	f040 809e 	bne.w	8001fb0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e74:	4b42      	ldr	r3, [pc, #264]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a41      	ldr	r2, [pc, #260]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7ff f814 	bl	8000eac <HAL_GetTick>
 8001e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e88:	f7ff f810 	bl	8000eac <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e0e3      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e9a:	4b39      	ldr	r3, [pc, #228]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea6:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eaa:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <HAL_RCC_OscConfig+0x774>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001eb6:	0112      	lsls	r2, r2, #4
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	4931      	ldr	r1, [pc, #196]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	628b      	str	r3, [r1, #40]	; 0x28
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	025b      	lsls	r3, r3, #9
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eda:	3b01      	subs	r3, #1
 8001edc:	041b      	lsls	r3, r3, #16
 8001ede:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	061b      	lsls	r3, r3, #24
 8001eec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001ef0:	4923      	ldr	r1, [pc, #140]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001ef6:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	4a21      	ldr	r2, [pc, #132]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f02:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f06:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <HAL_RCC_OscConfig+0x778>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f0e:	00d2      	lsls	r2, r2, #3
 8001f10:	491b      	ldr	r1, [pc, #108]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f16:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	f023 020c 	bic.w	r2, r3, #12
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4917      	ldr	r1, [pc, #92]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	f023 0202 	bic.w	r2, r3, #2
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	4912      	ldr	r1, [pc, #72]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	4a10      	ldr	r2, [pc, #64]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4a:	4a0d      	ldr	r2, [pc, #52]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f56:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <HAL_RCC_OscConfig+0x76c>)
 8001f70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7fe ff99 	bl	8000eac <HAL_GetTick>
 8001f7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f7c:	e011      	b.n	8001fa2 <HAL_RCC_OscConfig+0x78e>
 8001f7e:	bf00      	nop
 8001f80:	58024400 	.word	0x58024400
 8001f84:	58024800 	.word	0x58024800
 8001f88:	fffffc0c 	.word	0xfffffc0c
 8001f8c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f90:	f7fe ff8c 	bl	8000eac <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e05f      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fa2:	4b32      	ldr	r3, [pc, #200]	; (800206c <HAL_RCC_OscConfig+0x858>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0x77c>
 8001fae:	e057      	b.n	8002060 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb0:	4b2e      	ldr	r3, [pc, #184]	; (800206c <HAL_RCC_OscConfig+0x858>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a2d      	ldr	r2, [pc, #180]	; (800206c <HAL_RCC_OscConfig+0x858>)
 8001fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7fe ff76 	bl	8000eac <HAL_GetTick>
 8001fc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7fe ff72 	bl	8000eac <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e045      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fd6:	4b25      	ldr	r3, [pc, #148]	; (800206c <HAL_RCC_OscConfig+0x858>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x7b0>
 8001fe2:	e03d      	b.n	8002060 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001fe4:	4b21      	ldr	r3, [pc, #132]	; (800206c <HAL_RCC_OscConfig+0x858>)
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCC_OscConfig+0x858>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d031      	beq.n	800205c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f003 0203 	and.w	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002002:	429a      	cmp	r2, r3
 8002004:	d12a      	bne.n	800205c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d122      	bne.n	800205c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d11a      	bne.n	800205c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	0a5b      	lsrs	r3, r3, #9
 800202a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002032:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d111      	bne.n	800205c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002044:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002046:	429a      	cmp	r2, r3
 8002048:	d108      	bne.n	800205c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	0e1b      	lsrs	r3, r3, #24
 800204e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002056:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002058:	429a      	cmp	r2, r3
 800205a:	d001      	beq.n	8002060 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3730      	adds	r7, #48	; 0x30
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	58024400 	.word	0x58024400

08002070 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e19c      	b.n	80023be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002084:	4b8a      	ldr	r3, [pc, #552]	; (80022b0 <HAL_RCC_ClockConfig+0x240>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d910      	bls.n	80020b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b87      	ldr	r3, [pc, #540]	; (80022b0 <HAL_RCC_ClockConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 020f 	bic.w	r2, r3, #15
 800209a:	4985      	ldr	r1, [pc, #532]	; (80022b0 <HAL_RCC_ClockConfig+0x240>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b83      	ldr	r3, [pc, #524]	; (80022b0 <HAL_RCC_ClockConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e184      	b.n	80023be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d010      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	4b7b      	ldr	r3, [pc, #492]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d908      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020d0:	4b78      	ldr	r3, [pc, #480]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	4975      	ldr	r1, [pc, #468]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d010      	beq.n	8002110 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	4b70      	ldr	r3, [pc, #448]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d908      	bls.n	8002110 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020fe:	4b6d      	ldr	r3, [pc, #436]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	496a      	ldr	r1, [pc, #424]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 800210c:	4313      	orrs	r3, r2
 800210e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b00      	cmp	r3, #0
 800211a:	d010      	beq.n	800213e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699a      	ldr	r2, [r3, #24]
 8002120:	4b64      	ldr	r3, [pc, #400]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002128:	429a      	cmp	r2, r3
 800212a:	d908      	bls.n	800213e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800212c:	4b61      	ldr	r3, [pc, #388]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	495e      	ldr	r1, [pc, #376]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 800213a:	4313      	orrs	r3, r2
 800213c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b00      	cmp	r3, #0
 8002148:	d010      	beq.n	800216c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69da      	ldr	r2, [r3, #28]
 800214e:	4b59      	ldr	r3, [pc, #356]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002156:	429a      	cmp	r2, r3
 8002158:	d908      	bls.n	800216c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800215a:	4b56      	ldr	r3, [pc, #344]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	4953      	ldr	r1, [pc, #332]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002168:	4313      	orrs	r3, r2
 800216a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d010      	beq.n	800219a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	4b4d      	ldr	r3, [pc, #308]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	429a      	cmp	r2, r3
 8002186:	d908      	bls.n	800219a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	4b4a      	ldr	r3, [pc, #296]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f023 020f 	bic.w	r2, r3, #15
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4947      	ldr	r1, [pc, #284]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002196:	4313      	orrs	r3, r2
 8002198:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d055      	beq.n	8002252 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80021a6:	4b43      	ldr	r3, [pc, #268]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	4940      	ldr	r1, [pc, #256]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d107      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021c0:	4b3c      	ldr	r3, [pc, #240]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d121      	bne.n	8002210 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0f6      	b.n	80023be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021d8:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d115      	bne.n	8002210 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0ea      	b.n	80023be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d107      	bne.n	8002200 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021f0:	4b30      	ldr	r3, [pc, #192]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d109      	bne.n	8002210 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0de      	b.n	80023be <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002200:	4b2c      	ldr	r3, [pc, #176]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0d6      	b.n	80023be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002210:	4b28      	ldr	r3, [pc, #160]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f023 0207 	bic.w	r2, r3, #7
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4925      	ldr	r1, [pc, #148]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 800221e:	4313      	orrs	r3, r2
 8002220:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002222:	f7fe fe43 	bl	8000eac <HAL_GetTick>
 8002226:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002228:	e00a      	b.n	8002240 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222a:	f7fe fe3f 	bl	8000eac <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f241 3288 	movw	r2, #5000	; 0x1388
 8002238:	4293      	cmp	r3, r2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e0be      	b.n	80023be <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002240:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	429a      	cmp	r2, r3
 8002250:	d1eb      	bne.n	800222a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d010      	beq.n	8002280 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	429a      	cmp	r2, r3
 800226c:	d208      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f023 020f 	bic.w	r2, r3, #15
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	490e      	ldr	r1, [pc, #56]	; (80022b4 <HAL_RCC_ClockConfig+0x244>)
 800227c:	4313      	orrs	r3, r2
 800227e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x240>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d214      	bcs.n	80022b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_RCC_ClockConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 020f 	bic.w	r2, r3, #15
 8002296:	4906      	ldr	r1, [pc, #24]	; (80022b0 <HAL_RCC_ClockConfig+0x240>)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <HAL_RCC_ClockConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e086      	b.n	80023be <HAL_RCC_ClockConfig+0x34e>
 80022b0:	52002000 	.word	0x52002000
 80022b4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d010      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	4b3f      	ldr	r3, [pc, #252]	; (80023c8 <HAL_RCC_ClockConfig+0x358>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d208      	bcs.n	80022e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022d4:	4b3c      	ldr	r3, [pc, #240]	; (80023c8 <HAL_RCC_ClockConfig+0x358>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	4939      	ldr	r1, [pc, #228]	; (80023c8 <HAL_RCC_ClockConfig+0x358>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d010      	beq.n	8002314 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <HAL_RCC_ClockConfig+0x358>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022fe:	429a      	cmp	r2, r3
 8002300:	d208      	bcs.n	8002314 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002302:	4b31      	ldr	r3, [pc, #196]	; (80023c8 <HAL_RCC_ClockConfig+0x358>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	492e      	ldr	r1, [pc, #184]	; (80023c8 <HAL_RCC_ClockConfig+0x358>)
 8002310:	4313      	orrs	r3, r2
 8002312:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	d010      	beq.n	8002342 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <HAL_RCC_ClockConfig+0x358>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800232c:	429a      	cmp	r2, r3
 800232e:	d208      	bcs.n	8002342 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002330:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <HAL_RCC_ClockConfig+0x358>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	4922      	ldr	r1, [pc, #136]	; (80023c8 <HAL_RCC_ClockConfig+0x358>)
 800233e:	4313      	orrs	r3, r2
 8002340:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0320 	and.w	r3, r3, #32
 800234a:	2b00      	cmp	r3, #0
 800234c:	d010      	beq.n	8002370 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_RCC_ClockConfig+0x358>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800235a:	429a      	cmp	r2, r3
 800235c:	d208      	bcs.n	8002370 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800235e:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <HAL_RCC_ClockConfig+0x358>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	4917      	ldr	r1, [pc, #92]	; (80023c8 <HAL_RCC_ClockConfig+0x358>)
 800236c:	4313      	orrs	r3, r2
 800236e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002370:	f000 f834 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8002374:	4602      	mov	r2, r0
 8002376:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <HAL_RCC_ClockConfig+0x358>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	4912      	ldr	r1, [pc, #72]	; (80023cc <HAL_RCC_ClockConfig+0x35c>)
 8002382:	5ccb      	ldrb	r3, [r1, r3]
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HAL_RCC_ClockConfig+0x358>)
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	4a0d      	ldr	r2, [pc, #52]	; (80023cc <HAL_RCC_ClockConfig+0x35c>)
 8002398:	5cd3      	ldrb	r3, [r2, r3]
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
 80023a4:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <HAL_RCC_ClockConfig+0x360>)
 80023a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <HAL_RCC_ClockConfig+0x364>)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_RCC_ClockConfig+0x368>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fd30 	bl	8000e18 <HAL_InitTick>
 80023b8:	4603      	mov	r3, r0
 80023ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	58024400 	.word	0x58024400
 80023cc:	08004fa8 	.word	0x08004fa8
 80023d0:	24000004 	.word	0x24000004
 80023d4:	24000000 	.word	0x24000000
 80023d8:	24000008 	.word	0x24000008

080023dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	; 0x24
 80023e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023e2:	4bb3      	ldr	r3, [pc, #716]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ea:	2b18      	cmp	r3, #24
 80023ec:	f200 8155 	bhi.w	800269a <HAL_RCC_GetSysClockFreq+0x2be>
 80023f0:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80023f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f6:	bf00      	nop
 80023f8:	0800245d 	.word	0x0800245d
 80023fc:	0800269b 	.word	0x0800269b
 8002400:	0800269b 	.word	0x0800269b
 8002404:	0800269b 	.word	0x0800269b
 8002408:	0800269b 	.word	0x0800269b
 800240c:	0800269b 	.word	0x0800269b
 8002410:	0800269b 	.word	0x0800269b
 8002414:	0800269b 	.word	0x0800269b
 8002418:	08002483 	.word	0x08002483
 800241c:	0800269b 	.word	0x0800269b
 8002420:	0800269b 	.word	0x0800269b
 8002424:	0800269b 	.word	0x0800269b
 8002428:	0800269b 	.word	0x0800269b
 800242c:	0800269b 	.word	0x0800269b
 8002430:	0800269b 	.word	0x0800269b
 8002434:	0800269b 	.word	0x0800269b
 8002438:	08002489 	.word	0x08002489
 800243c:	0800269b 	.word	0x0800269b
 8002440:	0800269b 	.word	0x0800269b
 8002444:	0800269b 	.word	0x0800269b
 8002448:	0800269b 	.word	0x0800269b
 800244c:	0800269b 	.word	0x0800269b
 8002450:	0800269b 	.word	0x0800269b
 8002454:	0800269b 	.word	0x0800269b
 8002458:	0800248f 	.word	0x0800248f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800245c:	4b94      	ldr	r3, [pc, #592]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002468:	4b91      	ldr	r3, [pc, #580]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	08db      	lsrs	r3, r3, #3
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	4a90      	ldr	r2, [pc, #576]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
 8002478:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800247a:	e111      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800247c:	4b8d      	ldr	r3, [pc, #564]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800247e:	61bb      	str	r3, [r7, #24]
    break;
 8002480:	e10e      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002482:	4b8d      	ldr	r3, [pc, #564]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002484:	61bb      	str	r3, [r7, #24]
    break;
 8002486:	e10b      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002488:	4b8c      	ldr	r3, [pc, #560]	; (80026bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800248a:	61bb      	str	r3, [r7, #24]
    break;
 800248c:	e108      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800248e:	4b88      	ldr	r3, [pc, #544]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002498:	4b85      	ldr	r3, [pc, #532]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80024a4:	4b82      	ldr	r3, [pc, #520]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80024ae:	4b80      	ldr	r3, [pc, #512]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b2:	08db      	lsrs	r3, r3, #3
 80024b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80e1 	beq.w	8002694 <HAL_RCC_GetSysClockFreq+0x2b8>
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	f000 8083 	beq.w	80025e0 <HAL_RCC_GetSysClockFreq+0x204>
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	f200 80a1 	bhi.w	8002624 <HAL_RCC_GetSysClockFreq+0x248>
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x114>
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d056      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x1c0>
 80024ee:	e099      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024f0:	4b6f      	ldr	r3, [pc, #444]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d02d      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024fc:	4b6c      	ldr	r3, [pc, #432]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	08db      	lsrs	r3, r3, #3
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	4a6b      	ldr	r2, [pc, #428]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
 800250c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	ee07 3a90 	vmov	s15, r3
 8002514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002526:	4b62      	ldr	r3, [pc, #392]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252e:	ee07 3a90 	vmov	s15, r3
 8002532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002536:	ed97 6a02 	vldr	s12, [r7, #8]
 800253a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80026c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800253e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800254a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800254e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002552:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002556:	e087      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002562:	eddf 6a58 	vldr	s13, [pc, #352]	; 80026c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800256a:	4b51      	ldr	r3, [pc, #324]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800257a:	ed97 6a02 	vldr	s12, [r7, #8]
 800257e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80026c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800258a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800258e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002596:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800259a:	e065      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80026c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ae:	4b40      	ldr	r3, [pc, #256]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b6:	ee07 3a90 	vmov	s15, r3
 80025ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025be:	ed97 6a02 	vldr	s12, [r7, #8]
 80025c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80026c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025de:	e043      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	ee07 3a90 	vmov	s15, r3
 80025e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80026cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80025ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025f2:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025fa:	ee07 3a90 	vmov	s15, r3
 80025fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002602:	ed97 6a02 	vldr	s12, [r7, #8]
 8002606:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80026c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800260a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800260e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800261a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002622:	e021      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800262e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80026c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002636:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002646:	ed97 6a02 	vldr	s12, [r7, #8]
 800264a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80026c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800264e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800265a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800265e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002666:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	0a5b      	lsrs	r3, r3, #9
 800266e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002672:	3301      	adds	r3, #1
 8002674:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	ee07 3a90 	vmov	s15, r3
 800267c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002680:	edd7 6a07 	vldr	s13, [r7, #28]
 8002684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800268c:	ee17 3a90 	vmov	r3, s15
 8002690:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002692:	e005      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	61bb      	str	r3, [r7, #24]
    break;
 8002698:	e002      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800269c:	61bb      	str	r3, [r7, #24]
    break;
 800269e:	bf00      	nop
  }

  return sysclockfreq;
 80026a0:	69bb      	ldr	r3, [r7, #24]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	58024400 	.word	0x58024400
 80026b4:	03d09000 	.word	0x03d09000
 80026b8:	003d0900 	.word	0x003d0900
 80026bc:	007a1200 	.word	0x007a1200
 80026c0:	46000000 	.word	0x46000000
 80026c4:	4c742400 	.word	0x4c742400
 80026c8:	4a742400 	.word	0x4a742400
 80026cc:	4af42400 	.word	0x4af42400

080026d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026d6:	f7ff fe81 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 80026da:	4602      	mov	r2, r0
 80026dc:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_RCC_GetHCLKFreq+0x50>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	490f      	ldr	r1, [pc, #60]	; (8002724 <HAL_RCC_GetHCLKFreq+0x54>)
 80026e8:	5ccb      	ldrb	r3, [r1, r3]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	fa22 f303 	lsr.w	r3, r2, r3
 80026f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026f4:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <HAL_RCC_GetHCLKFreq+0x50>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	4a09      	ldr	r2, [pc, #36]	; (8002724 <HAL_RCC_GetHCLKFreq+0x54>)
 80026fe:	5cd3      	ldrb	r3, [r2, r3]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	fa22 f303 	lsr.w	r3, r2, r3
 800270a:	4a07      	ldr	r2, [pc, #28]	; (8002728 <HAL_RCC_GetHCLKFreq+0x58>)
 800270c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800270e:	4a07      	ldr	r2, [pc, #28]	; (800272c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002714:	4b04      	ldr	r3, [pc, #16]	; (8002728 <HAL_RCC_GetHCLKFreq+0x58>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	58024400 	.word	0x58024400
 8002724:	08004fa8 	.word	0x08004fa8
 8002728:	24000004 	.word	0x24000004
 800272c:	24000000 	.word	0x24000000

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002734:	f7ff ffcc 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4904      	ldr	r1, [pc, #16]	; (8002758 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002750:	4618      	mov	r0, r3
 8002752:	bd80      	pop	{r7, pc}
 8002754:	58024400 	.word	0x58024400
 8002758:	08004fa8 	.word	0x08004fa8

0800275c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002760:	f7ff ffb6 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 8002764:	4602      	mov	r2, r0
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	4904      	ldr	r1, [pc, #16]	; (8002784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002772:	5ccb      	ldrb	r3, [r1, r3]
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	58024400 	.word	0x58024400
 8002784:	08004fa8 	.word	0x08004fa8

08002788 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002790:	2300      	movs	r3, #0
 8002792:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002794:	2300      	movs	r3, #0
 8002796:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d03f      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027ac:	d02a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027b2:	d824      	bhi.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027b8:	d018      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027be:	d81e      	bhi.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027c8:	d007      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027ca:	e018      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027cc:	4ba3      	ldr	r3, [pc, #652]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	4aa2      	ldr	r2, [pc, #648]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027d8:	e015      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3304      	adds	r3, #4
 80027de:	2102      	movs	r1, #2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f001 f9d5 	bl	8003b90 <RCCEx_PLL2_Config>
 80027e6:	4603      	mov	r3, r0
 80027e8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027ea:	e00c      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3324      	adds	r3, #36	; 0x24
 80027f0:	2102      	movs	r1, #2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f001 fa7e 	bl	8003cf4 <RCCEx_PLL3_Config>
 80027f8:	4603      	mov	r3, r0
 80027fa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027fc:	e003      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	75fb      	strb	r3, [r7, #23]
      break;
 8002802:	e000      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d109      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800280c:	4b93      	ldr	r3, [pc, #588]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800280e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002810:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002818:	4990      	ldr	r1, [pc, #576]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	650b      	str	r3, [r1, #80]	; 0x50
 800281e:	e001      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002820:	7dfb      	ldrb	r3, [r7, #23]
 8002822:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d03d      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	2b04      	cmp	r3, #4
 8002836:	d826      	bhi.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002855 	.word	0x08002855
 8002844:	08002863 	.word	0x08002863
 8002848:	08002875 	.word	0x08002875
 800284c:	0800288d 	.word	0x0800288d
 8002850:	0800288d 	.word	0x0800288d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002854:	4b81      	ldr	r3, [pc, #516]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	4a80      	ldr	r2, [pc, #512]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800285a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800285e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002860:	e015      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	2100      	movs	r1, #0
 8002868:	4618      	mov	r0, r3
 800286a:	f001 f991 	bl	8003b90 <RCCEx_PLL2_Config>
 800286e:	4603      	mov	r3, r0
 8002870:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002872:	e00c      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3324      	adds	r3, #36	; 0x24
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f001 fa3a 	bl	8003cf4 <RCCEx_PLL3_Config>
 8002880:	4603      	mov	r3, r0
 8002882:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002884:	e003      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	75fb      	strb	r3, [r7, #23]
      break;
 800288a:	e000      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800288c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002894:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002898:	f023 0207 	bic.w	r2, r3, #7
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	496e      	ldr	r1, [pc, #440]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	650b      	str	r3, [r1, #80]	; 0x50
 80028a6:	e001      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d042      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c0:	d02b      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80028c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c6:	d825      	bhi.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80028c8:	2bc0      	cmp	r3, #192	; 0xc0
 80028ca:	d028      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80028cc:	2bc0      	cmp	r3, #192	; 0xc0
 80028ce:	d821      	bhi.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80028d0:	2b80      	cmp	r3, #128	; 0x80
 80028d2:	d016      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80028d4:	2b80      	cmp	r3, #128	; 0x80
 80028d6:	d81d      	bhi.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80028dc:	2b40      	cmp	r3, #64	; 0x40
 80028de:	d007      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80028e0:	e018      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e2:	4b5e      	ldr	r3, [pc, #376]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	4a5d      	ldr	r2, [pc, #372]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80028ee:	e017      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3304      	adds	r3, #4
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f001 f94a 	bl	8003b90 <RCCEx_PLL2_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002900:	e00e      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3324      	adds	r3, #36	; 0x24
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f001 f9f3 	bl	8003cf4 <RCCEx_PLL3_Config>
 800290e:	4603      	mov	r3, r0
 8002910:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002912:	e005      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	75fb      	strb	r3, [r7, #23]
      break;
 8002918:	e002      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800291a:	bf00      	nop
 800291c:	e000      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800291e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002920:	7dfb      	ldrb	r3, [r7, #23]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002926:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	494a      	ldr	r1, [pc, #296]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002934:	4313      	orrs	r3, r2
 8002936:	650b      	str	r3, [r1, #80]	; 0x50
 8002938:	e001      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293a:	7dfb      	ldrb	r3, [r7, #23]
 800293c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002946:	2b00      	cmp	r3, #0
 8002948:	d049      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002950:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002954:	d030      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002956:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800295a:	d82a      	bhi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800295c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002960:	d02c      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002962:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002966:	d824      	bhi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800296c:	d018      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800296e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002972:	d81e      	bhi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002978:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800297c:	d007      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800297e:	e018      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002980:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	4a35      	ldr	r2, [pc, #212]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800298c:	e017      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3304      	adds	r3, #4
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f001 f8fb 	bl	8003b90 <RCCEx_PLL2_Config>
 800299a:	4603      	mov	r3, r0
 800299c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800299e:	e00e      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3324      	adds	r3, #36	; 0x24
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f001 f9a4 	bl	8003cf4 <RCCEx_PLL3_Config>
 80029ac:	4603      	mov	r3, r0
 80029ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029b0:	e005      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	75fb      	strb	r3, [r7, #23]
      break;
 80029b6:	e002      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80029b8:	bf00      	nop
 80029ba:	e000      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80029bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029be:	7dfb      	ldrb	r3, [r7, #23]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80029c4:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029d2:	4922      	ldr	r1, [pc, #136]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	658b      	str	r3, [r1, #88]	; 0x58
 80029d8:	e001      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029da:	7dfb      	ldrb	r3, [r7, #23]
 80029dc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d04b      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029f4:	d030      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80029f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029fa:	d82a      	bhi.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80029fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a00:	d02e      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002a02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a06:	d824      	bhi.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a0c:	d018      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002a0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a12:	d81e      	bhi.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a1c:	d007      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002a1e:	e018      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	4a0d      	ldr	r2, [pc, #52]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a2c:	e019      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3304      	adds	r3, #4
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 f8ab 	bl	8003b90 <RCCEx_PLL2_Config>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002a3e:	e010      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3324      	adds	r3, #36	; 0x24
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f001 f954 	bl	8003cf4 <RCCEx_PLL3_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a50:	e007      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
      break;
 8002a56:	e004      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002a58:	bf00      	nop
 8002a5a:	e002      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002a5c:	58024400 	.word	0x58024400
      break;
 8002a60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a68:	4b99      	ldr	r3, [pc, #612]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a76:	4996      	ldr	r1, [pc, #600]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	658b      	str	r3, [r1, #88]	; 0x58
 8002a7c:	e001      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a7e:	7dfb      	ldrb	r3, [r7, #23]
 8002a80:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d032      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a92:	2b30      	cmp	r3, #48	; 0x30
 8002a94:	d01c      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002a96:	2b30      	cmp	r3, #48	; 0x30
 8002a98:	d817      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	d00c      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d813      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d016      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002aa6:	2b10      	cmp	r3, #16
 8002aa8:	d10f      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aaa:	4b89      	ldr	r3, [pc, #548]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	4a88      	ldr	r2, [pc, #544]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002ab6:	e00e      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3304      	adds	r3, #4
 8002abc:	2102      	movs	r1, #2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f001 f866 	bl	8003b90 <RCCEx_PLL2_Config>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002ac8:	e005      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	75fb      	strb	r3, [r7, #23]
      break;
 8002ace:	e002      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002ad0:	bf00      	nop
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ad6:	7dfb      	ldrb	r3, [r7, #23]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002adc:	4b7c      	ldr	r3, [pc, #496]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae8:	4979      	ldr	r1, [pc, #484]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002aee:	e001      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d047      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b08:	d030      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b0e:	d82a      	bhi.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002b10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b14:	d02c      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002b16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b1a:	d824      	bhi.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b20:	d018      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b26:	d81e      	bhi.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b30:	d007      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002b32:	e018      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b34:	4b66      	ldr	r3, [pc, #408]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	4a65      	ldr	r2, [pc, #404]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b40:	e017      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2100      	movs	r1, #0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f001 f821 	bl	8003b90 <RCCEx_PLL2_Config>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b52:	e00e      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3324      	adds	r3, #36	; 0x24
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f001 f8ca 	bl	8003cf4 <RCCEx_PLL3_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b64:	e005      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	75fb      	strb	r3, [r7, #23]
      break;
 8002b6a:	e002      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002b6c:	bf00      	nop
 8002b6e:	e000      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b78:	4b55      	ldr	r3, [pc, #340]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	4952      	ldr	r1, [pc, #328]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	650b      	str	r3, [r1, #80]	; 0x50
 8002b8a:	e001      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d049      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba4:	d02e      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002ba6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002baa:	d828      	bhi.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002bac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bb0:	d02a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002bb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bb6:	d822      	bhi.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002bb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bbc:	d026      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002bbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bc2:	d81c      	bhi.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002bc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bc8:	d010      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002bca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bce:	d816      	bhi.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01d      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd8:	d111      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	2101      	movs	r1, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 ffd5 	bl	8003b90 <RCCEx_PLL2_Config>
 8002be6:	4603      	mov	r3, r0
 8002be8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002bea:	e012      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3324      	adds	r3, #36	; 0x24
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 f87e 	bl	8003cf4 <RCCEx_PLL3_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002bfc:	e009      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	75fb      	strb	r3, [r7, #23]
      break;
 8002c02:	e006      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c04:	bf00      	nop
 8002c06:	e004      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c08:	bf00      	nop
 8002c0a:	e002      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c0c:	bf00      	nop
 8002c0e:	e000      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d109      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c18:	4b2d      	ldr	r3, [pc, #180]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c24:	492a      	ldr	r1, [pc, #168]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	650b      	str	r3, [r1, #80]	; 0x50
 8002c2a:	e001      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d04d      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c46:	d02e      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c4c:	d828      	bhi.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c52:	d02a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c58:	d822      	bhi.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c5e:	d026      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002c60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c64:	d81c      	bhi.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c6a:	d010      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c70:	d816      	bhi.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d01d      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002c76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c7a:	d111      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	2101      	movs	r1, #1
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 ff84 	bl	8003b90 <RCCEx_PLL2_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c8c:	e012      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3324      	adds	r3, #36	; 0x24
 8002c92:	2101      	movs	r1, #1
 8002c94:	4618      	mov	r0, r3
 8002c96:	f001 f82d 	bl	8003cf4 <RCCEx_PLL3_Config>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c9e:	e009      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ca4:	e006      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e004      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002caa:	bf00      	nop
 8002cac:	e002      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e000      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002cba:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002cc8:	4901      	ldr	r1, [pc, #4]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	658b      	str	r3, [r1, #88]	; 0x58
 8002cce:	e003      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002cd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d02f      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cec:	d00e      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf2:	d814      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d015      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002cf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cfc:	d10f      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cfe:	4baf      	ldr	r3, [pc, #700]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	4aae      	ldr	r2, [pc, #696]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d0a:	e00c      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	2101      	movs	r1, #1
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 ff3c 	bl	8003b90 <RCCEx_PLL2_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d1c:	e003      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	75fb      	strb	r3, [r7, #23]
      break;
 8002d22:	e000      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d2c:	4ba3      	ldr	r3, [pc, #652]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d38:	49a0      	ldr	r1, [pc, #640]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	650b      	str	r3, [r1, #80]	; 0x50
 8002d3e:	e001      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d032      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d81b      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002d58:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5e:	bf00      	nop
 8002d60:	08002d97 	.word	0x08002d97
 8002d64:	08002d71 	.word	0x08002d71
 8002d68:	08002d7f 	.word	0x08002d7f
 8002d6c:	08002d97 	.word	0x08002d97
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d70:	4b92      	ldr	r3, [pc, #584]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	4a91      	ldr	r2, [pc, #580]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002d7c:	e00c      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2102      	movs	r1, #2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 ff03 	bl	8003b90 <RCCEx_PLL2_Config>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002d8e:	e003      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	75fb      	strb	r3, [r7, #23]
      break;
 8002d94:	e000      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d9e:	4b87      	ldr	r3, [pc, #540]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da2:	f023 0203 	bic.w	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	4984      	ldr	r1, [pc, #528]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002db0:	e001      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
 8002db4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8086 	beq.w	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc4:	4b7e      	ldr	r3, [pc, #504]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a7d      	ldr	r2, [pc, #500]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dd0:	f7fe f86c 	bl	8000eac <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dd6:	e009      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd8:	f7fe f868 	bl	8000eac <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d902      	bls.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	75fb      	strb	r3, [r7, #23]
        break;
 8002dea:	e005      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dec:	4b74      	ldr	r3, [pc, #464]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ef      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d166      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002dfe:	4b6f      	ldr	r3, [pc, #444]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e08:	4053      	eors	r3, r2
 8002e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d013      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e12:	4b6a      	ldr	r3, [pc, #424]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e1a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e1c:	4b67      	ldr	r3, [pc, #412]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	4a66      	ldr	r2, [pc, #408]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e26:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e28:	4b64      	ldr	r3, [pc, #400]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	4a63      	ldr	r2, [pc, #396]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e34:	4a61      	ldr	r2, [pc, #388]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e44:	d115      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7fe f831 	bl	8000eac <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e4c:	e00b      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fe f82d 	bl	8000eac <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d902      	bls.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	75fb      	strb	r3, [r7, #23]
            break;
 8002e64:	e005      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e66:	4b55      	ldr	r3, [pc, #340]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0ed      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002e72:	7dfb      	ldrb	r3, [r7, #23]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d126      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e86:	d10d      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002e88:	4b4c      	ldr	r3, [pc, #304]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e96:	0919      	lsrs	r1, r3, #4
 8002e98:	4b4a      	ldr	r3, [pc, #296]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002e9a:	400b      	ands	r3, r1
 8002e9c:	4947      	ldr	r1, [pc, #284]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	610b      	str	r3, [r1, #16]
 8002ea2:	e005      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002ea4:	4b45      	ldr	r3, [pc, #276]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	4a44      	ldr	r2, [pc, #272]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002eaa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002eae:	6113      	str	r3, [r2, #16]
 8002eb0:	4b42      	ldr	r3, [pc, #264]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002eb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebe:	493f      	ldr	r1, [pc, #252]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	670b      	str	r3, [r1, #112]	; 0x70
 8002ec4:	e004      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
 8002ec8:	75bb      	strb	r3, [r7, #22]
 8002eca:	e001      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 8085 	beq.w	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ee2:	2b28      	cmp	r3, #40	; 0x28
 8002ee4:	d866      	bhi.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002ee6:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002fc9 	.word	0x08002fc9
 8002ef0:	08002fb5 	.word	0x08002fb5
 8002ef4:	08002fb5 	.word	0x08002fb5
 8002ef8:	08002fb5 	.word	0x08002fb5
 8002efc:	08002fb5 	.word	0x08002fb5
 8002f00:	08002fb5 	.word	0x08002fb5
 8002f04:	08002fb5 	.word	0x08002fb5
 8002f08:	08002fb5 	.word	0x08002fb5
 8002f0c:	08002f91 	.word	0x08002f91
 8002f10:	08002fb5 	.word	0x08002fb5
 8002f14:	08002fb5 	.word	0x08002fb5
 8002f18:	08002fb5 	.word	0x08002fb5
 8002f1c:	08002fb5 	.word	0x08002fb5
 8002f20:	08002fb5 	.word	0x08002fb5
 8002f24:	08002fb5 	.word	0x08002fb5
 8002f28:	08002fb5 	.word	0x08002fb5
 8002f2c:	08002fa3 	.word	0x08002fa3
 8002f30:	08002fb5 	.word	0x08002fb5
 8002f34:	08002fb5 	.word	0x08002fb5
 8002f38:	08002fb5 	.word	0x08002fb5
 8002f3c:	08002fb5 	.word	0x08002fb5
 8002f40:	08002fb5 	.word	0x08002fb5
 8002f44:	08002fb5 	.word	0x08002fb5
 8002f48:	08002fb5 	.word	0x08002fb5
 8002f4c:	08002fc9 	.word	0x08002fc9
 8002f50:	08002fb5 	.word	0x08002fb5
 8002f54:	08002fb5 	.word	0x08002fb5
 8002f58:	08002fb5 	.word	0x08002fb5
 8002f5c:	08002fb5 	.word	0x08002fb5
 8002f60:	08002fb5 	.word	0x08002fb5
 8002f64:	08002fb5 	.word	0x08002fb5
 8002f68:	08002fb5 	.word	0x08002fb5
 8002f6c:	08002fc9 	.word	0x08002fc9
 8002f70:	08002fb5 	.word	0x08002fb5
 8002f74:	08002fb5 	.word	0x08002fb5
 8002f78:	08002fb5 	.word	0x08002fb5
 8002f7c:	08002fb5 	.word	0x08002fb5
 8002f80:	08002fb5 	.word	0x08002fb5
 8002f84:	08002fb5 	.word	0x08002fb5
 8002f88:	08002fb5 	.word	0x08002fb5
 8002f8c:	08002fc9 	.word	0x08002fc9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3304      	adds	r3, #4
 8002f94:	2101      	movs	r1, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fdfa 	bl	8003b90 <RCCEx_PLL2_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002fa0:	e013      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3324      	adds	r3, #36	; 0x24
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fea3 	bl	8003cf4 <RCCEx_PLL3_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002fb2:	e00a      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fb8:	e007      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002fba:	bf00      	nop
 8002fbc:	58024400 	.word	0x58024400
 8002fc0:	58024800 	.word	0x58024800
 8002fc4:	00ffffcf 	.word	0x00ffffcf
      break;
 8002fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002fd0:	4b96      	ldr	r3, [pc, #600]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fdc:	4993      	ldr	r1, [pc, #588]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	654b      	str	r3, [r1, #84]	; 0x54
 8002fe2:	e001      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
 8002fe6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d038      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d821      	bhi.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002ffc:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003047 	.word	0x08003047
 8003008:	0800301d 	.word	0x0800301d
 800300c:	0800302f 	.word	0x0800302f
 8003010:	08003047 	.word	0x08003047
 8003014:	08003047 	.word	0x08003047
 8003018:	08003047 	.word	0x08003047
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	2101      	movs	r1, #1
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fdb4 	bl	8003b90 <RCCEx_PLL2_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800302c:	e00c      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3324      	adds	r3, #36	; 0x24
 8003032:	2101      	movs	r1, #1
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fe5d 	bl	8003cf4 <RCCEx_PLL3_Config>
 800303a:	4603      	mov	r3, r0
 800303c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800303e:	e003      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	75fb      	strb	r3, [r7, #23]
      break;
 8003044:	e000      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003046:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800304e:	4b77      	ldr	r3, [pc, #476]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003052:	f023 0207 	bic.w	r2, r3, #7
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305a:	4974      	ldr	r1, [pc, #464]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800305c:	4313      	orrs	r3, r2
 800305e:	654b      	str	r3, [r1, #84]	; 0x54
 8003060:	e001      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003062:	7dfb      	ldrb	r3, [r7, #23]
 8003064:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d03a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	2b05      	cmp	r3, #5
 800307a:	d821      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800307c:	a201      	add	r2, pc, #4	; (adr r2, 8003084 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800307e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003082:	bf00      	nop
 8003084:	080030c7 	.word	0x080030c7
 8003088:	0800309d 	.word	0x0800309d
 800308c:	080030af 	.word	0x080030af
 8003090:	080030c7 	.word	0x080030c7
 8003094:	080030c7 	.word	0x080030c7
 8003098:	080030c7 	.word	0x080030c7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3304      	adds	r3, #4
 80030a0:	2101      	movs	r1, #1
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fd74 	bl	8003b90 <RCCEx_PLL2_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80030ac:	e00c      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3324      	adds	r3, #36	; 0x24
 80030b2:	2101      	movs	r1, #1
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fe1d 	bl	8003cf4 <RCCEx_PLL3_Config>
 80030ba:	4603      	mov	r3, r0
 80030bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80030be:	e003      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	75fb      	strb	r3, [r7, #23]
      break;
 80030c4:	e000      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80030c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030ce:	4b57      	ldr	r3, [pc, #348]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d2:	f023 0207 	bic.w	r2, r3, #7
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	4953      	ldr	r1, [pc, #332]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	658b      	str	r3, [r1, #88]	; 0x58
 80030e2:	e001      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e4:	7dfb      	ldrb	r3, [r7, #23]
 80030e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d04b      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030fe:	d02e      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003104:	d828      	bhi.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310a:	d02a      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003110:	d822      	bhi.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003112:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003116:	d026      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003118:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800311c:	d81c      	bhi.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800311e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003122:	d010      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003128:	d816      	bhi.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01d      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800312e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003132:	d111      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3304      	adds	r3, #4
 8003138:	2100      	movs	r1, #0
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fd28 	bl	8003b90 <RCCEx_PLL2_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003144:	e012      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3324      	adds	r3, #36	; 0x24
 800314a:	2102      	movs	r1, #2
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fdd1 	bl	8003cf4 <RCCEx_PLL3_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003156:	e009      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	75fb      	strb	r3, [r7, #23]
      break;
 800315c:	e006      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800315e:	bf00      	nop
 8003160:	e004      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003162:	bf00      	nop
 8003164:	e002      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003166:	bf00      	nop
 8003168:	e000      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800316a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800316c:	7dfb      	ldrb	r3, [r7, #23]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003172:	4b2e      	ldr	r3, [pc, #184]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003180:	492a      	ldr	r1, [pc, #168]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003182:	4313      	orrs	r3, r2
 8003184:	654b      	str	r3, [r1, #84]	; 0x54
 8003186:	e001      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003188:	7dfb      	ldrb	r3, [r7, #23]
 800318a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	d04d      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800319e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031a2:	d02e      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80031a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031a8:	d828      	bhi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80031aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ae:	d02a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80031b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b4:	d822      	bhi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80031b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031ba:	d026      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80031bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031c0:	d81c      	bhi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80031c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c6:	d010      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80031c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031cc:	d816      	bhi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d01d      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80031d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d6:	d111      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3304      	adds	r3, #4
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fcd6 	bl	8003b90 <RCCEx_PLL2_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80031e8:	e012      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3324      	adds	r3, #36	; 0x24
 80031ee:	2102      	movs	r1, #2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fd7f 	bl	8003cf4 <RCCEx_PLL3_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80031fa:	e009      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003200:	e006      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003202:	bf00      	nop
 8003204:	e004      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003206:	bf00      	nop
 8003208:	e002      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800320e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003210:	7dfb      	ldrb	r3, [r7, #23]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003216:	4b05      	ldr	r3, [pc, #20]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003224:	4901      	ldr	r1, [pc, #4]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003226:	4313      	orrs	r3, r2
 8003228:	658b      	str	r3, [r1, #88]	; 0x58
 800322a:	e003      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800322c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323c:	2b00      	cmp	r3, #0
 800323e:	d04b      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003246:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800324a:	d02e      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800324c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003250:	d828      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003256:	d02a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800325c:	d822      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800325e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003262:	d026      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003264:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003268:	d81c      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800326a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800326e:	d010      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003270:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003274:	d816      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01d      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800327a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800327e:	d111      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3304      	adds	r3, #4
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fc82 	bl	8003b90 <RCCEx_PLL2_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003290:	e012      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3324      	adds	r3, #36	; 0x24
 8003296:	2102      	movs	r1, #2
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fd2b 	bl	8003cf4 <RCCEx_PLL3_Config>
 800329e:	4603      	mov	r3, r0
 80032a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80032a2:	e009      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	75fb      	strb	r3, [r7, #23]
      break;
 80032a8:	e006      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80032aa:	bf00      	nop
 80032ac:	e004      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80032ae:	bf00      	nop
 80032b0:	e002      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80032b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10a      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80032be:	4b9d      	ldr	r3, [pc, #628]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032cc:	4999      	ldr	r1, [pc, #612]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	658b      	str	r3, [r1, #88]	; 0x58
 80032d2:	e001      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ee:	d10a      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3324      	adds	r3, #36	; 0x24
 80032f4:	2102      	movs	r1, #2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fcfc 	bl	8003cf4 <RCCEx_PLL3_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003306:	4b8b      	ldr	r3, [pc, #556]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003314:	4987      	ldr	r1, [pc, #540]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003316:	4313      	orrs	r3, r2
 8003318:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	d01a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003330:	d10a      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3324      	adds	r3, #36	; 0x24
 8003336:	2102      	movs	r1, #2
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fcdb 	bl	8003cf4 <RCCEx_PLL3_Config>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003348:	4b7a      	ldr	r3, [pc, #488]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003356:	4977      	ldr	r1, [pc, #476]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003358:	4313      	orrs	r3, r2
 800335a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d034      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800336e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003372:	d01d      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003378:	d817      	bhi.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800337e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003382:	d009      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003384:	e011      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3304      	adds	r3, #4
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fbff 	bl	8003b90 <RCCEx_PLL2_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003396:	e00c      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3324      	adds	r3, #36	; 0x24
 800339c:	2102      	movs	r1, #2
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fca8 	bl	8003cf4 <RCCEx_PLL3_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80033a8:	e003      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	75fb      	strb	r3, [r7, #23]
      break;
 80033ae:	e000      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80033b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10a      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033b8:	4b5e      	ldr	r3, [pc, #376]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033c6:	495b      	ldr	r1, [pc, #364]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	658b      	str	r3, [r1, #88]	; 0x58
 80033cc:	e001      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
 80033d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d033      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033e8:	d01c      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80033ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033ee:	d816      	bhi.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80033f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033f4:	d003      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80033f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033fa:	d007      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80033fc:	e00f      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033fe:	4b4d      	ldr	r3, [pc, #308]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	4a4c      	ldr	r2, [pc, #304]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800340a:	e00c      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3324      	adds	r3, #36	; 0x24
 8003410:	2101      	movs	r1, #1
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fc6e 	bl	8003cf4 <RCCEx_PLL3_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800341c:	e003      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
      break;
 8003422:	e000      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003426:	7dfb      	ldrb	r3, [r7, #23]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10a      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800342c:	4b41      	ldr	r3, [pc, #260]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343a:	493e      	ldr	r1, [pc, #248]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800343c:	4313      	orrs	r3, r2
 800343e:	654b      	str	r3, [r1, #84]	; 0x54
 8003440:	e001      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003442:	7dfb      	ldrb	r3, [r7, #23]
 8003444:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d029      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800345a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345e:	d007      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003460:	e00f      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003462:	4b34      	ldr	r3, [pc, #208]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	4a33      	ldr	r2, [pc, #204]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800346c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800346e:	e00b      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	2102      	movs	r1, #2
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fb8a 	bl	8003b90 <RCCEx_PLL2_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003480:	e002      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	75fb      	strb	r3, [r7, #23]
      break;
 8003486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003488:	7dfb      	ldrb	r3, [r7, #23]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800348e:	4b29      	ldr	r3, [pc, #164]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003492:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	4926      	ldr	r1, [pc, #152]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800349c:	4313      	orrs	r3, r2
 800349e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80034a0:	e001      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
 80034a4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3324      	adds	r3, #36	; 0x24
 80034b6:	2102      	movs	r1, #2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 fc1b 	bl	8003cf4 <RCCEx_PLL3_Config>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d033      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034dc:	d017      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80034de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034e2:	d811      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80034e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e8:	d013      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80034ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ee:	d80b      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d010      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80034f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f8:	d106      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034fa:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	4a0d      	ldr	r2, [pc, #52]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003504:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003506:	e007      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	75fb      	strb	r3, [r7, #23]
      break;
 800350c:	e004      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800350e:	bf00      	nop
 8003510:	e002      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003512:	bf00      	nop
 8003514:	e000      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003518:	7dfb      	ldrb	r3, [r7, #23]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10c      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800351e:	4b05      	ldr	r3, [pc, #20]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800352a:	4902      	ldr	r1, [pc, #8]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800352c:	4313      	orrs	r3, r2
 800352e:	654b      	str	r3, [r1, #84]	; 0x54
 8003530:	e004      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003532:	bf00      	nop
 8003534:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003538:	7dfb      	ldrb	r3, [r7, #23]
 800353a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003548:	4b31      	ldr	r3, [pc, #196]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800354a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003554:	492e      	ldr	r1, [pc, #184]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003556:	4313      	orrs	r3, r2
 8003558:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003566:	4b2a      	ldr	r3, [pc, #168]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003574:	4926      	ldr	r1, [pc, #152]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003576:	4313      	orrs	r3, r2
 8003578:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d008      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003586:	4b22      	ldr	r3, [pc, #136]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003592:	491f      	ldr	r1, [pc, #124]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003594:	4313      	orrs	r3, r2
 8003596:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00d      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035a4:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	4a19      	ldr	r2, [pc, #100]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035ae:	6113      	str	r3, [r2, #16]
 80035b0:	4b17      	ldr	r3, [pc, #92]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80035ba:	4915      	ldr	r1, [pc, #84]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	da08      	bge.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80035c8:	4b11      	ldr	r3, [pc, #68]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d4:	490e      	ldr	r1, [pc, #56]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035e6:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f4:	4906      	ldr	r1, [pc, #24]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80035fa:	7dbb      	ldrb	r3, [r7, #22]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e000      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	58024400 	.word	0x58024400

08003614 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003618:	f7ff f85a 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	4904      	ldr	r1, [pc, #16]	; (800363c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	58024400 	.word	0x58024400
 800363c:	08004fa8 	.word	0x08004fa8

08003640 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003640:	b480      	push	{r7}
 8003642:	b089      	sub	sp, #36	; 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003648:	4ba1      	ldr	r3, [pc, #644]	; (80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003652:	4b9f      	ldr	r3, [pc, #636]	; (80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	0b1b      	lsrs	r3, r3, #12
 8003658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800365c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800365e:	4b9c      	ldr	r3, [pc, #624]	; (80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800366a:	4b99      	ldr	r3, [pc, #612]	; (80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800366c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366e:	08db      	lsrs	r3, r3, #3
 8003670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003682:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 8111 	beq.w	80038b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b02      	cmp	r3, #2
 8003692:	f000 8083 	beq.w	800379c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b02      	cmp	r3, #2
 800369a:	f200 80a1 	bhi.w	80037e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d056      	beq.n	8003758 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80036aa:	e099      	b.n	80037e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036ac:	4b88      	ldr	r3, [pc, #544]	; (80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d02d      	beq.n	8003714 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036b8:	4b85      	ldr	r3, [pc, #532]	; (80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	08db      	lsrs	r3, r3, #3
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	4a84      	ldr	r2, [pc, #528]	; (80038d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
 80036c8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036e2:	4b7b      	ldr	r3, [pc, #492]	; (80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80036f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80038d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800370a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003712:	e087      	b.n	8003824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800371e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80038dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003726:	4b6a      	ldr	r3, [pc, #424]	; (80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003736:	ed97 6a03 	vldr	s12, [r7, #12]
 800373a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80038d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800373e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800374a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800374e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003752:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003756:	e065      	b.n	8003824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003762:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376a:	4b59      	ldr	r3, [pc, #356]	; (80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800377a:	ed97 6a03 	vldr	s12, [r7, #12]
 800377e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80038d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800378a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800378e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003796:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800379a:	e043      	b.n	8003824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80038e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80037aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ae:	4b48      	ldr	r3, [pc, #288]	; (80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037be:	ed97 6a03 	vldr	s12, [r7, #12]
 80037c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80038d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037de:	e021      	b.n	8003824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80037ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037f2:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003802:	ed97 6a03 	vldr	s12, [r7, #12]
 8003806:	eddf 5a34 	vldr	s11, [pc, #208]	; 80038d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800380a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800380e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800381a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003822:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003824:	4b2a      	ldr	r3, [pc, #168]	; (80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	0a5b      	lsrs	r3, r3, #9
 800382a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800382e:	ee07 3a90 	vmov	s15, r3
 8003832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800383a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800383e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800384a:	ee17 2a90 	vmov	r2, s15
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003852:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	0c1b      	lsrs	r3, r3, #16
 8003858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800385c:	ee07 3a90 	vmov	s15, r3
 8003860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003868:	ee37 7a87 	vadd.f32	s14, s15, s14
 800386c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003878:	ee17 2a90 	vmov	r2, s15
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003880:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003884:	0e1b      	lsrs	r3, r3, #24
 8003886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003896:	ee37 7a87 	vadd.f32	s14, s15, s14
 800389a:	edd7 6a07 	vldr	s13, [r7, #28]
 800389e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038a6:	ee17 2a90 	vmov	r2, s15
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80038ae:	e008      	b.n	80038c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	609a      	str	r2, [r3, #8]
}
 80038c2:	bf00      	nop
 80038c4:	3724      	adds	r7, #36	; 0x24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	58024400 	.word	0x58024400
 80038d4:	03d09000 	.word	0x03d09000
 80038d8:	46000000 	.word	0x46000000
 80038dc:	4c742400 	.word	0x4c742400
 80038e0:	4a742400 	.word	0x4a742400
 80038e4:	4af42400 	.word	0x4af42400

080038e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038f0:	4ba1      	ldr	r3, [pc, #644]	; (8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80038fa:	4b9f      	ldr	r3, [pc, #636]	; (8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	0d1b      	lsrs	r3, r3, #20
 8003900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003904:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003906:	4b9c      	ldr	r3, [pc, #624]	; (8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	0a1b      	lsrs	r3, r3, #8
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003912:	4b99      	ldr	r3, [pc, #612]	; (8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	08db      	lsrs	r3, r3, #3
 8003918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8111 	beq.w	8003b58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b02      	cmp	r3, #2
 800393a:	f000 8083 	beq.w	8003a44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b02      	cmp	r3, #2
 8003942:	f200 80a1 	bhi.w	8003a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d056      	beq.n	8003a00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003952:	e099      	b.n	8003a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003954:	4b88      	ldr	r3, [pc, #544]	; (8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d02d      	beq.n	80039bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003960:	4b85      	ldr	r3, [pc, #532]	; (8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	08db      	lsrs	r3, r3, #3
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	4a84      	ldr	r2, [pc, #528]	; (8003b7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
 8003970:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	ee07 3a90 	vmov	s15, r3
 8003978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800398a:	4b7b      	ldr	r3, [pc, #492]	; (8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003992:	ee07 3a90 	vmov	s15, r3
 8003996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399a:	ed97 6a03 	vldr	s12, [r7, #12]
 800399e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80039ba:	e087      	b.n	8003acc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80039ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ce:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039de:	ed97 6a03 	vldr	s12, [r7, #12]
 80039e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039fe:	e065      	b.n	8003acc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a12:	4b59      	ldr	r3, [pc, #356]	; (8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a42:	e043      	b.n	8003acc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	ee07 3a90 	vmov	s15, r3
 8003a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a56:	4b48      	ldr	r3, [pc, #288]	; (8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a86:	e021      	b.n	8003acc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a9a:	4b37      	ldr	r3, [pc, #220]	; (8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003aae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003aca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003acc:	4b2a      	ldr	r3, [pc, #168]	; (8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	0a5b      	lsrs	r3, r3, #9
 8003ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ae6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003af2:	ee17 2a90 	vmov	r2, s15
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003afa:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	0c1b      	lsrs	r3, r3, #16
 8003b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b04:	ee07 3a90 	vmov	s15, r3
 8003b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b20:	ee17 2a90 	vmov	r2, s15
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003b28:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	0e1b      	lsrs	r3, r3, #24
 8003b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b4e:	ee17 2a90 	vmov	r2, s15
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003b56:	e008      	b.n	8003b6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]
}
 8003b6a:	bf00      	nop
 8003b6c:	3724      	adds	r7, #36	; 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	03d09000 	.word	0x03d09000
 8003b80:	46000000 	.word	0x46000000
 8003b84:	4c742400 	.word	0x4c742400
 8003b88:	4a742400 	.word	0x4a742400
 8003b8c:	4af42400 	.word	0x4af42400

08003b90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b9e:	4b53      	ldr	r3, [pc, #332]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d101      	bne.n	8003bae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e099      	b.n	8003ce2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003bae:	4b4f      	ldr	r3, [pc, #316]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a4e      	ldr	r2, [pc, #312]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003bb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bba:	f7fd f977 	bl	8000eac <HAL_GetTick>
 8003bbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bc0:	e008      	b.n	8003bd4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003bc2:	f7fd f973 	bl	8000eac <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e086      	b.n	8003ce2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bd4:	4b45      	ldr	r3, [pc, #276]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f0      	bne.n	8003bc2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003be0:	4b42      	ldr	r3, [pc, #264]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	031b      	lsls	r3, r3, #12
 8003bee:	493f      	ldr	r1, [pc, #252]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	628b      	str	r3, [r1, #40]	; 0x28
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	025b      	lsls	r3, r3, #9
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	041b      	lsls	r3, r3, #16
 8003c12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	061b      	lsls	r3, r3, #24
 8003c20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c24:	4931      	ldr	r1, [pc, #196]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c2a:	4b30      	ldr	r3, [pc, #192]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	492d      	ldr	r1, [pc, #180]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c3c:	4b2b      	ldr	r3, [pc, #172]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	f023 0220 	bic.w	r2, r3, #32
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	4928      	ldr	r1, [pc, #160]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003c4e:	4b27      	ldr	r3, [pc, #156]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	4a26      	ldr	r2, [pc, #152]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003c54:	f023 0310 	bic.w	r3, r3, #16
 8003c58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c5a:	4b24      	ldr	r3, [pc, #144]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003c5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c5e:	4b24      	ldr	r3, [pc, #144]	; (8003cf0 <RCCEx_PLL2_Config+0x160>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	69d2      	ldr	r2, [r2, #28]
 8003c66:	00d2      	lsls	r2, r2, #3
 8003c68:	4920      	ldr	r1, [pc, #128]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003c6e:	4b1f      	ldr	r3, [pc, #124]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	4a1e      	ldr	r2, [pc, #120]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003c74:	f043 0310 	orr.w	r3, r3, #16
 8003c78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d106      	bne.n	8003c8e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003c80:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	4a19      	ldr	r2, [pc, #100]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003c86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c8c:	e00f      	b.n	8003cae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d106      	bne.n	8003ca2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003c94:	4b15      	ldr	r3, [pc, #84]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	4a14      	ldr	r2, [pc, #80]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ca0:	e005      	b.n	8003cae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ca2:	4b12      	ldr	r3, [pc, #72]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	4a11      	ldr	r2, [pc, #68]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003ca8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003cae:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003cb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cba:	f7fd f8f7 	bl	8000eac <HAL_GetTick>
 8003cbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003cc0:	e008      	b.n	8003cd4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003cc2:	f7fd f8f3 	bl	8000eac <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e006      	b.n	8003ce2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <RCCEx_PLL2_Config+0x15c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	58024400 	.word	0x58024400
 8003cf0:	ffff0007 	.word	0xffff0007

08003cf4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d02:	4b53      	ldr	r3, [pc, #332]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d101      	bne.n	8003d12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e099      	b.n	8003e46 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003d12:	4b4f      	ldr	r3, [pc, #316]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a4e      	ldr	r2, [pc, #312]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1e:	f7fd f8c5 	bl	8000eac <HAL_GetTick>
 8003d22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d24:	e008      	b.n	8003d38 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d26:	f7fd f8c1 	bl	8000eac <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e086      	b.n	8003e46 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d38:	4b45      	ldr	r3, [pc, #276]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f0      	bne.n	8003d26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d44:	4b42      	ldr	r3, [pc, #264]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	051b      	lsls	r3, r3, #20
 8003d52:	493f      	ldr	r1, [pc, #252]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	628b      	str	r3, [r1, #40]	; 0x28
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	025b      	lsls	r3, r3, #9
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	041b      	lsls	r3, r3, #16
 8003d76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	061b      	lsls	r3, r3, #24
 8003d84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d88:	4931      	ldr	r1, [pc, #196]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d8e:	4b30      	ldr	r3, [pc, #192]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	492d      	ldr	r1, [pc, #180]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003da0:	4b2b      	ldr	r3, [pc, #172]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	4928      	ldr	r1, [pc, #160]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003db2:	4b27      	ldr	r3, [pc, #156]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	4a26      	ldr	r2, [pc, #152]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dc2:	4b24      	ldr	r3, [pc, #144]	; (8003e54 <RCCEx_PLL3_Config+0x160>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	69d2      	ldr	r2, [r2, #28]
 8003dca:	00d2      	lsls	r2, r2, #3
 8003dcc:	4920      	ldr	r1, [pc, #128]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003dd2:	4b1f      	ldr	r3, [pc, #124]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	4a1e      	ldr	r2, [pc, #120]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d106      	bne.n	8003df2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003de4:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	4a19      	ldr	r2, [pc, #100]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003dea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003df0:	e00f      	b.n	8003e12 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d106      	bne.n	8003e06 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003df8:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	4a14      	ldr	r2, [pc, #80]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003dfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e04:	e005      	b.n	8003e12 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003e06:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	4a11      	ldr	r2, [pc, #68]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003e0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003e12:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a0e      	ldr	r2, [pc, #56]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e1e:	f7fd f845 	bl	8000eac <HAL_GetTick>
 8003e22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e24:	e008      	b.n	8003e38 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e26:	f7fd f841 	bl	8000eac <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e006      	b.n	8003e46 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <RCCEx_PLL3_Config+0x15c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	58024400 	.word	0x58024400
 8003e54:	ffff0007 	.word	0xffff0007

08003e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e042      	b.n	8003ef0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d106      	bne.n	8003e82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7fc fed5 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2224      	movs	r2, #36	; 0x24
 8003e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f82c 	bl	8003ef8 <UART_SetConfig>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e022      	b.n	8003ef0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fd88 	bl	80049c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fe0f 	bl	8004b0c <UART_CheckIdleState>
 8003eee:	4603      	mov	r3, r0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003efc:	b092      	sub	sp, #72	; 0x48
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4bbe      	ldr	r3, [pc, #760]	; (8004220 <UART_SetConfig+0x328>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f30:	430b      	orrs	r3, r1
 8003f32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4ab3      	ldr	r2, [pc, #716]	; (8004224 <UART_SetConfig+0x32c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d004      	beq.n	8003f64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f60:	4313      	orrs	r3, r2
 8003f62:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	4baf      	ldr	r3, [pc, #700]	; (8004228 <UART_SetConfig+0x330>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f74:	430b      	orrs	r3, r1
 8003f76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	f023 010f 	bic.w	r1, r3, #15
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4aa6      	ldr	r2, [pc, #664]	; (800422c <UART_SetConfig+0x334>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d177      	bne.n	8004088 <UART_SetConfig+0x190>
 8003f98:	4ba5      	ldr	r3, [pc, #660]	; (8004230 <UART_SetConfig+0x338>)
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fa0:	2b28      	cmp	r3, #40	; 0x28
 8003fa2:	d86d      	bhi.n	8004080 <UART_SetConfig+0x188>
 8003fa4:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <UART_SetConfig+0xb4>)
 8003fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003faa:	bf00      	nop
 8003fac:	08004051 	.word	0x08004051
 8003fb0:	08004081 	.word	0x08004081
 8003fb4:	08004081 	.word	0x08004081
 8003fb8:	08004081 	.word	0x08004081
 8003fbc:	08004081 	.word	0x08004081
 8003fc0:	08004081 	.word	0x08004081
 8003fc4:	08004081 	.word	0x08004081
 8003fc8:	08004081 	.word	0x08004081
 8003fcc:	08004059 	.word	0x08004059
 8003fd0:	08004081 	.word	0x08004081
 8003fd4:	08004081 	.word	0x08004081
 8003fd8:	08004081 	.word	0x08004081
 8003fdc:	08004081 	.word	0x08004081
 8003fe0:	08004081 	.word	0x08004081
 8003fe4:	08004081 	.word	0x08004081
 8003fe8:	08004081 	.word	0x08004081
 8003fec:	08004061 	.word	0x08004061
 8003ff0:	08004081 	.word	0x08004081
 8003ff4:	08004081 	.word	0x08004081
 8003ff8:	08004081 	.word	0x08004081
 8003ffc:	08004081 	.word	0x08004081
 8004000:	08004081 	.word	0x08004081
 8004004:	08004081 	.word	0x08004081
 8004008:	08004081 	.word	0x08004081
 800400c:	08004069 	.word	0x08004069
 8004010:	08004081 	.word	0x08004081
 8004014:	08004081 	.word	0x08004081
 8004018:	08004081 	.word	0x08004081
 800401c:	08004081 	.word	0x08004081
 8004020:	08004081 	.word	0x08004081
 8004024:	08004081 	.word	0x08004081
 8004028:	08004081 	.word	0x08004081
 800402c:	08004071 	.word	0x08004071
 8004030:	08004081 	.word	0x08004081
 8004034:	08004081 	.word	0x08004081
 8004038:	08004081 	.word	0x08004081
 800403c:	08004081 	.word	0x08004081
 8004040:	08004081 	.word	0x08004081
 8004044:	08004081 	.word	0x08004081
 8004048:	08004081 	.word	0x08004081
 800404c:	08004079 	.word	0x08004079
 8004050:	2301      	movs	r3, #1
 8004052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004056:	e222      	b.n	800449e <UART_SetConfig+0x5a6>
 8004058:	2304      	movs	r3, #4
 800405a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800405e:	e21e      	b.n	800449e <UART_SetConfig+0x5a6>
 8004060:	2308      	movs	r3, #8
 8004062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004066:	e21a      	b.n	800449e <UART_SetConfig+0x5a6>
 8004068:	2310      	movs	r3, #16
 800406a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800406e:	e216      	b.n	800449e <UART_SetConfig+0x5a6>
 8004070:	2320      	movs	r3, #32
 8004072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004076:	e212      	b.n	800449e <UART_SetConfig+0x5a6>
 8004078:	2340      	movs	r3, #64	; 0x40
 800407a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800407e:	e20e      	b.n	800449e <UART_SetConfig+0x5a6>
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004086:	e20a      	b.n	800449e <UART_SetConfig+0x5a6>
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a69      	ldr	r2, [pc, #420]	; (8004234 <UART_SetConfig+0x33c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d130      	bne.n	80040f4 <UART_SetConfig+0x1fc>
 8004092:	4b67      	ldr	r3, [pc, #412]	; (8004230 <UART_SetConfig+0x338>)
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	2b05      	cmp	r3, #5
 800409c:	d826      	bhi.n	80040ec <UART_SetConfig+0x1f4>
 800409e:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <UART_SetConfig+0x1ac>)
 80040a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a4:	080040bd 	.word	0x080040bd
 80040a8:	080040c5 	.word	0x080040c5
 80040ac:	080040cd 	.word	0x080040cd
 80040b0:	080040d5 	.word	0x080040d5
 80040b4:	080040dd 	.word	0x080040dd
 80040b8:	080040e5 	.word	0x080040e5
 80040bc:	2300      	movs	r3, #0
 80040be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040c2:	e1ec      	b.n	800449e <UART_SetConfig+0x5a6>
 80040c4:	2304      	movs	r3, #4
 80040c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ca:	e1e8      	b.n	800449e <UART_SetConfig+0x5a6>
 80040cc:	2308      	movs	r3, #8
 80040ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040d2:	e1e4      	b.n	800449e <UART_SetConfig+0x5a6>
 80040d4:	2310      	movs	r3, #16
 80040d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040da:	e1e0      	b.n	800449e <UART_SetConfig+0x5a6>
 80040dc:	2320      	movs	r3, #32
 80040de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040e2:	e1dc      	b.n	800449e <UART_SetConfig+0x5a6>
 80040e4:	2340      	movs	r3, #64	; 0x40
 80040e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ea:	e1d8      	b.n	800449e <UART_SetConfig+0x5a6>
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040f2:	e1d4      	b.n	800449e <UART_SetConfig+0x5a6>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a4f      	ldr	r2, [pc, #316]	; (8004238 <UART_SetConfig+0x340>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d130      	bne.n	8004160 <UART_SetConfig+0x268>
 80040fe:	4b4c      	ldr	r3, [pc, #304]	; (8004230 <UART_SetConfig+0x338>)
 8004100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	2b05      	cmp	r3, #5
 8004108:	d826      	bhi.n	8004158 <UART_SetConfig+0x260>
 800410a:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <UART_SetConfig+0x218>)
 800410c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004110:	08004129 	.word	0x08004129
 8004114:	08004131 	.word	0x08004131
 8004118:	08004139 	.word	0x08004139
 800411c:	08004141 	.word	0x08004141
 8004120:	08004149 	.word	0x08004149
 8004124:	08004151 	.word	0x08004151
 8004128:	2300      	movs	r3, #0
 800412a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800412e:	e1b6      	b.n	800449e <UART_SetConfig+0x5a6>
 8004130:	2304      	movs	r3, #4
 8004132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004136:	e1b2      	b.n	800449e <UART_SetConfig+0x5a6>
 8004138:	2308      	movs	r3, #8
 800413a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800413e:	e1ae      	b.n	800449e <UART_SetConfig+0x5a6>
 8004140:	2310      	movs	r3, #16
 8004142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004146:	e1aa      	b.n	800449e <UART_SetConfig+0x5a6>
 8004148:	2320      	movs	r3, #32
 800414a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800414e:	e1a6      	b.n	800449e <UART_SetConfig+0x5a6>
 8004150:	2340      	movs	r3, #64	; 0x40
 8004152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004156:	e1a2      	b.n	800449e <UART_SetConfig+0x5a6>
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800415e:	e19e      	b.n	800449e <UART_SetConfig+0x5a6>
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a35      	ldr	r2, [pc, #212]	; (800423c <UART_SetConfig+0x344>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d130      	bne.n	80041cc <UART_SetConfig+0x2d4>
 800416a:	4b31      	ldr	r3, [pc, #196]	; (8004230 <UART_SetConfig+0x338>)
 800416c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	2b05      	cmp	r3, #5
 8004174:	d826      	bhi.n	80041c4 <UART_SetConfig+0x2cc>
 8004176:	a201      	add	r2, pc, #4	; (adr r2, 800417c <UART_SetConfig+0x284>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	08004195 	.word	0x08004195
 8004180:	0800419d 	.word	0x0800419d
 8004184:	080041a5 	.word	0x080041a5
 8004188:	080041ad 	.word	0x080041ad
 800418c:	080041b5 	.word	0x080041b5
 8004190:	080041bd 	.word	0x080041bd
 8004194:	2300      	movs	r3, #0
 8004196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800419a:	e180      	b.n	800449e <UART_SetConfig+0x5a6>
 800419c:	2304      	movs	r3, #4
 800419e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041a2:	e17c      	b.n	800449e <UART_SetConfig+0x5a6>
 80041a4:	2308      	movs	r3, #8
 80041a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041aa:	e178      	b.n	800449e <UART_SetConfig+0x5a6>
 80041ac:	2310      	movs	r3, #16
 80041ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041b2:	e174      	b.n	800449e <UART_SetConfig+0x5a6>
 80041b4:	2320      	movs	r3, #32
 80041b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ba:	e170      	b.n	800449e <UART_SetConfig+0x5a6>
 80041bc:	2340      	movs	r3, #64	; 0x40
 80041be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041c2:	e16c      	b.n	800449e <UART_SetConfig+0x5a6>
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ca:	e168      	b.n	800449e <UART_SetConfig+0x5a6>
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1b      	ldr	r2, [pc, #108]	; (8004240 <UART_SetConfig+0x348>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d142      	bne.n	800425c <UART_SetConfig+0x364>
 80041d6:	4b16      	ldr	r3, [pc, #88]	; (8004230 <UART_SetConfig+0x338>)
 80041d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	2b05      	cmp	r3, #5
 80041e0:	d838      	bhi.n	8004254 <UART_SetConfig+0x35c>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <UART_SetConfig+0x2f0>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	08004201 	.word	0x08004201
 80041ec:	08004209 	.word	0x08004209
 80041f0:	08004211 	.word	0x08004211
 80041f4:	08004219 	.word	0x08004219
 80041f8:	08004245 	.word	0x08004245
 80041fc:	0800424d 	.word	0x0800424d
 8004200:	2300      	movs	r3, #0
 8004202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004206:	e14a      	b.n	800449e <UART_SetConfig+0x5a6>
 8004208:	2304      	movs	r3, #4
 800420a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800420e:	e146      	b.n	800449e <UART_SetConfig+0x5a6>
 8004210:	2308      	movs	r3, #8
 8004212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004216:	e142      	b.n	800449e <UART_SetConfig+0x5a6>
 8004218:	2310      	movs	r3, #16
 800421a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800421e:	e13e      	b.n	800449e <UART_SetConfig+0x5a6>
 8004220:	cfff69f3 	.word	0xcfff69f3
 8004224:	58000c00 	.word	0x58000c00
 8004228:	11fff4ff 	.word	0x11fff4ff
 800422c:	40011000 	.word	0x40011000
 8004230:	58024400 	.word	0x58024400
 8004234:	40004400 	.word	0x40004400
 8004238:	40004800 	.word	0x40004800
 800423c:	40004c00 	.word	0x40004c00
 8004240:	40005000 	.word	0x40005000
 8004244:	2320      	movs	r3, #32
 8004246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800424a:	e128      	b.n	800449e <UART_SetConfig+0x5a6>
 800424c:	2340      	movs	r3, #64	; 0x40
 800424e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004252:	e124      	b.n	800449e <UART_SetConfig+0x5a6>
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800425a:	e120      	b.n	800449e <UART_SetConfig+0x5a6>
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4acb      	ldr	r2, [pc, #812]	; (8004590 <UART_SetConfig+0x698>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d176      	bne.n	8004354 <UART_SetConfig+0x45c>
 8004266:	4bcb      	ldr	r3, [pc, #812]	; (8004594 <UART_SetConfig+0x69c>)
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800426e:	2b28      	cmp	r3, #40	; 0x28
 8004270:	d86c      	bhi.n	800434c <UART_SetConfig+0x454>
 8004272:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <UART_SetConfig+0x380>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	0800431d 	.word	0x0800431d
 800427c:	0800434d 	.word	0x0800434d
 8004280:	0800434d 	.word	0x0800434d
 8004284:	0800434d 	.word	0x0800434d
 8004288:	0800434d 	.word	0x0800434d
 800428c:	0800434d 	.word	0x0800434d
 8004290:	0800434d 	.word	0x0800434d
 8004294:	0800434d 	.word	0x0800434d
 8004298:	08004325 	.word	0x08004325
 800429c:	0800434d 	.word	0x0800434d
 80042a0:	0800434d 	.word	0x0800434d
 80042a4:	0800434d 	.word	0x0800434d
 80042a8:	0800434d 	.word	0x0800434d
 80042ac:	0800434d 	.word	0x0800434d
 80042b0:	0800434d 	.word	0x0800434d
 80042b4:	0800434d 	.word	0x0800434d
 80042b8:	0800432d 	.word	0x0800432d
 80042bc:	0800434d 	.word	0x0800434d
 80042c0:	0800434d 	.word	0x0800434d
 80042c4:	0800434d 	.word	0x0800434d
 80042c8:	0800434d 	.word	0x0800434d
 80042cc:	0800434d 	.word	0x0800434d
 80042d0:	0800434d 	.word	0x0800434d
 80042d4:	0800434d 	.word	0x0800434d
 80042d8:	08004335 	.word	0x08004335
 80042dc:	0800434d 	.word	0x0800434d
 80042e0:	0800434d 	.word	0x0800434d
 80042e4:	0800434d 	.word	0x0800434d
 80042e8:	0800434d 	.word	0x0800434d
 80042ec:	0800434d 	.word	0x0800434d
 80042f0:	0800434d 	.word	0x0800434d
 80042f4:	0800434d 	.word	0x0800434d
 80042f8:	0800433d 	.word	0x0800433d
 80042fc:	0800434d 	.word	0x0800434d
 8004300:	0800434d 	.word	0x0800434d
 8004304:	0800434d 	.word	0x0800434d
 8004308:	0800434d 	.word	0x0800434d
 800430c:	0800434d 	.word	0x0800434d
 8004310:	0800434d 	.word	0x0800434d
 8004314:	0800434d 	.word	0x0800434d
 8004318:	08004345 	.word	0x08004345
 800431c:	2301      	movs	r3, #1
 800431e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004322:	e0bc      	b.n	800449e <UART_SetConfig+0x5a6>
 8004324:	2304      	movs	r3, #4
 8004326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800432a:	e0b8      	b.n	800449e <UART_SetConfig+0x5a6>
 800432c:	2308      	movs	r3, #8
 800432e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004332:	e0b4      	b.n	800449e <UART_SetConfig+0x5a6>
 8004334:	2310      	movs	r3, #16
 8004336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800433a:	e0b0      	b.n	800449e <UART_SetConfig+0x5a6>
 800433c:	2320      	movs	r3, #32
 800433e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004342:	e0ac      	b.n	800449e <UART_SetConfig+0x5a6>
 8004344:	2340      	movs	r3, #64	; 0x40
 8004346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800434a:	e0a8      	b.n	800449e <UART_SetConfig+0x5a6>
 800434c:	2380      	movs	r3, #128	; 0x80
 800434e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004352:	e0a4      	b.n	800449e <UART_SetConfig+0x5a6>
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a8f      	ldr	r2, [pc, #572]	; (8004598 <UART_SetConfig+0x6a0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d130      	bne.n	80043c0 <UART_SetConfig+0x4c8>
 800435e:	4b8d      	ldr	r3, [pc, #564]	; (8004594 <UART_SetConfig+0x69c>)
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	2b05      	cmp	r3, #5
 8004368:	d826      	bhi.n	80043b8 <UART_SetConfig+0x4c0>
 800436a:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <UART_SetConfig+0x478>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	08004389 	.word	0x08004389
 8004374:	08004391 	.word	0x08004391
 8004378:	08004399 	.word	0x08004399
 800437c:	080043a1 	.word	0x080043a1
 8004380:	080043a9 	.word	0x080043a9
 8004384:	080043b1 	.word	0x080043b1
 8004388:	2300      	movs	r3, #0
 800438a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800438e:	e086      	b.n	800449e <UART_SetConfig+0x5a6>
 8004390:	2304      	movs	r3, #4
 8004392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004396:	e082      	b.n	800449e <UART_SetConfig+0x5a6>
 8004398:	2308      	movs	r3, #8
 800439a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800439e:	e07e      	b.n	800449e <UART_SetConfig+0x5a6>
 80043a0:	2310      	movs	r3, #16
 80043a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043a6:	e07a      	b.n	800449e <UART_SetConfig+0x5a6>
 80043a8:	2320      	movs	r3, #32
 80043aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ae:	e076      	b.n	800449e <UART_SetConfig+0x5a6>
 80043b0:	2340      	movs	r3, #64	; 0x40
 80043b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043b6:	e072      	b.n	800449e <UART_SetConfig+0x5a6>
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043be:	e06e      	b.n	800449e <UART_SetConfig+0x5a6>
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a75      	ldr	r2, [pc, #468]	; (800459c <UART_SetConfig+0x6a4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d130      	bne.n	800442c <UART_SetConfig+0x534>
 80043ca:	4b72      	ldr	r3, [pc, #456]	; (8004594 <UART_SetConfig+0x69c>)
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	2b05      	cmp	r3, #5
 80043d4:	d826      	bhi.n	8004424 <UART_SetConfig+0x52c>
 80043d6:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <UART_SetConfig+0x4e4>)
 80043d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043dc:	080043f5 	.word	0x080043f5
 80043e0:	080043fd 	.word	0x080043fd
 80043e4:	08004405 	.word	0x08004405
 80043e8:	0800440d 	.word	0x0800440d
 80043ec:	08004415 	.word	0x08004415
 80043f0:	0800441d 	.word	0x0800441d
 80043f4:	2300      	movs	r3, #0
 80043f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043fa:	e050      	b.n	800449e <UART_SetConfig+0x5a6>
 80043fc:	2304      	movs	r3, #4
 80043fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004402:	e04c      	b.n	800449e <UART_SetConfig+0x5a6>
 8004404:	2308      	movs	r3, #8
 8004406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800440a:	e048      	b.n	800449e <UART_SetConfig+0x5a6>
 800440c:	2310      	movs	r3, #16
 800440e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004412:	e044      	b.n	800449e <UART_SetConfig+0x5a6>
 8004414:	2320      	movs	r3, #32
 8004416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800441a:	e040      	b.n	800449e <UART_SetConfig+0x5a6>
 800441c:	2340      	movs	r3, #64	; 0x40
 800441e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004422:	e03c      	b.n	800449e <UART_SetConfig+0x5a6>
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442a:	e038      	b.n	800449e <UART_SetConfig+0x5a6>
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a5b      	ldr	r2, [pc, #364]	; (80045a0 <UART_SetConfig+0x6a8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d130      	bne.n	8004498 <UART_SetConfig+0x5a0>
 8004436:	4b57      	ldr	r3, [pc, #348]	; (8004594 <UART_SetConfig+0x69c>)
 8004438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	2b05      	cmp	r3, #5
 8004440:	d826      	bhi.n	8004490 <UART_SetConfig+0x598>
 8004442:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <UART_SetConfig+0x550>)
 8004444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004448:	08004461 	.word	0x08004461
 800444c:	08004469 	.word	0x08004469
 8004450:	08004471 	.word	0x08004471
 8004454:	08004479 	.word	0x08004479
 8004458:	08004481 	.word	0x08004481
 800445c:	08004489 	.word	0x08004489
 8004460:	2302      	movs	r3, #2
 8004462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004466:	e01a      	b.n	800449e <UART_SetConfig+0x5a6>
 8004468:	2304      	movs	r3, #4
 800446a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800446e:	e016      	b.n	800449e <UART_SetConfig+0x5a6>
 8004470:	2308      	movs	r3, #8
 8004472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004476:	e012      	b.n	800449e <UART_SetConfig+0x5a6>
 8004478:	2310      	movs	r3, #16
 800447a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800447e:	e00e      	b.n	800449e <UART_SetConfig+0x5a6>
 8004480:	2320      	movs	r3, #32
 8004482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004486:	e00a      	b.n	800449e <UART_SetConfig+0x5a6>
 8004488:	2340      	movs	r3, #64	; 0x40
 800448a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800448e:	e006      	b.n	800449e <UART_SetConfig+0x5a6>
 8004490:	2380      	movs	r3, #128	; 0x80
 8004492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004496:	e002      	b.n	800449e <UART_SetConfig+0x5a6>
 8004498:	2380      	movs	r3, #128	; 0x80
 800449a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a3f      	ldr	r2, [pc, #252]	; (80045a0 <UART_SetConfig+0x6a8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	f040 80f8 	bne.w	800469a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	dc46      	bgt.n	8004540 <UART_SetConfig+0x648>
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	f2c0 8082 	blt.w	80045bc <UART_SetConfig+0x6c4>
 80044b8:	3b02      	subs	r3, #2
 80044ba:	2b1e      	cmp	r3, #30
 80044bc:	d87e      	bhi.n	80045bc <UART_SetConfig+0x6c4>
 80044be:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <UART_SetConfig+0x5cc>)
 80044c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c4:	08004547 	.word	0x08004547
 80044c8:	080045bd 	.word	0x080045bd
 80044cc:	0800454f 	.word	0x0800454f
 80044d0:	080045bd 	.word	0x080045bd
 80044d4:	080045bd 	.word	0x080045bd
 80044d8:	080045bd 	.word	0x080045bd
 80044dc:	0800455f 	.word	0x0800455f
 80044e0:	080045bd 	.word	0x080045bd
 80044e4:	080045bd 	.word	0x080045bd
 80044e8:	080045bd 	.word	0x080045bd
 80044ec:	080045bd 	.word	0x080045bd
 80044f0:	080045bd 	.word	0x080045bd
 80044f4:	080045bd 	.word	0x080045bd
 80044f8:	080045bd 	.word	0x080045bd
 80044fc:	0800456f 	.word	0x0800456f
 8004500:	080045bd 	.word	0x080045bd
 8004504:	080045bd 	.word	0x080045bd
 8004508:	080045bd 	.word	0x080045bd
 800450c:	080045bd 	.word	0x080045bd
 8004510:	080045bd 	.word	0x080045bd
 8004514:	080045bd 	.word	0x080045bd
 8004518:	080045bd 	.word	0x080045bd
 800451c:	080045bd 	.word	0x080045bd
 8004520:	080045bd 	.word	0x080045bd
 8004524:	080045bd 	.word	0x080045bd
 8004528:	080045bd 	.word	0x080045bd
 800452c:	080045bd 	.word	0x080045bd
 8004530:	080045bd 	.word	0x080045bd
 8004534:	080045bd 	.word	0x080045bd
 8004538:	080045bd 	.word	0x080045bd
 800453c:	080045af 	.word	0x080045af
 8004540:	2b40      	cmp	r3, #64	; 0x40
 8004542:	d037      	beq.n	80045b4 <UART_SetConfig+0x6bc>
 8004544:	e03a      	b.n	80045bc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004546:	f7ff f865 	bl	8003614 <HAL_RCCEx_GetD3PCLK1Freq>
 800454a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800454c:	e03c      	b.n	80045c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800454e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff f874 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800455c:	e034      	b.n	80045c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800455e:	f107 0318 	add.w	r3, r7, #24
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff f9c0 	bl	80038e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800456c:	e02c      	b.n	80045c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <UART_SetConfig+0x69c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d016      	beq.n	80045a8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <UART_SetConfig+0x69c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	08db      	lsrs	r3, r3, #3
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	4a07      	ldr	r2, [pc, #28]	; (80045a4 <UART_SetConfig+0x6ac>)
 8004586:	fa22 f303 	lsr.w	r3, r2, r3
 800458a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800458c:	e01c      	b.n	80045c8 <UART_SetConfig+0x6d0>
 800458e:	bf00      	nop
 8004590:	40011400 	.word	0x40011400
 8004594:	58024400 	.word	0x58024400
 8004598:	40007800 	.word	0x40007800
 800459c:	40007c00 	.word	0x40007c00
 80045a0:	58000c00 	.word	0x58000c00
 80045a4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80045a8:	4b9d      	ldr	r3, [pc, #628]	; (8004820 <UART_SetConfig+0x928>)
 80045aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045ac:	e00c      	b.n	80045c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80045ae:	4b9d      	ldr	r3, [pc, #628]	; (8004824 <UART_SetConfig+0x92c>)
 80045b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045b2:	e009      	b.n	80045c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045ba:	e005      	b.n	80045c8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80045c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 81de 	beq.w	800498c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	4a94      	ldr	r2, [pc, #592]	; (8004828 <UART_SetConfig+0x930>)
 80045d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045da:	461a      	mov	r2, r3
 80045dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045de:	fbb3 f3f2 	udiv	r3, r3, r2
 80045e2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	4413      	add	r3, r2
 80045ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d305      	bcc.n	8004600 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d903      	bls.n	8004608 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004606:	e1c1      	b.n	800498c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460a:	2200      	movs	r2, #0
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	60fa      	str	r2, [r7, #12]
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	4a84      	ldr	r2, [pc, #528]	; (8004828 <UART_SetConfig+0x930>)
 8004616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800461a:	b29b      	uxth	r3, r3
 800461c:	2200      	movs	r2, #0
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	607a      	str	r2, [r7, #4]
 8004622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800462a:	f7fb fe55 	bl	80002d8 <__aeabi_uldivmod>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4610      	mov	r0, r2
 8004634:	4619      	mov	r1, r3
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	020b      	lsls	r3, r1, #8
 8004640:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004644:	0202      	lsls	r2, r0, #8
 8004646:	6979      	ldr	r1, [r7, #20]
 8004648:	6849      	ldr	r1, [r1, #4]
 800464a:	0849      	lsrs	r1, r1, #1
 800464c:	2000      	movs	r0, #0
 800464e:	460c      	mov	r4, r1
 8004650:	4605      	mov	r5, r0
 8004652:	eb12 0804 	adds.w	r8, r2, r4
 8004656:	eb43 0905 	adc.w	r9, r3, r5
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	469a      	mov	sl, r3
 8004662:	4693      	mov	fp, r2
 8004664:	4652      	mov	r2, sl
 8004666:	465b      	mov	r3, fp
 8004668:	4640      	mov	r0, r8
 800466a:	4649      	mov	r1, r9
 800466c:	f7fb fe34 	bl	80002d8 <__aeabi_uldivmod>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4613      	mov	r3, r2
 8004676:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800467e:	d308      	bcc.n	8004692 <UART_SetConfig+0x79a>
 8004680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004686:	d204      	bcs.n	8004692 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800468e:	60da      	str	r2, [r3, #12]
 8004690:	e17c      	b.n	800498c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004698:	e178      	b.n	800498c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a2:	f040 80c5 	bne.w	8004830 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80046a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	dc48      	bgt.n	8004740 <UART_SetConfig+0x848>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	db7b      	blt.n	80047aa <UART_SetConfig+0x8b2>
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d879      	bhi.n	80047aa <UART_SetConfig+0x8b2>
 80046b6:	a201      	add	r2, pc, #4	; (adr r2, 80046bc <UART_SetConfig+0x7c4>)
 80046b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046bc:	08004747 	.word	0x08004747
 80046c0:	0800474f 	.word	0x0800474f
 80046c4:	080047ab 	.word	0x080047ab
 80046c8:	080047ab 	.word	0x080047ab
 80046cc:	08004757 	.word	0x08004757
 80046d0:	080047ab 	.word	0x080047ab
 80046d4:	080047ab 	.word	0x080047ab
 80046d8:	080047ab 	.word	0x080047ab
 80046dc:	08004767 	.word	0x08004767
 80046e0:	080047ab 	.word	0x080047ab
 80046e4:	080047ab 	.word	0x080047ab
 80046e8:	080047ab 	.word	0x080047ab
 80046ec:	080047ab 	.word	0x080047ab
 80046f0:	080047ab 	.word	0x080047ab
 80046f4:	080047ab 	.word	0x080047ab
 80046f8:	080047ab 	.word	0x080047ab
 80046fc:	08004777 	.word	0x08004777
 8004700:	080047ab 	.word	0x080047ab
 8004704:	080047ab 	.word	0x080047ab
 8004708:	080047ab 	.word	0x080047ab
 800470c:	080047ab 	.word	0x080047ab
 8004710:	080047ab 	.word	0x080047ab
 8004714:	080047ab 	.word	0x080047ab
 8004718:	080047ab 	.word	0x080047ab
 800471c:	080047ab 	.word	0x080047ab
 8004720:	080047ab 	.word	0x080047ab
 8004724:	080047ab 	.word	0x080047ab
 8004728:	080047ab 	.word	0x080047ab
 800472c:	080047ab 	.word	0x080047ab
 8004730:	080047ab 	.word	0x080047ab
 8004734:	080047ab 	.word	0x080047ab
 8004738:	080047ab 	.word	0x080047ab
 800473c:	0800479d 	.word	0x0800479d
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d02e      	beq.n	80047a2 <UART_SetConfig+0x8aa>
 8004744:	e031      	b.n	80047aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004746:	f7fd fff3 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 800474a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800474c:	e033      	b.n	80047b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800474e:	f7fe f805 	bl	800275c <HAL_RCC_GetPCLK2Freq>
 8004752:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004754:	e02f      	b.n	80047b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800475a:	4618      	mov	r0, r3
 800475c:	f7fe ff70 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004764:	e027      	b.n	80047b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004766:	f107 0318 	add.w	r3, r7, #24
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff f8bc 	bl	80038e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004774:	e01f      	b.n	80047b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004776:	4b2d      	ldr	r3, [pc, #180]	; (800482c <UART_SetConfig+0x934>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004782:	4b2a      	ldr	r3, [pc, #168]	; (800482c <UART_SetConfig+0x934>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	08db      	lsrs	r3, r3, #3
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	4a24      	ldr	r2, [pc, #144]	; (8004820 <UART_SetConfig+0x928>)
 800478e:	fa22 f303 	lsr.w	r3, r2, r3
 8004792:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004794:	e00f      	b.n	80047b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004796:	4b22      	ldr	r3, [pc, #136]	; (8004820 <UART_SetConfig+0x928>)
 8004798:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800479a:	e00c      	b.n	80047b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800479c:	4b21      	ldr	r3, [pc, #132]	; (8004824 <UART_SetConfig+0x92c>)
 800479e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047a0:	e009      	b.n	80047b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047a8:	e005      	b.n	80047b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80047b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80e7 	beq.w	800498c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	4a19      	ldr	r2, [pc, #100]	; (8004828 <UART_SetConfig+0x930>)
 80047c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047c8:	461a      	mov	r2, r3
 80047ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80047d0:	005a      	lsls	r2, r3, #1
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	085b      	lsrs	r3, r3, #1
 80047d8:	441a      	add	r2, r3
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e6:	2b0f      	cmp	r3, #15
 80047e8:	d916      	bls.n	8004818 <UART_SetConfig+0x920>
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f0:	d212      	bcs.n	8004818 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f023 030f 	bic.w	r3, r3, #15
 80047fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	b29b      	uxth	r3, r3
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	b29a      	uxth	r2, r3
 8004808:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800480a:	4313      	orrs	r3, r2
 800480c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004814:	60da      	str	r2, [r3, #12]
 8004816:	e0b9      	b.n	800498c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800481e:	e0b5      	b.n	800498c <UART_SetConfig+0xa94>
 8004820:	03d09000 	.word	0x03d09000
 8004824:	003d0900 	.word	0x003d0900
 8004828:	08004fb8 	.word	0x08004fb8
 800482c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004830:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004834:	2b20      	cmp	r3, #32
 8004836:	dc49      	bgt.n	80048cc <UART_SetConfig+0x9d4>
 8004838:	2b00      	cmp	r3, #0
 800483a:	db7c      	blt.n	8004936 <UART_SetConfig+0xa3e>
 800483c:	2b20      	cmp	r3, #32
 800483e:	d87a      	bhi.n	8004936 <UART_SetConfig+0xa3e>
 8004840:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <UART_SetConfig+0x950>)
 8004842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004846:	bf00      	nop
 8004848:	080048d3 	.word	0x080048d3
 800484c:	080048db 	.word	0x080048db
 8004850:	08004937 	.word	0x08004937
 8004854:	08004937 	.word	0x08004937
 8004858:	080048e3 	.word	0x080048e3
 800485c:	08004937 	.word	0x08004937
 8004860:	08004937 	.word	0x08004937
 8004864:	08004937 	.word	0x08004937
 8004868:	080048f3 	.word	0x080048f3
 800486c:	08004937 	.word	0x08004937
 8004870:	08004937 	.word	0x08004937
 8004874:	08004937 	.word	0x08004937
 8004878:	08004937 	.word	0x08004937
 800487c:	08004937 	.word	0x08004937
 8004880:	08004937 	.word	0x08004937
 8004884:	08004937 	.word	0x08004937
 8004888:	08004903 	.word	0x08004903
 800488c:	08004937 	.word	0x08004937
 8004890:	08004937 	.word	0x08004937
 8004894:	08004937 	.word	0x08004937
 8004898:	08004937 	.word	0x08004937
 800489c:	08004937 	.word	0x08004937
 80048a0:	08004937 	.word	0x08004937
 80048a4:	08004937 	.word	0x08004937
 80048a8:	08004937 	.word	0x08004937
 80048ac:	08004937 	.word	0x08004937
 80048b0:	08004937 	.word	0x08004937
 80048b4:	08004937 	.word	0x08004937
 80048b8:	08004937 	.word	0x08004937
 80048bc:	08004937 	.word	0x08004937
 80048c0:	08004937 	.word	0x08004937
 80048c4:	08004937 	.word	0x08004937
 80048c8:	08004929 	.word	0x08004929
 80048cc:	2b40      	cmp	r3, #64	; 0x40
 80048ce:	d02e      	beq.n	800492e <UART_SetConfig+0xa36>
 80048d0:	e031      	b.n	8004936 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d2:	f7fd ff2d 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 80048d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80048d8:	e033      	b.n	8004942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048da:	f7fd ff3f 	bl	800275c <HAL_RCC_GetPCLK2Freq>
 80048de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80048e0:	e02f      	b.n	8004942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fe feaa 	bl	8003640 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048f0:	e027      	b.n	8004942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048f2:	f107 0318 	add.w	r3, r7, #24
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe fff6 	bl	80038e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004900:	e01f      	b.n	8004942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004902:	4b2d      	ldr	r3, [pc, #180]	; (80049b8 <UART_SetConfig+0xac0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800490e:	4b2a      	ldr	r3, [pc, #168]	; (80049b8 <UART_SetConfig+0xac0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	08db      	lsrs	r3, r3, #3
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	4a28      	ldr	r2, [pc, #160]	; (80049bc <UART_SetConfig+0xac4>)
 800491a:	fa22 f303 	lsr.w	r3, r2, r3
 800491e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004920:	e00f      	b.n	8004942 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004922:	4b26      	ldr	r3, [pc, #152]	; (80049bc <UART_SetConfig+0xac4>)
 8004924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004926:	e00c      	b.n	8004942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004928:	4b25      	ldr	r3, [pc, #148]	; (80049c0 <UART_SetConfig+0xac8>)
 800492a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800492c:	e009      	b.n	8004942 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004934:	e005      	b.n	8004942 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004940:	bf00      	nop
    }

    if (pclk != 0U)
 8004942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d021      	beq.n	800498c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <UART_SetConfig+0xacc>)
 800494e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004952:	461a      	mov	r2, r3
 8004954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004956:	fbb3 f2f2 	udiv	r2, r3, r2
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	085b      	lsrs	r3, r3, #1
 8004960:	441a      	add	r2, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	fbb2 f3f3 	udiv	r3, r2, r3
 800496a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800496c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496e:	2b0f      	cmp	r3, #15
 8004970:	d909      	bls.n	8004986 <UART_SetConfig+0xa8e>
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d205      	bcs.n	8004986 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497c:	b29a      	uxth	r2, r3
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60da      	str	r2, [r3, #12]
 8004984:	e002      	b.n	800498c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2201      	movs	r2, #1
 8004990:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2201      	movs	r2, #1
 8004998:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2200      	movs	r2, #0
 80049a0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2200      	movs	r2, #0
 80049a6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80049a8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3748      	adds	r7, #72	; 0x48
 80049b0:	46bd      	mov	sp, r7
 80049b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049b6:	bf00      	nop
 80049b8:	58024400 	.word	0x58024400
 80049bc:	03d09000 	.word	0x03d09000
 80049c0:	003d0900 	.word	0x003d0900
 80049c4:	08004fb8 	.word	0x08004fb8

080049c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01a      	beq.n	8004ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac6:	d10a      	bne.n	8004ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	605a      	str	r2, [r3, #4]
  }
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af02      	add	r7, sp, #8
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b1c:	f7fc f9c6 	bl	8000eac <HAL_GetTick>
 8004b20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d10e      	bne.n	8004b4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f82f 	bl	8004ba2 <UART_WaitOnFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e025      	b.n	8004b9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d10e      	bne.n	8004b7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f819 	bl	8004ba2 <UART_WaitOnFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e00f      	b.n	8004b9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b09c      	sub	sp, #112	; 0x70
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb2:	e0a9      	b.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bba:	f000 80a5 	beq.w	8004d08 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fc f975 	bl	8000eac <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d140      	bne.n	8004c56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bdc:	e853 3f00 	ldrex	r3, [r3]
 8004be0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004be8:	667b      	str	r3, [r7, #100]	; 0x64
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bf4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bfa:	e841 2300 	strex	r3, r2, [r1]
 8004bfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1e6      	bne.n	8004bd4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3308      	adds	r3, #8
 8004c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c10:	e853 3f00 	ldrex	r3, [r3]
 8004c14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	f023 0301 	bic.w	r3, r3, #1
 8004c1c:	663b      	str	r3, [r7, #96]	; 0x60
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3308      	adds	r3, #8
 8004c24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c26:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e5      	bne.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e069      	b.n	8004d2a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d051      	beq.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c72:	d149      	bne.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e6      	bne.n	8004c7e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3308      	adds	r3, #8
 8004cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f023 0301 	bic.w	r3, r3, #1
 8004cc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3308      	adds	r3, #8
 8004cce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cd0:	623a      	str	r2, [r7, #32]
 8004cd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	69f9      	ldr	r1, [r7, #28]
 8004cd6:	6a3a      	ldr	r2, [r7, #32]
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e5      	bne.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e010      	b.n	8004d2a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	69da      	ldr	r2, [r3, #28]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	4013      	ands	r3, r2
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	bf0c      	ite	eq
 8004d18:	2301      	moveq	r3, #1
 8004d1a:	2300      	movne	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	461a      	mov	r2, r3
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	f43f af46 	beq.w	8004bb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3770      	adds	r7, #112	; 0x70
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b085      	sub	sp, #20
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_UARTEx_DisableFifoMode+0x16>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e027      	b.n	8004d98 <HAL_UARTEx_DisableFifoMode+0x66>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2224      	movs	r2, #36	; 0x24
 8004d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0201 	bic.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e02d      	b.n	8004e18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2224      	movs	r2, #36	; 0x24
 8004dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0201 	bic.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f84f 	bl	8004e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e02d      	b.n	8004e94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2224      	movs	r2, #36	; 0x24
 8004e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0201 	bic.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f811 	bl	8004e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d108      	bne.n	8004ebe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ebc:	e031      	b.n	8004f22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ebe:	2310      	movs	r3, #16
 8004ec0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004ec2:	2310      	movs	r3, #16
 8004ec4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	0e5b      	lsrs	r3, r3, #25
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	0f5b      	lsrs	r3, r3, #29
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ee6:	7bbb      	ldrb	r3, [r7, #14]
 8004ee8:	7b3a      	ldrb	r2, [r7, #12]
 8004eea:	4911      	ldr	r1, [pc, #68]	; (8004f30 <UARTEx_SetNbDataToProcess+0x94>)
 8004eec:	5c8a      	ldrb	r2, [r1, r2]
 8004eee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ef2:	7b3a      	ldrb	r2, [r7, #12]
 8004ef4:	490f      	ldr	r1, [pc, #60]	; (8004f34 <UARTEx_SetNbDataToProcess+0x98>)
 8004ef6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ef8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	7b7a      	ldrb	r2, [r7, #13]
 8004f08:	4909      	ldr	r1, [pc, #36]	; (8004f30 <UARTEx_SetNbDataToProcess+0x94>)
 8004f0a:	5c8a      	ldrb	r2, [r1, r2]
 8004f0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f10:	7b7a      	ldrb	r2, [r7, #13]
 8004f12:	4908      	ldr	r1, [pc, #32]	; (8004f34 <UARTEx_SetNbDataToProcess+0x98>)
 8004f14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f16:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004f22:	bf00      	nop
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	08004fd0 	.word	0x08004fd0
 8004f34:	08004fd8 	.word	0x08004fd8

08004f38 <__libc_init_array>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	4d0d      	ldr	r5, [pc, #52]	; (8004f70 <__libc_init_array+0x38>)
 8004f3c:	4c0d      	ldr	r4, [pc, #52]	; (8004f74 <__libc_init_array+0x3c>)
 8004f3e:	1b64      	subs	r4, r4, r5
 8004f40:	10a4      	asrs	r4, r4, #2
 8004f42:	2600      	movs	r6, #0
 8004f44:	42a6      	cmp	r6, r4
 8004f46:	d109      	bne.n	8004f5c <__libc_init_array+0x24>
 8004f48:	4d0b      	ldr	r5, [pc, #44]	; (8004f78 <__libc_init_array+0x40>)
 8004f4a:	4c0c      	ldr	r4, [pc, #48]	; (8004f7c <__libc_init_array+0x44>)
 8004f4c:	f000 f820 	bl	8004f90 <_init>
 8004f50:	1b64      	subs	r4, r4, r5
 8004f52:	10a4      	asrs	r4, r4, #2
 8004f54:	2600      	movs	r6, #0
 8004f56:	42a6      	cmp	r6, r4
 8004f58:	d105      	bne.n	8004f66 <__libc_init_array+0x2e>
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
 8004f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f60:	4798      	blx	r3
 8004f62:	3601      	adds	r6, #1
 8004f64:	e7ee      	b.n	8004f44 <__libc_init_array+0xc>
 8004f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6a:	4798      	blx	r3
 8004f6c:	3601      	adds	r6, #1
 8004f6e:	e7f2      	b.n	8004f56 <__libc_init_array+0x1e>
 8004f70:	08004fe8 	.word	0x08004fe8
 8004f74:	08004fe8 	.word	0x08004fe8
 8004f78:	08004fe8 	.word	0x08004fe8
 8004f7c:	08004fec 	.word	0x08004fec

08004f80 <memset>:
 8004f80:	4402      	add	r2, r0
 8004f82:	4603      	mov	r3, r0
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d100      	bne.n	8004f8a <memset+0xa>
 8004f88:	4770      	bx	lr
 8004f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f8e:	e7f9      	b.n	8004f84 <memset+0x4>

08004f90 <_init>:
 8004f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f92:	bf00      	nop
 8004f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f96:	bc08      	pop	{r3}
 8004f98:	469e      	mov	lr, r3
 8004f9a:	4770      	bx	lr

08004f9c <_fini>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	bf00      	nop
 8004fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa2:	bc08      	pop	{r3}
 8004fa4:	469e      	mov	lr, r3
 8004fa6:	4770      	bx	lr
